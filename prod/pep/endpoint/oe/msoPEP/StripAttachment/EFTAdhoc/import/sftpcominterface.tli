// Created by Microsoft (R) C/C++ Compiler Version 15.00.21022.08 (47fdbe2c).
//
// c:\source\import\debug\sftpcominterface.tli
//
// Wrapper implementations for Win32 type library SFTPCOMInterface.tlb
// compiler-generated file created 06/29/11 at 15:24:16 - DO NOT EDIT!


//
// interface ICIIPAccessRule wrapper method implementations
//

#pragma implementation_key(1)
inline SFTPCOMINTERFACELib::IPAccessRuleType SFTPCOMINTERFACELib::ICIIPAccessRule::Gettype ( ) {
    IPAccessRuleType _result;
    HRESULT _hr = get_type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICIManualIPAccessRule wrapper method implementations
//

#pragma implementation_key(2)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIManualIPAccessRule::GetAllow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Allow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3)
inline _bstr_t SFTPCOMINTERFACELib::ICIManualIPAccessRule::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4)
inline DATE SFTPCOMINTERFACELib::ICIManualIPAccessRule::GetAdded ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Added(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICIAutobanIPAccessRule wrapper method implementations
//

#pragma implementation_key(5)
inline _variant_t SFTPCOMINTERFACELib::ICIAutobanIPAccessRule::GetBannedIPs ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BannedIPs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ICIBannedIP wrapper method implementations
//

#pragma implementation_key(6)
inline _bstr_t SFTPCOMINTERFACELib::ICIBannedIP::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7)
inline DATE SFTPCOMINTERFACELib::ICIBannedIP::GetBanned ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Banned(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(8)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIBannedIP::GetPermanently ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Permanently(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(9)
inline DATE SFTPCOMINTERFACELib::ICIBannedIP::GetExpires ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Expires(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(10)
inline _bstr_t SFTPCOMINTERFACELib::ICIBannedIP::GetReason ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Reason(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IPermission wrapper method implementations
//

#pragma implementation_key(11)
inline VARIANT_BOOL SFTPCOMINTERFACELib::IPermission::GetFileUpload ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FileUpload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(12)
inline void SFTPCOMINTERFACELib::IPermission::PutFileUpload ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FileUpload(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(13)
inline VARIANT_BOOL SFTPCOMINTERFACELib::IPermission::GetFileDelete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FileDelete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(14)
inline void SFTPCOMINTERFACELib::IPermission::PutFileDelete ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FileDelete(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(15)
inline VARIANT_BOOL SFTPCOMINTERFACELib::IPermission::GetFileRename ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FileRename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(16)
inline void SFTPCOMINTERFACELib::IPermission::PutFileRename ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FileRename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(17)
inline VARIANT_BOOL SFTPCOMINTERFACELib::IPermission::GetFileAppend ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FileAppend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(18)
inline void SFTPCOMINTERFACELib::IPermission::PutFileAppend ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FileAppend(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(19)
inline VARIANT_BOOL SFTPCOMINTERFACELib::IPermission::GetFileDownload ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FileDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(20)
inline void SFTPCOMINTERFACELib::IPermission::PutFileDownload ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FileDownload(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(21)
inline VARIANT_BOOL SFTPCOMINTERFACELib::IPermission::GetDirCreate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DirCreate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(22)
inline void SFTPCOMINTERFACELib::IPermission::PutDirCreate ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DirCreate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(23)
inline VARIANT_BOOL SFTPCOMINTERFACELib::IPermission::GetDirDelete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DirDelete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(24)
inline void SFTPCOMINTERFACELib::IPermission::PutDirDelete ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DirDelete(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(25)
inline VARIANT_BOOL SFTPCOMINTERFACELib::IPermission::GetDirList ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DirList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(26)
inline void SFTPCOMINTERFACELib::IPermission::PutDirList ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DirList(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(27)
inline VARIANT_BOOL SFTPCOMINTERFACELib::IPermission::GetDirShowHidden ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DirShowHidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(28)
inline void SFTPCOMINTERFACELib::IPermission::PutDirShowHidden ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DirShowHidden(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(29)
inline VARIANT_BOOL SFTPCOMINTERFACELib::IPermission::GetDirShowReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DirShowReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(30)
inline void SFTPCOMINTERFACELib::IPermission::PutDirShowReadOnly ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DirShowReadOnly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(31)
inline VARIANT_BOOL SFTPCOMINTERFACELib::IPermission::GetDirShowInList ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DirShowInList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(32)
inline void SFTPCOMINTERFACELib::IPermission::PutDirShowInList ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DirShowInList(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(33)
inline _bstr_t SFTPCOMINTERFACELib::IPermission::GetInheritedFrom ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InheritedFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(34)
inline _bstr_t SFTPCOMINTERFACELib::IPermission::GetFolder ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Folder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(35)
inline _bstr_t SFTPCOMINTERFACELib::IPermission::GetClient ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Client(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(36)
inline VARIANT_BOOL SFTPCOMINTERFACELib::IPermission::GetIsGroup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(37)
inline VARIANT_BOOL SFTPCOMINTERFACELib::IPermission::GetIsInherited ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsInherited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICIComplexPasswordSettings wrapper method implementations
//

#pragma implementation_key(38)
inline long SFTPCOMINTERFACELib::ICIComplexPasswordSettings::GetMinPasswordLength ( ) {
    long _result = 0;
    HRESULT _hr = get_MinPasswordLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(39)
inline void SFTPCOMINTERFACELib::ICIComplexPasswordSettings::PutMinPasswordLength ( long pVal ) {
    HRESULT _hr = put_MinPasswordLength(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(40)
inline long SFTPCOMINTERFACELib::ICIComplexPasswordSettings::GetMinCharCategoriesInPassword ( ) {
    long _result = 0;
    HRESULT _hr = get_MinCharCategoriesInPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(41)
inline void SFTPCOMINTERFACELib::ICIComplexPasswordSettings::PutMinCharCategoriesInPassword ( long pVal ) {
    HRESULT _hr = put_MinCharCategoriesInPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(42)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIComplexPasswordSettings::GetRequireUpperCaseInPassword ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RequireUpperCaseInPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(43)
inline void SFTPCOMINTERFACELib::ICIComplexPasswordSettings::PutRequireUpperCaseInPassword ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RequireUpperCaseInPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(44)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIComplexPasswordSettings::GetRequireLowerCaseInPassword ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RequireLowerCaseInPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(45)
inline void SFTPCOMINTERFACELib::ICIComplexPasswordSettings::PutRequireLowerCaseInPassword ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RequireLowerCaseInPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(46)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIComplexPasswordSettings::GetRequireDigitsInPassword ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RequireDigitsInPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(47)
inline void SFTPCOMINTERFACELib::ICIComplexPasswordSettings::PutRequireDigitsInPassword ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RequireDigitsInPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(48)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIComplexPasswordSettings::GetRequireNonAlphaNumericInPassword ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RequireNonAlphaNumericInPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(49)
inline void SFTPCOMINTERFACELib::ICIComplexPasswordSettings::PutRequireNonAlphaNumericInPassword ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RequireNonAlphaNumericInPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(50)
inline long SFTPCOMINTERFACELib::ICIComplexPasswordSettings::GetMaxUsernameCharactersInPassword ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxUsernameCharactersInPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(51)
inline void SFTPCOMINTERFACELib::ICIComplexPasswordSettings::PutMaxUsernameCharactersInPassword ( long pVal ) {
    HRESULT _hr = put_MaxUsernameCharactersInPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(52)
inline long SFTPCOMINTERFACELib::ICIComplexPasswordSettings::GetMaxRepeatingCharacters ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxRepeatingCharacters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(53)
inline void SFTPCOMINTERFACELib::ICIComplexPasswordSettings::PutMaxRepeatingCharacters ( long pVal ) {
    HRESULT _hr = put_MaxRepeatingCharacters(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(54)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIComplexPasswordSettings::GetProhibitDictionaryWordsInPassword ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProhibitDictionaryWordsInPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(55)
inline void SFTPCOMINTERFACELib::ICIComplexPasswordSettings::PutProhibitDictionaryWordsInPassword ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ProhibitDictionaryWordsInPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(56)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIComplexPasswordSettings::GetProhibitReverseDictionaryWordsInPassword ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProhibitReverseDictionaryWordsInPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(57)
inline void SFTPCOMINTERFACELib::ICIComplexPasswordSettings::PutProhibitReverseDictionaryWordsInPassword ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ProhibitReverseDictionaryWordsInPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(58)
inline _bstr_t SFTPCOMINTERFACELib::ICIComplexPasswordSettings::GetPasswordDictionaryPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PasswordDictionaryPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(59)
inline void SFTPCOMINTERFACELib::ICIComplexPasswordSettings::PutPasswordDictionaryPath ( _bstr_t pVal ) {
    HRESULT _hr = put_PasswordDictionaryPath(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICIResetPasswordSettings wrapper method implementations
//

#pragma implementation_key(60)
inline long SFTPCOMINTERFACELib::ICIResetPasswordSettings::GetMaxPasswordAgeDays ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxPasswordAgeDays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(61)
inline void SFTPCOMINTERFACELib::ICIResetPasswordSettings::PutMaxPasswordAgeDays ( long pVal ) {
    HRESULT _hr = put_MaxPasswordAgeDays(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(62)
inline long SFTPCOMINTERFACELib::ICIResetPasswordSettings::GetDaysPriorPasswordExpirationToRemindUser ( ) {
    long _result = 0;
    HRESULT _hr = get_DaysPriorPasswordExpirationToRemindUser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(63)
inline void SFTPCOMINTERFACELib::ICIResetPasswordSettings::PutDaysPriorPasswordExpirationToRemindUser ( long pVal ) {
    HRESULT _hr = put_DaysPriorPasswordExpirationToRemindUser(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(64)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIResetPasswordSettings::GetSendEMailBeforeExpiration ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SendEMailBeforeExpiration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(65)
inline void SFTPCOMINTERFACELib::ICIResetPasswordSettings::PutSendEMailBeforeExpiration ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SendEMailBeforeExpiration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(66)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIResetPasswordSettings::GetSendEMailUponExpiration ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SendEMailUponExpiration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(67)
inline void SFTPCOMINTERFACELib::ICIResetPasswordSettings::PutSendEMailUponExpiration ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SendEMailUponExpiration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICIAS2OutboundSettings wrapper method implementations
//

#pragma implementation_key(68)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetMonitoredHotFolder ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MonitoredHotFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(69)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutMonitoredHotFolder ( _bstr_t pVal ) {
    HRESULT _hr = put_MonitoredHotFolder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(70)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetFileIncludeMask ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileIncludeMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(71)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutFileIncludeMask ( _bstr_t pVal ) {
    HRESULT _hr = put_FileIncludeMask(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(72)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetFileExcludeMask ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileExcludeMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(73)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutFileExcludeMask ( _bstr_t pVal ) {
    HRESULT _hr = put_FileExcludeMask(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(74)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetDeleteSourceAfterOffload ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DeleteSourceAfterOffload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(75)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutDeleteSourceAfterOffload ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DeleteSourceAfterOffload(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(76)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetHost ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Host(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(77)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutHost ( _bstr_t pVal ) {
    HRESULT _hr = put_Host(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(78)
inline long SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetPort ( ) {
    long _result = 0;
    HRESULT _hr = get_Port(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(79)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutPort ( long pVal ) {
    HRESULT _hr = put_Port(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(80)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetMailboxPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailboxPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(81)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutMailboxPath ( _bstr_t pVal ) {
    HRESULT _hr = put_MailboxPath(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(82)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetUsername ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Username(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(83)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutUsername ( _bstr_t pVal ) {
    HRESULT _hr = put_Username(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(84)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Password(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(85)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutPassword ( _bstr_t pVal ) {
    HRESULT _hr = put_Password(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(86)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(87)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutSubject ( _bstr_t pVal ) {
    HRESULT _hr = put_Subject(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(88)
inline SFTPCOMINTERFACELib::AS2ContentType SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetContentType ( ) {
    AS2ContentType _result;
    HRESULT _hr = get_ContentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(89)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutContentType ( AS2ContentType pVal ) {
    HRESULT _hr = put_ContentType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(90)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetCompress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Compress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(91)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutCompress ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Compress(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(92)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetEncrypt ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Encrypt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(93)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutEncrypt ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Encrypt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(94)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetSign ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(95)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutSign ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Sign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(96)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetPartnerCertificate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PartnerCertificate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(97)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutPartnerCertificate ( _bstr_t pVal ) {
    HRESULT _hr = put_PartnerCertificate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(98)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(99)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutID ( _bstr_t pVal ) {
    HRESULT _hr = put_ID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(100)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetPartnerID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PartnerID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(101)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutPartnerID ( _bstr_t pVal ) {
    HRESULT _hr = put_PartnerID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(102)
inline SFTPCOMINTERFACELib::AS2ReceiptPolicy SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetReceiptPolicy ( ) {
    AS2ReceiptPolicy _result;
    HRESULT _hr = get_ReceiptPolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(103)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutReceiptPolicy ( AS2ReceiptPolicy pVal ) {
    HRESULT _hr = put_ReceiptPolicy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(104)
inline SFTPCOMINTERFACELib::AS2ReceiptDelivery SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetReceiptDelivery ( ) {
    AS2ReceiptDelivery _result;
    HRESULT _hr = get_ReceiptDelivery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(105)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutReceiptDelivery ( AS2ReceiptDelivery pVal ) {
    HRESULT _hr = put_ReceiptDelivery(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(106)
inline long SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetMessageSendAttemptTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_MessageSendAttemptTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(107)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutMessageSendAttemptTimeout ( long pVal ) {
    HRESULT _hr = put_MessageSendAttemptTimeout(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(108)
inline long SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetMessageSendAttemptRetries ( ) {
    long _result = 0;
    HRESULT _hr = get_MessageSendAttemptRetries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(109)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutMessageSendAttemptRetries ( long pVal ) {
    HRESULT _hr = put_MessageSendAttemptRetries(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(110)
inline long SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetSendAttemptDelayBetweenRetries ( ) {
    long _result = 0;
    HRESULT _hr = get_SendAttemptDelayBetweenRetries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(111)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutSendAttemptDelayBetweenRetries ( long pVal ) {
    HRESULT _hr = put_SendAttemptDelayBetweenRetries(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(112)
inline long SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetAsyncReceiptTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_AsyncReceiptTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(113)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutAsyncReceiptTimeout ( long pVal ) {
    HRESULT _hr = put_AsyncReceiptTimeout(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(114)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetUseProxy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseProxy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(115)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutUseProxy ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseProxy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(116)
inline SFTPCOMINTERFACELib::AS2ProxyType SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetProxyType ( ) {
    AS2ProxyType _result;
    HRESULT _hr = get_ProxyType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(117)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutProxyType ( AS2ProxyType pVal ) {
    HRESULT _hr = put_ProxyType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(118)
inline long SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetProxyPort ( ) {
    long _result = 0;
    HRESULT _hr = get_ProxyPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(119)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutProxyPort ( long pVal ) {
    HRESULT _hr = put_ProxyPort(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(120)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetProxyHostName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProxyHostName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(121)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutProxyHostName ( _bstr_t pVal ) {
    HRESULT _hr = put_ProxyHostName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(122)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetProxyUserName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProxyUserName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(123)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutProxyUserName ( _bstr_t pVal ) {
    HRESULT _hr = put_ProxyUserName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(124)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetProxyPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProxyPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(125)
inline void SFTPCOMINTERFACELib::ICIAS2OutboundSettings::PutProxyPassword ( _bstr_t pVal ) {
    HRESULT _hr = put_ProxyPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(126)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetFailureCommand ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetFailureCommand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(127)
inline HRESULT SFTPCOMINTERFACELib::ICIAS2OutboundSettings::SetFailureCommand ( IDispatch * pdispCommandParams ) {
    HRESULT _hr = raw_SetFailureCommand(pdispCommandParams);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(128)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetSuccessCommand ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetSuccessCommand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(129)
inline HRESULT SFTPCOMINTERFACELib::ICIAS2OutboundSettings::SetSuccessCommand ( IDispatch * pdispCommandParams ) {
    HRESULT _hr = raw_SetSuccessCommand(pdispCommandParams);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(130)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetFailureEmail ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetFailureEmail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(131)
inline HRESULT SFTPCOMINTERFACELib::ICIAS2OutboundSettings::SetFailureEmail ( IDispatch * pdispEmailParams ) {
    HRESULT _hr = raw_SetFailureEmail(pdispEmailParams);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(132)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIAS2OutboundSettings::GetSuccessEmail ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetSuccessEmail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(133)
inline HRESULT SFTPCOMINTERFACELib::ICIAS2OutboundSettings::SetSuccessEmail ( IDispatch * pdispEmailParams ) {
    HRESULT _hr = raw_SetSuccessEmail(pdispEmailParams);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICIAS2InboundSettings wrapper method implementations
//

#pragma implementation_key(134)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2InboundSettings::GetPartnerCertificate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PartnerCertificate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(135)
inline void SFTPCOMINTERFACELib::ICIAS2InboundSettings::PutPartnerCertificate ( _bstr_t pVal ) {
    HRESULT _hr = put_PartnerCertificate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(136)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2InboundSettings::GetID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(137)
inline void SFTPCOMINTERFACELib::ICIAS2InboundSettings::PutID ( _bstr_t pVal ) {
    HRESULT _hr = put_ID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(138)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2InboundSettings::GetPartnerID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PartnerID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(139)
inline void SFTPCOMINTERFACELib::ICIAS2InboundSettings::PutPartnerID ( _bstr_t pVal ) {
    HRESULT _hr = put_PartnerID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(140)
inline SFTPCOMINTERFACELib::AS2IDMismatchPolicy SFTPCOMINTERFACELib::ICIAS2InboundSettings::GetPartnerIDMismatchPolicy ( ) {
    AS2IDMismatchPolicy _result;
    HRESULT _hr = get_PartnerIDMismatchPolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(141)
inline void SFTPCOMINTERFACELib::ICIAS2InboundSettings::PutPartnerIDMismatchPolicy ( AS2IDMismatchPolicy pVal ) {
    HRESULT _hr = put_PartnerIDMismatchPolicy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(142)
inline SFTPCOMINTERFACELib::AS2IDMismatchPolicy SFTPCOMINTERFACELib::ICIAS2InboundSettings::GetEFTIDMismatchPolicy ( ) {
    AS2IDMismatchPolicy _result;
    HRESULT _hr = get_EFTIDMismatchPolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(143)
inline void SFTPCOMINTERFACELib::ICIAS2InboundSettings::PutEFTIDMismatchPolicy ( AS2IDMismatchPolicy pVal ) {
    HRESULT _hr = put_EFTIDMismatchPolicy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(144)
inline SFTPCOMINTERFACELib::AS2DoubleMsgIDPolicy SFTPCOMINTERFACELib::ICIAS2InboundSettings::GetDoubleMsgIDPolicy ( ) {
    AS2DoubleMsgIDPolicy _result;
    HRESULT _hr = get_DoubleMsgIDPolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(145)
inline void SFTPCOMINTERFACELib::ICIAS2InboundSettings::PutDoubleMsgIDPolicy ( AS2DoubleMsgIDPolicy pVal ) {
    HRESULT _hr = put_DoubleMsgIDPolicy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(146)
inline SFTPCOMINTERFACELib::AS2DoubleContentPolicy SFTPCOMINTERFACELib::ICIAS2InboundSettings::GetDoubleContentPolicy ( ) {
    AS2DoubleContentPolicy _result;
    HRESULT _hr = get_DoubleContentPolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(147)
inline void SFTPCOMINTERFACELib::ICIAS2InboundSettings::PutDoubleContentPolicy ( AS2DoubleContentPolicy pVal ) {
    HRESULT _hr = put_DoubleContentPolicy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(148)
inline long SFTPCOMINTERFACELib::ICIAS2InboundSettings::GetMDNSendTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_MDNSendTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(149)
inline void SFTPCOMINTERFACELib::ICIAS2InboundSettings::PutMDNSendTimeout ( long pVal ) {
    HRESULT _hr = put_MDNSendTimeout(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(150)
inline long SFTPCOMINTERFACELib::ICIAS2InboundSettings::GetMDNSendAttemptRetries ( ) {
    long _result = 0;
    HRESULT _hr = get_MDNSendAttemptRetries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(151)
inline void SFTPCOMINTERFACELib::ICIAS2InboundSettings::PutMDNSendAttemptRetries ( long pVal ) {
    HRESULT _hr = put_MDNSendAttemptRetries(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(152)
inline long SFTPCOMINTERFACELib::ICIAS2InboundSettings::GetMDNSendAttemptDelayBetweenRetries ( ) {
    long _result = 0;
    HRESULT _hr = get_MDNSendAttemptDelayBetweenRetries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(153)
inline void SFTPCOMINTERFACELib::ICIAS2InboundSettings::PutMDNSendAttemptDelayBetweenRetries ( long pVal ) {
    HRESULT _hr = put_MDNSendAttemptDelayBetweenRetries(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(154)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2InboundSettings::GetMoveReceivedDataToFolder ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MoveReceivedDataToFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(155)
inline void SFTPCOMINTERFACELib::ICIAS2InboundSettings::PutMoveReceivedDataToFolder ( _bstr_t pVal ) {
    HRESULT _hr = put_MoveReceivedDataToFolder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(156)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2InboundSettings::GetRenameFilesTo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RenameFilesTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(157)
inline void SFTPCOMINTERFACELib::ICIAS2InboundSettings::PutRenameFilesTo ( _bstr_t pVal ) {
    HRESULT _hr = put_RenameFilesTo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(158)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIAS2InboundSettings::GetSkipHTTPContinue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SkipHTTPContinue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(159)
inline void SFTPCOMINTERFACELib::ICIAS2InboundSettings::PutSkipHTTPContinue ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SkipHTTPContinue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(160)
inline SFTPCOMINTERFACELib::AS2AuthenticationType SFTPCOMINTERFACELib::ICIAS2InboundSettings::GetAuthenticationType ( ) {
    AS2AuthenticationType _result;
    HRESULT _hr = get_AuthenticationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(161)
inline void SFTPCOMINTERFACELib::ICIAS2InboundSettings::PutAuthenticationType ( AS2AuthenticationType pVal ) {
    HRESULT _hr = put_AuthenticationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(162)
inline SFTPCOMINTERFACELib::AS2SignatureMissingPolicy SFTPCOMINTERFACELib::ICIAS2InboundSettings::GetSignatureMissingPolicy ( ) {
    AS2SignatureMissingPolicy _result;
    HRESULT _hr = get_SignatureMissingPolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(163)
inline void SFTPCOMINTERFACELib::ICIAS2InboundSettings::PutSignatureMissingPolicy ( AS2SignatureMissingPolicy pVal ) {
    HRESULT _hr = put_SignatureMissingPolicy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(164)
inline SFTPCOMINTERFACELib::AS2EncryptMissingPolicy SFTPCOMINTERFACELib::ICIAS2InboundSettings::GetEncryptMissingPolicy ( ) {
    AS2EncryptMissingPolicy _result;
    HRESULT _hr = get_EncryptMissingPolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(165)
inline void SFTPCOMINTERFACELib::ICIAS2InboundSettings::PutEncryptMissingPolicy ( AS2EncryptMissingPolicy pVal ) {
    HRESULT _hr = put_EncryptMissingPolicy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(166)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIAS2InboundSettings::GetFailureCommand ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetFailureCommand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(167)
inline HRESULT SFTPCOMINTERFACELib::ICIAS2InboundSettings::SetFailureCommand ( IDispatch * pdispCommandParams ) {
    HRESULT _hr = raw_SetFailureCommand(pdispCommandParams);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(168)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIAS2InboundSettings::GetSuccessCommand ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetSuccessCommand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(169)
inline HRESULT SFTPCOMINTERFACELib::ICIAS2InboundSettings::SetSuccessCommand ( IDispatch * pdispCommandParams ) {
    HRESULT _hr = raw_SetSuccessCommand(pdispCommandParams);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(170)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIAS2InboundSettings::GetFailureEmail ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetFailureEmail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(171)
inline HRESULT SFTPCOMINTERFACELib::ICIAS2InboundSettings::SetFailureEmail ( IDispatch * pdispEmailParams ) {
    HRESULT _hr = raw_SetFailureEmail(pdispEmailParams);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(172)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIAS2InboundSettings::GetSuccessEmail ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetSuccessEmail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(173)
inline HRESULT SFTPCOMINTERFACELib::ICIAS2InboundSettings::SetSuccessEmail ( IDispatch * pdispEmailParams ) {
    HRESULT _hr = raw_SetSuccessEmail(pdispEmailParams);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICIClientSettings wrapper method implementations
//

#pragma implementation_key(174)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetEnableAccount ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetEnableAccount(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(175)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetEnableAccount ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetEnableAccount(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(176)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetHomeDirIsRoot ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetHomeDirIsRoot(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(177)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetHomeDirIsRoot ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetHomeDirIsRoot(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(178)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetAllowNoop ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetAllowNoop(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(179)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetAllowNoop ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetAllowNoop(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(180)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetAllowXCRC ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetAllowXCRC(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(181)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetAllowXCRC ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetAllowXCRC(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(182)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetChangePwd ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetChangePwd(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(183)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetChangePwd ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetChangePwd(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(184)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetEnableTimeOut ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetEnableTimeOut(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(185)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetEnableTimeOut ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetEnableTimeOut(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(186)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetHasMaxSpeed ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetHasMaxSpeed(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(187)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetHasMaxSpeed ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetHasMaxSpeed(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(188)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetHasMaxUsers ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetHasMaxUsers(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(189)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetHasMaxUsers ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetHasMaxUsers(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(190)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetHasPwdRetries ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetHasPwdRetries(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(191)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetHasPwdRetries ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetHasPwdRetries(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(192)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetClearFTP ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetClearFTP(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(193)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetClearFTP ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetClearFTP(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(194)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetEnableDiskQuota ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetEnableDiskQuota(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(195)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetEnableDiskQuota ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetEnableDiskQuota(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(196)
inline long SFTPCOMINTERFACELib::ICIClientSettings::GetMaxIPs ( VARIANT * pInherited ) {
    long _result = 0;
    HRESULT _hr = raw_GetMaxIPs(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(197)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetMaxIPs ( long val ) {
    HRESULT _hr = raw_SetMaxIPs(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(198)
inline long SFTPCOMINTERFACELib::ICIClientSettings::GetMaxSpeed ( VARIANT * pInherited ) {
    long _result = 0;
    HRESULT _hr = raw_GetMaxSpeed(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(199)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetMaxSpeed ( long val ) {
    HRESULT _hr = raw_SetMaxSpeed(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(200)
inline long SFTPCOMINTERFACELib::ICIClientSettings::GetMaxUsers ( VARIANT * pInherited ) {
    long _result = 0;
    HRESULT _hr = raw_GetMaxUsers(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(201)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetMaxUsers ( long val ) {
    HRESULT _hr = raw_SetMaxUsers(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(202)
inline long SFTPCOMINTERFACELib::ICIClientSettings::GetPwdRetries ( VARIANT * pInherited ) {
    long _result = 0;
    HRESULT _hr = raw_GetPwdRetries(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(203)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetPwdRetries ( long val ) {
    HRESULT _hr = raw_SetPwdRetries(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(204)
inline long SFTPCOMINTERFACELib::ICIClientSettings::GetTimeOut ( VARIANT * pInherited ) {
    long _result = 0;
    HRESULT _hr = raw_GetTimeOut(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(205)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetTimeOut ( long val ) {
    HRESULT _hr = raw_SetTimeOut(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(206)
inline long SFTPCOMINTERFACELib::ICIClientSettings::GetDownloadsPerSession ( VARIANT * pInherited ) {
    long _result = 0;
    HRESULT _hr = raw_GetDownloadsPerSession(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(207)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetDownloadsPerSession ( long val ) {
    HRESULT _hr = raw_SetDownloadsPerSession(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(208)
inline long SFTPCOMINTERFACELib::ICIClientSettings::GetUploadsPerSession ( VARIANT * pInherited ) {
    long _result = 0;
    HRESULT _hr = raw_GetUploadsPerSession(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(209)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetUploadsPerSession ( long val ) {
    HRESULT _hr = raw_SetUploadsPerSession(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(210)
inline long SFTPCOMINTERFACELib::ICIClientSettings::GetLoginMsg ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetLoginMsg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(211)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetLoginMsg ( long val ) {
    HRESULT _hr = raw_SetLoginMsg(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(212)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetHomeDir ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetHomeDir(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(213)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetHomeDir ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetHomeDir(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(214)
inline long SFTPCOMINTERFACELib::ICIClientSettings::GetIncorrectPasswordAttempts ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetIncorrectPasswordAttempts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(215)
inline long SFTPCOMINTERFACELib::ICIClientSettings::GetMaxDownloadSize ( VARIANT * pInherited ) {
    long _result = 0;
    HRESULT _hr = raw_GetMaxDownloadSize(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(216)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetMaxDownloadSize ( long val ) {
    HRESULT _hr = raw_SetMaxDownloadSize(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(217)
inline long SFTPCOMINTERFACELib::ICIClientSettings::GetMaxSpace ( VARIANT * pInherited ) {
    long _result = 0;
    HRESULT _hr = raw_GetMaxSpace(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(218)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetMaxSpace ( long val ) {
    HRESULT _hr = raw_SetMaxSpace(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(219)
inline long SFTPCOMINTERFACELib::ICIClientSettings::GetMaxUploadSize ( VARIANT * pInherited ) {
    long _result = 0;
    HRESULT _hr = raw_GetMaxUploadSize(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(220)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetMaxUploadSize ( long val ) {
    HRESULT _hr = raw_SetMaxUploadSize(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(221)
inline long SFTPCOMINTERFACELib::ICIClientSettings::GetUsedSpace ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetUsedSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(222)
inline _bstr_t SFTPCOMINTERFACELib::ICIClientSettings::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(223)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetDescription ( _bstr_t bstrVal ) {
    HRESULT _hr = raw_SetDescription(bstrVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(224)
inline _bstr_t SFTPCOMINTERFACELib::ICIClientSettings::GetHomeDirString ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetHomeDirString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(225)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetHomeDirString ( _bstr_t bstrVal ) {
    HRESULT _hr = raw_SetHomeDirString(bstrVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(226)
inline _bstr_t SFTPCOMINTERFACELib::ICIClientSettings::GetLoginMsgString ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLoginMsgString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(227)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetLoginMsgString ( _bstr_t bstrVal ) {
    HRESULT _hr = raw_SetLoginMsgString(bstrVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(228)
inline _bstr_t SFTPCOMINTERFACELib::ICIClientSettings::GetFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(229)
inline void SFTPCOMINTERFACELib::ICIClientSettings::PutFullName ( _bstr_t pVal ) {
    HRESULT _hr = put_FullName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(230)
inline _bstr_t SFTPCOMINTERFACELib::ICIClientSettings::GetComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(231)
inline void SFTPCOMINTERFACELib::ICIClientSettings::PutComment ( _bstr_t pVal ) {
    HRESULT _hr = put_Comment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(232)
inline _bstr_t SFTPCOMINTERFACELib::ICIClientSettings::GetEmail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(233)
inline void SFTPCOMINTERFACELib::ICIClientSettings::PutEmail ( _bstr_t pVal ) {
    HRESULT _hr = put_Email(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(234)
inline _bstr_t SFTPCOMINTERFACELib::ICIClientSettings::GetFax ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Fax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(235)
inline void SFTPCOMINTERFACELib::ICIClientSettings::PutFax ( _bstr_t pVal ) {
    HRESULT _hr = put_Fax(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(236)
inline _bstr_t SFTPCOMINTERFACELib::ICIClientSettings::GetPhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Phone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(237)
inline void SFTPCOMINTERFACELib::ICIClientSettings::PutPhone ( _bstr_t pVal ) {
    HRESULT _hr = put_Phone(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(238)
inline _bstr_t SFTPCOMINTERFACELib::ICIClientSettings::GetPager ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Pager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(239)
inline void SFTPCOMINTERFACELib::ICIClientSettings::PutPager ( _bstr_t pVal ) {
    HRESULT _hr = put_Pager(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(240)
inline _bstr_t SFTPCOMINTERFACELib::ICIClientSettings::GetSftpAuthenticationType ( VARIANT * pInherited ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetSftpAuthenticationType(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(241)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetSftpAuthenticationType ( _bstr_t val ) {
    HRESULT _hr = raw_SetSftpAuthenticationType(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(242)
inline long SFTPCOMINTERFACELib::ICIClientSettings::GetSSHKeyID ( VARIANT * pInherited ) {
    long _result = 0;
    HRESULT _hr = raw_GetSSHKeyID(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(243)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetSSHKeyID ( long val ) {
    HRESULT _hr = raw_SetSSHKeyID(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(244)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetExpirationDate ( VARIANT * dDate ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetExpirationDate(dDate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(245)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetExpirationDate ( VARIANT * dDate, VARIANT_BOOL bEnable ) {
    HRESULT _hr = raw_SetExpirationDate(dDate, bEnable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(246)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetHasMaxIPs ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetHasMaxIPs(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(247)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetHasMaxIPs ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetHasMaxIPs(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(248)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetHasDownloadsPerSession ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetHasDownloadsPerSession(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(249)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetHasDownloadsPerSession ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetHasDownloadsPerSession(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(250)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetHasUploadsPerSession ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetHasUploadsPerSession(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(251)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetHasUploadsPerSession ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetHasUploadsPerSession(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(252)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetHasMaxDownloadSize ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetHasMaxDownloadSize(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(253)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetHasMaxDownloadSize ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetHasMaxDownloadSize(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(254)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetHasMaxUploadSize ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetHasMaxUploadSize(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(255)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetHasMaxUploadSize ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetHasMaxUploadSize(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(256)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetSFTP ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetSFTP(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(257)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetSFTP ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetSFTP(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(258)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetAllowMODEZ ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetAllowMODEZ(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(259)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetAllowMODEZ ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetAllowMODEZ(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(260)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetAppletEnabled ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetAppletEnabled(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(261)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetAppletEnabled ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetAppletEnabled(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(262)
inline _bstr_t SFTPCOMINTERFACELib::ICIClientSettings::GetCustom1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Custom1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(263)
inline void SFTPCOMINTERFACELib::ICIClientSettings::PutCustom1 ( _bstr_t pVal ) {
    HRESULT _hr = put_Custom1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(264)
inline _bstr_t SFTPCOMINTERFACELib::ICIClientSettings::GetCustom2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Custom2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(265)
inline void SFTPCOMINTERFACELib::ICIClientSettings::PutCustom2 ( _bstr_t pVal ) {
    HRESULT _hr = put_Custom2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(266)
inline _bstr_t SFTPCOMINTERFACELib::ICIClientSettings::GetCustom3 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Custom3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(267)
inline void SFTPCOMINTERFACELib::ICIClientSettings::PutCustom3 ( _bstr_t pVal ) {
    HRESULT _hr = put_Custom3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(268)
inline _variant_t SFTPCOMINTERFACELib::ICIClientSettings::GetExpirationDateAsVariant ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetExpirationDateAsVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(269)
inline _bstr_t SFTPCOMINTERFACELib::ICIClientSettings::GetSSLAuthenticationType ( VARIANT * pInherited ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetSSLAuthenticationType(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(270)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetSSLAuthenticationType ( _bstr_t val ) {
    HRESULT _hr = raw_SetSSLAuthenticationType(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(271)
inline long SFTPCOMINTERFACELib::ICIClientSettings::GetSSLKeyID ( VARIANT * pInherited ) {
    long _result = 0;
    HRESULT _hr = raw_GetSSLKeyID(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(272)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetSSLKeyID ( long val ) {
    HRESULT _hr = raw_SetSSLKeyID(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(273)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetClearHTTP ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetClearHTTP(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(274)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetClearHTTP ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetClearHTTP(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(275)
inline _variant_t SFTPCOMINTERFACELib::ICIClientSettings::GetIPAccessRules ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetIPAccessRules(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(276)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::AddIPAccessRule ( _bstr_t bstrMask, VARIANT_BOOL bAllow, long nRulePos ) {
    HRESULT _hr = raw_AddIPAccessRule(bstrMask, bAllow, nRulePos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(277)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::RemoveIPAccessRule ( long nRulePos ) {
    HRESULT _hr = raw_RemoveIPAccessRule(nRulePos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(278)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetIPAccessAllowedDefault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IPAccessAllowedDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(279)
inline void SFTPCOMINTERFACELib::ICIClientSettings::PutIPAccessAllowedDefault ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IPAccessAllowedDefault(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(280)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetLimitLoginAttempts ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetLimitLoginAttempts(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(281)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetLimitLoginAttempts ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetLimitLoginAttempts(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(282)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetLockoutNotDisable ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetLockoutNotDisable(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(283)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetLockoutNotDisable ( VARIANT_BOOL val ) {
    HRESULT _hr = raw_SetLockoutNotDisable(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(284)
inline long SFTPCOMINTERFACELib::ICIClientSettings::GetMaxInvalidLoginAttempts ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxInvalidLoginAttempts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(285)
inline void SFTPCOMINTERFACELib::ICIClientSettings::PutMaxInvalidLoginAttempts ( long pVal ) {
    HRESULT _hr = put_MaxInvalidLoginAttempts(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(286)
inline long SFTPCOMINTERFACELib::ICIClientSettings::GetLockoutPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_LockoutPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(287)
inline void SFTPCOMINTERFACELib::ICIClientSettings::PutLockoutPeriod ( long pVal ) {
    HRESULT _hr = put_LockoutPeriod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(288)
inline long SFTPCOMINTERFACELib::ICIClientSettings::GetInvalidAttemptsPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_InvalidAttemptsPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(289)
inline void SFTPCOMINTERFACELib::ICIClientSettings::PutInvalidAttemptsPeriod ( long pVal ) {
    HRESULT _hr = put_InvalidAttemptsPeriod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(290)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetFTPS ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetFTPS(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(291)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetFTPS ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetFTPS(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(292)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetHTTPS ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetHTTPS(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(293)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetHTTPS ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetHTTPS(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(294)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::ForcePasswordChange ( ) {
    HRESULT _hr = raw_ForcePasswordChange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(295)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetLimitAccessByIP ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetLimitAccessByIP(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(296)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetLimitAccessByIP ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetLimitAccessByIP(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(297)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::IsPasswordAgeLimited ( VARIANT * pDate ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPasswordAgeLimited(pDate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(298)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::IsInactivityPeriodLimited ( VARIANT * pDate ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsInactivityPeriodLimited(pDate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(299)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetForcePasswordResetOnInitialLogin ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetForcePasswordResetOnInitialLogin(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(300)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetForcePasswordResetOnInitialLogin ( VARIANT_BOOL val ) {
    HRESULT _hr = raw_SetForcePasswordResetOnInitialLogin(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(301)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetTwoFactorAuthentication ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetTwoFactorAuthentication(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(302)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetTwoFactorAuthentication ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetTwoFactorAuthentication(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(303)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetIsLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLocked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(304)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetIsConnected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(305)
inline DATE SFTPCOMINTERFACELib::ICIClientSettings::GetLastConnectionTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastConnectionTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(306)
inline DATE SFTPCOMINTERFACELib::ICIClientSettings::GetAccountCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_AccountCreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(307)
inline _bstr_t SFTPCOMINTERFACELib::ICIClientSettings::GetLastModifiedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastModifiedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(308)
inline DATE SFTPCOMINTERFACELib::ICIClientSettings::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(309)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetAS2Inbound ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetAS2Inbound(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(310)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetAS2Inbound ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetAS2Inbound(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(311)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetAS2Outbound ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetAS2Outbound(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(312)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetAS2Outbound ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetAS2Outbound(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(313)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetRequireStrongPasswords ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetRequireStrongPasswords(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(314)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetRequireStrongPasswords ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetRequireStrongPasswords(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(315)
inline SFTPCOMINTERFACELib::ICIComplexPasswordSettingsPtr SFTPCOMINTERFACELib::ICIClientSettings::GetComplexPasswordSettings ( ) {
    struct ICIComplexPasswordSettings * _result = 0;
    HRESULT _hr = raw_GetComplexPasswordSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICIComplexPasswordSettingsPtr(_result, false);
}

#pragma implementation_key(316)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetComplexPasswordSettings ( struct ICIComplexPasswordSettings * pIComplexPasswordSettings ) {
    HRESULT _hr = raw_SetComplexPasswordSettings(pIComplexPasswordSettings);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(317)
inline SFTPCOMINTERFACELib::ICIResetPasswordSettingsPtr SFTPCOMINTERFACELib::ICIClientSettings::GetResetPasswordSettings ( ) {
    struct ICIResetPasswordSettings * _result = 0;
    HRESULT _hr = raw_GetResetPasswordSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICIResetPasswordSettingsPtr(_result, false);
}

#pragma implementation_key(318)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetResetPasswordSettings ( struct ICIResetPasswordSettings * pIResetPasswordSettings ) {
    HRESULT _hr = raw_SetResetPasswordSettings(pIResetPasswordSettings);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(319)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetEnablePasswordHistory ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetEnablePasswordHistory(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(320)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetEnablePasswordHistory ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetEnablePasswordHistory(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(321)
inline long SFTPCOMINTERFACELib::ICIClientSettings::GetPasswordHistorySize ( ) {
    long _result = 0;
    HRESULT _hr = get_PasswordHistorySize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(322)
inline void SFTPCOMINTERFACELib::ICIClientSettings::PutPasswordHistorySize ( long pVal ) {
    HRESULT _hr = put_PasswordHistorySize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(323)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetInactiveAccountsMonitoring ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetInactiveAccountsMonitoring(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(324)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetInactiveAccountsMonitoring ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetInactiveAccountsMonitoring(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(325)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetRemoveInactiveAccounts ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RemoveInactiveAccounts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(326)
inline void SFTPCOMINTERFACELib::ICIClientSettings::PutRemoveInactiveAccounts ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RemoveInactiveAccounts(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(327)
inline long SFTPCOMINTERFACELib::ICIClientSettings::GetMaxInactivePeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxInactivePeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(328)
inline void SFTPCOMINTERFACELib::ICIClientSettings::PutMaxInactivePeriod ( long pVal ) {
    HRESULT _hr = put_MaxInactivePeriod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(329)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::ResetPassword ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ResetPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(330)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetAllowCOMB ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetAllowCOMB(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(331)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetAllowCOMB ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetAllowCOMB(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(332)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIClientSettings::GetAllowFXP ( VARIANT * pInherited ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetAllowFXP(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(333)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetAllowFXP ( SFTPAdvBool val ) {
    HRESULT _hr = raw_SetAllowFXP(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(334)
inline SFTPCOMINTERFACELib::AS2OutboundProfileStatus SFTPCOMINTERFACELib::ICIClientSettings::AS2TestOutboundProfile ( ) {
    AS2OutboundProfileStatus _result;
    HRESULT _hr = raw_AS2TestOutboundProfile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(335)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::MoveIPAccessRule ( long nRulePosFrom, long nRulePosTo ) {
    HRESULT _hr = raw_MoveIPAccessRule(nRulePosFrom, nRulePosTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(336)
inline SFTPCOMINTERFACELib::ICIAS2OutboundSettingsPtr SFTPCOMINTERFACELib::ICIClientSettings::GetAS2OutboundSettings ( ) {
    struct ICIAS2OutboundSettings * _result = 0;
    HRESULT _hr = get_AS2OutboundSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICIAS2OutboundSettingsPtr(_result, false);
}

#pragma implementation_key(337)
inline SFTPCOMINTERFACELib::ICIAS2InboundSettingsPtr SFTPCOMINTERFACELib::ICIClientSettings::GetAS2InboundSettings ( ) {
    struct ICIAS2InboundSettings * _result = 0;
    HRESULT _hr = get_AS2InboundSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICIAS2InboundSettingsPtr(_result, false);
}

#pragma implementation_key(338)
inline long SFTPCOMINTERFACELib::ICIClientSettings::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(339)
inline _variant_t SFTPCOMINTERFACELib::ICIClientSettings::GetSSHKeyIDs ( VARIANT * pInherited ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetSSHKeyIDs(pInherited, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(340)
inline HRESULT SFTPCOMINTERFACELib::ICIClientSettings::SetSSHKeyIDs ( const _variant_t & val ) {
    HRESULT _hr = raw_SetSSHKeyIDs(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICICommandSettings wrapper method implementations
//

#pragma implementation_key(341)
inline _bstr_t SFTPCOMINTERFACELib::ICICommandSettings::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(342)
inline void SFTPCOMINTERFACELib::ICICommandSettings::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(343)
inline _bstr_t SFTPCOMINTERFACELib::ICICommandSettings::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(344)
inline void SFTPCOMINTERFACELib::ICICommandSettings::PutDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_Description(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(345)
inline _bstr_t SFTPCOMINTERFACELib::ICICommandSettings::GetExecutable ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Executable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(346)
inline void SFTPCOMINTERFACELib::ICICommandSettings::PutExecutable ( _bstr_t pVal ) {
    HRESULT _hr = put_Executable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(347)
inline _bstr_t SFTPCOMINTERFACELib::ICICommandSettings::GetParameters ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Parameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(348)
inline void SFTPCOMINTERFACELib::ICICommandSettings::PutParameters ( _bstr_t pVal ) {
    HRESULT _hr = put_Parameters(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(349)
inline _bstr_t SFTPCOMINTERFACELib::ICICommandSettings::GetMinNumOfParamsMsg ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MinNumOfParamsMsg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(350)
inline void SFTPCOMINTERFACELib::ICICommandSettings::PutMinNumOfParamsMsg ( _bstr_t pVal ) {
    HRESULT _hr = put_MinNumOfParamsMsg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(351)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICICommandSettings::GetIsEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(352)
inline void SFTPCOMINTERFACELib::ICICommandSettings::PutIsEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsEnabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(353)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICICommandSettings::GetRequireParams ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RequireParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(354)
inline void SFTPCOMINTERFACELib::ICICommandSettings::PutRequireParams ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RequireParams(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(355)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICICommandSettings::GetRedirectOutputToClient ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RedirectOutputToClient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(356)
inline void SFTPCOMINTERFACELib::ICICommandSettings::PutRedirectOutputToClient ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RedirectOutputToClient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(357)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICICommandSettings::GetRedirectOutputToLog ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RedirectOutputToLog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(358)
inline void SFTPCOMINTERFACELib::ICICommandSettings::PutRedirectOutputToLog ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RedirectOutputToLog(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(359)
inline _bstr_t SFTPCOMINTERFACELib::ICICommandSettings::GetLogPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LogPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(360)
inline void SFTPCOMINTERFACELib::ICICommandSettings::PutLogPath ( _bstr_t pVal ) {
    HRESULT _hr = put_LogPath(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(361)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICICommandSettings::GetEnableProcessTimeOut ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableProcessTimeOut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(362)
inline void SFTPCOMINTERFACELib::ICICommandSettings::PutEnableProcessTimeOut ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableProcessTimeOut(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(363)
inline long SFTPCOMINTERFACELib::ICICommandSettings::GetMinNumOfParams ( ) {
    long _result = 0;
    HRESULT _hr = get_MinNumOfParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(364)
inline void SFTPCOMINTERFACELib::ICICommandSettings::PutMinNumOfParams ( long pVal ) {
    HRESULT _hr = put_MinNumOfParams(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(365)
inline long SFTPCOMINTERFACELib::ICICommandSettings::GetProcessTimeOut ( ) {
    long _result = 0;
    HRESULT _hr = get_ProcessTimeOut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(366)
inline void SFTPCOMINTERFACELib::ICICommandSettings::PutProcessTimeOut ( long pVal ) {
    HRESULT _hr = put_ProcessTimeOut(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(367)
inline _variant_t SFTPCOMINTERFACELib::ICICommandSettings::GetUserPermissions ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetUserPermissions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(368)
inline HRESULT SFTPCOMINTERFACELib::ICICommandSettings::AddUserPermission ( _bstr_t bstrUser ) {
    HRESULT _hr = raw_AddUserPermission(bstrUser);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(369)
inline HRESULT SFTPCOMINTERFACELib::ICICommandSettings::RemoveUserPermission ( _bstr_t bstrUser ) {
    HRESULT _hr = raw_RemoveUserPermission(bstrUser);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICICertInfo wrapper method implementations
//

#pragma implementation_key(370)
inline long SFTPCOMINTERFACELib::ICICertInfo::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(371)
inline _bstr_t SFTPCOMINTERFACELib::ICICertInfo::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(372)
inline _bstr_t SFTPCOMINTERFACELib::ICICertInfo::GetIssuerOneLine ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IssuerOneLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(373)
inline _bstr_t SFTPCOMINTERFACELib::ICICertInfo::GetIssuerUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IssuerUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(374)
inline _bstr_t SFTPCOMINTERFACELib::ICICertInfo::GetIssuerOrg ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IssuerOrg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(375)
inline _bstr_t SFTPCOMINTERFACELib::ICICertInfo::GetIssuerCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IssuerCountry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(376)
inline _bstr_t SFTPCOMINTERFACELib::ICICertInfo::GetIssuerCName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IssuerCName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(377)
inline _bstr_t SFTPCOMINTERFACELib::ICICertInfo::GetSubjectOneLine ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SubjectOneLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(378)
inline _bstr_t SFTPCOMINTERFACELib::ICICertInfo::GetSubjectUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SubjectUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(379)
inline _bstr_t SFTPCOMINTERFACELib::ICICertInfo::GetSubjectOrg ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SubjectOrg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(380)
inline _bstr_t SFTPCOMINTERFACELib::ICICertInfo::GetSubjectCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SubjectCountry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(381)
inline _bstr_t SFTPCOMINTERFACELib::ICICertInfo::GetSubjectCName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SubjectCName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(382)
inline _bstr_t SFTPCOMINTERFACELib::ICICertInfo::GetNotBefore ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NotBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(383)
inline _bstr_t SFTPCOMINTERFACELib::ICICertInfo::GetNotAfter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NotAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ICIDMZGateway wrapper method implementations
//

#pragma implementation_key(384)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIDMZGateway::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(385)
inline void SFTPCOMINTERFACELib::ICIDMZGateway::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(386)
inline _bstr_t SFTPCOMINTERFACELib::ICIDMZGateway::GetGatewayIP ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GatewayIP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(387)
inline void SFTPCOMINTERFACELib::ICIDMZGateway::PutGatewayIP ( _bstr_t pVal ) {
    HRESULT _hr = put_GatewayIP(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(388)
inline long SFTPCOMINTERFACELib::ICIDMZGateway::GetGatewayPort ( ) {
    long _result = 0;
    HRESULT _hr = get_GatewayPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(389)
inline void SFTPCOMINTERFACELib::ICIDMZGateway::PutGatewayPort ( long pVal ) {
    HRESULT _hr = put_GatewayPort(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(390)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIDMZGateway::GetRouteFTP ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RouteFTP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(391)
inline void SFTPCOMINTERFACELib::ICIDMZGateway::PutRouteFTP ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RouteFTP(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(392)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIDMZGateway::GetRouteFTPSExpl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RouteFTPSExpl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(393)
inline void SFTPCOMINTERFACELib::ICIDMZGateway::PutRouteFTPSExpl ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RouteFTPSExpl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(394)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIDMZGateway::GetRouteFTPSImpl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RouteFTPSImpl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(395)
inline void SFTPCOMINTERFACELib::ICIDMZGateway::PutRouteFTPSImpl ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RouteFTPSImpl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(396)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIDMZGateway::GetRouteSFTP ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RouteSFTP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(397)
inline void SFTPCOMINTERFACELib::ICIDMZGateway::PutRouteSFTP ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RouteSFTP(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(398)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIDMZGateway::GetRouteHTTP ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RouteHTTP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(399)
inline void SFTPCOMINTERFACELib::ICIDMZGateway::PutRouteHTTP ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RouteHTTP(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(400)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIDMZGateway::GetRouteHTTPS ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RouteHTTPS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(401)
inline void SFTPCOMINTERFACELib::ICIDMZGateway::PutRouteHTTPS ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RouteHTTPS(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(402)
inline long SFTPCOMINTERFACELib::ICIDMZGateway::GetFTPPort ( ) {
    long _result = 0;
    HRESULT _hr = get_FTPPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(403)
inline void SFTPCOMINTERFACELib::ICIDMZGateway::PutFTPPort ( long pVal ) {
    HRESULT _hr = put_FTPPort(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(404)
inline long SFTPCOMINTERFACELib::ICIDMZGateway::GetFTPSExplPort ( ) {
    long _result = 0;
    HRESULT _hr = get_FTPSExplPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(405)
inline void SFTPCOMINTERFACELib::ICIDMZGateway::PutFTPSExplPort ( long pVal ) {
    HRESULT _hr = put_FTPSExplPort(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(406)
inline long SFTPCOMINTERFACELib::ICIDMZGateway::GetFTPSImplPort ( ) {
    long _result = 0;
    HRESULT _hr = get_FTPSImplPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(407)
inline void SFTPCOMINTERFACELib::ICIDMZGateway::PutFTPSImplPort ( long pVal ) {
    HRESULT _hr = put_FTPSImplPort(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(408)
inline long SFTPCOMINTERFACELib::ICIDMZGateway::GetSFTPPort ( ) {
    long _result = 0;
    HRESULT _hr = get_SFTPPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(409)
inline void SFTPCOMINTERFACELib::ICIDMZGateway::PutSFTPPort ( long pVal ) {
    HRESULT _hr = put_SFTPPort(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(410)
inline long SFTPCOMINTERFACELib::ICIDMZGateway::GetHTTPPort ( ) {
    long _result = 0;
    HRESULT _hr = get_HTTPPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(411)
inline void SFTPCOMINTERFACELib::ICIDMZGateway::PutHTTPPort ( long pVal ) {
    HRESULT _hr = put_HTTPPort(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(412)
inline long SFTPCOMINTERFACELib::ICIDMZGateway::GetHTTPSPort ( ) {
    long _result = 0;
    HRESULT _hr = get_HTTPSPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(413)
inline void SFTPCOMINTERFACELib::ICIDMZGateway::PutHTTPSPort ( long pVal ) {
    HRESULT _hr = put_HTTPSPort(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(414)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIDMZGateway::GetAssignPASVMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AssignPASVMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(415)
inline void SFTPCOMINTERFACELib::ICIDMZGateway::PutAssignPASVMode ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AssignPASVMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(416)
inline long SFTPCOMINTERFACELib::ICIDMZGateway::GetPASVListenIP ( ) {
    long _result = 0;
    HRESULT _hr = get_PASVListenIP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(417)
inline void SFTPCOMINTERFACELib::ICIDMZGateway::PutPASVListenIP ( long pVal ) {
    HRESULT _hr = put_PASVListenIP(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(418)
inline long SFTPCOMINTERFACELib::ICIDMZGateway::GetPASVPortMin ( ) {
    long _result = 0;
    HRESULT _hr = get_PASVPortMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(419)
inline void SFTPCOMINTERFACELib::ICIDMZGateway::PutPASVPortMin ( long pVal ) {
    HRESULT _hr = put_PASVPortMin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(420)
inline long SFTPCOMINTERFACELib::ICIDMZGateway::GetPASVPortMax ( ) {
    long _result = 0;
    HRESULT _hr = get_PASVPortMax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(421)
inline void SFTPCOMINTERFACELib::ICIDMZGateway::PutPASVPortMax ( long pVal ) {
    HRESULT _hr = put_PASVPortMax(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICISite wrapper method implementations
//

#pragma implementation_key(422)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(423)
inline long SFTPCOMINTERFACELib::ICISite::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(424)
inline long SFTPCOMINTERFACELib::ICISite::GetConnectedCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetConnectedCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(425)
inline HRESULT SFTPCOMINTERFACELib::ICISite::Start ( ) {
    HRESULT _hr = raw_Start();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(426)
inline HRESULT SFTPCOMINTERFACELib::ICISite::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(427)
inline long SFTPCOMINTERFACELib::ICISite::GetAuthManagerID ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetAuthManagerID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(428)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetRootFolder ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetRootFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(429)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::SetRootFolder ( _bstr_t newVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetRootFolder(newVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(430)
inline long SFTPCOMINTERFACELib::ICISite::GetIP ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetIP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(431)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::SetIP ( long newVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetIP(newVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(432)
inline long SFTPCOMINTERFACELib::ICISite::GetPort ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(433)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::SetPort ( long newVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPort(newVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(434)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetFTPAccess ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetFTPAccess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(435)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::SetFTPAccess ( VARIANT_BOOL newVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetFTPAccess(newVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(436)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetSSLAuth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetSSLAuth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(437)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetSSLImp ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetSSLImp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(438)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::SetSSLAuth ( VARIANT_BOOL newVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetSSLAuth(newVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(439)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::SetSSLImp ( VARIANT_BOOL newVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetSSLImp(newVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(440)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetCheckClientCert ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetCheckClientCert(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(441)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::SetCheckClientCert ( VARIANT_BOOL newVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetCheckClientCert(newVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(442)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetCertFilePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCertFilePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(443)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetKeyFilePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetKeyFilePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(444)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetPassPhrase ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetPassPhrase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(445)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetTrustedCertsPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetTrustedCertsPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(446)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetAwaitingCertsPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetAwaitingCertsPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(447)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::SetCertFilePath ( _bstr_t newVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetCertFilePath(newVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(448)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::SetKeyFilePath ( _bstr_t newVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetKeyFilePath(newVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(449)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::SetPassPhrase ( _bstr_t newVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetPassPhrase(newVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(450)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetIsStarted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsStarted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(451)
inline long SFTPCOMINTERFACELib::ICISite::GetDownloadSpeed ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetDownloadSpeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(452)
inline long SFTPCOMINTERFACELib::ICISite::GetUploadSpeed ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetUploadSpeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(453)
inline long SFTPCOMINTERFACELib::ICISite::GetDownloadCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetDownloadCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(454)
inline long SFTPCOMINTERFACELib::ICISite::GetUploadCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetUploadCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(455)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetStartTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetStartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(456)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetFolderList ( _bstr_t bstrFolderAlias ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetFolderList(bstrFolderAlias, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(457)
inline _variant_t SFTPCOMINTERFACELib::ICISite::GetFolderPermissions ( _bstr_t bstrFolder ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetFolderPermissions(bstrFolder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(458)
inline HRESULT SFTPCOMINTERFACELib::ICISite::SetPermission ( struct IPermission * pPermission, VARIANT_BOOL bRemoveOtherPermissions ) {
    HRESULT _hr = raw_SetPermission(pPermission, bRemoveOtherPermissions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(459)
inline HRESULT SFTPCOMINTERFACELib::ICISite::RemovePermission ( _bstr_t bstrFolder, _bstr_t bstrClient ) {
    HRESULT _hr = raw_RemovePermission(bstrFolder, bstrClient);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(460)
inline SFTPCOMINTERFACELib::IPermissionPtr SFTPCOMINTERFACELib::ICISite::GetBlankPermission ( _bstr_t bstrFolder, _bstr_t bstrClient ) {
    struct IPermission * _result = 0;
    HRESULT _hr = raw_GetBlankPermission(bstrFolder, bstrClient, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPermissionPtr(_result, false);
}

#pragma implementation_key(461)
inline HRESULT SFTPCOMINTERFACELib::ICISite::CreatePhysicalFolder ( _bstr_t bstrNewFolder ) {
    HRESULT _hr = raw_CreatePhysicalFolder(bstrNewFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(462)
inline HRESULT SFTPCOMINTERFACELib::ICISite::CreateVirtualFolder ( _bstr_t bstrNewFolder, _bstr_t bstrTarget ) {
    HRESULT _hr = raw_CreateVirtualFolder(bstrNewFolder, bstrTarget);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(463)
inline HRESULT SFTPCOMINTERFACELib::ICISite::RemoveFolder ( _bstr_t bstrFolder ) {
    HRESULT _hr = raw_RemoveFolder(bstrFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(464)
inline HRESULT SFTPCOMINTERFACELib::ICISite::RenameFolder ( _bstr_t bstrSrcFolder, _bstr_t bstrDstFolder ) {
    HRESULT _hr = raw_RenameFolder(bstrSrcFolder, bstrDstFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(465)
inline HRESULT SFTPCOMINTERFACELib::ICISite::CreatePermissionGroup ( _bstr_t bstrName ) {
    HRESULT _hr = raw_CreatePermissionGroup(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(466)
inline _variant_t SFTPCOMINTERFACELib::ICISite::GetPermissionGroups ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetPermissionGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(467)
inline HRESULT SFTPCOMINTERFACELib::ICISite::RemovePermissionGroup ( _bstr_t bstrName ) {
    HRESULT _hr = raw_RemovePermissionGroup(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(468)
inline HRESULT SFTPCOMINTERFACELib::ICISite::RenamePermissionGroup ( _bstr_t bstrOldName, _bstr_t bstrNewName ) {
    HRESULT _hr = raw_RenamePermissionGroup(bstrOldName, bstrNewName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(469)
inline HRESULT SFTPCOMINTERFACELib::ICISite::AddUserToPermissionGroup ( _bstr_t bstrUser, _bstr_t bstrGroup ) {
    HRESULT _hr = raw_AddUserToPermissionGroup(bstrUser, bstrGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(470)
inline HRESULT SFTPCOMINTERFACELib::ICISite::RemoveUserFromPermissionGroup ( _bstr_t bstrUser, _bstr_t bstrGroup ) {
    HRESULT _hr = raw_RemoveUserFromPermissionGroup(bstrUser, bstrGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(471)
inline HRESULT SFTPCOMINTERFACELib::ICISite::CreateUser ( _bstr_t bstrLogin, _bstr_t bstrPwd, int nPwdType, _bstr_t bstrDescription, SFTPAdvBool abTwoFactorAuthentication ) {
    HRESULT _hr = raw_CreateUser(bstrLogin, bstrPwd, nPwdType, bstrDescription, abTwoFactorAuthentication);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(472)
inline _variant_t SFTPCOMINTERFACELib::ICISite::GetUsers ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetUsers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(473)
inline HRESULT SFTPCOMINTERFACELib::ICISite::RemoveUser ( _bstr_t bstrLogin ) {
    HRESULT _hr = raw_RemoveUser(bstrLogin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(474)
inline HRESULT SFTPCOMINTERFACELib::ICISite::RenameUser ( _bstr_t bstrOldName, _bstr_t bstrNewName ) {
    HRESULT _hr = raw_RenameUser(bstrOldName, bstrNewName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(475)
inline _variant_t SFTPCOMINTERFACELib::ICISite::GetSettingsLevels ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetSettingsLevels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(476)
inline _variant_t SFTPCOMINTERFACELib::ICISite::GetSettingsLevelUsers ( _bstr_t bstrGroup ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetSettingsLevelUsers(bstrGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(477)
inline HRESULT SFTPCOMINTERFACELib::ICISite::CreateSettingsLevel ( _bstr_t bstrName, _bstr_t bstrDescription ) {
    HRESULT _hr = raw_CreateSettingsLevel(bstrName, bstrDescription);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(478)
inline HRESULT SFTPCOMINTERFACELib::ICISite::RemoveSettingsLevel ( _bstr_t bstrName ) {
    HRESULT _hr = raw_RemoveSettingsLevel(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(479)
inline HRESULT SFTPCOMINTERFACELib::ICISite::RenameSettingsLevel ( _bstr_t bstrOldName, _bstr_t bstrNewName ) {
    HRESULT _hr = raw_RenameSettingsLevel(bstrOldName, bstrNewName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(480)
inline HRESULT SFTPCOMINTERFACELib::ICISite::MoveUserToSettingsLevel ( _bstr_t bstrUser, _bstr_t bstrGroup ) {
    HRESULT _hr = raw_MoveUserToSettingsLevel(bstrUser, bstrGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(481)
inline _variant_t SFTPCOMINTERFACELib::ICISite::GetPermissionGroupsOfUser ( _bstr_t bstrUser ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetPermissionGroupsOfUser(bstrUser, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(482)
inline HRESULT SFTPCOMINTERFACELib::ICISite::ChangeUserPassword ( _bstr_t bstrUser, _bstr_t bstrPwd, int nPwdType ) {
    HRESULT _hr = raw_ChangeUserPassword(bstrUser, bstrPwd, nPwdType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(483)
inline SFTPCOMINTERFACELib::ICIClientSettingsPtr SFTPCOMINTERFACELib::ICISite::GetSettingsLevelSettings ( _bstr_t bstrGroup ) {
    struct ICIClientSettings * _result = 0;
    HRESULT _hr = raw_GetSettingsLevelSettings(bstrGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICIClientSettingsPtr(_result, false);
}

#pragma implementation_key(484)
inline SFTPCOMINTERFACELib::ICIClientSettingsPtr SFTPCOMINTERFACELib::ICISite::GetUserSettings ( _bstr_t bstrUser ) {
    struct ICIClientSettings * _result = 0;
    HRESULT _hr = raw_GetUserSettings(bstrUser, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICIClientSettingsPtr(_result, false);
}

#pragma implementation_key(485)
inline HRESULT SFTPCOMINTERFACELib::ICISite::Remove ( ) {
    HRESULT _hr = raw_Remove();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(486)
inline _variant_t SFTPCOMINTERFACELib::ICISite::GetCommands ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetCommands(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(487)
inline SFTPCOMINTERFACELib::ICICommandSettingsPtr SFTPCOMINTERFACELib::ICISite::GetCommandSettings ( _bstr_t bstrCommand ) {
    struct ICICommandSettings * _result = 0;
    HRESULT _hr = raw_GetCommandSettings(bstrCommand, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICICommandSettingsPtr(_result, false);
}

#pragma implementation_key(488)
inline SFTPCOMINTERFACELib::ICICommandSettingsPtr SFTPCOMINTERFACELib::ICISite::CreateCommand ( _bstr_t bstrName ) {
    struct ICICommandSettings * _result = 0;
    HRESULT _hr = raw_CreateCommand(bstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICICommandSettingsPtr(_result, false);
}

#pragma implementation_key(489)
inline HRESULT SFTPCOMINTERFACELib::ICISite::RemoveCommand ( _bstr_t bstrName ) {
    HRESULT _hr = raw_RemoveCommand(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(490)
inline _variant_t SFTPCOMINTERFACELib::ICISite::GetTrustedCertificates ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetTrustedCertificates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(491)
inline SFTPCOMINTERFACELib::ICICertInfoPtr SFTPCOMINTERFACELib::ICISite::GetTrustedCertificateInfo ( long lID ) {
    struct ICICertInfo * _result = 0;
    HRESULT _hr = raw_GetTrustedCertificateInfo(lID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICICertInfoPtr(_result, false);
}

#pragma implementation_key(492)
inline _variant_t SFTPCOMINTERFACELib::ICISite::GetPendingCertificates ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetPendingCertificates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(493)
inline SFTPCOMINTERFACELib::ICICertInfoPtr SFTPCOMINTERFACELib::ICISite::GetPendingCertificateInfo ( long lID ) {
    struct ICICertInfo * _result = 0;
    HRESULT _hr = raw_GetPendingCertificateInfo(lID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICICertInfoPtr(_result, false);
}

#pragma implementation_key(494)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::ExportTrustedCertificate ( long lID ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ExportTrustedCertificate(lID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(495)
inline long SFTPCOMINTERFACELib::ICISite::ImportTrustedCertificate ( _bstr_t bstrCertPath ) {
    long _result = 0;
    HRESULT _hr = raw_ImportTrustedCertificate(bstrCertPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(496)
inline HRESULT SFTPCOMINTERFACELib::ICISite::RemoveTrustedCertificate ( long lID ) {
    HRESULT _hr = raw_RemoveTrustedCertificate(lID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(497)
inline HRESULT SFTPCOMINTERFACELib::ICISite::RemovePendingCertificate ( long lID ) {
    HRESULT _hr = raw_RemovePendingCertificate(lID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(498)
inline long SFTPCOMINTERFACELib::ICISite::AddCertificateToTrusted ( long lID ) {
    long _result = 0;
    HRESULT _hr = raw_AddCertificateToTrusted(lID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(499)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetUserLimitMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserLimitMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(500)
inline void SFTPCOMINTERFACELib::ICISite::PutUserLimitMessage ( _bstr_t pVal ) {
    HRESULT _hr = put_UserLimitMessage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(501)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetExitMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExitMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(502)
inline void SFTPCOMINTERFACELib::ICISite::PutExitMessage ( _bstr_t pVal ) {
    HRESULT _hr = put_ExitMessage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(503)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetVFSFilter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VFSFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(504)
inline void SFTPCOMINTERFACELib::ICISite::PutVFSFilter ( _bstr_t pVal ) {
    HRESULT _hr = put_VFSFilter(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(505)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetBlockAntiTimeOut ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BlockAntiTimeOut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(506)
inline void SFTPCOMINTERFACELib::ICISite::PutBlockAntiTimeOut ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_BlockAntiTimeOut(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(507)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetBlockSiteToSite ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BlockSiteToSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(508)
inline void SFTPCOMINTERFACELib::ICISite::PutBlockSiteToSite ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_BlockSiteToSite(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(509)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetAutoCreateHomeFolder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoCreateHomeFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(510)
inline void SFTPCOMINTERFACELib::ICISite::PutAutoCreateHomeFolder ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AutoCreateHomeFolder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(511)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetAssignFullPermissionsForHomeFolder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AssignFullPermissionsForHomeFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(512)
inline void SFTPCOMINTERFACELib::ICISite::PutAssignFullPermissionsForHomeFolder ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AssignFullPermissionsForHomeFolder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(513)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetEnablePortRange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnablePortRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(514)
inline void SFTPCOMINTERFACELib::ICISite::PutEnablePortRange ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnablePortRange(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(515)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetHasMaxSpeed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasMaxSpeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(516)
inline void SFTPCOMINTERFACELib::ICISite::PutHasMaxSpeed ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_HasMaxSpeed(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(517)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetHasMaxUsers ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasMaxUsers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(518)
inline void SFTPCOMINTERFACELib::ICISite::PutHasMaxUsers ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_HasMaxUsers(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(519)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetHasMaxConnectionsPerAccount ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasMaxConnectionsPerAccount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(520)
inline void SFTPCOMINTERFACELib::ICISite::PutHasMaxConnectionsPerAccount ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_HasMaxConnectionsPerAccount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(521)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetHasMaxIPPerAccount ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasMaxIPPerAccount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(522)
inline void SFTPCOMINTERFACELib::ICISite::PutHasMaxIPPerAccount ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_HasMaxIPPerAccount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(523)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetDisconnectOnDOS ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisconnectOnDOS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(524)
inline void SFTPCOMINTERFACELib::ICISite::PutDisconnectOnDOS ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DisconnectOnDOS(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(525)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetBanIPOnDOS ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BanIPOnDOS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(526)
inline void SFTPCOMINTERFACELib::ICISite::PutBanIPOnDOS ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_BanIPOnDOS(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(527)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetAutoBanIPsPermanently ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoBanIPsPermanently(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(528)
inline void SFTPCOMINTERFACELib::ICISite::PutAutoBanIPsPermanently ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AutoBanIPsPermanently(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(529)
inline long SFTPCOMINTERFACELib::ICISite::GetPASVListenIP ( ) {
    long _result = 0;
    HRESULT _hr = get_PASVListenIP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(530)
inline void SFTPCOMINTERFACELib::ICISite::PutPASVListenIP ( long pVal ) {
    HRESULT _hr = put_PASVListenIP(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(531)
inline long SFTPCOMINTERFACELib::ICISite::GetPASVPortMin ( ) {
    long _result = 0;
    HRESULT _hr = get_PASVPortMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(532)
inline void SFTPCOMINTERFACELib::ICISite::PutPASVPortMin ( long pVal ) {
    HRESULT _hr = put_PASVPortMin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(533)
inline long SFTPCOMINTERFACELib::ICISite::GetPASVPortMax ( ) {
    long _result = 0;
    HRESULT _hr = get_PASVPortMax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(534)
inline void SFTPCOMINTERFACELib::ICISite::PutPASVPortMax ( long pVal ) {
    HRESULT _hr = put_PASVPortMax(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(535)
inline long SFTPCOMINTERFACELib::ICISite::GetMaxTransferSpeed ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxTransferSpeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(536)
inline void SFTPCOMINTERFACELib::ICISite::PutMaxTransferSpeed ( long pVal ) {
    HRESULT _hr = put_MaxTransferSpeed(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(537)
inline long SFTPCOMINTERFACELib::ICISite::GetMaxConcurrentConnections ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxConcurrentConnections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(538)
inline void SFTPCOMINTERFACELib::ICISite::PutMaxConcurrentConnections ( long pVal ) {
    HRESULT _hr = put_MaxConcurrentConnections(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(539)
inline long SFTPCOMINTERFACELib::ICISite::GetMaxConnectionsPerUser ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxConnectionsPerUser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(540)
inline void SFTPCOMINTERFACELib::ICISite::PutMaxConnectionsPerUser ( long pVal ) {
    HRESULT _hr = put_MaxConnectionsPerUser(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(541)
inline long SFTPCOMINTERFACELib::ICISite::GetMaxConnectionsFromSameIP ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxConnectionsFromSameIP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(542)
inline void SFTPCOMINTERFACELib::ICISite::PutMaxConnectionsFromSameIP ( long pVal ) {
    HRESULT _hr = put_MaxConnectionsFromSameIP(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(543)
inline long SFTPCOMINTERFACELib::ICISite::GetDOSLimit ( ) {
    long _result = 0;
    HRESULT _hr = get_DOSLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(544)
inline void SFTPCOMINTERFACELib::ICISite::PutDOSLimit ( long pVal ) {
    HRESULT _hr = put_DOSLimit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(545)
inline _variant_t SFTPCOMINTERFACELib::ICISite::GetIPAccessRules ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetIPAccessRules(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(546)
inline HRESULT SFTPCOMINTERFACELib::ICISite::AddIPAccessRule ( _bstr_t bstrMask, VARIANT_BOOL bAllow, long nRulePos ) {
    HRESULT _hr = raw_AddIPAccessRule(bstrMask, bAllow, nRulePos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(547)
inline HRESULT SFTPCOMINTERFACELib::ICISite::RemoveIPAccessRule ( long nRulePos ) {
    HRESULT _hr = raw_RemoveIPAccessRule(nRulePos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(548)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetIPAccessAllowedDefault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IPAccessAllowedDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(549)
inline void SFTPCOMINTERFACELib::ICISite::PutIPAccessAllowedDefault ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IPAccessAllowedDefault(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(550)
inline HRESULT SFTPCOMINTERFACELib::ICISite::CreateUserEx ( _bstr_t bstrLogin, _bstr_t bstrPwd, int nPwdType, _bstr_t bstrDescription, _bstr_t bstrFullName, VARIANT_BOOL bCreateHomeFolder, VARIANT_BOOL bFullPermissionsForHomeFolder, _bstr_t bstrSettingsLevel, SFTPAdvBool abTwoFactorAuthentication ) {
    HRESULT _hr = raw_CreateUserEx(bstrLogin, bstrPwd, nPwdType, bstrDescription, bstrFullName, bCreateHomeFolder, bFullPermissionsForHomeFolder, bstrSettingsLevel, abTwoFactorAuthentication);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(551)
inline _variant_t SFTPCOMINTERFACELib::ICISite::GetPermissionGroupList ( _bstr_t bstrGroup ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetPermissionGroupList(bstrGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(552)
inline HRESULT SFTPCOMINTERFACELib::ICISite::ForceSynchronizeUserDatabase ( ) {
    HRESULT _hr = raw_ForceSynchronizeUserDatabase();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(553)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetConnectMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConnectMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(554)
inline void SFTPCOMINTERFACELib::ICISite::PutConnectMessage ( _bstr_t pVal ) {
    HRESULT _hr = put_ConnectMessage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(555)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetHasMaxConcurrentLogins ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasMaxConcurrentLogins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(556)
inline void SFTPCOMINTERFACELib::ICISite::PutHasMaxConcurrentLogins ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_HasMaxConcurrentLogins(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(557)
inline long SFTPCOMINTERFACELib::ICISite::GetMaxConcurrentLogins ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxConcurrentLogins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(558)
inline void SFTPCOMINTERFACELib::ICISite::PutMaxConcurrentLogins ( long pVal ) {
    HRESULT _hr = put_MaxConcurrentLogins(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(559)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::ValidatePassword ( _bstr_t bstrUser, _bstr_t bstrPwd ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ValidatePassword(bstrUser, bstrPwd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(560)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::CancelTransfer ( _bstr_t bstrPath ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CancelTransfer(bstrPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(561)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetSSHKeyFilePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetSSHKeyFilePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(562)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::SetSSHKeyFilePath ( _bstr_t newVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetSSHKeyFilePath(newVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(563)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetODBCSettings ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ODBCSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(564)
inline void SFTPCOMINTERFACELib::ICISite::PutODBCSettings ( _bstr_t pVal ) {
    HRESULT _hr = put_ODBCSettings(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(565)
inline HRESULT SFTPCOMINTERFACELib::ICISite::RemapVirtualFolder ( _bstr_t bstrVFSFolder, _bstr_t bstrTarget ) {
    HRESULT _hr = raw_RemapVirtualFolder(bstrVFSFolder, bstrTarget);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(566)
inline HRESULT SFTPCOMINTERFACELib::ICISite::AssignEventRuleCustomCommandWorkingFolder ( _bstr_t bstrCustomCommandName, _bstr_t bstrWorkingFolder ) {
    HRESULT _hr = raw_AssignEventRuleCustomCommandWorkingFolder(bstrCustomCommandName, bstrWorkingFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(567)
inline _variant_t SFTPCOMINTERFACELib::ICISite::EFTGetConnectedUsers ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_EFTGetConnectedUsers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(568)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::KickUser ( long nUserID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_KickUser(nUserID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(569)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::CreateComplexPassword ( const _variant_t & bstrUserName ) {
    BSTR _result = 0;
    HRESULT _hr = raw_CreateComplexPassword(bstrUserName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(570)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetHTTPAccess ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetHTTPAccess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(571)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::SetHTTPAccess ( VARIANT_BOOL newVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetHTTPAccess(newVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(572)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetHTTPSAccess ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetHTTPSAccess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(573)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::SetHTTPSAccess ( VARIANT_BOOL newVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetHTTPSAccess(newVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(574)
inline long SFTPCOMINTERFACELib::ICISite::GetHTTPPort ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetHTTPPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(575)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::SetHTTPPort ( long newVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetHTTPPort(newVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(576)
inline long SFTPCOMINTERFACELib::ICISite::GetHTTPSPort ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetHTTPSPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(577)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::SetHTTPSPort ( long newVal ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetHTTPSPort(newVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(578)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetLimitLoginAttempts ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LimitLoginAttempts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(579)
inline void SFTPCOMINTERFACELib::ICISite::PutLimitLoginAttempts ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LimitLoginAttempts(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(580)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetLockoutNotDisable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockoutNotDisable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(581)
inline void SFTPCOMINTERFACELib::ICISite::PutLockoutNotDisable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LockoutNotDisable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(582)
inline long SFTPCOMINTERFACELib::ICISite::GetMaxInvalidLoginAttempts ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxInvalidLoginAttempts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(583)
inline void SFTPCOMINTERFACELib::ICISite::PutMaxInvalidLoginAttempts ( long pVal ) {
    HRESULT _hr = put_MaxInvalidLoginAttempts(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(584)
inline long SFTPCOMINTERFACELib::ICISite::GetLockoutPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_LockoutPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(585)
inline void SFTPCOMINTERFACELib::ICISite::PutLockoutPeriod ( long pVal ) {
    HRESULT _hr = put_LockoutPeriod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(586)
inline long SFTPCOMINTERFACELib::ICISite::GetInvalidAttemptsPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_InvalidAttemptsPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(587)
inline void SFTPCOMINTERFACELib::ICISite::PutInvalidAttemptsPeriod ( long pVal ) {
    HRESULT _hr = put_InvalidAttemptsPeriod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(588)
inline IDispatchPtr SFTPCOMINTERFACELib::ICISite::EventRules ( EventType type ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_EventRules(type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(589)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetPhysicalPath ( _bstr_t bstrFolderAlias ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetPhysicalPath(bstrFolderAlias, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(590)
inline HRESULT SFTPCOMINTERFACELib::ICISite::EnableSFTP ( _bstr_t SFTPKeyFile, _bstr_t SFTPKeyPassword ) {
    HRESULT _hr = raw_EnableSFTP(SFTPKeyFile, SFTPKeyPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(591)
inline HRESULT SFTPCOMINTERFACELib::ICISite::DisableSFTP ( ) {
    HRESULT _hr = raw_DisableSFTP();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(592)
inline HRESULT SFTPCOMINTERFACELib::ICISite::SetSSLCertificate ( _bstr_t bzCertFilePath, _bstr_t bzKeyFilePath, _bstr_t bzPassPhrase ) {
    HRESULT _hr = raw_SetSSLCertificate(bzCertFilePath, bzKeyFilePath, bzPassPhrase);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(593)
inline SFTPCOMINTERFACELib::AutobanSensitivity SFTPCOMINTERFACELib::ICISite::GetAutobanSensitivity ( ) {
    AutobanSensitivity _result;
    HRESULT _hr = get_AutobanSensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(594)
inline void SFTPCOMINTERFACELib::ICISite::PutAutobanSensitivity ( AutobanSensitivity pVal ) {
    HRESULT _hr = put_AutobanSensitivity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(595)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetAllowChangePassword ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowChangePassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(596)
inline void SFTPCOMINTERFACELib::ICISite::PutAllowChangePassword ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AllowChangePassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(597)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetForcePasswordResetOnInitialLogin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ForcePasswordResetOnInitialLogin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(598)
inline void SFTPCOMINTERFACELib::ICISite::PutForcePasswordResetOnInitialLogin ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ForcePasswordResetOnInitialLogin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(599)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::DoesUsernameExist ( _bstr_t bstrUserName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_DoesUsernameExist(bstrUserName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(600)
inline SFTPCOMINTERFACELib::TwoFactorAuthenticationMode SFTPCOMINTERFACELib::ICISite::GetTwoFactorAuthentication ( ) {
    TwoFactorAuthenticationMode _result;
    HRESULT _hr = get_TwoFactorAuthentication(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(601)
inline void SFTPCOMINTERFACELib::ICISite::PutTwoFactorAuthentication ( TwoFactorAuthenticationMode pVal ) {
    HRESULT _hr = put_TwoFactorAuthentication(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(602)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetRadiusServerName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RadiusServerName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(603)
inline void SFTPCOMINTERFACELib::ICISite::PutRadiusServerName ( _bstr_t pVal ) {
    HRESULT _hr = put_RadiusServerName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(604)
inline long SFTPCOMINTERFACELib::ICISite::GetRadiusServerPort ( ) {
    long _result = 0;
    HRESULT _hr = get_RadiusServerPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(605)
inline void SFTPCOMINTERFACELib::ICISite::PutRadiusServerPort ( long pVal ) {
    HRESULT _hr = put_RadiusServerPort(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(606)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetRadiusNasIdentifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RadiusNasIdentifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(607)
inline void SFTPCOMINTERFACELib::ICISite::PutRadiusNasIdentifier ( _bstr_t pVal ) {
    HRESULT _hr = put_RadiusNasIdentifier(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(608)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetRadiusSharedSecret ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RadiusSharedSecret(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(609)
inline void SFTPCOMINTERFACELib::ICISite::PutRadiusSharedSecret ( _bstr_t pVal ) {
    HRESULT _hr = put_RadiusSharedSecret(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(610)
inline long SFTPCOMINTERFACELib::ICISite::GetRadiusConnectionRetriesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RadiusConnectionRetriesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(611)
inline void SFTPCOMINTERFACELib::ICISite::PutRadiusConnectionRetriesCount ( long pVal ) {
    HRESULT _hr = put_RadiusConnectionRetriesCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(612)
inline long SFTPCOMINTERFACELib::ICISite::GetRadiusTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_RadiusTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(613)
inline void SFTPCOMINTERFACELib::ICISite::PutRadiusTimeout ( long pVal ) {
    HRESULT _hr = put_RadiusTimeout(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(614)
inline DATE SFTPCOMINTERFACELib::ICISite::GetLastModifiedTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModifiedTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(615)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetLastModifiedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastModifiedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(616)
inline long SFTPCOMINTERFACELib::ICISite::GetAverageSpeed ( ) {
    long _result = 0;
    HRESULT _hr = get_AverageSpeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(617)
inline long SFTPCOMINTERFACELib::ICISite::GetUsersDefined ( ) {
    long _result = 0;
    HRESULT _hr = get_UsersDefined(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(618)
inline long SFTPCOMINTERFACELib::ICISite::GetWTCSessionsActive ( ) {
    long _result = 0;
    HRESULT _hr = get_WTCSessionsActive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(619)
inline long SFTPCOMINTERFACELib::ICISite::GetWTCSessionsRemaining ( ) {
    long _result = 0;
    HRESULT _hr = get_WTCSessionsRemaining(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(620)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetHTTPDomain ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTTPDomain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(621)
inline void SFTPCOMINTERFACELib::ICISite::PutHTTPDomain ( _bstr_t pVal ) {
    HRESULT _hr = put_HTTPDomain(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(622)
inline long SFTPCOMINTERFACELib::ICISite::GetFTPSExplicitPort ( ) {
    long _result = 0;
    HRESULT _hr = get_FTPSExplicitPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(623)
inline void SFTPCOMINTERFACELib::ICISite::PutFTPSExplicitPort ( long pVal ) {
    HRESULT _hr = put_FTPSExplicitPort(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(624)
inline long SFTPCOMINTERFACELib::ICISite::GetFTPSImplicitPort ( ) {
    long _result = 0;
    HRESULT _hr = get_FTPSImplicitPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(625)
inline void SFTPCOMINTERFACELib::ICISite::PutFTPSImplicitPort ( long pVal ) {
    HRESULT _hr = put_FTPSImplicitPort(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(626)
inline long SFTPCOMINTERFACELib::ICISite::GetSFTPPort ( ) {
    long _result = 0;
    HRESULT _hr = get_SFTPPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(627)
inline void SFTPCOMINTERFACELib::ICISite::PutSFTPPort ( long pVal ) {
    HRESULT _hr = put_SFTPPort(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(628)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetEnableWebServices ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableWebServices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(629)
inline void SFTPCOMINTERFACELib::ICISite::PutEnableWebServices ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableWebServices(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(630)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetRedirectHTTPtoHTTPS ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RedirectHTTPtoHTTPS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(631)
inline void SFTPCOMINTERFACELib::ICISite::PutRedirectHTTPtoHTTPS ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RedirectHTTPtoHTTPS(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(632)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetEnableAccountManagementOverHTTPS ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableAccountManagementOverHTTPS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(633)
inline void SFTPCOMINTERFACELib::ICISite::PutEnableAccountManagementOverHTTPS ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableAccountManagementOverHTTPS(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(634)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetAccountManagementPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AccountManagementPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(635)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetRequireStrongPasswords ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RequireStrongPasswords(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(636)
inline void SFTPCOMINTERFACELib::ICISite::PutRequireStrongPasswords ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RequireStrongPasswords(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(637)
inline SFTPCOMINTERFACELib::DataSanitizationMethod SFTPCOMINTERFACELib::ICISite::GetDataSanitizationMethod ( ) {
    DataSanitizationMethod _result;
    HRESULT _hr = get_DataSanitizationMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(638)
inline void SFTPCOMINTERFACELib::ICISite::PutDataSanitizationMethod ( DataSanitizationMethod pVal ) {
    HRESULT _hr = put_DataSanitizationMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(639)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetEnablePGPLogging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnablePGPLogging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(640)
inline void SFTPCOMINTERFACELib::ICISite::PutEnablePGPLogging ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnablePGPLogging(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(641)
inline SFTPCOMINTERFACELib::PGPLogLevel SFTPCOMINTERFACELib::ICISite::GetPGPLogLevel ( ) {
    PGPLogLevel _result;
    HRESULT _hr = get_PGPLogLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(642)
inline void SFTPCOMINTERFACELib::ICISite::PutPGPLogLevel ( PGPLogLevel pVal ) {
    HRESULT _hr = put_PGPLogLevel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(643)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetUseDynamicPGPLogFile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseDynamicPGPLogFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(644)
inline void SFTPCOMINTERFACELib::ICISite::PutUseDynamicPGPLogFile ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseDynamicPGPLogFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(645)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetPGPLogFilePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PGPLogFilePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(646)
inline void SFTPCOMINTERFACELib::ICISite::PutPGPLogFilePath ( _bstr_t pVal ) {
    HRESULT _hr = put_PGPLogFilePath(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(647)
inline SFTPCOMINTERFACELib::ICIComplexPasswordSettingsPtr SFTPCOMINTERFACELib::ICISite::GetComplexPasswordSettings ( ) {
    struct ICIComplexPasswordSettings * _result = 0;
    HRESULT _hr = raw_GetComplexPasswordSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICIComplexPasswordSettingsPtr(_result, false);
}

#pragma implementation_key(648)
inline HRESULT SFTPCOMINTERFACELib::ICISite::SetComplexPasswordSettings ( struct ICIComplexPasswordSettings * pIComplexPasswordSettings ) {
    HRESULT _hr = raw_SetComplexPasswordSettings(pIComplexPasswordSettings);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(649)
inline SFTPCOMINTERFACELib::ICIResetPasswordSettingsPtr SFTPCOMINTERFACELib::ICISite::GetResetPasswordSettings ( ) {
    struct ICIResetPasswordSettings * _result = 0;
    HRESULT _hr = raw_GetResetPasswordSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICIResetPasswordSettingsPtr(_result, false);
}

#pragma implementation_key(650)
inline HRESULT SFTPCOMINTERFACELib::ICISite::SetResetPasswordSettings ( struct ICIResetPasswordSettings * pIResetPasswordSettings ) {
    HRESULT _hr = raw_SetResetPasswordSettings(pIResetPasswordSettings);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(651)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetEnablePasswordHistory ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnablePasswordHistory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(652)
inline void SFTPCOMINTERFACELib::ICISite::PutEnablePasswordHistory ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnablePasswordHistory(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(653)
inline long SFTPCOMINTERFACELib::ICISite::GetPasswordHistorySize ( ) {
    long _result = 0;
    HRESULT _hr = get_PasswordHistorySize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(654)
inline void SFTPCOMINTERFACELib::ICISite::PutPasswordHistorySize ( long pVal ) {
    HRESULT _hr = put_PasswordHistorySize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(655)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetAllowUPVariables ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowUPVariables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(656)
inline void SFTPCOMINTERFACELib::ICISite::PutAllowUPVariables ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AllowUPVariables(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(657)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetAllowEmailLoginCredentials ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowEmailLoginCredentials(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(658)
inline void SFTPCOMINTERFACELib::ICISite::PutAllowEmailLoginCredentials ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AllowEmailLoginCredentials(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(659)
inline SFTPCOMINTERFACELib::EMailLoginCredentialsMode SFTPCOMINTERFACELib::ICISite::GetEMailLoginCredentialsMode ( ) {
    EMailLoginCredentialsMode _result;
    HRESULT _hr = get_EMailLoginCredentialsMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(660)
inline void SFTPCOMINTERFACELib::ICISite::PutEMailLoginCredentialsMode ( EMailLoginCredentialsMode pVal ) {
    HRESULT _hr = put_EMailLoginCredentialsMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(661)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetInactiveAccountsMonitoring ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InactiveAccountsMonitoring(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(662)
inline void SFTPCOMINTERFACELib::ICISite::PutInactiveAccountsMonitoring ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_InactiveAccountsMonitoring(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(663)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetRemoveInactiveAccounts ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RemoveInactiveAccounts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(664)
inline void SFTPCOMINTERFACELib::ICISite::PutRemoveInactiveAccounts ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RemoveInactiveAccounts(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(665)
inline long SFTPCOMINTERFACELib::ICISite::GetMaxInactivePeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxInactivePeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(666)
inline void SFTPCOMINTERFACELib::ICISite::PutMaxInactivePeriod ( long pVal ) {
    HRESULT _hr = put_MaxInactivePeriod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(667)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetAS2Identifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AS2Identifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(668)
inline void SFTPCOMINTERFACELib::ICISite::PutAS2Identifier ( _bstr_t pVal ) {
    HRESULT _hr = put_AS2Identifier(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(669)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetAS2Certificate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AS2Certificate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(670)
inline void SFTPCOMINTERFACELib::ICISite::PutAS2Certificate ( _bstr_t pVal ) {
    HRESULT _hr = put_AS2Certificate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(671)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetAS2PrivateKey ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AS2PrivateKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(672)
inline void SFTPCOMINTERFACELib::ICISite::PutAS2PrivateKey ( _bstr_t pVal ) {
    HRESULT _hr = put_AS2PrivateKey(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(673)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetAS2Passphrase ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AS2Passphrase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(674)
inline void SFTPCOMINTERFACELib::ICISite::PutAS2Passphrase ( _bstr_t pVal ) {
    HRESULT _hr = put_AS2Passphrase(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(675)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetAS2AccountManagementPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AS2AccountManagementPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(676)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetEnableAS2 ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableAS2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(677)
inline void SFTPCOMINTERFACELib::ICISite::PutEnableAS2 ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableAS2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(678)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::UnlockUser ( _bstr_t bstrUserName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_UnlockUser(bstrUserName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(679)
inline SFTPCOMINTERFACELib::ICIDMZGatewayPtr SFTPCOMINTERFACELib::ICISite::GetDMZGateway ( ) {
    struct ICIDMZGateway * _result = 0;
    HRESULT _hr = raw_GetDMZGateway(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICIDMZGatewayPtr(_result, false);
}

#pragma implementation_key(680)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetDMZConnected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DMZConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(681)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetSFTPKeyFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SFTPKeyFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(682)
inline void SFTPCOMINTERFACELib::ICISite::PutSFTPKeyFile ( _bstr_t pVal ) {
    HRESULT _hr = put_SFTPKeyFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(683)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetSFTPKeyPassphrase ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SFTPKeyPassphrase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(684)
inline void SFTPCOMINTERFACELib::ICISite::PutSFTPKeyPassphrase ( _bstr_t pVal ) {
    HRESULT _hr = put_SFTPKeyPassphrase(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(685)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetSFTPEncodingAlgorithms ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SFTPEncodingAlgorithms(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(686)
inline void SFTPCOMINTERFACELib::ICISite::PutSFTPEncodingAlgorithms ( _bstr_t pVal ) {
    HRESULT _hr = put_SFTPEncodingAlgorithms(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(687)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetSFTPMacAlgorithms ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SFTPMacAlgorithms(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(688)
inline void SFTPCOMINTERFACELib::ICISite::PutSFTPMacAlgorithms ( _bstr_t pVal ) {
    HRESULT _hr = put_SFTPMacAlgorithms(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(689)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetSFTPSoftwareVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SFTPSoftwareVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(690)
inline void SFTPCOMINTERFACELib::ICISite::PutSFTPSoftwareVersion ( _bstr_t pVal ) {
    HRESULT _hr = put_SFTPSoftwareVersion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(691)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetSFTPIdentificationComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SFTPIdentificationComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(692)
inline void SFTPCOMINTERFACELib::ICISite::PutSFTPIdentificationComment ( _bstr_t pVal ) {
    HRESULT _hr = put_SFTPIdentificationComment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(693)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetSFTPPublicKeyBlob ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SFTPPublicKeyBlob(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(694)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::IsFolderVirtual ( _bstr_t bstrFolderAlias ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsFolderVirtual(bstrFolderAlias, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(695)
inline HRESULT SFTPCOMINTERFACELib::ICISite::EnableInheritPermissions ( _bstr_t bstrFolder, VARIANT_BOOL bRemovePerm ) {
    HRESULT _hr = raw_EnableInheritPermissions(bstrFolder, bRemovePerm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(696)
inline HRESULT SFTPCOMINTERFACELib::ICISite::DisableInheritPermissions ( _bstr_t bstrFolder, VARIANT_BOOL bRemovePerm ) {
    HRESULT _hr = raw_DisableInheritPermissions(bstrFolder, bRemovePerm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(697)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::IsEncrypted ( _bstr_t bstrFolder ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsEncrypted(bstrFolder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(698)
inline HRESULT SFTPCOMINTERFACELib::ICISite::EncryptFolder ( _bstr_t bstrFolder, VARIANT_BOOL vbResursively ) {
    HRESULT _hr = raw_EncryptFolder(bstrFolder, vbResursively);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(699)
inline HRESULT SFTPCOMINTERFACELib::ICISite::DecryptFolder ( _bstr_t bstrFolder, VARIANT_BOOL vbResursively ) {
    HRESULT _hr = raw_DecryptFolder(bstrFolder, vbResursively);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(700)
inline HRESULT SFTPCOMINTERFACELib::ICISite::ResetSubFolders ( _bstr_t bstrFolder ) {
    HRESULT _hr = raw_ResetSubFolders(bstrFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(701)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::IsFolderInherited ( _bstr_t bstrFolder ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsFolderInherited(bstrFolder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(702)
inline _variant_t SFTPCOMINTERFACELib::ICISite::GetAS2Transactions ( VARIANT_BOOL vbShowSuccesses, VARIANT_BOOL vbShowFailures, VARIANT_BOOL vbShowInProgress, _bstr_t bstrMessageIDFilter, _bstr_t bstrFileNameFilter, long lLastDays ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetAS2Transactions(vbShowSuccesses, vbShowFailures, vbShowInProgress, bstrMessageIDFilter, bstrFileNameFilter, lLastDays, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(703)
inline IDispatchPtr SFTPCOMINTERFACELib::ICISite::GetAMParams ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetAMParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(704)
inline HRESULT SFTPCOMINTERFACELib::ICISite::SetAMParams ( IDispatch * newVal ) {
    HRESULT _hr = raw_SetAMParams(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(705)
inline HRESULT SFTPCOMINTERFACELib::ICISite::MoveIPAccessRule ( long nRulePosFrom, long nRulePosTo ) {
    HRESULT _hr = raw_MoveIPAccessRule(nRulePosFrom, nRulePosTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(706)
inline HRESULT SFTPCOMINTERFACELib::ICISite::UnbanIP ( _bstr_t bstrMask ) {
    HRESULT _hr = raw_UnbanIP(bstrMask);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(707)
inline _variant_t SFTPCOMINTERFACELib::ICISite::GetConnectedUsers ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ConnectedUsers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(708)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::GetRSAConfigurationPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RSAConfigurationPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(709)
inline void SFTPCOMINTERFACELib::ICISite::PutRSAConfigurationPath ( _bstr_t pVal ) {
    HRESULT _hr = put_RSAConfigurationPath(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(710)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetAllowFXP ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetAllowFXP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(711)
inline HRESULT SFTPCOMINTERFACELib::ICISite::SetAllowFXP ( VARIANT_BOOL newVal ) {
    HRESULT _hr = raw_SetAllowFXP(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(712)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetAllowNoop ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetAllowNoop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(713)
inline HRESULT SFTPCOMINTERFACELib::ICISite::SetAllowNoop ( VARIANT_BOOL newVal ) {
    HRESULT _hr = raw_SetAllowNoop(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(714)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetAllowCOMB ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetAllowCOMB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(715)
inline HRESULT SFTPCOMINTERFACELib::ICISite::SetAllowCOMB ( VARIANT_BOOL newVal ) {
    HRESULT _hr = raw_SetAllowCOMB(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(716)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISite::GetAllowXCRC ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetAllowXCRC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(717)
inline HRESULT SFTPCOMINTERFACELib::ICISite::SetAllowXCRC ( VARIANT_BOOL newVal ) {
    HRESULT _hr = raw_SetAllowXCRC(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(718)
inline _bstr_t SFTPCOMINTERFACELib::ICISite::CreateComplexPasswordEx ( const _variant_t & bstrUserName, const _variant_t & bstrSettingsLevel ) {
    BSTR _result = 0;
    HRESULT _hr = raw_CreateComplexPasswordEx(bstrUserName, bstrSettingsLevel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ICISites wrapper method implementations
//

#pragma implementation_key(719)
inline SFTPCOMINTERFACELib::ICISitePtr SFTPCOMINTERFACELib::ICISites::Item ( long nIndex ) {
    struct ICISite * _result = 0;
    HRESULT _hr = raw_Item(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICISitePtr(_result, false);
}

#pragma implementation_key(720)
inline long SFTPCOMINTERFACELib::ICISites::Count ( ) {
    long _result = 0;
    HRESULT _hr = raw_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(721)
inline SFTPCOMINTERFACELib::ICISitePtr SFTPCOMINTERFACELib::ICISites::SiteByID ( long ID ) {
    struct ICISite * _result = 0;
    HRESULT _hr = raw_SiteByID(ID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICISitePtr(_result, false);
}

#pragma implementation_key(722)
inline SFTPCOMINTERFACELib::ICISitePtr SFTPCOMINTERFACELib::ICISites::Add ( _bstr_t bstrName, _bstr_t bstrRootFolder, int nAMID, _bstr_t bstrAMDB, VARIANT_BOOL bEncryptPasswords, int nIP, long nPort, VARIANT_BOOL bCreateHomeFolder, VARIANT_BOOL bPermHomeFolder, VARIANT_BOOL bAutoStart, VARIANT_BOOL bCreateFTPFolders ) {
    struct ICISite * _result = 0;
    HRESULT _hr = raw_Add(bstrName, bstrRootFolder, nAMID, bstrAMDB, bEncryptPasswords, nIP, nPort, bCreateHomeFolder, bPermHomeFolder, bAutoStart, bCreateFTPFolders, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICISitePtr(_result, false);
}

#pragma implementation_key(723)
inline SFTPCOMINTERFACELib::ICISitePtr SFTPCOMINTERFACELib::ICISites::AddNTLMSite ( _bstr_t bstrName, _bstr_t bstrRootFolder, _bstr_t bstrDomainName, _bstr_t bstrAllowGroup, int nIP, long nPort, VARIANT_BOOL bCreateHomeFolder, VARIANT_BOOL bPermHomeFolder, VARIANT_BOOL bAutoStart, VARIANT_BOOL bCreateFTPFolders ) {
    struct ICISite * _result = 0;
    HRESULT _hr = raw_AddNTLMSite(bstrName, bstrRootFolder, bstrDomainName, bstrAllowGroup, nIP, nPort, bCreateHomeFolder, bPermHomeFolder, bAutoStart, bCreateFTPFolders, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICISitePtr(_result, false);
}

#pragma implementation_key(724)
inline SFTPCOMINTERFACELib::ICISitePtr SFTPCOMINTERFACELib::ICISites::AddADSite ( _bstr_t bstrName, _bstr_t bstrRootFolder, _bstr_t bstrDomainContext, _bstr_t bstrAllowGroup, int nIP, long nPort, VARIANT_BOOL bCreateHomeFolder, VARIANT_BOOL bPermHomeFolder, VARIANT_BOOL bAutoStart, VARIANT_BOOL bCreateFTPFolders ) {
    struct ICISite * _result = 0;
    HRESULT _hr = raw_AddADSite(bstrName, bstrRootFolder, bstrDomainContext, bstrAllowGroup, nIP, nPort, bCreateHomeFolder, bPermHomeFolder, bAutoStart, bCreateFTPFolders, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICISitePtr(_result, false);
}

#pragma implementation_key(725)
inline SFTPCOMINTERFACELib::ICISitePtr SFTPCOMINTERFACELib::ICISites::AddODBCSite ( _bstr_t bstrName, _bstr_t bstrRootFolder, _bstr_t bstrDSN, VARIANT_BOOL bEncryptPasswords, int nIP, long nPort, VARIANT_BOOL bCreateHomeFolder, VARIANT_BOOL bPermHomeFolder, VARIANT_BOOL bAutoStart, VARIANT_BOOL bCreateFTPFolders ) {
    struct ICISite * _result = 0;
    HRESULT _hr = raw_AddODBCSite(bstrName, bstrRootFolder, bstrDSN, bEncryptPasswords, nIP, nPort, bCreateHomeFolder, bPermHomeFolder, bAutoStart, bCreateFTPFolders, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICISitePtr(_result, false);
}

#pragma implementation_key(726)
inline SFTPCOMINTERFACELib::ICISitePtr SFTPCOMINTERFACELib::ICISites::AddLocalSite ( _bstr_t bstrName, _bstr_t bstrRootFolder, _bstr_t bstrFilePath, int nIP, long nPort, VARIANT_BOOL bCreateHomeFolder, VARIANT_BOOL bPermHomeFolder, VARIANT_BOOL bAutoStart, VARIANT_BOOL bCreateFTPFolders ) {
    struct ICISite * _result = 0;
    HRESULT _hr = raw_AddLocalSite(bstrName, bstrRootFolder, bstrFilePath, nIP, nPort, bCreateHomeFolder, bPermHomeFolder, bAutoStart, bCreateFTPFolders, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICISitePtr(_result, false);
}

#pragma implementation_key(727)
inline SFTPCOMINTERFACELib::ICISitePtr SFTPCOMINTERFACELib::ICISites::AddLDAPSite ( _bstr_t bstrName, _bstr_t bstrRootFolder, _bstr_t bstrDomainContext, int nIP, long nPort, VARIANT_BOOL bCreateHomeFolder, VARIANT_BOOL bPermHomeFolder, VARIANT_BOOL bAutoStart, VARIANT_BOOL bCreateFTPFolders ) {
    struct ICISite * _result = 0;
    HRESULT _hr = raw_AddLDAPSite(bstrName, bstrRootFolder, bstrDomainContext, nIP, nPort, bCreateHomeFolder, bPermHomeFolder, bAutoStart, bCreateFTPFolders, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICISitePtr(_result, false);
}

#pragma implementation_key(728)
inline SFTPCOMINTERFACELib::ICISitePtr SFTPCOMINTERFACELib::ICISites::AddEx ( _bstr_t bzName, _bstr_t bzRootFolder, IDispatch * pdispAuthManagerSettings, int lIP, long lPort, VARIANT_BOOL bCreateHomeFolder, VARIANT_BOOL bFullPermissionForHomeFolder, VARIANT_BOOL bAutoStart, VARIANT_BOOL bCreateFTPFolders ) {
    struct ICISite * _result = 0;
    HRESULT _hr = raw_AddEx(bzName, bzRootFolder, pdispAuthManagerSettings, lIP, lPort, bCreateHomeFolder, bFullPermissionForHomeFolder, bAutoStart, bCreateFTPFolders, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICISitePtr(_result, false);
}

//
// interface ICIAudit wrapper method implementations
//

#pragma implementation_key(729)
inline HRESULT SFTPCOMINTERFACELib::ICIAudit::AuditSATTransaction ( _bstr_t From, _bstr_t Subject, _bstr_t Body, _bstr_t TempUserName, _bstr_t TempPassword, _bstr_t SiteName, long ExpireDays, _bstr_t TransGUID, _bstr_t Reserved1, _bstr_t Reserved2 ) {
    HRESULT _hr = raw_AuditSATTransaction(From, Subject, Body, TempUserName, TempPassword, SiteName, ExpireDays, TransGUID, Reserved1, Reserved2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(730)
inline HRESULT SFTPCOMINTERFACELib::ICIAudit::AuditSATEmail ( _bstr_t Email, long EmailType, _bstr_t TransGUID ) {
    HRESULT _hr = raw_AuditSATEmail(Email, EmailType, TransGUID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(731)
inline HRESULT SFTPCOMINTERFACELib::ICIAudit::AuditSATFile ( _bstr_t FileName, __int64 FileSize, _bstr_t TransGUID ) {
    HRESULT _hr = raw_AuditSATFile(FileName, FileSize, TransGUID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICIServer wrapper method implementations
//

#pragma implementation_key(732)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::Connect ( _bstr_t Host, long nPort, _bstr_t Login, _bstr_t Password ) {
    HRESULT _hr = raw_Connect(Host, nPort, Login, Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(733)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(734)
inline SFTPCOMINTERFACELib::ICISitesPtr SFTPCOMINTERFACELib::ICIServer::Sites ( ) {
    struct ICISites * _result = 0;
    HRESULT _hr = raw_Sites(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICISitesPtr(_result, false);
}

#pragma implementation_key(735)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetLocalIP ( long nIP ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLocalIP(nIP, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(736)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetLocalTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLocalTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(737)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIServer::GetIPAccessAllowedDefault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IPAccessAllowedDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(738)
inline void SFTPCOMINTERFACELib::ICIServer::PutIPAccessAllowedDefault ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IPAccessAllowedDefault(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(739)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetLogPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LogPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(740)
inline void SFTPCOMINTERFACELib::ICIServer::PutLogPath ( _bstr_t pVal ) {
    HRESULT _hr = put_LogPath(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(741)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetCertificateFilePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CertificateFilePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(742)
inline void SFTPCOMINTERFACELib::ICIServer::PutCertificateFilePath ( _bstr_t pVal ) {
    HRESULT _hr = put_CertificateFilePath(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(743)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetKeyFilePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_KeyFilePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(744)
inline void SFTPCOMINTERFACELib::ICIServer::PutKeyFilePath ( _bstr_t pVal ) {
    HRESULT _hr = put_KeyFilePath(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(745)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetPassPhrase ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PassPhrase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(746)
inline void SFTPCOMINTERFACELib::ICIServer::PutPassPhrase ( _bstr_t pVal ) {
    HRESULT _hr = put_PassPhrase(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(747)
inline int SFTPCOMINTERFACELib::ICIServer::GetLogType ( ) {
    int _result = 0;
    HRESULT _hr = get_LogType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(748)
inline void SFTPCOMINTERFACELib::ICIServer::PutLogType ( int pVal ) {
    HRESULT _hr = put_LogType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(749)
inline int SFTPCOMINTERFACELib::ICIServer::GetLogRotation ( ) {
    int _result = 0;
    HRESULT _hr = get_LogRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(750)
inline void SFTPCOMINTERFACELib::ICIServer::PutLogRotation ( int pVal ) {
    HRESULT _hr = put_LogRotation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(751)
inline long SFTPCOMINTERFACELib::ICIServer::GetAdminPort ( ) {
    long _result = 0;
    HRESULT _hr = get_AdminPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(752)
inline void SFTPCOMINTERFACELib::ICIServer::PutAdminPort ( long pVal ) {
    HRESULT _hr = put_AdminPort(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(753)
inline long SFTPCOMINTERFACELib::ICIServer::GetListenIP ( ) {
    long _result = 0;
    HRESULT _hr = get_ListenIP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(754)
inline void SFTPCOMINTERFACELib::ICIServer::PutListenIP ( long pVal ) {
    HRESULT _hr = put_ListenIP(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(755)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIServer::GetAllowRemoteAdministration ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowRemoteAdministration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(756)
inline void SFTPCOMINTERFACELib::ICIServer::PutAllowRemoteAdministration ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AllowRemoteAdministration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(757)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIServer::GetUseSSLForAdministration ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSSLForAdministration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(758)
inline void SFTPCOMINTERFACELib::ICIServer::PutUseSSLForAdministration ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSSLForAdministration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(759)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetSMTPServer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SMTPServer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(760)
inline void SFTPCOMINTERFACELib::ICIServer::PutSMTPServer ( _bstr_t pVal ) {
    HRESULT _hr = put_SMTPServer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(761)
inline long SFTPCOMINTERFACELib::ICIServer::GetSMTPPort ( ) {
    long _result = 0;
    HRESULT _hr = get_SMTPPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(762)
inline void SFTPCOMINTERFACELib::ICIServer::PutSMTPPort ( long pVal ) {
    HRESULT _hr = put_SMTPPort(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(763)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetSMTPLogin ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SMTPLogin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(764)
inline void SFTPCOMINTERFACELib::ICIServer::PutSMTPLogin ( _bstr_t pVal ) {
    HRESULT _hr = put_SMTPLogin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(765)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetSMTPPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SMTPPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(766)
inline void SFTPCOMINTERFACELib::ICIServer::PutSMTPPassword ( _bstr_t pVal ) {
    HRESULT _hr = put_SMTPPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(767)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetSMTPSenderName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SMTPSenderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(768)
inline void SFTPCOMINTERFACELib::ICIServer::PutSMTPSenderName ( _bstr_t pVal ) {
    HRESULT _hr = put_SMTPSenderName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(769)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetSMTPSenderAddr ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SMTPSenderAddr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(770)
inline void SFTPCOMINTERFACELib::ICIServer::PutSMTPSenderAddr ( _bstr_t pVal ) {
    HRESULT _hr = put_SMTPSenderAddr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(771)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetSMTPRecipientName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SMTPRecipientName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(772)
inline void SFTPCOMINTERFACELib::ICIServer::PutSMTPRecipientName ( _bstr_t pVal ) {
    HRESULT _hr = put_SMTPRecipientName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(773)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetSMTPRecipientAddr ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SMTPRecipientAddr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(774)
inline void SFTPCOMINTERFACELib::ICIServer::PutSMTPRecipientAddr ( _bstr_t pVal ) {
    HRESULT _hr = put_SMTPRecipientAddr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(775)
inline _variant_t SFTPCOMINTERFACELib::ICIServer::GetIPAccessRules ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetIPAccessRules(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(776)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::AddIPAccessRule ( _bstr_t bstrMask, VARIANT_BOOL bAllow, long nRulePos ) {
    HRESULT _hr = raw_AddIPAccessRule(bstrMask, bAllow, nRulePos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(777)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::RemoveIPAccessRule ( long nRulePos ) {
    HRESULT _hr = raw_RemoveIPAccessRule(nRulePos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(778)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::SetSSLCertificate ( _bstr_t bzCertFilePath, _bstr_t bzKeyFilePath, _bstr_t bzPassPhrase ) {
    HRESULT _hr = raw_SetSSLCertificate(bzCertFilePath, bzKeyFilePath, bzPassPhrase);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(779)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::ApplyChanges ( ) {
    HRESULT _hr = raw_ApplyChanges();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(780)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIServer::GetEnableARM ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableARM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(781)
inline void SFTPCOMINTERFACELib::ICIServer::PutEnableARM ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableARM(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(782)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetARMServerName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ARMServerName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(783)
inline void SFTPCOMINTERFACELib::ICIServer::PutARMServerName ( _bstr_t pVal ) {
    HRESULT _hr = put_ARMServerName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(784)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetARMDatabaseName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ARMDatabaseName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(785)
inline void SFTPCOMINTERFACELib::ICIServer::PutARMDatabaseName ( _bstr_t pVal ) {
    HRESULT _hr = put_ARMDatabaseName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(786)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetARMUserName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ARMUserName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(787)
inline void SFTPCOMINTERFACELib::ICIServer::PutARMUserName ( _bstr_t pVal ) {
    HRESULT _hr = put_ARMUserName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(788)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetARMPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ARMPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(789)
inline void SFTPCOMINTERFACELib::ICIServer::PutARMPassword ( _bstr_t pVal ) {
    HRESULT _hr = put_ARMPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(790)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::RefreshSettings ( ) {
    HRESULT _hr = raw_RefreshSettings();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(791)
inline _variant_t SFTPCOMINTERFACELib::ICIServer::GetAdminIPs ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetAdminIPs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(792)
inline long SFTPCOMINTERFACELib::ICIServer::GetServerAdminCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetServerAdminCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(793)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::RemoveServerAdminAccount ( _bstr_t bstrAdminUser, AdminAccountType accountType ) {
    HRESULT _hr = raw_RemoveServerAdminAccount(bstrAdminUser, accountType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(794)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::ChangeAdminPassword ( _bstr_t bstrAdminUser, _bstr_t bstrNewPassword ) {
    HRESULT _hr = raw_ChangeAdminPassword(bstrAdminUser, bstrNewPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(795)
inline long SFTPCOMINTERFACELib::ICIServer::GetConnectedUsersNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_ConnectedUsersNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(796)
inline int SFTPCOMINTERFACELib::ICIServer::GetSSLVersionMask ( ) {
    int _result = 0;
    HRESULT _hr = get_SSLVersionMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(797)
inline void SFTPCOMINTERFACELib::ICIServer::PutSSLVersionMask ( int pVal ) {
    HRESULT _hr = put_SSLVersionMask(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(798)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIServer::GetAllowClearCommandChannel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowClearCommandChannel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(799)
inline void SFTPCOMINTERFACELib::ICIServer::PutAllowClearCommandChannel ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AllowClearCommandChannel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(800)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIServer::GetAllowUnprotectedDataChannel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowUnprotectedDataChannel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(801)
inline void SFTPCOMINTERFACELib::ICIServer::PutAllowUnprotectedDataChannel ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AllowUnprotectedDataChannel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(802)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetCipherList ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CipherList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(803)
inline void SFTPCOMINTERFACELib::ICIServer::PutCipherList ( _bstr_t pVal ) {
    HRESULT _hr = put_CipherList(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(804)
inline SFTPCOMINTERFACELib::ICIAuditPtr SFTPCOMINTERFACELib::ICIServer::Auditor ( ) {
    struct ICIAudit * _result = 0;
    HRESULT _hr = raw_Auditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICIAuditPtr(_result, false);
}

#pragma implementation_key(805)
inline SFTPCOMINTERFACELib::RegistrationState SFTPCOMINTERFACELib::ICIServer::ModuleRegistrationState ( ServerModule m ) {
    RegistrationState _result;
    HRESULT _hr = raw_ModuleRegistrationState(m, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(806)
inline _variant_t SFTPCOMINTERFACELib::ICIServer::GetAvailableReports ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AvailableReports(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(807)
inline _variant_t SFTPCOMINTERFACELib::ICIServer::GetAvailablePGPKeys ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AvailablePGPKeys(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(808)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::GenerateReport ( IDispatch * pdispReportParams, _bstr_t bzReportPath ) {
    HRESULT _hr = raw_GenerateReport(pdispReportParams, bzReportPath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(809)
inline _variant_t SFTPCOMINTERFACELib::ICIServer::GetAvailableEvents ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AvailableEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(810)
inline _variant_t SFTPCOMINTERFACELib::ICIServer::GetAvailableSSHKeys ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AvailableSSHKeys(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(811)
inline long SFTPCOMINTERFACELib::ICIServer::ImportSSHKey ( _bstr_t bstrKeyPath ) {
    long _result = 0;
    HRESULT _hr = raw_ImportSSHKey(bstrKeyPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(812)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::RemoveSSHKey ( long lID ) {
    HRESULT _hr = raw_RemoveSSHKey(lID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(813)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::ConnectEx ( _bstr_t Host, long nPort, AdminLoginType nLoginType, _bstr_t Login, _bstr_t Password ) {
    HRESULT _hr = raw_ConnectEx(Host, nPort, nLoginType, Login, Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(814)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIServer::StartServerService ( _bstr_t bstrHost ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_StartServerService(bstrHost, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(815)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIServer::StopServerService ( _bstr_t bstrHost ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_StopServerService(bstrHost, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(816)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIServer::IsServerServiceStarted ( _bstr_t bstrHost ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsServerServiceStarted(bstrHost, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(817)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::BackupServerConfiguration ( _bstr_t bstrFilePath ) {
    HRESULT _hr = raw_BackupServerConfiguration(bstrFilePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(818)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::RestoreServerConfiguration ( _bstr_t bstrFilePath, AdminLoginType nLoginType, _bstr_t bstrLogin, _bstr_t bstrPassword ) {
    HRESULT _hr = raw_RestoreServerConfiguration(bstrFilePath, nLoginType, bstrLogin, bstrPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(819)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(820)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::Start ( ) {
    HRESULT _hr = raw_Start();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(821)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIServer::GetIsStarted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsStarted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(822)
inline DATE SFTPCOMINTERFACELib::ICIServer::GetStartTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(823)
inline unsigned long SFTPCOMINTERFACELib::ICIServer::GetUptime ( ) {
    unsigned long _result = 0;
    HRESULT _hr = get_Uptime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(824)
inline DATE SFTPCOMINTERFACELib::ICIServer::GetLastModifiedTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModifiedTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(825)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetLastModifiedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastModifiedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(826)
inline long SFTPCOMINTERFACELib::ICIServer::GetActiveUploads ( ) {
    long _result = 0;
    HRESULT _hr = get_ActiveUploads(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(827)
inline long SFTPCOMINTERFACELib::ICIServer::GetActiveDownloads ( ) {
    long _result = 0;
    HRESULT _hr = get_ActiveDownloads(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(828)
inline long SFTPCOMINTERFACELib::ICIServer::GetAverageSpeed ( ) {
    long _result = 0;
    HRESULT _hr = get_AverageSpeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(829)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetConfigurationFilePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConfigurationFilePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(830)
inline void SFTPCOMINTERFACELib::ICIServer::PutConfigurationFilePath ( _bstr_t pVal ) {
    HRESULT _hr = put_ConfigurationFilePath(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(831)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIServer::GetUseUTCInListings ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseUTCInListings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(832)
inline void SFTPCOMINTERFACELib::ICIServer::PutUseUTCInListings ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseUTCInListings(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(833)
inline long SFTPCOMINTERFACELib::ICIServer::GetDefaultPollTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_DefaultPollTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(834)
inline void SFTPCOMINTERFACELib::ICIServer::PutDefaultPollTimeout ( long pVal ) {
    HRESULT _hr = put_DefaultPollTimeout(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(835)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::RenameSSHKey ( long lID, _bstr_t bstrNewName ) {
    HRESULT _hr = raw_RenameSSHKey(lID, bstrNewName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(836)
inline SFTPCOMINTERFACELib::LogMode SFTPCOMINTERFACELib::ICIServer::GetLogMode ( ) {
    LogMode _result;
    HRESULT _hr = get_LogMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(837)
inline void SFTPCOMINTERFACELib::ICIServer::PutLogMode ( LogMode pVal ) {
    HRESULT _hr = put_LogMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(838)
inline SFTPCOMINTERFACELib::ARMDatabaseType SFTPCOMINTERFACELib::ICIServer::GetARMDatabaseType ( ) {
    ARMDatabaseType _result;
    HRESULT _hr = get_ARMDatabaseType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(839)
inline void SFTPCOMINTERFACELib::ICIServer::PutARMDatabaseType ( ARMDatabaseType pVal ) {
    HRESULT _hr = put_ARMDatabaseType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(840)
inline SFTPCOMINTERFACELib::ARMAuthenticationType SFTPCOMINTERFACELib::ICIServer::GetARMAuthenticationType ( ) {
    ARMAuthenticationType _result;
    HRESULT _hr = get_ARMAuthenticationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(841)
inline void SFTPCOMINTERFACELib::ICIServer::PutARMAuthenticationType ( ARMAuthenticationType pVal ) {
    HRESULT _hr = put_ARMAuthenticationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(842)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIServer::GetARMStopAuditingOnError ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ARMStopAuditingOnError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(843)
inline void SFTPCOMINTERFACELib::ICIServer::PutARMStopAuditingOnError ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ARMStopAuditingOnError(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(844)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetARMFailureAuditFolder ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ARMFailureAuditFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(845)
inline void SFTPCOMINTERFACELib::ICIServer::PutARMFailureAuditFolder ( _bstr_t pVal ) {
    HRESULT _hr = put_ARMFailureAuditFolder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(846)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetARMFailureEmailList ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ARMFailureEmailList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(847)
inline void SFTPCOMINTERFACELib::ICIServer::PutARMFailureEmailList ( _bstr_t pVal ) {
    HRESULT _hr = put_ARMFailureEmailList(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(848)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIServer::GetSMTPUseAuthentication ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SMTPUseAuthentication(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(849)
inline void SFTPCOMINTERFACELib::ICIServer::PutSMTPUseAuthentication ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SMTPUseAuthentication(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(850)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::GetSMTPAddressBook ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SMTPAddressBook(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(851)
inline void SFTPCOMINTERFACELib::ICIServer::PutSMTPAddressBook ( _bstr_t pVal ) {
    HRESULT _hr = put_SMTPAddressBook(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(852)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIServer::GetSSLFIPSEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SSLFIPSEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(853)
inline void SFTPCOMINTERFACELib::ICIServer::PutSSLFIPSEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SSLFIPSEnabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(854)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIServer::GetSSHFIPSEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SSHFIPSEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(855)
inline void SFTPCOMINTERFACELib::ICIServer::PutSSHFIPSEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SSHFIPSEnabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(856)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::CreatePGPKey ( _bstr_t bstrFullName, _bstr_t bstrEmailAddress, DATE dtExpirationDate, PGPKeyType nKeyType, PGPKeyCipher nKeyCipher, long lKeySize, _bstr_t bstrPassphrase ) {
    BSTR _result = 0;
    HRESULT _hr = raw_CreatePGPKey(bstrFullName, bstrEmailAddress, dtExpirationDate, nKeyType, nKeyCipher, lKeySize, bstrPassphrase, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(857)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::RemovePGPKey ( _bstr_t bstrKeyId ) {
    HRESULT _hr = raw_RemovePGPKey(bstrKeyId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(858)
inline _bstr_t SFTPCOMINTERFACELib::ICIServer::ImportPGPKey ( _bstr_t bstrKeyPath ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ImportPGPKey(bstrKeyPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(859)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::ExportPGPKey ( _bstr_t bstrKeyId, VARIANT_BOOL vbIncludePrivate, _bstr_t bstrFileName ) {
    HRESULT _hr = raw_ExportPGPKey(bstrKeyId, vbIncludePrivate, bstrFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(860)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::GetPGPKeyringSettings ( VARIANT * pPublicPath, VARIANT * pPrivatePath ) {
    HRESULT _hr = raw_GetPGPKeyringSettings(pPublicPath, pPrivatePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(861)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::SetPGPKeyringSettings ( _bstr_t newPublicKeyring, _bstr_t newPrivateKeyring ) {
    HRESULT _hr = raw_SetPGPKeyringSettings(newPublicKeyring, newPrivateKeyring);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(862)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIServer::ARMTestConnection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ARMTestConnection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(863)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIServer::ARMReconnect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ARMReconnect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(864)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIServer::CreateAdmin ( _bstr_t bstrNewAdmin, _bstr_t bstrPassword, AdminAccountType atype, VARIANT_BOOL vbGroup ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_CreateAdmin(bstrNewAdmin, bstrPassword, atype, vbGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(865)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::CreateSSHKey ( long nKeyBits, _bstr_t bstrPassword, _bstr_t bstrPrivateKeyFile, _bstr_t bstrPublicKeyFile, VARIANT_BOOL vbComFormat, long nSiteId, _bstr_t bstrCopyTo ) {
    HRESULT _hr = raw_CreateSSHKey(nKeyBits, bstrPassword, bstrPrivateKeyFile, bstrPublicKeyFile, vbComFormat, nSiteId, bstrCopyTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(866)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::CreateSSLCertificate ( _bstr_t bstrKeyfile, _bstr_t bstrReqfile, _bstr_t bstrcertfile, _bstr_t bstrPassword, _bstr_t bstrCountryName, _bstr_t bstrStateOrProvinceName, _bstr_t bstrLocalityName, _bstr_t bstrOrganizationName, _bstr_t bstrOrganizationalUnitName, _bstr_t bstrCommonName, _bstr_t bstrEmailAddress, long nBits, long nDays, CertificateFormat CertFormat, CertificateFormat PrivateKeyFormat, long nSiteId, VARIANT_BOOL vbUseCert, VARIANT_BOOL vbMakeTrusted ) {
    HRESULT _hr = raw_CreateSSLCertificate(bstrKeyfile, bstrReqfile, bstrcertfile, bstrPassword, bstrCountryName, bstrStateOrProvinceName, bstrLocalityName, bstrOrganizationName, bstrOrganizationalUnitName, bstrCommonName, bstrEmailAddress, nBits, nDays, CertFormat, PrivateKeyFormat, nSiteId, vbUseCert, vbMakeTrusted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(867)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::SignSSLCertificate ( _bstr_t bstrRequest, _bstr_t bstrServCert, _bstr_t bstrPrivateKey, _bstr_t bstrPass, _bstr_t bstrOutCert, long nDays ) {
    HRESULT _hr = raw_SignSSLCertificate(bstrRequest, bstrServCert, bstrPrivateKey, bstrPass, bstrOutCert, nDays);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(868)
inline _variant_t SFTPCOMINTERFACELib::ICIServer::GetAdminAccounts ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AdminAccounts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(869)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIServer::GetAutoSave ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSave(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(870)
inline void SFTPCOMINTERFACELib::ICIServer::PutAutoSave ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AutoSave(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(871)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::MoveIPAccessRule ( long nRulePosFrom, long nRulePosTo ) {
    HRESULT _hr = raw_MoveIPAccessRule(nRulePosFrom, nRulePosTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(872)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::UnbanIP ( _bstr_t bstrMask ) {
    HRESULT _hr = raw_UnbanIP(bstrMask);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(873)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIServer::GetRequireStrongPasswords ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RequireStrongPasswords(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(874)
inline void SFTPCOMINTERFACELib::ICIServer::PutRequireStrongPasswords ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RequireStrongPasswords(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(875)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIServer::GetComplexPasswordSettings ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetComplexPasswordSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(876)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::SetComplexPasswordSettings ( IDispatch * pIComplexPasswordSettings ) {
    HRESULT _hr = raw_SetComplexPasswordSettings(pIComplexPasswordSettings);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(877)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIServer::GetBackupArchiveInfo ( _bstr_t bstrFilePath, AdminLoginType nLoginType, _bstr_t bstrLogin, _bstr_t bstrPassword ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetBackupArchiveInfo(bstrFilePath, nLoginType, bstrLogin, bstrPassword, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(878)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::RestoreServerConfigurationEx ( IDispatch * pVal ) {
    HRESULT _hr = raw_RestoreServerConfigurationEx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(879)
inline HRESULT SFTPCOMINTERFACELib::ICIServer::ExportSSHKey ( long lKeyID, _bstr_t bzKeyFilePath ) {
    HRESULT _hr = raw_ExportSSHKey(lKeyID, bzKeyFilePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICIPgpActionParams wrapper method implementations
//

#pragma implementation_key(880)
inline _bstr_t SFTPCOMINTERFACELib::ICIPgpActionParams::GetPassPhrase ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PassPhrase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(881)
inline void SFTPCOMINTERFACELib::ICIPgpActionParams::PutPassPhrase ( _bstr_t pVal ) {
    HRESULT _hr = put_PassPhrase(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(882)
inline _bstr_t SFTPCOMINTERFACELib::ICIPgpActionParams::GetFilePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FilePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(883)
inline void SFTPCOMINTERFACELib::ICIPgpActionParams::PutFilePath ( _bstr_t pVal ) {
    HRESULT _hr = put_FilePath(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(884)
inline _bstr_t SFTPCOMINTERFACELib::ICIPgpActionParams::GetSignKeyID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SignKeyID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(885)
inline void SFTPCOMINTERFACELib::ICIPgpActionParams::PutSignKeyID ( _bstr_t pVal ) {
    HRESULT _hr = put_SignKeyID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(886)
inline _variant_t SFTPCOMINTERFACELib::ICIPgpActionParams::GetKeyIDs ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_KeyIDs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(887)
inline void SFTPCOMINTERFACELib::ICIPgpActionParams::PutKeyIDs ( const _variant_t & pVal ) {
    HRESULT _hr = put_KeyIDs(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(888)
inline SFTPCOMINTERFACELib::PGPOperation SFTPCOMINTERFACELib::ICIPgpActionParams::GetOperation ( ) {
    PGPOperation _result;
    HRESULT _hr = get_Operation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(889)
inline void SFTPCOMINTERFACELib::ICIPgpActionParams::PutOperation ( PGPOperation pVal ) {
    HRESULT _hr = put_Operation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(890)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIPgpActionParams::GetASCIIArmoredOutput ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ASCIIArmoredOutput(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(891)
inline void SFTPCOMINTERFACELib::ICIPgpActionParams::PutASCIIArmoredOutput ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ASCIIArmoredOutput(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(892)
inline SFTPCOMINTERFACELib::PGPCompressionLevel SFTPCOMINTERFACELib::ICIPgpActionParams::GetCompressionLevel ( ) {
    PGPCompressionLevel _result;
    HRESULT _hr = get_CompressionLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(893)
inline void SFTPCOMINTERFACELib::ICIPgpActionParams::PutCompressionLevel ( PGPCompressionLevel pVal ) {
    HRESULT _hr = put_CompressionLevel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(894)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIPgpActionParams::GetSignatureInSeparateFile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SignatureInSeparateFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(895)
inline void SFTPCOMINTERFACELib::ICIPgpActionParams::PutSignatureInSeparateFile ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SignatureInSeparateFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(896)
inline SFTPCOMINTERFACELib::PGPSigningHash SFTPCOMINTERFACELib::ICIPgpActionParams::GetSigningHash ( ) {
    PGPSigningHash _result;
    HRESULT _hr = get_SigningHash(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(897)
inline void SFTPCOMINTERFACELib::ICIPgpActionParams::PutSigningHash ( PGPSigningHash pVal ) {
    HRESULT _hr = put_SigningHash(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(898)
inline _bstr_t SFTPCOMINTERFACELib::ICIPgpActionParams::GetSDAPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SDAPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(899)
inline void SFTPCOMINTERFACELib::ICIPgpActionParams::PutSDAPassword ( _bstr_t pVal ) {
    HRESULT _hr = put_SDAPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICIMailActionParams wrapper method implementations
//

#pragma implementation_key(900)
inline _bstr_t SFTPCOMINTERFACELib::ICIMailActionParams::GetTOAddresses ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TOAddresses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(901)
inline void SFTPCOMINTERFACELib::ICIMailActionParams::PutTOAddresses ( _bstr_t pVal ) {
    HRESULT _hr = put_TOAddresses(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(902)
inline _bstr_t SFTPCOMINTERFACELib::ICIMailActionParams::GetCCAddresses ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CCAddresses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(903)
inline void SFTPCOMINTERFACELib::ICIMailActionParams::PutCCAddresses ( _bstr_t pVal ) {
    HRESULT _hr = put_CCAddresses(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(904)
inline _bstr_t SFTPCOMINTERFACELib::ICIMailActionParams::GetBCCAddresses ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BCCAddresses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(905)
inline void SFTPCOMINTERFACELib::ICIMailActionParams::PutBCCAddresses ( _bstr_t pVal ) {
    HRESULT _hr = put_BCCAddresses(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(906)
inline _bstr_t SFTPCOMINTERFACELib::ICIMailActionParams::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(907)
inline void SFTPCOMINTERFACELib::ICIMailActionParams::PutSubject ( _bstr_t pVal ) {
    HRESULT _hr = put_Subject(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(908)
inline _bstr_t SFTPCOMINTERFACELib::ICIMailActionParams::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(909)
inline void SFTPCOMINTERFACELib::ICIMailActionParams::PutBody ( _bstr_t pVal ) {
    HRESULT _hr = put_Body(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(910)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIMailActionParams::GetCopyToClient ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CopyToClient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(911)
inline void SFTPCOMINTERFACELib::ICIMailActionParams::PutCopyToClient ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CopyToClient(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(912)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIMailActionParams::GetUseCustomFromAddress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomFromAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(913)
inline void SFTPCOMINTERFACELib::ICIMailActionParams::PutUseCustomFromAddress ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomFromAddress(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(914)
inline _bstr_t SFTPCOMINTERFACELib::ICIMailActionParams::GetCustomFromAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomFromAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(915)
inline void SFTPCOMINTERFACELib::ICIMailActionParams::PutCustomFromAddress ( _bstr_t pVal ) {
    HRESULT _hr = put_CustomFromAddress(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICITransferActionParams wrapper method implementations
//

#pragma implementation_key(916)
inline _bstr_t SFTPCOMINTERFACELib::ICITransferActionParams::GetLocalPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(917)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutLocalPath ( _bstr_t pVal ) {
    HRESULT _hr = put_LocalPath(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(918)
inline SFTPCOMINTERFACELib::NetworkProtocol SFTPCOMINTERFACELib::ICITransferActionParams::GetProtocol ( ) {
    NetworkProtocol _result;
    HRESULT _hr = get_Protocol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(919)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutProtocol ( NetworkProtocol pVal ) {
    HRESULT _hr = put_Protocol(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(920)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITransferActionParams::GetAutoLogin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoLogin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(921)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutAutoLogin ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AutoLogin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(922)
inline _bstr_t SFTPCOMINTERFACELib::ICITransferActionParams::GetUser ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_User(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(923)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutUser ( _bstr_t pVal ) {
    HRESULT _hr = put_User(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(924)
inline _bstr_t SFTPCOMINTERFACELib::ICITransferActionParams::GetPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Password(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(925)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutPassword ( _bstr_t pVal ) {
    HRESULT _hr = put_Password(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(926)
inline _bstr_t SFTPCOMINTERFACELib::ICITransferActionParams::GetPrivateKeyPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrivateKeyPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(927)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutPrivateKeyPath ( _bstr_t pVal ) {
    HRESULT _hr = put_PrivateKeyPath(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(928)
inline _bstr_t SFTPCOMINTERFACELib::ICITransferActionParams::GetPrivateKeyPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrivateKeyPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(929)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutPrivateKeyPassword ( _bstr_t pVal ) {
    HRESULT _hr = put_PrivateKeyPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(930)
inline _bstr_t SFTPCOMINTERFACELib::ICITransferActionParams::GetPublicKeyPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PublicKeyPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(931)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutPublicKeyPath ( _bstr_t pVal ) {
    HRESULT _hr = put_PublicKeyPath(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(932)
inline _bstr_t SFTPCOMINTERFACELib::ICITransferActionParams::GetHost ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Host(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(933)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutHost ( _bstr_t pVal ) {
    HRESULT _hr = put_Host(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(934)
inline long SFTPCOMINTERFACELib::ICITransferActionParams::GetPort ( ) {
    long _result = 0;
    HRESULT _hr = get_Port(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(935)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutPort ( long pVal ) {
    HRESULT _hr = put_Port(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(936)
inline _bstr_t SFTPCOMINTERFACELib::ICITransferActionParams::GetRemotePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemotePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(937)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutRemotePath ( _bstr_t pVal ) {
    HRESULT _hr = put_RemotePath(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(938)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITransferActionParams::GetDeleteSourceFile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DeleteSourceFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(939)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutDeleteSourceFile ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DeleteSourceFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(940)
inline long SFTPCOMINTERFACELib::ICITransferActionParams::GetMaxConcurrentThreads ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxConcurrentThreads(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(941)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutMaxConcurrentThreads ( long pVal ) {
    HRESULT _hr = put_MaxConcurrentThreads(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(942)
inline long SFTPCOMINTERFACELib::ICITransferActionParams::GetConnectionTimeoutSeconds ( ) {
    long _result = 0;
    HRESULT _hr = get_ConnectionTimeoutSeconds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(943)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutConnectionTimeoutSeconds ( long pVal ) {
    HRESULT _hr = put_ConnectionTimeoutSeconds(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(944)
inline long SFTPCOMINTERFACELib::ICITransferActionParams::GetConnectionRetryAttempts ( ) {
    long _result = 0;
    HRESULT _hr = get_ConnectionRetryAttempts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(945)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutConnectionRetryAttempts ( long pVal ) {
    HRESULT _hr = put_ConnectionRetryAttempts(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(946)
inline long SFTPCOMINTERFACELib::ICITransferActionParams::GetRetryDelaySeconds ( ) {
    long _result = 0;
    HRESULT _hr = get_RetryDelaySeconds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(947)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutRetryDelaySeconds ( long pVal ) {
    HRESULT _hr = put_RetryDelaySeconds(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(948)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITransferActionParams::GetValidateIntegrity ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ValidateIntegrity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(949)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutValidateIntegrity ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ValidateIntegrity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(950)
inline SFTPCOMINTERFACELib::FTPDataConnectionMode SFTPCOMINTERFACELib::ICITransferActionParams::GetFTPDataConnectionMode ( ) {
    FTPDataConnectionMode _result;
    HRESULT _hr = get_FTPDataConnectionMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(951)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutFTPDataConnectionMode ( FTPDataConnectionMode pVal ) {
    HRESULT _hr = put_FTPDataConnectionMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(952)
inline long SFTPCOMINTERFACELib::ICITransferActionParams::GetFTPDataConnectionPortMin ( ) {
    long _result = 0;
    HRESULT _hr = get_FTPDataConnectionPortMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(953)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutFTPDataConnectionPortMin ( long pVal ) {
    HRESULT _hr = put_FTPDataConnectionPortMin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(954)
inline long SFTPCOMINTERFACELib::ICITransferActionParams::GetFTPDataConnectionPortMax ( ) {
    long _result = 0;
    HRESULT _hr = get_FTPDataConnectionPortMax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(955)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutFTPDataConnectionPortMax ( long pVal ) {
    HRESULT _hr = put_FTPDataConnectionPortMax(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(956)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITransferActionParams::GetFTPSClearCommandChannel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FTPSClearCommandChannel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(957)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutFTPSClearCommandChannel ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FTPSClearCommandChannel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(958)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITransferActionParams::GetFTPSClearDataChannel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FTPSClearDataChannel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(959)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutFTPSClearDataChannel ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FTPSClearDataChannel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(960)
inline _bstr_t SFTPCOMINTERFACELib::ICITransferActionParams::GetTextFileTypes ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextFileTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(961)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutTextFileTypes ( _bstr_t pVal ) {
    HRESULT _hr = put_TextFileTypes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(962)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITransferActionParams::GetPreserveFileTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PreserveFileTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(963)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutPreserveFileTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PreserveFileTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(964)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITransferActionParams::GetUseProxy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseProxy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(965)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutUseProxy ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseProxy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(966)
inline SFTPCOMINTERFACELib::ProxyType SFTPCOMINTERFACELib::ICITransferActionParams::GetProxyType ( ) {
    ProxyType _result;
    HRESULT _hr = get_ProxyType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(967)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutProxyType ( ProxyType pVal ) {
    HRESULT _hr = put_ProxyType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(968)
inline _bstr_t SFTPCOMINTERFACELib::ICITransferActionParams::GetProxyHostName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProxyHostName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(969)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutProxyHostName ( _bstr_t pVal ) {
    HRESULT _hr = put_ProxyHostName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(970)
inline long SFTPCOMINTERFACELib::ICITransferActionParams::GetProxyPort ( ) {
    long _result = 0;
    HRESULT _hr = get_ProxyPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(971)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutProxyPort ( long pVal ) {
    HRESULT _hr = put_ProxyPort(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(972)
inline _bstr_t SFTPCOMINTERFACELib::ICITransferActionParams::GetProxyUserName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProxyUserName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(973)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutProxyUserName ( _bstr_t pVal ) {
    HRESULT _hr = put_ProxyUserName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(974)
inline _bstr_t SFTPCOMINTERFACELib::ICITransferActionParams::GetProxyPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProxyPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(975)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutProxyPassword ( _bstr_t pVal ) {
    HRESULT _hr = put_ProxyPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(976)
inline SFTPCOMINTERFACELib::ProxyAuthenticationType SFTPCOMINTERFACELib::ICITransferActionParams::GetProxyAdvAuthenticationType ( ) {
    ProxyAuthenticationType _result;
    HRESULT _hr = get_ProxyAdvAuthenticationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(977)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutProxyAdvAuthenticationType ( ProxyAuthenticationType pVal ) {
    HRESULT _hr = put_ProxyAdvAuthenticationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(978)
inline _bstr_t SFTPCOMINTERFACELib::ICITransferActionParams::GetProxyAdvSeparator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProxyAdvSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(979)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutProxyAdvSeparator ( _bstr_t pVal ) {
    HRESULT _hr = put_ProxyAdvSeparator(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(980)
inline _bstr_t SFTPCOMINTERFACELib::ICITransferActionParams::GetProxyAdvCustomCmds ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProxyAdvCustomCmds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(981)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutProxyAdvCustomCmds ( _bstr_t pVal ) {
    HRESULT _hr = put_ProxyAdvCustomCmds(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(982)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITransferActionParams::GetUseSOCKS ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSOCKS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(983)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutUseSOCKS ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSOCKS(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(984)
inline SFTPCOMINTERFACELib::SOCKSType SFTPCOMINTERFACELib::ICITransferActionParams::GetSOCKSType ( ) {
    SOCKSType _result;
    HRESULT _hr = get_SOCKSType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(985)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutSOCKSType ( SOCKSType pVal ) {
    HRESULT _hr = put_SOCKSType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(986)
inline _bstr_t SFTPCOMINTERFACELib::ICITransferActionParams::GetSOCKSHostName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SOCKSHostName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(987)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutSOCKSHostName ( _bstr_t pVal ) {
    HRESULT _hr = put_SOCKSHostName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(988)
inline long SFTPCOMINTERFACELib::ICITransferActionParams::GetSOCKSPort ( ) {
    long _result = 0;
    HRESULT _hr = get_SOCKSPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(989)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutSOCKSPort ( long pVal ) {
    HRESULT _hr = put_SOCKSPort(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(990)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITransferActionParams::GetSOCKSUseAuthentication ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SOCKSUseAuthentication(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(991)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutSOCKSUseAuthentication ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SOCKSUseAuthentication(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(992)
inline _bstr_t SFTPCOMINTERFACELib::ICITransferActionParams::GetSOCKSUserName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SOCKSUserName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(993)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutSOCKSUserName ( _bstr_t pVal ) {
    HRESULT _hr = put_SOCKSUserName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(994)
inline _bstr_t SFTPCOMINTERFACELib::ICITransferActionParams::GetSOCKSPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SOCKSPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(995)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutSOCKSPassword ( _bstr_t pVal ) {
    HRESULT _hr = put_SOCKSPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(996)
inline SFTPCOMINTERFACELib::TransferOverwriteType SFTPCOMINTERFACELib::ICITransferActionParams::GetOverwriteType ( ) {
    TransferOverwriteType _result;
    HRESULT _hr = get_OverwriteType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(997)
inline void SFTPCOMINTERFACELib::ICITransferActionParams::PutOverwriteType ( TransferOverwriteType pVal ) {
    HRESULT _hr = put_OverwriteType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICICleanupActionParams wrapper method implementations
//

#pragma implementation_key(998)
inline _bstr_t SFTPCOMINTERFACELib::ICICleanupActionParams::GetFolder ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Folder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(999)
inline void SFTPCOMINTERFACELib::ICICleanupActionParams::PutFolder ( _bstr_t pVal ) {
    HRESULT _hr = put_Folder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1000)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICICleanupActionParams::GetRecursive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Recursive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1001)
inline void SFTPCOMINTERFACELib::ICICleanupActionParams::PutRecursive ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Recursive(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1002)
inline _bstr_t SFTPCOMINTERFACELib::ICICleanupActionParams::GetFileMask ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1003)
inline void SFTPCOMINTERFACELib::ICICleanupActionParams::PutFileMask ( _bstr_t pVal ) {
    HRESULT _hr = put_FileMask(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1004)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICICleanupActionParams::GetExcludeFileMask ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExcludeFileMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1005)
inline void SFTPCOMINTERFACELib::ICICleanupActionParams::PutExcludeFileMask ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ExcludeFileMask(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1006)
inline long SFTPCOMINTERFACELib::ICICleanupActionParams::GetDaysToKeepFiles ( ) {
    long _result = 0;
    HRESULT _hr = get_DaysToKeepFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1007)
inline void SFTPCOMINTERFACELib::ICICleanupActionParams::PutDaysToKeepFiles ( long pVal ) {
    HRESULT _hr = put_DaysToKeepFiles(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICIReportActionParams wrapper method implementations
//

#pragma implementation_key(1008)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIReportActionParams::GetReport ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Report(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1009)
inline void SFTPCOMINTERFACELib::ICIReportActionParams::PutReport ( IDispatch * pVal ) {
    HRESULT _hr = put_Report(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1010)
inline SFTPCOMINTERFACELib::ReportPeriodType SFTPCOMINTERFACELib::ICIReportActionParams::GetDateFormat ( ) {
    ReportPeriodType _result;
    HRESULT _hr = get_DateFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1011)
inline void SFTPCOMINTERFACELib::ICIReportActionParams::PutDateFormat ( ReportPeriodType pVal ) {
    HRESULT _hr = put_DateFormat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1012)
inline SFTPCOMINTERFACELib::PredefinedReportPeriod SFTPCOMINTERFACELib::ICIReportActionParams::GetCustomDate ( ) {
    PredefinedReportPeriod _result;
    HRESULT _hr = get_CustomDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1013)
inline void SFTPCOMINTERFACELib::ICIReportActionParams::PutCustomDate ( PredefinedReportPeriod pVal ) {
    HRESULT _hr = put_CustomDate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1014)
inline _variant_t SFTPCOMINTERFACELib::ICIReportActionParams::GetFromDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FromDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1015)
inline void SFTPCOMINTERFACELib::ICIReportActionParams::PutFromDate ( const _variant_t & pVal ) {
    HRESULT _hr = put_FromDate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1016)
inline _variant_t SFTPCOMINTERFACELib::ICIReportActionParams::GetToDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ToDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1017)
inline void SFTPCOMINTERFACELib::ICIReportActionParams::PutToDate ( const _variant_t & pVal ) {
    HRESULT _hr = put_ToDate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1018)
inline SFTPCOMINTERFACELib::ReportFormat SFTPCOMINTERFACELib::ICIReportActionParams::GetReportFileFormat ( ) {
    ReportFormat _result;
    HRESULT _hr = get_ReportFileFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1019)
inline void SFTPCOMINTERFACELib::ICIReportActionParams::PutReportFileFormat ( ReportFormat pVal ) {
    HRESULT _hr = put_ReportFileFormat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1020)
inline _bstr_t SFTPCOMINTERFACELib::ICIReportActionParams::GetOptionalParameters ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OptionalParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1021)
inline void SFTPCOMINTERFACELib::ICIReportActionParams::PutOptionalParameters ( _bstr_t pVal ) {
    HRESULT _hr = put_OptionalParameters(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1022)
inline _bstr_t SFTPCOMINTERFACELib::ICIReportActionParams::GetFilterField1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FilterField1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1023)
inline void SFTPCOMINTERFACELib::ICIReportActionParams::PutFilterField1 ( _bstr_t pVal ) {
    HRESULT _hr = put_FilterField1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1024)
inline _bstr_t SFTPCOMINTERFACELib::ICIReportActionParams::GetFilterField2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FilterField2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1025)
inline void SFTPCOMINTERFACELib::ICIReportActionParams::PutFilterField2 ( _bstr_t pVal ) {
    HRESULT _hr = put_FilterField2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1026)
inline SFTPCOMINTERFACELib::ReportFilterOperator SFTPCOMINTERFACELib::ICIReportActionParams::GetFilterOperator1 ( ) {
    ReportFilterOperator _result;
    HRESULT _hr = get_FilterOperator1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1027)
inline void SFTPCOMINTERFACELib::ICIReportActionParams::PutFilterOperator1 ( ReportFilterOperator pVal ) {
    HRESULT _hr = put_FilterOperator1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1028)
inline SFTPCOMINTERFACELib::ReportFilterOperator SFTPCOMINTERFACELib::ICIReportActionParams::GetFilterOperator2 ( ) {
    ReportFilterOperator _result;
    HRESULT _hr = get_FilterOperator2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1029)
inline void SFTPCOMINTERFACELib::ICIReportActionParams::PutFilterOperator2 ( ReportFilterOperator pVal ) {
    HRESULT _hr = put_FilterOperator2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1030)
inline _bstr_t SFTPCOMINTERFACELib::ICIReportActionParams::GetFilterValue1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FilterValue1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1031)
inline void SFTPCOMINTERFACELib::ICIReportActionParams::PutFilterValue1 ( _bstr_t pVal ) {
    HRESULT _hr = put_FilterValue1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1032)
inline _bstr_t SFTPCOMINTERFACELib::ICIReportActionParams::GetFilterValue2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FilterValue2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1033)
inline void SFTPCOMINTERFACELib::ICIReportActionParams::PutFilterValue2 ( _bstr_t pVal ) {
    HRESULT _hr = put_FilterValue2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1034)
inline SFTPCOMINTERFACELib::ReportFiltersCombiningOperator SFTPCOMINTERFACELib::ICIReportActionParams::GetFilterAndOr ( ) {
    ReportFiltersCombiningOperator _result;
    HRESULT _hr = get_FilterAndOr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1035)
inline void SFTPCOMINTERFACELib::ICIReportActionParams::PutFilterAndOr ( ReportFiltersCombiningOperator pVal ) {
    HRESULT _hr = put_FilterAndOr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICICommandActionParams wrapper method implementations
//

#pragma implementation_key(1036)
inline _bstr_t SFTPCOMINTERFACELib::ICICommandActionParams::GetCommand ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Command(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1037)
inline void SFTPCOMINTERFACELib::ICICommandActionParams::PutCommand ( _bstr_t pVal ) {
    HRESULT _hr = put_Command(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1038)
inline _bstr_t SFTPCOMINTERFACELib::ICICommandActionParams::GetParameters ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Parameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1039)
inline void SFTPCOMINTERFACELib::ICICommandActionParams::PutParameters ( _bstr_t pVal ) {
    HRESULT _hr = put_Parameters(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1040)
inline _bstr_t SFTPCOMINTERFACELib::ICICommandActionParams::GetWorkingFolder ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WorkingFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1041)
inline void SFTPCOMINTERFACELib::ICICommandActionParams::PutWorkingFolder ( _bstr_t pVal ) {
    HRESULT _hr = put_WorkingFolder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICIStopActionParams wrapper method implementations
//

#pragma implementation_key(1042)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIStopActionParams::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1043)
inline void SFTPCOMINTERFACELib::ICIStopActionParams::PutEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1044)
inline SFTPCOMINTERFACELib::StopType SFTPCOMINTERFACELib::ICIStopActionParams::GetAction ( ) {
    StopType _result;
    HRESULT _hr = get_Action(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1045)
inline void SFTPCOMINTERFACELib::ICIStopActionParams::PutAction ( StopType pVal ) {
    HRESULT _hr = put_Action(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICIBackupActionParams wrapper method implementations
//

#pragma implementation_key(1046)
inline _bstr_t SFTPCOMINTERFACELib::ICIBackupActionParams::GetFolder ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Folder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1047)
inline void SFTPCOMINTERFACELib::ICIBackupActionParams::PutFolder ( _bstr_t pVal ) {
    HRESULT _hr = put_Folder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICIAWTaskActionParams wrapper method implementations
//

#pragma implementation_key(1048)
inline _bstr_t SFTPCOMINTERFACELib::ICIAWTaskActionParams::GetTaskName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TaskName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1049)
inline void SFTPCOMINTERFACELib::ICIAWTaskActionParams::PutTaskName ( _bstr_t pVal ) {
    HRESULT _hr = put_TaskName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1050)
inline long SFTPCOMINTERFACELib::ICIAWTaskActionParams::GetVariablesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_VariablesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1051)
inline _bstr_t SFTPCOMINTERFACELib::ICIAWTaskActionParams::GetVariableName ( long nIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetVariableName(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1052)
inline _bstr_t SFTPCOMINTERFACELib::ICIAWTaskActionParams::GetVariableValue ( long nIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetVariableValue(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1053)
inline HRESULT SFTPCOMINTERFACELib::ICIAWTaskActionParams::RemoveVariable ( long nIndex ) {
    HRESULT _hr = raw_RemoveVariable(nIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1054)
inline HRESULT SFTPCOMINTERFACELib::ICIAWTaskActionParams::AddVariable ( _bstr_t bstrVarName, _bstr_t bstrVarValue ) {
    HRESULT _hr = raw_AddVariable(bstrVarName, bstrVarValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1055)
inline HRESULT SFTPCOMINTERFACELib::ICIAWTaskActionParams::SetVariable ( long nIndex, _bstr_t bstrVarName, _bstr_t bstrVarValue ) {
    HRESULT _hr = raw_SetVariable(nIndex, bstrVarName, bstrVarValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICIAS2SendActionParams wrapper method implementations
//

#pragma implementation_key(1056)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetLocalPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1057)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutLocalPath ( _bstr_t pVal ) {
    HRESULT _hr = put_LocalPath(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1058)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetUseClientProfile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseClientProfile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1059)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutUseClientProfile ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseClientProfile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1060)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetClientProfile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClientProfile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1061)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutClientProfile ( _bstr_t pVal ) {
    HRESULT _hr = put_ClientProfile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1062)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetDeleteSourceFile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DeleteSourceFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1063)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutDeleteSourceFile ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DeleteSourceFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1064)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetHost ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Host(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1065)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutHost ( _bstr_t pVal ) {
    HRESULT _hr = put_Host(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1066)
inline long SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetPort ( ) {
    long _result = 0;
    HRESULT _hr = get_Port(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1067)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutPort ( long pVal ) {
    HRESULT _hr = put_Port(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1068)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetRemotePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemotePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1069)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutRemotePath ( _bstr_t pVal ) {
    HRESULT _hr = put_RemotePath(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1070)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetUser ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_User(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1071)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutUser ( _bstr_t pVal ) {
    HRESULT _hr = put_User(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1072)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Password(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1073)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutPassword ( _bstr_t pVal ) {
    HRESULT _hr = put_Password(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1074)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1075)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutSubject ( _bstr_t pVal ) {
    HRESULT _hr = put_Subject(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1076)
inline SFTPCOMINTERFACELib::AS2ContentType SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetContentType ( ) {
    AS2ContentType _result;
    HRESULT _hr = get_ContentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1077)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutContentType ( AS2ContentType pVal ) {
    HRESULT _hr = put_ContentType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1078)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetCompress ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Compress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1079)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutCompress ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Compress(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1080)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetEncrypt ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Encrypt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1081)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutEncrypt ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Encrypt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1082)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetSign ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1083)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutSign ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Sign(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1084)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetPartnerCertificatePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PartnerCertificatePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1085)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutPartnerCertificatePath ( _bstr_t pVal ) {
    HRESULT _hr = put_PartnerCertificatePath(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1086)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetAS2ID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AS2ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1087)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutAS2ID ( _bstr_t pVal ) {
    HRESULT _hr = put_AS2ID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1088)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetPartnerAS2ID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PartnerAS2ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1089)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutPartnerAS2ID ( _bstr_t pVal ) {
    HRESULT _hr = put_PartnerAS2ID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1090)
inline SFTPCOMINTERFACELib::AS2ReceiptPolicy SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetReceiptPolicy ( ) {
    AS2ReceiptPolicy _result;
    HRESULT _hr = get_ReceiptPolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1091)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutReceiptPolicy ( AS2ReceiptPolicy pVal ) {
    HRESULT _hr = put_ReceiptPolicy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1092)
inline SFTPCOMINTERFACELib::AS2ReceiptDelivery SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetReceiptDelivery ( ) {
    AS2ReceiptDelivery _result;
    HRESULT _hr = get_ReceiptDelivery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1093)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutReceiptDelivery ( AS2ReceiptDelivery pVal ) {
    HRESULT _hr = put_ReceiptDelivery(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1094)
inline long SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetTimeoutSec ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeoutSec(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1095)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutTimeoutSec ( long pVal ) {
    HRESULT _hr = put_TimeoutSec(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1096)
inline long SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetRetriesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RetriesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1097)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutRetriesCount ( long pVal ) {
    HRESULT _hr = put_RetriesCount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1098)
inline long SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetRetryDelaySec ( ) {
    long _result = 0;
    HRESULT _hr = get_RetryDelaySec(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1099)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutRetryDelaySec ( long pVal ) {
    HRESULT _hr = put_RetryDelaySec(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1100)
inline long SFTPCOMINTERFACELib::ICIAS2SendActionParams::GetAsyncReceiptTimeoutMin ( ) {
    long _result = 0;
    HRESULT _hr = get_AsyncReceiptTimeoutMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1101)
inline void SFTPCOMINTERFACELib::ICIAS2SendActionParams::PutAsyncReceiptTimeoutMin ( long pVal ) {
    HRESULT _hr = put_AsyncReceiptTimeoutMin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICIWindowsEventLogActionParams wrapper method implementations
//

#pragma implementation_key(1102)
inline SFTPCOMINTERFACELib::EventLogType SFTPCOMINTERFACELib::ICIWindowsEventLogActionParams::Gettype ( ) {
    EventLogType _result;
    HRESULT _hr = get_type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1103)
inline void SFTPCOMINTERFACELib::ICIWindowsEventLogActionParams::Puttype ( EventLogType pVal ) {
    HRESULT _hr = put_type(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1104)
inline _bstr_t SFTPCOMINTERFACELib::ICIWindowsEventLogActionParams::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1105)
inline void SFTPCOMINTERFACELib::ICIWindowsEventLogActionParams::PutDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_Description(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICIEventRules wrapper method implementations
//

#pragma implementation_key(1106)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIEventRules::Item ( long lIndex ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1107)
inline HRESULT SFTPCOMINTERFACELib::ICIEventRules::Delete ( long lIndex ) {
    HRESULT _hr = raw_Delete(lIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1108)
inline long SFTPCOMINTERFACELib::ICIEventRules::Count ( ) {
    long _result = 0;
    HRESULT _hr = raw_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1109)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIEventRules::Add ( long lIndex, IDispatch * pdispParams ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Add(lIndex, pdispParams, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1110)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIEventRules::Find ( _bstr_t strName ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Find(strName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface ICIEventRule wrapper method implementations
//

#pragma implementation_key(1111)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIEventRule::Statement ( long lIndex ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Statement(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1112)
inline long SFTPCOMINTERFACELib::ICIEventRule::StatementsCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_StatementsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1113)
inline HRESULT SFTPCOMINTERFACELib::ICIEventRule::DeleteStatement ( long lIndex ) {
    HRESULT _hr = raw_DeleteStatement(lIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1114)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIEventRule::GetParams ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1115)
inline HRESULT SFTPCOMINTERFACELib::ICIEventRule::SetParams ( IDispatch * newVal ) {
    HRESULT _hr = raw_SetParams(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1116)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIEventRule::AddActionStatement ( long lIndex, IDispatch * pdispParams ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_AddActionStatement(lIndex, pdispParams, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1117)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIEventRule::AddIfStatement ( long lIndex, EventProperty property, ConditionOperator op, const _variant_t & varConditionValue, VARIANT_BOOL bNot ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_AddIfStatement(lIndex, property, op, varConditionValue, bNot, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface ICIEventRuleStatement wrapper method implementations
//

#pragma implementation_key(1118)
inline SFTPCOMINTERFACELib::EventRuleStatementType SFTPCOMINTERFACELib::ICIEventRuleStatement::Gettype ( ) {
    EventRuleStatementType _result;
    HRESULT _hr = get_type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICIIfStatement wrapper method implementations
//

#pragma implementation_key(1119)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIIfStatement::GetIfSection ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_IfSection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1120)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIIfStatement::GetElseSection ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ElseSection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1121)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIIfStatement::GetCondition ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Condition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface ICIActionStatement wrapper method implementations
//

#pragma implementation_key(1122)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIActionStatement::FailSection ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_FailSection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1123)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIActionStatement::Action ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Action(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface ICIActionStatements wrapper method implementations
//

#pragma implementation_key(1124)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIActionStatements::Item ( long lIndex ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1125)
inline long SFTPCOMINTERFACELib::ICIActionStatements::Count ( ) {
    long _result = 0;
    HRESULT _hr = raw_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1126)
inline HRESULT SFTPCOMINTERFACELib::ICIActionStatements::Delete ( long lIndex ) {
    HRESULT _hr = raw_Delete(lIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1127)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIActionStatements::Add ( long lIndex, IDispatch * pdispActionParams ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Add(lIndex, pdispActionParams, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface ICIEventAction wrapper method implementations
//

#pragma implementation_key(1128)
inline SFTPCOMINTERFACELib::EventActionType SFTPCOMINTERFACELib::ICIEventAction::Gettype ( ) {
    EventActionType _result;
    HRESULT _hr = get_type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1129)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIEventAction::GetParams ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1130)
inline HRESULT SFTPCOMINTERFACELib::ICIEventAction::SetParams ( IDispatch * pdispParams ) {
    HRESULT _hr = raw_SetParams(pdispParams);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICIEventActions wrapper method implementations
//

#pragma implementation_key(1131)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIEventActions::Item ( long lIndex ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1132)
inline long SFTPCOMINTERFACELib::ICIEventActions::Count ( ) {
    long _result = 0;
    HRESULT _hr = raw_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1133)
inline HRESULT SFTPCOMINTERFACELib::ICIEventActions::Delete ( long lIndex ) {
    HRESULT _hr = raw_Delete(lIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1134)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIEventActions::Add ( long lIndex, IDispatch * pdispParams ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Add(lIndex, pdispParams, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface ICICompoundCondition wrapper method implementations
//

#pragma implementation_key(1135)
inline SFTPCOMINTERFACELib::LogicalOperator SFTPCOMINTERFACELib::ICICompoundCondition::GetOperator ( ) {
    LogicalOperator _result;
    HRESULT _hr = get_Operator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1136)
inline void SFTPCOMINTERFACELib::ICICompoundCondition::PutOperator ( LogicalOperator pVal ) {
    HRESULT _hr = put_Operator(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1137)
inline IDispatchPtr SFTPCOMINTERFACELib::ICICompoundCondition::Item ( long lIndex ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1138)
inline IDispatchPtr SFTPCOMINTERFACELib::ICICompoundCondition::Add ( EventProperty property, ConditionOperator op, const _variant_t & varValue, VARIANT_BOOL bNot ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Add(property, op, varValue, bNot, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1139)
inline HRESULT SFTPCOMINTERFACELib::ICICompoundCondition::Delete ( long lIndex ) {
    HRESULT _hr = raw_Delete(lIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1140)
inline long SFTPCOMINTERFACELib::ICICompoundCondition::Count ( ) {
    long _result = 0;
    HRESULT _hr = raw_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICISimpleCondition wrapper method implementations
//

#pragma implementation_key(1141)
inline SFTPCOMINTERFACELib::ConditionOperator SFTPCOMINTERFACELib::ICISimpleCondition::GetOperator ( ) {
    ConditionOperator _result;
    HRESULT _hr = get_Operator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1142)
inline void SFTPCOMINTERFACELib::ICISimpleCondition::PutOperator ( ConditionOperator pVal ) {
    HRESULT _hr = put_Operator(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1143)
inline _variant_t SFTPCOMINTERFACELib::ICISimpleCondition::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1144)
inline void SFTPCOMINTERFACELib::ICISimpleCondition::PutValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_Value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1145)
inline SFTPCOMINTERFACELib::EventProperty SFTPCOMINTERFACELib::ICISimpleCondition::Getproperty ( ) {
    EventProperty _result;
    HRESULT _hr = get_property(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1146)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISimpleCondition::GetNot ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Not(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1147)
inline void SFTPCOMINTERFACELib::ICISimpleCondition::PutNot ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Not(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICIEventRuleParams wrapper method implementations
//

#pragma implementation_key(1148)
inline _bstr_t SFTPCOMINTERFACELib::ICIEventRuleParams::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1149)
inline void SFTPCOMINTERFACELib::ICIEventRuleParams::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1150)
inline _bstr_t SFTPCOMINTERFACELib::ICIEventRuleParams::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1151)
inline void SFTPCOMINTERFACELib::ICIEventRuleParams::PutDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_Description(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1152)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIEventRuleParams::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1153)
inline void SFTPCOMINTERFACELib::ICIEventRuleParams::PutEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICITimerEventRuleParams wrapper method implementations
//

#pragma implementation_key(1154)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetDailyEveryWeekDay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DailyEveryWeekDay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1155)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutDailyEveryWeekDay ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DailyEveryWeekDay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1156)
inline long SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetDailyDayPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_DailyDayPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1157)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutDailyDayPeriod ( long pVal ) {
    HRESULT _hr = put_DailyDayPeriod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1158)
inline long SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetWeeklyWeekPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_WeeklyWeekPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1159)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutWeeklyWeekPeriod ( long pVal ) {
    HRESULT _hr = put_WeeklyWeekPeriod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1160)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetWeeklySunday ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WeeklySunday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1161)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutWeeklySunday ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_WeeklySunday(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1162)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetWeeklyMonday ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WeeklyMonday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1163)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutWeeklyMonday ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_WeeklyMonday(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1164)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetWeeklyTuesday ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WeeklyTuesday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1165)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutWeeklyTuesday ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_WeeklyTuesday(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1166)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetWeeklyWednesday ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WeeklyWednesday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1167)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutWeeklyWednesday ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_WeeklyWednesday(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1168)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetWeeklyThursday ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WeeklyThursday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1169)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutWeeklyThursday ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_WeeklyThursday(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1170)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetWeeklyFriday ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WeeklyFriday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1171)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutWeeklyFriday ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_WeeklyFriday(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1172)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetWeeklySaturday ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WeeklySaturday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1173)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutWeeklySaturday ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_WeeklySaturday(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1174)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetMonthlyFixedDay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MonthlyFixedDay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1175)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutMonthlyFixedDay ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_MonthlyFixedDay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1176)
inline long SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetMonthlyDayPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_MonthlyDayPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1177)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutMonthlyDayPeriod ( long pVal ) {
    HRESULT _hr = put_MonthlyDayPeriod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1178)
inline long SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetMonthlyMonthPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_MonthlyMonthPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1179)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutMonthlyMonthPeriod ( long pVal ) {
    HRESULT _hr = put_MonthlyMonthPeriod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1180)
inline SFTPCOMINTERFACELib::Relation SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetMonthlyRelativeWeekday ( ) {
    Relation _result;
    HRESULT _hr = get_MonthlyRelativeWeekday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1181)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutMonthlyRelativeWeekday ( Relation pVal ) {
    HRESULT _hr = put_MonthlyRelativeWeekday(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1182)
inline SFTPCOMINTERFACELib::Weekday SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetMonthlyWeekday ( ) {
    Weekday _result;
    HRESULT _hr = get_MonthlyWeekday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1183)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutMonthlyWeekday ( Weekday pVal ) {
    HRESULT _hr = put_MonthlyWeekday(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1184)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetYearlyFixedDay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_YearlyFixedDay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1185)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutYearlyFixedDay ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_YearlyFixedDay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1186)
inline SFTPCOMINTERFACELib::Month SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetYearlyMonth ( ) {
    Month _result;
    HRESULT _hr = get_YearlyMonth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1187)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutYearlyMonth ( Month pVal ) {
    HRESULT _hr = put_YearlyMonth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1188)
inline long SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetYearlyDayPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_YearlyDayPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1189)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutYearlyDayPeriod ( long pVal ) {
    HRESULT _hr = put_YearlyDayPeriod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1190)
inline SFTPCOMINTERFACELib::Relation SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetYearlyRelativeWeekday ( ) {
    Relation _result;
    HRESULT _hr = get_YearlyRelativeWeekday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1191)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutYearlyRelativeWeekday ( Relation pVal ) {
    HRESULT _hr = put_YearlyRelativeWeekday(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1192)
inline SFTPCOMINTERFACELib::Weekday SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetYearlyWeekday ( ) {
    Weekday _result;
    HRESULT _hr = get_YearlyWeekday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1193)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutYearlyWeekday ( Weekday pVal ) {
    HRESULT _hr = put_YearlyWeekday(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1194)
inline SFTPCOMINTERFACELib::RepeatPattern SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetRepeatPattern ( ) {
    RepeatPattern _result;
    HRESULT _hr = get_RepeatPattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1195)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutRepeatPattern ( RepeatPattern pVal ) {
    HRESULT _hr = put_RepeatPattern(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1196)
inline long SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetRepeatRate ( ) {
    long _result = 0;
    HRESULT _hr = get_RepeatRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1197)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutRepeatRate ( long pVal ) {
    HRESULT _hr = put_RepeatRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1198)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetRepeatEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RepeatEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1199)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutRepeatEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RepeatEnabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1200)
inline _variant_t SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetDateTimeEnd ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DateTimeEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1201)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutDateTimeEnd ( const _variant_t & pVal ) {
    HRESULT _hr = put_DateTimeEnd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1202)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetTimeEndEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TimeEndEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1203)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutTimeEndEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TimeEndEnabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1204)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetDateEndEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DateEndEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1205)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutDateEndEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DateEndEnabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1206)
inline _bstr_t SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetRundayCalendar ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RundayCalendar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1207)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutRundayCalendar ( _bstr_t pVal ) {
    HRESULT _hr = put_RundayCalendar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1208)
inline _bstr_t SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetHolidayCalendar ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HolidayCalendar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1209)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutHolidayCalendar ( _bstr_t pVal ) {
    HRESULT _hr = put_HolidayCalendar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1210)
inline DATE SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetNextRun ( ) {
    DATE _result = 0;
    HRESULT _hr = get_NextRun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1211)
inline SFTPCOMINTERFACELib::Recurrence SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetRecurrence ( ) {
    Recurrence _result;
    HRESULT _hr = get_Recurrence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1212)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutRecurrence ( Recurrence pVal ) {
    HRESULT _hr = put_Recurrence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1213)
inline _variant_t SFTPCOMINTERFACELib::ICITimerEventRuleParams::GetDateTimeStart ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DateTimeStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1214)
inline void SFTPCOMINTERFACELib::ICITimerEventRuleParams::PutDateTimeStart ( const _variant_t & pVal ) {
    HRESULT _hr = put_DateTimeStart(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICIFolderMonitorEventRuleParams wrapper method implementations
//

#pragma implementation_key(1215)
inline long SFTPCOMINTERFACELib::ICIFolderMonitorEventRuleParams::GetCheckHealthInterval ( ) {
    long _result = 0;
    HRESULT _hr = get_CheckHealthInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1216)
inline void SFTPCOMINTERFACELib::ICIFolderMonitorEventRuleParams::PutCheckHealthInterval ( long pVal ) {
    HRESULT _hr = put_CheckHealthInterval(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1217)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIFolderMonitorEventRuleParams::GetCheckHealth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CheckHealth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1218)
inline void SFTPCOMINTERFACELib::ICIFolderMonitorEventRuleParams::PutCheckHealth ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CheckHealth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1219)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIFolderMonitorEventRuleParams::GetIncludeSubfolders ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeSubfolders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1220)
inline void SFTPCOMINTERFACELib::ICIFolderMonitorEventRuleParams::PutIncludeSubfolders ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncludeSubfolders(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1221)
inline _bstr_t SFTPCOMINTERFACELib::ICIFolderMonitorEventRuleParams::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1222)
inline void SFTPCOMINTERFACELib::ICIFolderMonitorEventRuleParams::PutPath ( _bstr_t pVal ) {
    HRESULT _hr = put_Path(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICIPGPKeyInfo wrapper method implementations
//

#pragma implementation_key(1223)
inline _bstr_t SFTPCOMINTERFACELib::ICIPGPKeyInfo::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1224)
inline _bstr_t SFTPCOMINTERFACELib::ICIPGPKeyInfo::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1225)
inline _bstr_t SFTPCOMINTERFACELib::ICIPGPKeyInfo::GetID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1226)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIPGPKeyInfo::GetPrivate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Private(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1227)
inline long SFTPCOMINTERFACELib::ICIPGPKeyInfo::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1228)
inline DATE SFTPCOMINTERFACELib::ICIPGPKeyInfo::GetCreationDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1229)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIPGPKeyInfo::GetNeverExpires ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NeverExpires(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1230)
inline DATE SFTPCOMINTERFACELib::ICIPGPKeyInfo::GetExpirationDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ExpirationDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICIReportInfo wrapper method implementations
//

#pragma implementation_key(1231)
inline _bstr_t SFTPCOMINTERFACELib::ICIReportInfo::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1232)
inline _bstr_t SFTPCOMINTERFACELib::ICIReportInfo::GetDefinitionPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefinitionPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ICIEventInfo wrapper method implementations
//

#pragma implementation_key(1233)
inline SFTPCOMINTERFACELib::EventType SFTPCOMINTERFACELib::ICIEventInfo::Gettype ( ) {
    EventType _result;
    HRESULT _hr = get_type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1234)
inline _bstr_t SFTPCOMINTERFACELib::ICIEventInfo::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ICISSHKeyInfo wrapper method implementations
//

#pragma implementation_key(1235)
inline long SFTPCOMINTERFACELib::ICISSHKeyInfo::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1236)
inline _bstr_t SFTPCOMINTERFACELib::ICISSHKeyInfo::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1237)
inline _bstr_t SFTPCOMINTERFACELib::ICISSHKeyInfo::GetFingerprint ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Fingerprint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ICIADAuthManagerSettings wrapper method implementations
//

#pragma implementation_key(1238)
inline SFTPCOMINTERFACELib::ADAuthManagerType SFTPCOMINTERFACELib::ICIADAuthManagerSettings::Gettype ( ) {
    ADAuthManagerType _result;
    HRESULT _hr = get_type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1239)
inline void SFTPCOMINTERFACELib::ICIADAuthManagerSettings::Puttype ( ADAuthManagerType pVal ) {
    HRESULT _hr = put_type(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1240)
inline _bstr_t SFTPCOMINTERFACELib::ICIADAuthManagerSettings::GetDomain ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Domain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1241)
inline void SFTPCOMINTERFACELib::ICIADAuthManagerSettings::PutDomain ( _bstr_t pVal ) {
    HRESULT _hr = put_Domain(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1242)
inline _bstr_t SFTPCOMINTERFACELib::ICIADAuthManagerSettings::GetGroup ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1243)
inline void SFTPCOMINTERFACELib::ICIADAuthManagerSettings::PutGroup ( _bstr_t pVal ) {
    HRESULT _hr = put_Group(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1244)
inline SFTPCOMINTERFACELib::ADAuthManagerLogonAttribute SFTPCOMINTERFACELib::ICIADAuthManagerSettings::GetLogonAttribute ( ) {
    ADAuthManagerLogonAttribute _result;
    HRESULT _hr = get_LogonAttribute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1245)
inline void SFTPCOMINTERFACELib::ICIADAuthManagerSettings::PutLogonAttribute ( ADAuthManagerLogonAttribute pVal ) {
    HRESULT _hr = put_LogonAttribute(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1246)
inline long SFTPCOMINTERFACELib::ICIADAuthManagerSettings::GetRefreshIntervalMinutes ( ) {
    long _result = 0;
    HRESULT _hr = get_RefreshIntervalMinutes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1247)
inline void SFTPCOMINTERFACELib::ICIADAuthManagerSettings::PutRefreshIntervalMinutes ( long pVal ) {
    HRESULT _hr = put_RefreshIntervalMinutes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1248)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIADAuthManagerSettings::GetAssignHomeFolderFromUserProfile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AssignHomeFolderFromUserProfile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1249)
inline void SFTPCOMINTERFACELib::ICIADAuthManagerSettings::PutAssignHomeFolderFromUserProfile ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AssignHomeFolderFromUserProfile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1250)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIADAuthManagerSettings::GetSkipDomainPrefix ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SkipDomainPrefix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1251)
inline void SFTPCOMINTERFACELib::ICIADAuthManagerSettings::PutSkipDomainPrefix ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SkipDomainPrefix(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICIGSAuthManagerSettings wrapper method implementations
//

#pragma implementation_key(1252)
inline _bstr_t SFTPCOMINTERFACELib::ICIGSAuthManagerSettings::GetUserDatabasePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserDatabasePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1253)
inline void SFTPCOMINTERFACELib::ICIGSAuthManagerSettings::PutUserDatabasePath ( _bstr_t pVal ) {
    HRESULT _hr = put_UserDatabasePath(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1254)
inline long SFTPCOMINTERFACELib::ICIGSAuthManagerSettings::GetRefreshIntervalMinutes ( ) {
    long _result = 0;
    HRESULT _hr = get_RefreshIntervalMinutes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1255)
inline void SFTPCOMINTERFACELib::ICIGSAuthManagerSettings::PutRefreshIntervalMinutes ( long pVal ) {
    HRESULT _hr = put_RefreshIntervalMinutes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICIODBCAuthManagerSettings wrapper method implementations
//

#pragma implementation_key(1256)
inline _bstr_t SFTPCOMINTERFACELib::ICIODBCAuthManagerSettings::GetUserDatabaseConnectionString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserDatabaseConnectionString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1257)
inline void SFTPCOMINTERFACELib::ICIODBCAuthManagerSettings::PutUserDatabaseConnectionString ( _bstr_t pVal ) {
    HRESULT _hr = put_UserDatabaseConnectionString(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1258)
inline long SFTPCOMINTERFACELib::ICIODBCAuthManagerSettings::GetRefreshIntervalMinutes ( ) {
    long _result = 0;
    HRESULT _hr = get_RefreshIntervalMinutes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1259)
inline void SFTPCOMINTERFACELib::ICIODBCAuthManagerSettings::PutRefreshIntervalMinutes ( long pVal ) {
    HRESULT _hr = put_RefreshIntervalMinutes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICILDAPAuthManagerSettings wrapper method implementations
//

#pragma implementation_key(1260)
inline _bstr_t SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::GetServer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Server(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1261)
inline void SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::PutServer ( _bstr_t pVal ) {
    HRESULT _hr = put_Server(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1262)
inline long SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::GetPort ( ) {
    long _result = 0;
    HRESULT _hr = get_Port(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1263)
inline void SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::PutPort ( long pVal ) {
    HRESULT _hr = put_Port(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1264)
inline _bstr_t SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::GetBaseDN ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BaseDN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1265)
inline void SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::PutBaseDN ( _bstr_t pVal ) {
    HRESULT _hr = put_BaseDN(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1266)
inline _bstr_t SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::GetUserFilter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1267)
inline void SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::PutUserFilter ( _bstr_t pVal ) {
    HRESULT _hr = put_UserFilter(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1268)
inline _bstr_t SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::GetLoginAttribute ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LoginAttribute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1269)
inline void SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::PutLoginAttribute ( _bstr_t pVal ) {
    HRESULT _hr = put_LoginAttribute(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1270)
inline _bstr_t SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::GetServerUserName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ServerUserName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1271)
inline void SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::PutServerUserName ( _bstr_t pVal ) {
    HRESULT _hr = put_ServerUserName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1272)
inline _bstr_t SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::GetServerPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ServerPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1273)
inline void SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::PutServerPassword ( _bstr_t pVal ) {
    HRESULT _hr = put_ServerPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1274)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::GetUseSSL ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSSL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1275)
inline void SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::PutUseSSL ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSSL(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1276)
inline _bstr_t SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::GetAdditionalUserSettingsPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AdditionalUserSettingsPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1277)
inline void SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::PutAdditionalUserSettingsPath ( _bstr_t pVal ) {
    HRESULT _hr = put_AdditionalUserSettingsPath(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1278)
inline long SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::GetRefreshIntervalMinutes ( ) {
    long _result = 0;
    HRESULT _hr = get_RefreshIntervalMinutes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1279)
inline void SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::PutRefreshIntervalMinutes ( long pVal ) {
    HRESULT _hr = put_RefreshIntervalMinutes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1280)
inline long SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::GetTimeoutSeconds ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeoutSeconds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1281)
inline void SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::PutTimeoutSeconds ( long pVal ) {
    HRESULT _hr = put_TimeoutSeconds(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1282)
inline SFTPCOMINTERFACELib::LDAPSearchScope SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::GetSearchScope ( ) {
    LDAPSearchScope _result;
    HRESULT _hr = get_SearchScope(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1283)
inline void SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::PutSearchScope ( LDAPSearchScope pVal ) {
    HRESULT _hr = put_SearchScope(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1284)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::GetChaseReferrals ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ChaseReferrals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1285)
inline void SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::PutChaseReferrals ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ChaseReferrals(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1286)
inline SFTPCOMINTERFACELib::LDAPVersion SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::GetLDAPVersion ( ) {
    LDAPVersion _result;
    HRESULT _hr = get_LDAPVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1287)
inline void SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::PutLDAPVersion ( LDAPVersion pVal ) {
    HRESULT _hr = put_LDAPVersion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1288)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::GetUsePageControl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsePageControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1289)
inline void SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::PutUsePageControl ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UsePageControl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1290)
inline long SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::GetPageSizeEntries ( ) {
    long _result = 0;
    HRESULT _hr = get_PageSizeEntries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1291)
inline void SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::PutPageSizeEntries ( long pVal ) {
    HRESULT _hr = put_PageSizeEntries(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1292)
inline _bstr_t SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::GetSearchAttributes ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SearchAttributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1293)
inline void SFTPCOMINTERFACELib::ICILDAPAuthManagerSettings::PutSearchAttributes ( _bstr_t pVal ) {
    HRESULT _hr = put_SearchAttributes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICIAS2TransactionInfo wrapper method implementations
//

#pragma implementation_key(1294)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2TransactionInfo::GetTransactionID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TransactionID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1295)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2TransactionInfo::GetMessageID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1296)
inline DATE SFTPCOMINTERFACELib::ICIAS2TransactionInfo::GetTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1297)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2TransactionInfo::GetFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_File(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1298)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2TransactionInfo::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1299)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2TransactionInfo::GetRemoteHost ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteHost(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1300)
inline SFTPCOMINTERFACELib::AS2TransactionStatus SFTPCOMINTERFACELib::ICIAS2TransactionInfo::GetStatus ( ) {
    AS2TransactionStatus _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1301)
inline SFTPCOMINTERFACELib::AS2TransactionDirection SFTPCOMINTERFACELib::ICIAS2TransactionInfo::GetDirection ( ) {
    AS2TransactionDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1302)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2TransactionInfo::GetFrom ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_From(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1303)
inline _bstr_t SFTPCOMINTERFACELib::ICIAS2TransactionInfo::GetTo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_To(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ICIAdminAccount wrapper method implementations
//

#pragma implementation_key(1304)
inline _bstr_t SFTPCOMINTERFACELib::ICIAdminAccount::GetLogin ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Login(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1305)
inline SFTPCOMINTERFACELib::AdminAccountType SFTPCOMINTERFACELib::ICIAdminAccount::Gettype ( ) {
    AdminAccountType _result;
    HRESULT _hr = get_type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1306)
inline IDispatchPtr SFTPCOMINTERFACELib::ICIAdminAccount::GetPermission ( unsigned long nIndex ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetPermission(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1307)
inline unsigned long SFTPCOMINTERFACELib::ICIAdminAccount::GetPermissionsCount ( ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_GetPermissionsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1308)
inline HRESULT SFTPCOMINTERFACELib::ICIAdminAccount::AddPermission ( IDispatch * pIAdminPermission ) {
    HRESULT _hr = raw_AddPermission(pIAdminPermission);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1309)
inline HRESULT SFTPCOMINTERFACELib::ICIAdminAccount::RemovePermissionByIndex ( unsigned long nIndex ) {
    HRESULT _hr = raw_RemovePermissionByIndex(nIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1310)
inline HRESULT SFTPCOMINTERFACELib::ICIAdminAccount::RemovePermission ( IDispatch * pIAdminPermission ) {
    HRESULT _hr = raw_RemovePermission(pIAdminPermission);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1311)
inline HRESULT SFTPCOMINTERFACELib::ICIAdminAccount::RemoveAllPermissions ( ) {
    HRESULT _hr = raw_RemoveAllPermissions();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICIAdminPermission wrapper method implementations
//

#pragma implementation_key(1312)
inline SFTPCOMINTERFACELib::AdminPermissionsPolicy SFTPCOMINTERFACELib::ICIAdminPermission::GetPermission ( ) {
    AdminPermissionsPolicy _result;
    HRESULT _hr = get_Permission(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1313)
inline void SFTPCOMINTERFACELib::ICIAdminPermission::PutPermission ( AdminPermissionsPolicy pVal ) {
    HRESULT _hr = put_Permission(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1314)
inline _bstr_t SFTPCOMINTERFACELib::ICIAdminPermission::GetSiteName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SiteName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1315)
inline void SFTPCOMINTERFACELib::ICIAdminPermission::PutSiteName ( _bstr_t pVal ) {
    HRESULT _hr = put_SiteName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1316)
inline _bstr_t SFTPCOMINTERFACELib::ICIAdminPermission::GetTemplateName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TemplateName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1317)
inline void SFTPCOMINTERFACELib::ICIAdminPermission::PutTemplateName ( _bstr_t pVal ) {
    HRESULT _hr = put_TemplateName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICISiteBackupInfo wrapper method implementations
//

#pragma implementation_key(1318)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISiteBackupInfo::GetRestoreSite ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RestoreSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1319)
inline void SFTPCOMINTERFACELib::ICISiteBackupInfo::PutRestoreSite ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RestoreSite(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1320)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISiteBackupInfo::GetRestoreVFS ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RestoreVFS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1321)
inline void SFTPCOMINTERFACELib::ICISiteBackupInfo::PutRestoreVFS ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RestoreVFS(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1322)
inline _bstr_t SFTPCOMINTERFACELib::ICISiteBackupInfo::GetSiteName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SiteName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1323)
inline _bstr_t SFTPCOMINTERFACELib::ICISiteBackupInfo::GetRootFolder ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RootFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1324)
inline void SFTPCOMINTERFACELib::ICISiteBackupInfo::PutRootFolder ( _bstr_t pVal ) {
    HRESULT _hr = put_RootFolder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1325)
inline _bstr_t SFTPCOMINTERFACELib::ICISiteBackupInfo::GetAuthManagerID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AuthManagerID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1326)
inline void SFTPCOMINTERFACELib::ICISiteBackupInfo::PutAuthManagerID ( _bstr_t pVal ) {
    HRESULT _hr = put_AuthManagerID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1327)
inline _bstr_t SFTPCOMINTERFACELib::ICISiteBackupInfo::GetAuthManagerDataBase ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AuthManagerDataBase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1328)
inline void SFTPCOMINTERFACELib::ICISiteBackupInfo::PutAuthManagerDataBase ( _bstr_t pVal ) {
    HRESULT _hr = put_AuthManagerDataBase(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1329)
inline _bstr_t SFTPCOMINTERFACELib::ICISiteBackupInfo::GetListenIP ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ListenIP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1330)
inline _bstr_t SFTPCOMINTERFACELib::ICISiteBackupInfo::GetNewListenIP ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NewListenIP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1331)
inline void SFTPCOMINTERFACELib::ICISiteBackupInfo::PutNewListenIP ( _bstr_t pVal ) {
    HRESULT _hr = put_NewListenIP(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1332)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICISiteBackupInfo::GetDMZEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DMZEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1333)
inline void SFTPCOMINTERFACELib::ICISiteBackupInfo::PutDMZEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DMZEnabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1334)
inline _bstr_t SFTPCOMINTERFACELib::ICISiteBackupInfo::GetDMZAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DMZAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1335)
inline void SFTPCOMINTERFACELib::ICISiteBackupInfo::PutDMZAddress ( _bstr_t pVal ) {
    HRESULT _hr = put_DMZAddress(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1336)
inline long SFTPCOMINTERFACELib::ICISiteBackupInfo::GetDMZPort ( ) {
    long _result = 0;
    HRESULT _hr = get_DMZPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1337)
inline void SFTPCOMINTERFACELib::ICISiteBackupInfo::PutDMZPort ( long pVal ) {
    HRESULT _hr = put_DMZPort(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICIBackupArchiveInfo wrapper method implementations
//

#pragma implementation_key(1338)
inline _bstr_t SFTPCOMINTERFACELib::ICIBackupArchiveInfo::GetBackupArchivePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BackupArchivePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1339)
inline DATE SFTPCOMINTERFACELib::ICIBackupArchiveInfo::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1340)
inline _bstr_t SFTPCOMINTERFACELib::ICIBackupArchiveInfo::GetCreatedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CreatedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1341)
inline _bstr_t SFTPCOMINTERFACELib::ICIBackupArchiveInfo::Gettype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1342)
inline long SFTPCOMINTERFACELib::ICIBackupArchiveInfo::GetSitesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_SitesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1343)
inline SFTPCOMINTERFACELib::ICISiteBackupInfoPtr SFTPCOMINTERFACELib::ICIBackupArchiveInfo::GetSiteBackupInfo ( long nIndex ) {
    struct ICISiteBackupInfo * _result = 0;
    HRESULT _hr = raw_GetSiteBackupInfo(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICISiteBackupInfoPtr(_result, false);
}

#pragma implementation_key(1344)
inline HRESULT SFTPCOMINTERFACELib::ICIBackupArchiveInfo::SetSiteBackupInfo ( struct ICISiteBackupInfo * newVal ) {
    HRESULT _hr = raw_SetSiteBackupInfo(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1345)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIBackupArchiveInfo::GetEnableARM ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableARM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1346)
inline void SFTPCOMINTERFACELib::ICIBackupArchiveInfo::PutEnableARM ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableARM(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1347)
inline _bstr_t SFTPCOMINTERFACELib::ICIBackupArchiveInfo::GetARMServerName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ARMServerName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1348)
inline void SFTPCOMINTERFACELib::ICIBackupArchiveInfo::PutARMServerName ( _bstr_t pVal ) {
    HRESULT _hr = put_ARMServerName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1349)
inline _bstr_t SFTPCOMINTERFACELib::ICIBackupArchiveInfo::GetARMDatabaseName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ARMDatabaseName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1350)
inline void SFTPCOMINTERFACELib::ICIBackupArchiveInfo::PutARMDatabaseName ( _bstr_t pVal ) {
    HRESULT _hr = put_ARMDatabaseName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1351)
inline _bstr_t SFTPCOMINTERFACELib::ICIBackupArchiveInfo::GetARMUserName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ARMUserName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1352)
inline void SFTPCOMINTERFACELib::ICIBackupArchiveInfo::PutARMUserName ( _bstr_t pVal ) {
    HRESULT _hr = put_ARMUserName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1353)
inline _bstr_t SFTPCOMINTERFACELib::ICIBackupArchiveInfo::GetARMPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ARMPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1354)
inline void SFTPCOMINTERFACELib::ICIBackupArchiveInfo::PutARMPassword ( _bstr_t pVal ) {
    HRESULT _hr = put_ARMPassword(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1355)
inline SFTPCOMINTERFACELib::ARMDatabaseType SFTPCOMINTERFACELib::ICIBackupArchiveInfo::GetARMDatabaseType ( ) {
    ARMDatabaseType _result;
    HRESULT _hr = get_ARMDatabaseType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1356)
inline void SFTPCOMINTERFACELib::ICIBackupArchiveInfo::PutARMDatabaseType ( ARMDatabaseType pVal ) {
    HRESULT _hr = put_ARMDatabaseType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1357)
inline SFTPCOMINTERFACELib::ARMAuthenticationType SFTPCOMINTERFACELib::ICIBackupArchiveInfo::GetARMAuthenticationType ( ) {
    ARMAuthenticationType _result;
    HRESULT _hr = get_ARMAuthenticationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1358)
inline void SFTPCOMINTERFACELib::ICIBackupArchiveInfo::PutARMAuthenticationType ( ARMAuthenticationType pVal ) {
    HRESULT _hr = put_ARMAuthenticationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1359)
inline VARIANT_BOOL SFTPCOMINTERFACELib::ICIBackupArchiveInfo::GetARMStopAuditingOnError ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ARMStopAuditingOnError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1360)
inline void SFTPCOMINTERFACELib::ICIBackupArchiveInfo::PutARMStopAuditingOnError ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ARMStopAuditingOnError(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1361)
inline _bstr_t SFTPCOMINTERFACELib::ICIBackupArchiveInfo::GetARMFailureAuditFolder ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ARMFailureAuditFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1362)
inline void SFTPCOMINTERFACELib::ICIBackupArchiveInfo::PutARMFailureAuditFolder ( _bstr_t pVal ) {
    HRESULT _hr = put_ARMFailureAuditFolder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1363)
inline _bstr_t SFTPCOMINTERFACELib::ICIBackupArchiveInfo::GetARMFailureEmailList ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ARMFailureEmailList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1364)
inline void SFTPCOMINTERFACELib::ICIBackupArchiveInfo::PutARMFailureEmailList ( _bstr_t pVal ) {
    HRESULT _hr = put_ARMFailureEmailList(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICIConnectedUser wrapper method implementations
//

#pragma implementation_key(1365)
inline _bstr_t SFTPCOMINTERFACELib::ICIConnectedUser::GetLogin ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Login(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1366)
inline long SFTPCOMINTERFACELib::ICIConnectedUser::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1367)
inline _bstr_t SFTPCOMINTERFACELib::ICIConnectedUser::GetConnectionType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConnectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1368)
inline DATE SFTPCOMINTERFACELib::ICIConnectedUser::GetConnectedAt ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ConnectedAt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1369)
inline _bstr_t SFTPCOMINTERFACELib::ICIConnectedUser::GetIP ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1370)
inline _bstr_t SFTPCOMINTERFACELib::ICIConnectedUser::Gettype ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1371)
inline _bstr_t SFTPCOMINTERFACELib::ICIConnectedUser::GetStructure ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Structure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1372)
inline _bstr_t SFTPCOMINTERFACELib::ICIConnectedUser::GetTransferMode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TransferMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1373)
inline _bstr_t SFTPCOMINTERFACELib::ICIConnectedUser::GetDataConnection ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataConnection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1374)
inline _bstr_t SFTPCOMINTERFACELib::ICIConnectedUser::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1375)
inline __int64 SFTPCOMINTERFACELib::ICIConnectedUser::GetFileSize ( ) {
    __int64 _result = 0;
    HRESULT _hr = get_FileSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1376)
inline __int64 SFTPCOMINTERFACELib::ICIConnectedUser::GetTransferredSize ( ) {
    __int64 _result = 0;
    HRESULT _hr = get_TransferredSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1377)
inline long SFTPCOMINTERFACELib::ICIConnectedUser::GetTransferTime ( ) {
    long _result = 0;
    HRESULT _hr = get_TransferTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1378)
inline _bstr_t SFTPCOMINTERFACELib::ICIConnectedUser::GetLog ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Log(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}
