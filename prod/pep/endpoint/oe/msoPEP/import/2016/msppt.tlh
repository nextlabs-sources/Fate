// Created by Microsoft (R) C/C++ Compiler Version 15.00.30729.01 (b9324dab).
//
// c:\users\ccao.o390-ccao\desktop\test\test\release\msppt.tlh
//
// C++ source equivalent of Win32 type library C:\\Users\\ccao.O390-CCAO\\Desktop\\2016\\MSPPT.OLB
// compiler-generated file created 06/14/16 at 15:20:13 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//  #import "C:\Program Files (x86)\Common Files\Microsoft Shared\VBA\VBA6\VBE6EXT.OLB"
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace PowerPoint {

//
// Forward references and typedefs
//

struct __declspec(uuid("91493440-5a91-11cf-8700-00aa0060263b"))
/* LIBID */ __PowerPoint;
enum PpWindowState;
enum PpArrangeStyle;
enum PpViewType;
enum PpColorSchemeIndex;
enum PpSlideSizeType;
enum PpSaveAsFileType;
enum PpTextStyleType;
enum PpSlideLayout;
enum PpEntryEffect;
enum PpTextLevelEffect;
enum PpTextUnitEffect;
enum PpChartUnitEffect;
enum PpAfterEffect;
enum PpAdvanceMode;
enum PpSoundEffectType;
enum PpFollowColors;
enum PpUpdateOption;
enum PpParagraphAlignment;
enum PpBaselineAlignment;
enum PpTabStopType;
enum PpIndentControl;
enum PpChangeCase;
enum PpSlideShowPointerType;
enum PpSlideShowState;
enum PpSlideShowAdvanceMode;
enum PpFileDialogType;
enum PpPrintOutputType;
enum PpPrintHandoutOrder;
enum PpPrintColorType;
enum PpSelectionType;
enum PpDirection;
enum PpDateTimeFormat;
enum PpTransitionSpeed;
enum PpMouseActivation;
enum PpActionType;
enum PpPlaceholderType;
enum PpSlideShowType;
enum PpPrintRangeType;
enum PpAutoSize;
enum PpMediaType;
enum PpSoundFormatType;
enum PpFarEastLineBreakLevel;
enum PpSlideShowRangeType;
enum PpFrameColors;
struct __declspec(uuid("91493450-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Collection;
struct __declspec(uuid("91493442-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ _Application;
struct __declspec(uuid("91493451-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ _Global;
struct /* coclass */ Application;
struct /* coclass */ Global;
struct __declspec(uuid("91493452-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ColorFormat;
struct __declspec(uuid("91493453-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SlideShowWindow;
struct __declspec(uuid("91493454-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Selection;
struct __declspec(uuid("91493455-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ DocumentWindows;
struct __declspec(uuid("91493456-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SlideShowWindows;
struct __declspec(uuid("91493457-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ DocumentWindow;
struct __declspec(uuid("91493458-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ View;
struct __declspec(uuid("91493459-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SlideShowView;
struct __declspec(uuid("9149345a-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SlideShowSettings;
struct __declspec(uuid("9149345b-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ NamedSlideShows;
struct __declspec(uuid("9149345c-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ NamedSlideShow;
struct __declspec(uuid("9149345d-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PrintOptions;
struct __declspec(uuid("9149345e-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PrintRanges;
struct __declspec(uuid("9149345f-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PrintRange;
struct __declspec(uuid("91493460-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ AddIns;
struct __declspec(uuid("91493461-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ AddIn;
struct __declspec(uuid("91493462-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Presentations;
struct __declspec(uuid("91493463-5a91-11cf-8700-00aa0060263b"))
/* interface */ PresEvents;
struct /* coclass */ Presentation;
struct __declspec(uuid("91493464-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Hyperlinks;
struct __declspec(uuid("91493465-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Hyperlink;
struct __declspec(uuid("91493466-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PageSetup;
struct __declspec(uuid("91493467-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Fonts;
struct __declspec(uuid("91493468-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ExtraColors;
struct __declspec(uuid("91493469-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Slides;
struct __declspec(uuid("9149346a-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ _Slide;
struct __declspec(uuid("9149346b-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SlideRange;
struct __declspec(uuid("9149346c-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ _Master;
struct __declspec(uuid("9149346d-5a91-11cf-8700-00aa0060263b"))
/* interface */ SldEvents;
struct /* coclass */ Slide;
struct __declspec(uuid("9149346e-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ColorSchemes;
struct __declspec(uuid("9149346f-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ColorScheme;
struct __declspec(uuid("91493470-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ RGBColor;
struct __declspec(uuid("91493471-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SlideShowTransition;
struct __declspec(uuid("91493472-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SoundEffect;
struct __declspec(uuid("91493473-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SoundFormat;
struct __declspec(uuid("91493474-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ HeadersFooters;
struct __declspec(uuid("91493475-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Shapes;
struct __declspec(uuid("91493476-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Placeholders;
struct __declspec(uuid("91493477-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PlaceholderFormat;
struct __declspec(uuid("91493478-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ FreeformBuilder;
struct __declspec(uuid("91493479-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Shape;
struct __declspec(uuid("9149347a-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ShapeRange;
struct __declspec(uuid("9149347b-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ GroupShapes;
struct __declspec(uuid("9149347c-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Adjustments;
struct __declspec(uuid("9149347d-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PictureFormat;
struct __declspec(uuid("9149347e-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ FillFormat;
struct __declspec(uuid("9149347f-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ LineFormat;
struct __declspec(uuid("91493480-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ShadowFormat;
struct __declspec(uuid("91493481-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ConnectorFormat;
struct __declspec(uuid("91493482-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextEffectFormat;
struct __declspec(uuid("91493483-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ThreeDFormat;
struct __declspec(uuid("91493484-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextFrame;
struct __declspec(uuid("91493485-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ CalloutFormat;
struct __declspec(uuid("91493486-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ShapeNodes;
struct __declspec(uuid("91493487-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ShapeNode;
struct __declspec(uuid("91493488-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ OLEFormat;
struct __declspec(uuid("91493489-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ LinkFormat;
struct __declspec(uuid("9149348a-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ObjectVerbs;
struct __declspec(uuid("9149348b-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ AnimationSettings;
struct __declspec(uuid("9149348c-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ActionSettings;
struct __declspec(uuid("9149348d-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ActionSetting;
struct __declspec(uuid("9149348e-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PlaySettings;
struct __declspec(uuid("9149348f-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextRange;
struct __declspec(uuid("91493490-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Ruler;
struct __declspec(uuid("91493491-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ RulerLevels;
struct __declspec(uuid("91493492-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ RulerLevel;
struct __declspec(uuid("91493493-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TabStops;
struct __declspec(uuid("91493494-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TabStop;
struct __declspec(uuid("91493495-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Font;
struct __declspec(uuid("91493496-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ParagraphFormat;
struct __declspec(uuid("91493497-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ BulletFormat;
struct __declspec(uuid("91493498-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextStyles;
struct __declspec(uuid("91493499-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextStyle;
struct __declspec(uuid("9149349a-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextStyleLevels;
struct __declspec(uuid("9149349b-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextStyleLevel;
struct __declspec(uuid("9149349c-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ HeaderFooter;
struct __declspec(uuid("9149349d-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ _Presentation;
struct __declspec(uuid("914934b9-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Tags;
struct __declspec(uuid("914934be-5a91-11cf-8700-00aa0060263b"))
/* interface */ MouseTracker;
struct __declspec(uuid("914934bf-5a91-11cf-8700-00aa0060263b"))
/* interface */ MouseDownHandler;
struct __declspec(uuid("914934c0-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ OCXExtender;
struct __declspec(uuid("914934c1-5a91-11cf-8700-00aa0060263b"))
/* interface */ OCXExtenderEvents;
struct /* coclass */ OLEControl;
enum PpBorderType;
enum PpHTMLVersion;
enum PpPublishSourceType;
enum PpBulletType;
enum PpNumberedBulletStyle;
enum PpShapeFormat;
enum PpExportMode;
struct __declspec(uuid("914934c2-5a91-11cf-8700-00aa0060263b"))
/* interface */ EApplication;
struct __declspec(uuid("914934c3-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Table;
struct __declspec(uuid("914934c4-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Columns;
struct __declspec(uuid("914934c5-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Column;
struct __declspec(uuid("914934c6-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Rows;
struct __declspec(uuid("914934c7-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Row;
struct __declspec(uuid("914934c8-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ CellRange;
struct __declspec(uuid("914934c9-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Cell;
struct __declspec(uuid("914934ca-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Borders;
struct __declspec(uuid("914934cb-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Panes;
struct __declspec(uuid("914934cc-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Pane;
struct __declspec(uuid("914934cd-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ DefaultWebOptions;
struct __declspec(uuid("914934ce-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ WebOptions;
struct __declspec(uuid("914934cf-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PublishObjects;
struct __declspec(uuid("914934d0-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PublishObject;
struct __declspec(uuid("914934d2-5a91-11cf-8700-00aa0060263b"))
/* interface */ MasterEvents;
struct /* coclass */ Master;
enum PpPasteDataType;
struct __declspec(uuid("914934d3-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ _PowerRex;
struct /* coclass */ PowerRex;
struct __declspec(uuid("914934d4-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Comments;
struct __declspec(uuid("914934d5-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Comment;
struct __declspec(uuid("914934d6-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Designs;
struct __declspec(uuid("914934d7-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Design;
struct __declspec(uuid("914934d8-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ DiagramNode;
struct __declspec(uuid("914934d9-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ DiagramNodeChildren;
struct __declspec(uuid("914934da-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ DiagramNodes;
struct __declspec(uuid("914934db-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Diagram;
struct __declspec(uuid("914934dc-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TimeLine;
struct __declspec(uuid("914934dd-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Sequences;
enum MsoAnimEffect;
enum MsoAnimateByLevel;
enum MsoAnimTriggerType;
enum MsoAnimAfterEffect;
enum MsoAnimTextUnitEffect;
struct __declspec(uuid("914934de-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Sequence;
enum MsoAnimEffectRestart;
enum MsoAnimEffectAfter;
struct __declspec(uuid("914934df-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Effect;
struct __declspec(uuid("914934e0-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Timing;
enum MsoAnimDirection;
struct __declspec(uuid("914934e1-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ EffectParameters;
struct __declspec(uuid("914934e2-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ EffectInformation;
enum MsoAnimType;
struct __declspec(uuid("914934e3-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ AnimationBehaviors;
enum MsoAnimAdditive;
enum MsoAnimAccumulate;
struct __declspec(uuid("914934e4-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ AnimationBehavior;
struct __declspec(uuid("914934e5-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ MotionEffect;
struct __declspec(uuid("914934e6-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ColorEffect;
struct __declspec(uuid("914934e7-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ScaleEffect;
struct __declspec(uuid("914934e8-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ RotationEffect;
enum MsoAnimProperty;
struct __declspec(uuid("914934e9-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PropertyEffect;
struct __declspec(uuid("914934ea-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ AnimationPoints;
struct __declspec(uuid("914934eb-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ AnimationPoint;
enum PpAlertLevel;
struct __declspec(uuid("914934ec-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ CanvasShapes;
enum PpRevisionInfo;
struct __declspec(uuid("914934ed-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ AutoCorrect;
struct __declspec(uuid("914934ee-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Options;
enum MsoAnimCommandType;
struct __declspec(uuid("914934ef-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ CommandEffect;
enum MsoAnimFilterEffectType;
enum MsoAnimFilterEffectSubtype;
struct __declspec(uuid("914934f0-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ FilterEffect;
struct __declspec(uuid("914934f1-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SetEffect;
struct __declspec(uuid("914934f2-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ CustomLayouts;
struct __declspec(uuid("914934f3-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ CustomLayout;
enum PpRemoveDocInfoType;
enum PpCheckInVersionType;
enum MsoClickState;
enum PpFixedFormatType;
enum PpFixedFormatIntent;
struct __declspec(uuid("914934f5-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TableStyle;
struct __declspec(uuid("914934f6-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ CustomerData;
struct __declspec(uuid("914934f7-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Research;
struct __declspec(uuid("914934f8-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TableBackground;
struct __declspec(uuid("914934f9-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextFrame2;
struct __declspec(uuid("92d41a50-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ FileConverters;
struct __declspec(uuid("92d41a51-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ FileConverter;
enum XlBackground;
enum XlChartGallery;
enum XlChartPicturePlacement;
enum XlDataLabelSeparator;
enum XlPattern;
enum XlPictureAppearance;
enum XlCopyPictureFormat;
enum XlRgbColor;
enum XlLineStyle;
enum XlAxisCrosses;
enum XlAxisGroup;
enum XlAxisType;
enum XlBarShape;
enum XlBorderWeight;
enum XlCategoryType;
enum XlChartElementPosition;
enum XlChartItem;
enum XlOrientation;
enum XlChartPictureType;
enum XlChartSplitType;
enum XlColorIndex;
enum XlConstants;
enum XlDataLabelPosition;
enum XlDataLabelsType;
enum XlDisplayBlanksAs;
enum XlDisplayUnit;
enum XlEndStyleCap;
enum XlErrorBarDirection;
enum XlErrorBarInclude;
enum XlErrorBarType;
enum XlHAlign;
enum XlLegendPosition;
enum XlMarkerStyle;
enum XlPivotFieldOrientation;
enum XlReadingOrder;
enum XlRowCol;
enum XlScaleType;
enum XlSizeRepresents;
enum XlTickLabelOrientation;
enum XlTickLabelPosition;
enum XlTickMark;
enum XlTimeUnit;
enum XlTrendlineType;
enum XlUnderlineStyle;
enum XlVAlign;
struct __declspec(uuid("92d41a52-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ Axes;
struct __declspec(uuid("92d41a53-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ Axis;
struct __declspec(uuid("92d41a54-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ AxisTitle;
struct __declspec(uuid("92d41a55-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ Chart;
struct __declspec(uuid("92d41a56-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ ChartBorder;
struct __declspec(uuid("92d41a57-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ ChartCharacters;
struct __declspec(uuid("92d41a58-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ ChartArea;
struct __declspec(uuid("92d41a59-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ ChartColorFormat;
struct __declspec(uuid("92d41a5a-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ ChartData;
struct __declspec(uuid("92d41a5b-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ ChartFillFormat;
struct __declspec(uuid("92d41a5c-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ ChartFormat;
struct __declspec(uuid("92d41a5d-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ ChartGroup;
struct __declspec(uuid("92d41a5e-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ ChartGroups;
struct __declspec(uuid("92d41a5f-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ ChartTitle;
struct __declspec(uuid("92d41a60-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ Corners;
struct __declspec(uuid("92d41a61-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ DataLabel;
struct __declspec(uuid("92d41a62-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ DataLabels;
struct __declspec(uuid("92d41a63-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ DataTable;
struct __declspec(uuid("92d41a64-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ DisplayUnitLabel;
struct __declspec(uuid("92d41a65-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ DownBars;
struct __declspec(uuid("92d41a66-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ DropLines;
struct __declspec(uuid("92d41a67-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ ErrorBars;
struct __declspec(uuid("92d41a68-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ Floor;
struct __declspec(uuid("92d41a69-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ ChartFont;
struct __declspec(uuid("92d41a6a-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ Gridlines;
struct __declspec(uuid("92d41a6b-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ HiLoLines;
struct __declspec(uuid("92d41a6c-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ Interior;
struct __declspec(uuid("92d41a6d-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ LeaderLines;
struct __declspec(uuid("92d41a6e-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ Legend;
struct __declspec(uuid("92d41a6f-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ LegendEntries;
struct __declspec(uuid("92d41a70-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ LegendEntry;
struct __declspec(uuid("92d41a71-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ LegendKey;
struct __declspec(uuid("92d41a72-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ PlotArea;
struct __declspec(uuid("92d41a73-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ Point;
struct __declspec(uuid("92d41a74-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ Points;
struct __declspec(uuid("92d41a75-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ Series;
struct __declspec(uuid("92d41a76-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ SeriesCollection;
struct __declspec(uuid("92d41a77-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ SeriesLines;
struct __declspec(uuid("92d41a78-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ TickLabels;
struct __declspec(uuid("92d41a79-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ Trendline;
struct __declspec(uuid("92d41a7a-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ Trendlines;
struct __declspec(uuid("92d41a7b-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ UpBars;
struct __declspec(uuid("92d41a7c-f07e-4ca4-af6f-bef486aa4e6f"))
/* dual interface */ Walls;
enum PpResampleMediaProfile;
enum PpMediaTaskStatus;
struct __declspec(uuid("ba72e550-4ff5-48f4-8215-5505f990966f"))
/* dual interface */ MediaFormat;
struct __declspec(uuid("ba72e551-4ff5-48f4-8215-5505f990966f"))
/* dual interface */ SectionProperties;
enum PpPlayerState;
struct __declspec(uuid("ba72e552-4ff5-48f4-8215-5505f990966f"))
/* dual interface */ Player;
struct __declspec(uuid("ba72e553-4ff5-48f4-8215-5505f990966f"))
/* dual interface */ ResampleMediaTask;
struct __declspec(uuid("ba72e554-4ff5-48f4-8215-5505f990966f"))
/* dual interface */ ResampleMediaTasks;
struct __declspec(uuid("ba72e555-4ff5-48f4-8215-5505f990966f"))
/* dual interface */ MediaBookmark;
struct __declspec(uuid("ba72e556-4ff5-48f4-8215-5505f990966f"))
/* dual interface */ MediaBookmarks;
struct __declspec(uuid("ba72e557-4ff5-48f4-8215-5505f990966f"))
/* dual interface */ Coauthoring;
struct __declspec(uuid("ba72e558-4ff5-48f4-8215-5505f990966f"))
/* dual interface */ Broadcast;
enum XlPieSliceLocation;
enum XlPieSliceIndex;
enum PpProtectedViewCloseReason;
struct __declspec(uuid("ba72e559-4ff5-48f4-8215-5505f990966f"))
/* dual interface */ ProtectedViewWindows;
struct __declspec(uuid("ba72e55a-4ff5-48f4-8215-5505f990966f"))
/* dual interface */ ProtectedViewWindow;
struct __declspec(uuid("288b25a9-98ef-41e5-beba-f547d7169bf2"))
/* dual interface */ FullSeriesCollection;
struct __declspec(uuid("af028401-4619-4271-afdd-f480fa925186"))
/* dual interface */ ChartCategory;
struct __declspec(uuid("2432f529-514b-4575-aa71-1754c74a13d6"))
/* dual interface */ CategoryCollection;
struct __declspec(uuid("c9195677-b4f9-4228-bfd0-40c1f77d2f6a"))
/* dual interface */ ThemeVariant;
struct __declspec(uuid("9e116a3c-2c6d-4d07-93af-8675d452fca2"))
/* dual interface */ ThemeVariants;
struct __declspec(uuid("d9d60eb3-d4b4-4991-9c16-75585b3346bb"))
/* dual interface */ Theme;
enum XlCategoryLabelLevel;
enum XlSeriesNameLevel;
struct __declspec(uuid("f658e3ec-f2d3-4272-aa49-4ec155d5aa76"))
/* dual interface */ SlideNavigation;
enum PpGuideOrientation;
struct __declspec(uuid("1641e775-2277-46de-a06d-8c49c3c5d5e7"))
/* dual interface */ Guides;
struct __declspec(uuid("3d2f865b-e2db-4896-bc35-6a006df896dc"))
/* dual interface */ Guide;
enum XlParentDataLabelOptions;
enum XlBinsType;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(Collection, __uuidof(Collection));
_COM_SMARTPTR_TYPEDEF(ColorFormat, __uuidof(ColorFormat));
_COM_SMARTPTR_TYPEDEF(NamedSlideShow, __uuidof(NamedSlideShow));
_COM_SMARTPTR_TYPEDEF(NamedSlideShows, __uuidof(NamedSlideShows));
_COM_SMARTPTR_TYPEDEF(PrintRange, __uuidof(PrintRange));
_COM_SMARTPTR_TYPEDEF(PrintRanges, __uuidof(PrintRanges));
_COM_SMARTPTR_TYPEDEF(PrintOptions, __uuidof(PrintOptions));
_COM_SMARTPTR_TYPEDEF(AddIn, __uuidof(AddIn));
_COM_SMARTPTR_TYPEDEF(AddIns, __uuidof(AddIns));
_COM_SMARTPTR_TYPEDEF(PresEvents, __uuidof(PresEvents));
_COM_SMARTPTR_TYPEDEF(Presentations, __uuidof(Presentations));
_COM_SMARTPTR_TYPEDEF(Hyperlink, __uuidof(Hyperlink));
_COM_SMARTPTR_TYPEDEF(Hyperlinks, __uuidof(Hyperlinks));
_COM_SMARTPTR_TYPEDEF(PageSetup, __uuidof(PageSetup));
_COM_SMARTPTR_TYPEDEF(ExtraColors, __uuidof(ExtraColors));
_COM_SMARTPTR_TYPEDEF(SldEvents, __uuidof(SldEvents));
_COM_SMARTPTR_TYPEDEF(RGBColor, __uuidof(RGBColor));
_COM_SMARTPTR_TYPEDEF(ColorScheme, __uuidof(ColorScheme));
_COM_SMARTPTR_TYPEDEF(ColorSchemes, __uuidof(ColorSchemes));
_COM_SMARTPTR_TYPEDEF(SoundEffect, __uuidof(SoundEffect));
_COM_SMARTPTR_TYPEDEF(SlideShowTransition, __uuidof(SlideShowTransition));
_COM_SMARTPTR_TYPEDEF(SoundFormat, __uuidof(SoundFormat));
_COM_SMARTPTR_TYPEDEF(PlaceholderFormat, __uuidof(PlaceholderFormat));
_COM_SMARTPTR_TYPEDEF(Adjustments, __uuidof(Adjustments));
_COM_SMARTPTR_TYPEDEF(PictureFormat, __uuidof(PictureFormat));
_COM_SMARTPTR_TYPEDEF(FillFormat, __uuidof(FillFormat));
_COM_SMARTPTR_TYPEDEF(LineFormat, __uuidof(LineFormat));
_COM_SMARTPTR_TYPEDEF(ShadowFormat, __uuidof(ShadowFormat));
_COM_SMARTPTR_TYPEDEF(TextEffectFormat, __uuidof(TextEffectFormat));
_COM_SMARTPTR_TYPEDEF(ThreeDFormat, __uuidof(ThreeDFormat));
_COM_SMARTPTR_TYPEDEF(CalloutFormat, __uuidof(CalloutFormat));
_COM_SMARTPTR_TYPEDEF(ShapeNode, __uuidof(ShapeNode));
_COM_SMARTPTR_TYPEDEF(ShapeNodes, __uuidof(ShapeNodes));
_COM_SMARTPTR_TYPEDEF(LinkFormat, __uuidof(LinkFormat));
_COM_SMARTPTR_TYPEDEF(ObjectVerbs, __uuidof(ObjectVerbs));
_COM_SMARTPTR_TYPEDEF(OLEFormat, __uuidof(OLEFormat));
_COM_SMARTPTR_TYPEDEF(ActionSetting, __uuidof(ActionSetting));
_COM_SMARTPTR_TYPEDEF(ActionSettings, __uuidof(ActionSettings));
_COM_SMARTPTR_TYPEDEF(PlaySettings, __uuidof(PlaySettings));
_COM_SMARTPTR_TYPEDEF(AnimationSettings, __uuidof(AnimationSettings));
_COM_SMARTPTR_TYPEDEF(RulerLevel, __uuidof(RulerLevel));
_COM_SMARTPTR_TYPEDEF(RulerLevels, __uuidof(RulerLevels));
_COM_SMARTPTR_TYPEDEF(TabStop, __uuidof(TabStop));
_COM_SMARTPTR_TYPEDEF(TabStops, __uuidof(TabStops));
_COM_SMARTPTR_TYPEDEF(Ruler, __uuidof(Ruler));
_COM_SMARTPTR_TYPEDEF(Font, __uuidof(Font));
_COM_SMARTPTR_TYPEDEF(Fonts, __uuidof(Fonts));
_COM_SMARTPTR_TYPEDEF(HeaderFooter, __uuidof(HeaderFooter));
_COM_SMARTPTR_TYPEDEF(HeadersFooters, __uuidof(HeadersFooters));
_COM_SMARTPTR_TYPEDEF(Tags, __uuidof(Tags));
_COM_SMARTPTR_TYPEDEF(MouseTracker, __uuidof(MouseTracker));
_COM_SMARTPTR_TYPEDEF(MouseDownHandler, __uuidof(MouseDownHandler));
_COM_SMARTPTR_TYPEDEF(OCXExtender, __uuidof(OCXExtender));
_COM_SMARTPTR_TYPEDEF(OCXExtenderEvents, __uuidof(OCXExtenderEvents));
_COM_SMARTPTR_TYPEDEF(BulletFormat, __uuidof(BulletFormat));
_COM_SMARTPTR_TYPEDEF(ParagraphFormat, __uuidof(ParagraphFormat));
_COM_SMARTPTR_TYPEDEF(TextStyleLevel, __uuidof(TextStyleLevel));
_COM_SMARTPTR_TYPEDEF(TextStyleLevels, __uuidof(TextStyleLevels));
_COM_SMARTPTR_TYPEDEF(Borders, __uuidof(Borders));
_COM_SMARTPTR_TYPEDEF(Pane, __uuidof(Pane));
_COM_SMARTPTR_TYPEDEF(Panes, __uuidof(Panes));
_COM_SMARTPTR_TYPEDEF(DefaultWebOptions, __uuidof(DefaultWebOptions));
_COM_SMARTPTR_TYPEDEF(WebOptions, __uuidof(WebOptions));
_COM_SMARTPTR_TYPEDEF(PublishObject, __uuidof(PublishObject));
_COM_SMARTPTR_TYPEDEF(PublishObjects, __uuidof(PublishObjects));
_COM_SMARTPTR_TYPEDEF(MasterEvents, __uuidof(MasterEvents));
_COM_SMARTPTR_TYPEDEF(TextRange, __uuidof(TextRange));
_COM_SMARTPTR_TYPEDEF(TextFrame, __uuidof(TextFrame));
_COM_SMARTPTR_TYPEDEF(TextStyle, __uuidof(TextStyle));
_COM_SMARTPTR_TYPEDEF(TextStyles, __uuidof(TextStyles));
_COM_SMARTPTR_TYPEDEF(_PowerRex, __uuidof(_PowerRex));
_COM_SMARTPTR_TYPEDEF(EffectParameters, __uuidof(EffectParameters));
_COM_SMARTPTR_TYPEDEF(EffectInformation, __uuidof(EffectInformation));
_COM_SMARTPTR_TYPEDEF(MotionEffect, __uuidof(MotionEffect));
_COM_SMARTPTR_TYPEDEF(ColorEffect, __uuidof(ColorEffect));
_COM_SMARTPTR_TYPEDEF(ScaleEffect, __uuidof(ScaleEffect));
_COM_SMARTPTR_TYPEDEF(RotationEffect, __uuidof(RotationEffect));
_COM_SMARTPTR_TYPEDEF(AnimationPoint, __uuidof(AnimationPoint));
_COM_SMARTPTR_TYPEDEF(AnimationPoints, __uuidof(AnimationPoints));
_COM_SMARTPTR_TYPEDEF(PropertyEffect, __uuidof(PropertyEffect));
_COM_SMARTPTR_TYPEDEF(AutoCorrect, __uuidof(AutoCorrect));
_COM_SMARTPTR_TYPEDEF(Options, __uuidof(Options));
_COM_SMARTPTR_TYPEDEF(CommandEffect, __uuidof(CommandEffect));
_COM_SMARTPTR_TYPEDEF(FilterEffect, __uuidof(FilterEffect));
_COM_SMARTPTR_TYPEDEF(SetEffect, __uuidof(SetEffect));
_COM_SMARTPTR_TYPEDEF(TableStyle, __uuidof(TableStyle));
_COM_SMARTPTR_TYPEDEF(CustomerData, __uuidof(CustomerData));
_COM_SMARTPTR_TYPEDEF(Research, __uuidof(Research));
_COM_SMARTPTR_TYPEDEF(TableBackground, __uuidof(TableBackground));
_COM_SMARTPTR_TYPEDEF(TextFrame2, __uuidof(TextFrame2));
_COM_SMARTPTR_TYPEDEF(ChartBorder, __uuidof(ChartBorder));
_COM_SMARTPTR_TYPEDEF(ChartColorFormat, __uuidof(ChartColorFormat));
_COM_SMARTPTR_TYPEDEF(ChartData, __uuidof(ChartData));
_COM_SMARTPTR_TYPEDEF(ChartFillFormat, __uuidof(ChartFillFormat));
_COM_SMARTPTR_TYPEDEF(ChartFormat, __uuidof(ChartFormat));
_COM_SMARTPTR_TYPEDEF(Corners, __uuidof(Corners));
_COM_SMARTPTR_TYPEDEF(DropLines, __uuidof(DropLines));
_COM_SMARTPTR_TYPEDEF(ErrorBars, __uuidof(ErrorBars));
_COM_SMARTPTR_TYPEDEF(ChartFont, __uuidof(ChartFont));
_COM_SMARTPTR_TYPEDEF(ChartCharacters, __uuidof(ChartCharacters));
_COM_SMARTPTR_TYPEDEF(DataTable, __uuidof(DataTable));
_COM_SMARTPTR_TYPEDEF(Gridlines, __uuidof(Gridlines));
_COM_SMARTPTR_TYPEDEF(HiLoLines, __uuidof(HiLoLines));
_COM_SMARTPTR_TYPEDEF(Interior, __uuidof(Interior));
_COM_SMARTPTR_TYPEDEF(AxisTitle, __uuidof(AxisTitle));
_COM_SMARTPTR_TYPEDEF(ChartArea, __uuidof(ChartArea));
_COM_SMARTPTR_TYPEDEF(ChartTitle, __uuidof(ChartTitle));
_COM_SMARTPTR_TYPEDEF(DataLabel, __uuidof(DataLabel));
_COM_SMARTPTR_TYPEDEF(DataLabels, __uuidof(DataLabels));
_COM_SMARTPTR_TYPEDEF(DisplayUnitLabel, __uuidof(DisplayUnitLabel));
_COM_SMARTPTR_TYPEDEF(DownBars, __uuidof(DownBars));
_COM_SMARTPTR_TYPEDEF(Floor, __uuidof(Floor));
_COM_SMARTPTR_TYPEDEF(LeaderLines, __uuidof(LeaderLines));
_COM_SMARTPTR_TYPEDEF(Legend, __uuidof(Legend));
_COM_SMARTPTR_TYPEDEF(LegendKey, __uuidof(LegendKey));
_COM_SMARTPTR_TYPEDEF(LegendEntry, __uuidof(LegendEntry));
_COM_SMARTPTR_TYPEDEF(LegendEntries, __uuidof(LegendEntries));
_COM_SMARTPTR_TYPEDEF(PlotArea, __uuidof(PlotArea));
_COM_SMARTPTR_TYPEDEF(SeriesLines, __uuidof(SeriesLines));
_COM_SMARTPTR_TYPEDEF(TickLabels, __uuidof(TickLabels));
_COM_SMARTPTR_TYPEDEF(Axis, __uuidof(Axis));
_COM_SMARTPTR_TYPEDEF(Axes, __uuidof(Axes));
_COM_SMARTPTR_TYPEDEF(Trendline, __uuidof(Trendline));
_COM_SMARTPTR_TYPEDEF(Trendlines, __uuidof(Trendlines));
_COM_SMARTPTR_TYPEDEF(UpBars, __uuidof(UpBars));
_COM_SMARTPTR_TYPEDEF(Walls, __uuidof(Walls));
_COM_SMARTPTR_TYPEDEF(SectionProperties, __uuidof(SectionProperties));
_COM_SMARTPTR_TYPEDEF(Player, __uuidof(Player));
_COM_SMARTPTR_TYPEDEF(View, __uuidof(View));
_COM_SMARTPTR_TYPEDEF(SlideShowView, __uuidof(SlideShowView));
_COM_SMARTPTR_TYPEDEF(MediaBookmark, __uuidof(MediaBookmark));
_COM_SMARTPTR_TYPEDEF(MediaBookmarks, __uuidof(MediaBookmarks));
_COM_SMARTPTR_TYPEDEF(MediaFormat, __uuidof(MediaFormat));
_COM_SMARTPTR_TYPEDEF(Coauthoring, __uuidof(Coauthoring));
_COM_SMARTPTR_TYPEDEF(Broadcast, __uuidof(Broadcast));
_COM_SMARTPTR_TYPEDEF(Point, __uuidof(Point));
_COM_SMARTPTR_TYPEDEF(Points, __uuidof(Points));
_COM_SMARTPTR_TYPEDEF(ProtectedViewWindow, __uuidof(ProtectedViewWindow));
_COM_SMARTPTR_TYPEDEF(ProtectedViewWindows, __uuidof(ProtectedViewWindows));
_COM_SMARTPTR_TYPEDEF(ChartCategory, __uuidof(ChartCategory));
_COM_SMARTPTR_TYPEDEF(CategoryCollection, __uuidof(CategoryCollection));
_COM_SMARTPTR_TYPEDEF(ThemeVariant, __uuidof(ThemeVariant));
_COM_SMARTPTR_TYPEDEF(ThemeVariants, __uuidof(ThemeVariants));
_COM_SMARTPTR_TYPEDEF(Theme, __uuidof(Theme));
_COM_SMARTPTR_TYPEDEF(SlideNavigation, __uuidof(SlideNavigation));
_COM_SMARTPTR_TYPEDEF(SlideShowWindow, __uuidof(SlideShowWindow));
_COM_SMARTPTR_TYPEDEF(SlideShowWindows, __uuidof(SlideShowWindows));
_COM_SMARTPTR_TYPEDEF(SlideShowSettings, __uuidof(SlideShowSettings));
_COM_SMARTPTR_TYPEDEF(Guide, __uuidof(Guide));
_COM_SMARTPTR_TYPEDEF(Guides, __uuidof(Guides));
_COM_SMARTPTR_TYPEDEF(Series, __uuidof(Series));
_COM_SMARTPTR_TYPEDEF(SeriesCollection, __uuidof(SeriesCollection));
_COM_SMARTPTR_TYPEDEF(FullSeriesCollection, __uuidof(FullSeriesCollection));
_COM_SMARTPTR_TYPEDEF(ChartGroup, __uuidof(ChartGroup));
_COM_SMARTPTR_TYPEDEF(ChartGroups, __uuidof(ChartGroups));
_COM_SMARTPTR_TYPEDEF(_Application, __uuidof(_Application));
_COM_SMARTPTR_TYPEDEF(_Global, __uuidof(_Global));
_COM_SMARTPTR_TYPEDEF(Selection, __uuidof(Selection));
_COM_SMARTPTR_TYPEDEF(DocumentWindow, __uuidof(DocumentWindow));
_COM_SMARTPTR_TYPEDEF(DocumentWindows, __uuidof(DocumentWindows));
_COM_SMARTPTR_TYPEDEF(Slides, __uuidof(Slides));
_COM_SMARTPTR_TYPEDEF(_Slide, __uuidof(_Slide));
_COM_SMARTPTR_TYPEDEF(SlideRange, __uuidof(SlideRange));
_COM_SMARTPTR_TYPEDEF(_Master, __uuidof(_Master));
_COM_SMARTPTR_TYPEDEF(Design, __uuidof(Design));
_COM_SMARTPTR_TYPEDEF(Designs, __uuidof(Designs));
_COM_SMARTPTR_TYPEDEF(Shapes, __uuidof(Shapes));
_COM_SMARTPTR_TYPEDEF(Chart, __uuidof(Chart));
_COM_SMARTPTR_TYPEDEF(Placeholders, __uuidof(Placeholders));
_COM_SMARTPTR_TYPEDEF(FreeformBuilder, __uuidof(FreeformBuilder));
_COM_SMARTPTR_TYPEDEF(Shape, __uuidof(Shape));
_COM_SMARTPTR_TYPEDEF(ConnectorFormat, __uuidof(ConnectorFormat));
_COM_SMARTPTR_TYPEDEF(_Presentation, __uuidof(_Presentation));
_COM_SMARTPTR_TYPEDEF(Cell, __uuidof(Cell));
_COM_SMARTPTR_TYPEDEF(CellRange, __uuidof(CellRange));
_COM_SMARTPTR_TYPEDEF(Column, __uuidof(Column));
_COM_SMARTPTR_TYPEDEF(Columns, __uuidof(Columns));
_COM_SMARTPTR_TYPEDEF(Row, __uuidof(Row));
_COM_SMARTPTR_TYPEDEF(Rows, __uuidof(Rows));
_COM_SMARTPTR_TYPEDEF(Table, __uuidof(Table));
_COM_SMARTPTR_TYPEDEF(Timing, __uuidof(Timing));
_COM_SMARTPTR_TYPEDEF(AnimationBehavior, __uuidof(AnimationBehavior));
_COM_SMARTPTR_TYPEDEF(AnimationBehaviors, __uuidof(AnimationBehaviors));
_COM_SMARTPTR_TYPEDEF(Effect, __uuidof(Effect));
_COM_SMARTPTR_TYPEDEF(EApplication, __uuidof(EApplication));
_COM_SMARTPTR_TYPEDEF(Sequence, __uuidof(Sequence));
_COM_SMARTPTR_TYPEDEF(Sequences, __uuidof(Sequences));
_COM_SMARTPTR_TYPEDEF(TimeLine, __uuidof(TimeLine));
_COM_SMARTPTR_TYPEDEF(ResampleMediaTask, __uuidof(ResampleMediaTask));
_COM_SMARTPTR_TYPEDEF(ResampleMediaTasks, __uuidof(ResampleMediaTasks));
_COM_SMARTPTR_TYPEDEF(ShapeRange, __uuidof(ShapeRange));
_COM_SMARTPTR_TYPEDEF(GroupShapes, __uuidof(GroupShapes));
_COM_SMARTPTR_TYPEDEF(CanvasShapes, __uuidof(CanvasShapes));
_COM_SMARTPTR_TYPEDEF(CustomLayout, __uuidof(CustomLayout));
_COM_SMARTPTR_TYPEDEF(CustomLayouts, __uuidof(CustomLayouts));
_COM_SMARTPTR_TYPEDEF(Comments, __uuidof(Comments));
_COM_SMARTPTR_TYPEDEF(Comment, __uuidof(Comment));
_COM_SMARTPTR_TYPEDEF(DiagramNode, __uuidof(DiagramNode));
_COM_SMARTPTR_TYPEDEF(DiagramNodeChildren, __uuidof(DiagramNodeChildren));
_COM_SMARTPTR_TYPEDEF(DiagramNodes, __uuidof(DiagramNodes));
_COM_SMARTPTR_TYPEDEF(Diagram, __uuidof(Diagram));
_COM_SMARTPTR_TYPEDEF(FileConverters, __uuidof(FileConverters));
_COM_SMARTPTR_TYPEDEF(FileConverter, __uuidof(FileConverter));

//
// Type library items
//

enum __declspec(uuid("b2cd8e94-209b-4fb7-8fa1-d3f682efbeda"))
PpWindowState
{
    ppWindowNormal = 1,
    ppWindowMinimized = 2,
    ppWindowMaximized = 3
};

enum __declspec(uuid("9fb6d0e7-a063-4a3a-9e65-4ba1c830f0f7"))
PpArrangeStyle
{
    ppArrangeTiled = 1,
    ppArrangeCascade = 2
};

enum __declspec(uuid("b57d2996-78b9-4f86-a0d3-efd3a3896175"))
PpViewType
{
    ppViewSlide = 1,
    ppViewSlideMaster = 2,
    ppViewNotesPage = 3,
    ppViewHandoutMaster = 4,
    ppViewNotesMaster = 5,
    ppViewOutline = 6,
    ppViewSlideSorter = 7,
    ppViewTitleMaster = 8,
    ppViewNormal = 9,
    ppViewPrintPreview = 10,
    ppViewThumbnails = 11,
    ppViewMasterThumbnails = 12
};

enum __declspec(uuid("6d5a5494-54c4-4e15-90d3-62e5aaad2605"))
PpColorSchemeIndex
{
    ppSchemeColorMixed = -2,
    ppNotSchemeColor = 0,
    ppBackground = 1,
    ppForeground = 2,
    ppShadow = 3,
    ppTitle = 4,
    ppFill = 5,
    ppAccent1 = 6,
    ppAccent2 = 7,
    ppAccent3 = 8
};

enum __declspec(uuid("3724e368-dd02-4f14-a8b5-ff234a727ccc"))
PpSlideSizeType
{
    ppSlideSizeOnScreen = 1,
    ppSlideSizeLetterPaper = 2,
    ppSlideSizeA4Paper = 3,
    ppSlideSize35MM = 4,
    ppSlideSizeOverhead = 5,
    ppSlideSizeBanner = 6,
    ppSlideSizeCustom = 7,
    ppSlideSizeLedgerPaper = 8,
    ppSlideSizeA3Paper = 9,
    ppSlideSizeB4ISOPaper = 10,
    ppSlideSizeB5ISOPaper = 11,
    ppSlideSizeB4JISPaper = 12,
    ppSlideSizeB5JISPaper = 13,
    ppSlideSizeHagakiCard = 14,
    ppSlideSizeOnScreen16x9 = 15,
    ppSlideSizeOnScreen16x10 = 16
};

enum __declspec(uuid("01f8f37d-78d4-4920-b2a2-227b23a7ed66"))
PpSaveAsFileType
{
    ppSaveAsPresentation = 1,
    ppSaveAsPowerPoint7 = 2,
    ppSaveAsPowerPoint4 = 3,
    ppSaveAsPowerPoint3 = 4,
    ppSaveAsTemplate = 5,
    ppSaveAsRTF = 6,
    ppSaveAsShow = 7,
    ppSaveAsAddIn = 8,
    ppSaveAsPowerPoint4FarEast = 10,
    ppSaveAsDefault = 11,
    ppSaveAsHTML = 12,
    ppSaveAsHTMLv3 = 13,
    ppSaveAsHTMLDual = 14,
    ppSaveAsMetaFile = 15,
    ppSaveAsGIF = 16,
    ppSaveAsJPG = 17,
    ppSaveAsPNG = 18,
    ppSaveAsBMP = 19,
    ppSaveAsWebArchive = 20,
    ppSaveAsTIF = 21,
    ppSaveAsPresForReview = 22,
    ppSaveAsEMF = 23,
    ppSaveAsOpenXMLPresentation = 24,
    ppSaveAsOpenXMLPresentationMacroEnabled = 25,
    ppSaveAsOpenXMLTemplate = 26,
    ppSaveAsOpenXMLTemplateMacroEnabled = 27,
    ppSaveAsOpenXMLShow = 28,
    ppSaveAsOpenXMLShowMacroEnabled = 29,
    ppSaveAsOpenXMLAddin = 30,
    ppSaveAsOpenXMLTheme = 31,
    ppSaveAsPDF = 32,
    ppSaveAsXPS = 33,
    ppSaveAsXMLPresentation = 34,
    ppSaveAsOpenDocumentPresentation = 35,
    ppSaveAsOpenXMLPicturePresentation = 36,
    ppSaveAsWMV = 37,
    ppSaveAsStrictOpenXMLPresentation = 38,
    ppSaveAsMP4 = 39,
    ppSaveAsExternalConverter = 64000
};

enum __declspec(uuid("f7f8452d-30c2-4866-87bf-455a9fd787d8"))
PpTextStyleType
{
    ppDefaultStyle = 1,
    ppTitleStyle = 2,
    ppBodyStyle = 3
};

enum __declspec(uuid("2d20e1ea-0942-4429-8725-916ea0d91045"))
PpSlideLayout
{
    ppLayoutMixed = -2,
    ppLayoutTitle = 1,
    ppLayoutText = 2,
    ppLayoutTwoColumnText = 3,
    ppLayoutTable = 4,
    ppLayoutTextAndChart = 5,
    ppLayoutChartAndText = 6,
    ppLayoutOrgchart = 7,
    ppLayoutChart = 8,
    ppLayoutTextAndClipart = 9,
    ppLayoutClipartAndText = 10,
    ppLayoutTitleOnly = 11,
    ppLayoutBlank = 12,
    ppLayoutTextAndObject = 13,
    ppLayoutObjectAndText = 14,
    ppLayoutLargeObject = 15,
    ppLayoutObject = 16,
    ppLayoutTextAndMediaClip = 17,
    ppLayoutMediaClipAndText = 18,
    ppLayoutObjectOverText = 19,
    ppLayoutTextOverObject = 20,
    ppLayoutTextAndTwoObjects = 21,
    ppLayoutTwoObjectsAndText = 22,
    ppLayoutTwoObjectsOverText = 23,
    ppLayoutFourObjects = 24,
    ppLayoutVerticalText = 25,
    ppLayoutClipArtAndVerticalText = 26,
    ppLayoutVerticalTitleAndText = 27,
    ppLayoutVerticalTitleAndTextOverChart = 28,
    ppLayoutTwoObjects = 29,
    ppLayoutObjectAndTwoObjects = 30,
    ppLayoutTwoObjectsAndObject = 31,
    ppLayoutCustom = 32,
    ppLayoutSectionHeader = 33,
    ppLayoutComparison = 34,
    ppLayoutContentWithCaption = 35,
    ppLayoutPictureWithCaption = 36
};

enum __declspec(uuid("b5a60d8c-605c-4784-ba39-fb4b9aaeea01"))
PpEntryEffect
{
    ppEffectMixed = -2,
    ppEffectNone = 0,
    ppEffectCut = 257,
    ppEffectCutThroughBlack = 258,
    ppEffectRandom = 513,
    ppEffectBlindsHorizontal = 769,
    ppEffectBlindsVertical = 770,
    ppEffectCheckerboardAcross = 1025,
    ppEffectCheckerboardDown = 1026,
    ppEffectCoverLeft = 1281,
    ppEffectCoverUp = 1282,
    ppEffectCoverRight = 1283,
    ppEffectCoverDown = 1284,
    ppEffectCoverLeftUp = 1285,
    ppEffectCoverRightUp = 1286,
    ppEffectCoverLeftDown = 1287,
    ppEffectCoverRightDown = 1288,
    ppEffectDissolve = 1537,
    ppEffectFade = 1793,
    ppEffectUncoverLeft = 2049,
    ppEffectUncoverUp = 2050,
    ppEffectUncoverRight = 2051,
    ppEffectUncoverDown = 2052,
    ppEffectUncoverLeftUp = 2053,
    ppEffectUncoverRightUp = 2054,
    ppEffectUncoverLeftDown = 2055,
    ppEffectUncoverRightDown = 2056,
    ppEffectRandomBarsHorizontal = 2305,
    ppEffectRandomBarsVertical = 2306,
    ppEffectStripsUpLeft = 2561,
    ppEffectStripsUpRight = 2562,
    ppEffectStripsDownLeft = 2563,
    ppEffectStripsDownRight = 2564,
    ppEffectStripsLeftUp = 2565,
    ppEffectStripsRightUp = 2566,
    ppEffectStripsLeftDown = 2567,
    ppEffectStripsRightDown = 2568,
    ppEffectWipeLeft = 2817,
    ppEffectWipeUp = 2818,
    ppEffectWipeRight = 2819,
    ppEffectWipeDown = 2820,
    ppEffectBoxOut = 3073,
    ppEffectBoxIn = 3074,
    ppEffectFlyFromLeft = 3329,
    ppEffectFlyFromTop = 3330,
    ppEffectFlyFromRight = 3331,
    ppEffectFlyFromBottom = 3332,
    ppEffectFlyFromTopLeft = 3333,
    ppEffectFlyFromTopRight = 3334,
    ppEffectFlyFromBottomLeft = 3335,
    ppEffectFlyFromBottomRight = 3336,
    ppEffectPeekFromLeft = 3337,
    ppEffectPeekFromDown = 3338,
    ppEffectPeekFromRight = 3339,
    ppEffectPeekFromUp = 3340,
    ppEffectCrawlFromLeft = 3341,
    ppEffectCrawlFromUp = 3342,
    ppEffectCrawlFromRight = 3343,
    ppEffectCrawlFromDown = 3344,
    ppEffectZoomIn = 3345,
    ppEffectZoomInSlightly = 3346,
    ppEffectZoomOut = 3347,
    ppEffectZoomOutSlightly = 3348,
    ppEffectZoomCenter = 3349,
    ppEffectZoomBottom = 3350,
    ppEffectStretchAcross = 3351,
    ppEffectStretchLeft = 3352,
    ppEffectStretchUp = 3353,
    ppEffectStretchRight = 3354,
    ppEffectStretchDown = 3355,
    ppEffectSwivel = 3356,
    ppEffectSpiral = 3357,
    ppEffectSplitHorizontalOut = 3585,
    ppEffectSplitHorizontalIn = 3586,
    ppEffectSplitVerticalOut = 3587,
    ppEffectSplitVerticalIn = 3588,
    ppEffectFlashOnceFast = 3841,
    ppEffectFlashOnceMedium = 3842,
    ppEffectFlashOnceSlow = 3843,
    ppEffectAppear = 3844,
    ppEffectCircleOut = 3845,
    ppEffectDiamondOut = 3846,
    ppEffectCombHorizontal = 3847,
    ppEffectCombVertical = 3848,
    ppEffectFadeSmoothly = 3849,
    ppEffectNewsflash = 3850,
    ppEffectPlusOut = 3851,
    ppEffectPushDown = 3852,
    ppEffectPushLeft = 3853,
    ppEffectPushRight = 3854,
    ppEffectPushUp = 3855,
    ppEffectWedge = 3856,
    ppEffectWheel1Spoke = 3857,
    ppEffectWheel2Spokes = 3858,
    ppEffectWheel3Spokes = 3859,
    ppEffectWheel4Spokes = 3860,
    ppEffectWheel8Spokes = 3861,
    ppEffectWheelReverse1Spoke = 3862,
    ppEffectVortexLeft = 3863,
    ppEffectVortexUp = 3864,
    ppEffectVortexRight = 3865,
    ppEffectVortexDown = 3866,
    ppEffectRippleCenter = 3867,
    ppEffectRippleRightUp = 3868,
    ppEffectRippleLeftUp = 3869,
    ppEffectRippleLeftDown = 3870,
    ppEffectRippleRightDown = 3871,
    ppEffectGlitterDiamondLeft = 3872,
    ppEffectGlitterDiamondUp = 3873,
    ppEffectGlitterDiamondRight = 3874,
    ppEffectGlitterDiamondDown = 3875,
    ppEffectGlitterHexagonLeft = 3876,
    ppEffectGlitterHexagonUp = 3877,
    ppEffectGlitterHexagonRight = 3878,
    ppEffectGlitterHexagonDown = 3879,
    ppEffectGalleryLeft = 3880,
    ppEffectGalleryRight = 3881,
    ppEffectConveyorLeft = 3882,
    ppEffectConveyorRight = 3883,
    ppEffectDoorsVertical = 3884,
    ppEffectDoorsHorizontal = 3885,
    ppEffectWindowVertical = 3886,
    ppEffectWindowHorizontal = 3887,
    ppEffectWarpIn = 3888,
    ppEffectWarpOut = 3889,
    ppEffectFlyThroughIn = 3890,
    ppEffectFlyThroughOut = 3891,
    ppEffectFlyThroughInBounce = 3892,
    ppEffectFlyThroughOutBounce = 3893,
    ppEffectRevealSmoothLeft = 3894,
    ppEffectRevealSmoothRight = 3895,
    ppEffectRevealBlackLeft = 3896,
    ppEffectRevealBlackRight = 3897,
    ppEffectHoneycomb = 3898,
    ppEffectFerrisWheelLeft = 3899,
    ppEffectFerrisWheelRight = 3900,
    ppEffectSwitchLeft = 3901,
    ppEffectSwitchUp = 3902,
    ppEffectSwitchRight = 3903,
    ppEffectSwitchDown = 3904,
    ppEffectFlipLeft = 3905,
    ppEffectFlipUp = 3906,
    ppEffectFlipRight = 3907,
    ppEffectFlipDown = 3908,
    ppEffectFlashbulb = 3909,
    ppEffectShredStripsIn = 3910,
    ppEffectShredStripsOut = 3911,
    ppEffectShredRectangleIn = 3912,
    ppEffectShredRectangleOut = 3913,
    ppEffectCubeLeft = 3914,
    ppEffectCubeUp = 3915,
    ppEffectCubeRight = 3916,
    ppEffectCubeDown = 3917,
    ppEffectRotateLeft = 3918,
    ppEffectRotateUp = 3919,
    ppEffectRotateRight = 3920,
    ppEffectRotateDown = 3921,
    ppEffectBoxLeft = 3922,
    ppEffectBoxUp = 3923,
    ppEffectBoxRight = 3924,
    ppEffectBoxDown = 3925,
    ppEffectOrbitLeft = 3926,
    ppEffectOrbitUp = 3927,
    ppEffectOrbitRight = 3928,
    ppEffectOrbitDown = 3929,
    ppEffectPanLeft = 3930,
    ppEffectPanUp = 3931,
    ppEffectPanRight = 3932,
    ppEffectPanDown = 3933,
    ppEffectFallOverLeft = 3934,
    ppEffectFallOverRight = 3935,
    ppEffectDrapeLeft = 3936,
    ppEffectDrapeRight = 3937,
    ppEffectCurtains = 3938,
    ppEffectWindLeft = 3939,
    ppEffectWindRight = 3940,
    ppEffectPrestige = 3941,
    ppEffectFracture = 3942,
    ppEffectCrush = 3943,
    ppEffectPeelOffLeft = 3944,
    ppEffectPeelOffRight = 3945,
    ppEffectPageCurlSingleLeft = 3946,
    ppEffectPageCurlSingleRight = 3947,
    ppEffectPageCurlDoubleLeft = 3948,
    ppEffectPageCurlDoubleRight = 3949,
    ppEffectAirplaneLeft = 3950,
    ppEffectAirplaneRight = 3951,
    ppEffectOrigamiLeft = 3952,
    ppEffectOrigamiRight = 3953,
    ppEffectMorphByObject = 3954,
    ppEffectMorphByWord = 3955,
    ppEffectMorphByChar = 3956
};

enum __declspec(uuid("efcd481c-b00b-4718-a6ff-51d98493ee88"))
PpTextLevelEffect
{
    ppAnimateLevelMixed = -2,
    ppAnimateLevelNone = 0,
    ppAnimateByFirstLevel = 1,
    ppAnimateBySecondLevel = 2,
    ppAnimateByThirdLevel = 3,
    ppAnimateByFourthLevel = 4,
    ppAnimateByFifthLevel = 5,
    ppAnimateByAllLevels = 16
};

enum __declspec(uuid("9688fa96-8cf6-4642-8839-dd659d86c9b9"))
PpTextUnitEffect
{
    ppAnimateUnitMixed = -2,
    ppAnimateByParagraph = 0,
    ppAnimateByWord = 1,
    ppAnimateByCharacter = 2
};

enum __declspec(uuid("b46f41b2-4241-49d4-b772-6182b7f4398d"))
PpChartUnitEffect
{
    ppAnimateChartMixed = -2,
    ppAnimateBySeries = 1,
    ppAnimateByCategory = 2,
    ppAnimateBySeriesElements = 3,
    ppAnimateByCategoryElements = 4,
    ppAnimateChartAllAtOnce = 5
};

enum __declspec(uuid("4e58b80c-d41e-470a-a2f8-05373ca3ea5d"))
PpAfterEffect
{
    ppAfterEffectMixed = -2,
    ppAfterEffectNothing = 0,
    ppAfterEffectHide = 1,
    ppAfterEffectDim = 2,
    ppAfterEffectHideOnClick = 3
};

enum __declspec(uuid("f60170d6-43ca-47a4-88bf-f782728e1c87"))
PpAdvanceMode
{
    ppAdvanceModeMixed = -2,
    ppAdvanceOnClick = 1,
    ppAdvanceOnTime = 2
};

enum __declspec(uuid("eaf0356f-6b2b-4163-a40f-4dd7d6b40a43"))
PpSoundEffectType
{
    ppSoundEffectsMixed = -2,
    ppSoundNone = 0,
    ppSoundStopPrevious = 1,
    ppSoundFile = 2
};

enum __declspec(uuid("927d5c5e-9e3b-46e0-ae7b-3e89a0b53ff7"))
PpFollowColors
{
    ppFollowColorsMixed = -2,
    ppFollowColorsNone = 0,
    ppFollowColorsScheme = 1,
    ppFollowColorsTextAndBackground = 2
};

enum __declspec(uuid("939abc08-6f0e-4595-a12f-f96cfcb7ff77"))
PpUpdateOption
{
    ppUpdateOptionMixed = -2,
    ppUpdateOptionManual = 1,
    ppUpdateOptionAutomatic = 2
};

enum __declspec(uuid("07012de4-763e-467d-8b87-1e10304332f8"))
PpParagraphAlignment
{
    ppAlignmentMixed = -2,
    ppAlignLeft = 1,
    ppAlignCenter = 2,
    ppAlignRight = 3,
    ppAlignJustify = 4,
    ppAlignDistribute = 5,
    ppAlignThaiDistribute = 6,
    ppAlignJustifyLow = 7
};

enum __declspec(uuid("28f0103e-1d08-431e-8cdd-5554d008bbc3"))
PpBaselineAlignment
{
    ppBaselineAlignMixed = -2,
    ppBaselineAlignBaseline = 1,
    ppBaselineAlignTop = 2,
    ppBaselineAlignCenter = 3,
    ppBaselineAlignFarEast50 = 4,
    ppBaselineAlignAuto = 5
};

enum __declspec(uuid("f08dd520-1e7a-4812-9ce2-a96b079299d1"))
PpTabStopType
{
    ppTabStopMixed = -2,
    ppTabStopLeft = 1,
    ppTabStopCenter = 2,
    ppTabStopRight = 3,
    ppTabStopDecimal = 4
};

enum __declspec(uuid("cc8f164e-ebd7-4366-8dd6-76e984c2a8f5"))
PpIndentControl
{
    ppIndentControlMixed = -2,
    ppIndentReplaceAttr = 1,
    ppIndentKeepAttr = 2
};

enum __declspec(uuid("57187984-0cfa-4ad7-955a-ada220110fc2"))
PpChangeCase
{
    ppCaseSentence = 1,
    ppCaseLower = 2,
    ppCaseUpper = 3,
    ppCaseTitle = 4,
    ppCaseToggle = 5
};

enum __declspec(uuid("a14b5d3e-eaa8-45c0-a41c-d0aa208ba279"))
PpSlideShowPointerType
{
    ppSlideShowPointerNone = 0,
    ppSlideShowPointerArrow = 1,
    ppSlideShowPointerPen = 2,
    ppSlideShowPointerAlwaysHidden = 3,
    ppSlideShowPointerAutoArrow = 4,
    ppSlideShowPointerEraser = 5
};

enum __declspec(uuid("fb066093-3dff-4c61-9ae6-6c76c635fd55"))
PpSlideShowState
{
    ppSlideShowRunning = 1,
    ppSlideShowPaused = 2,
    ppSlideShowBlackScreen = 3,
    ppSlideShowWhiteScreen = 4,
    ppSlideShowDone = 5
};

enum __declspec(uuid("98884cd0-f359-48cb-bed8-0ec3090a59d6"))
PpSlideShowAdvanceMode
{
    ppSlideShowManualAdvance = 1,
    ppSlideShowUseSlideTimings = 2,
    ppSlideShowRehearseNewTimings = 3
};

enum __declspec(uuid("6911a8c8-1743-4aaf-988b-55ff9ae94329"))
PpFileDialogType
{
    ppFileDialogOpen = 1,
    ppFileDialogSave = 2
};

enum __declspec(uuid("8d624138-9944-443c-8be1-eb10e90dd8c6"))
PpPrintOutputType
{
    ppPrintOutputSlides = 1,
    ppPrintOutputTwoSlideHandouts = 2,
    ppPrintOutputThreeSlideHandouts = 3,
    ppPrintOutputSixSlideHandouts = 4,
    ppPrintOutputNotesPages = 5,
    ppPrintOutputOutline = 6,
    ppPrintOutputBuildSlides = 7,
    ppPrintOutputFourSlideHandouts = 8,
    ppPrintOutputNineSlideHandouts = 9,
    ppPrintOutputOneSlideHandouts = 10
};

enum __declspec(uuid("d3a902f8-8526-4ddb-a72e-218c989128db"))
PpPrintHandoutOrder
{
    ppPrintHandoutVerticalFirst = 1,
    ppPrintHandoutHorizontalFirst = 2
};

enum __declspec(uuid("901438d1-d781-49ca-aeca-83d6fc958d6a"))
PpPrintColorType
{
    ppPrintColor = 1,
    ppPrintBlackAndWhite = 2,
    ppPrintPureBlackAndWhite = 3
};

enum __declspec(uuid("68cf3b66-38fc-4cc7-88ca-07c394cc6a4a"))
PpSelectionType
{
    ppSelectionNone = 0,
    ppSelectionSlides = 1,
    ppSelectionShapes = 2,
    ppSelectionText = 3
};

enum __declspec(uuid("f37b6599-0312-44bf-984e-1136c06cdab2"))
PpDirection
{
    ppDirectionMixed = -2,
    ppDirectionLeftToRight = 1,
    ppDirectionRightToLeft = 2
};

enum __declspec(uuid("1bea23a4-497f-44d7-b7d8-80eb71a02fb5"))
PpDateTimeFormat
{
    ppDateTimeFormatMixed = -2,
    ppDateTimeMdyy = 1,
    ppDateTimeddddMMMMddyyyy = 2,
    ppDateTimedMMMMyyyy = 3,
    ppDateTimeMMMMdyyyy = 4,
    ppDateTimedMMMyy = 5,
    ppDateTimeMMMMyy = 6,
    ppDateTimeMMyy = 7,
    ppDateTimeMMddyyHmm = 8,
    ppDateTimeMMddyyhmmAMPM = 9,
    ppDateTimeHmm = 10,
    ppDateTimeHmmss = 11,
    ppDateTimehmmAMPM = 12,
    ppDateTimehmmssAMPM = 13,
    ppDateTimeFigureOut = 14,
    ppDateTimeUAQ1 = 15,
    ppDateTimeUAQ2 = 16,
    ppDateTimeUAQ3 = 17,
    ppDateTimeUAQ4 = 18,
    ppDateTimeUAQ5 = 19,
    ppDateTimeUAQ6 = 20,
    ppDateTimeUAQ7 = 21
};

enum __declspec(uuid("6dc8f1ec-4f59-43d5-97d9-efc09d099444"))
PpTransitionSpeed
{
    ppTransitionSpeedMixed = -2,
    ppTransitionSpeedSlow = 1,
    ppTransitionSpeedMedium = 2,
    ppTransitionSpeedFast = 3
};

enum __declspec(uuid("5106e4a7-532c-413f-b2c7-8d532008f511"))
PpMouseActivation
{
    ppMouseClick = 1,
    ppMouseOver = 2
};

enum __declspec(uuid("eb78ae17-fad3-4edf-8a0b-0a379069749b"))
PpActionType
{
    ppActionMixed = -2,
    ppActionNone = 0,
    ppActionNextSlide = 1,
    ppActionPreviousSlide = 2,
    ppActionFirstSlide = 3,
    ppActionLastSlide = 4,
    ppActionLastSlideViewed = 5,
    ppActionEndShow = 6,
    ppActionHyperlink = 7,
    ppActionRunMacro = 8,
    ppActionRunProgram = 9,
    ppActionNamedSlideShow = 10,
    ppActionOLEVerb = 11,
    ppActionPlay = 12
};

enum __declspec(uuid("adeadb7e-f268-4574-90fe-bc0bf4b28b3c"))
PpPlaceholderType
{
    ppPlaceholderMixed = -2,
    ppPlaceholderTitle = 1,
    ppPlaceholderBody = 2,
    ppPlaceholderCenterTitle = 3,
    ppPlaceholderSubtitle = 4,
    ppPlaceholderVerticalTitle = 5,
    ppPlaceholderVerticalBody = 6,
    ppPlaceholderObject = 7,
    ppPlaceholderChart = 8,
    ppPlaceholderBitmap = 9,
    ppPlaceholderMediaClip = 10,
    ppPlaceholderOrgChart = 11,
    ppPlaceholderTable = 12,
    ppPlaceholderSlideNumber = 13,
    ppPlaceholderHeader = 14,
    ppPlaceholderFooter = 15,
    ppPlaceholderDate = 16,
    ppPlaceholderVerticalObject = 17,
    ppPlaceholderPicture = 18
};

enum __declspec(uuid("e893bd55-3fc7-3cda-9281-1acb65441c8b"))
PpSlideShowType
{
    ppShowTypeSpeaker = 1,
    ppShowTypeWindow = 2,
    ppShowTypeKiosk = 3,
    ppShowTypeWindow2 = 4
};

enum __declspec(uuid("f8fb4bd4-ece4-4009-9fa6-ac93191315eb"))
PpPrintRangeType
{
    ppPrintAll = 1,
    ppPrintSelection = 2,
    ppPrintCurrent = 3,
    ppPrintSlideRange = 4,
    ppPrintNamedSlideShow = 5,
    ppPrintSection = 6
};

enum __declspec(uuid("a8fb07e5-9c29-4f16-9dc4-ca6333719385"))
PpAutoSize
{
    ppAutoSizeMixed = -2,
    ppAutoSizeNone = 0,
    ppAutoSizeShapeToFitText = 1
};

enum __declspec(uuid("51491ce7-3402-4004-9836-2307103f3731"))
PpMediaType
{
    ppMediaTypeMixed = -2,
    ppMediaTypeOther = 1,
    ppMediaTypeSound = 2,
    ppMediaTypeMovie = 3
};

enum __declspec(uuid("6cb42c6d-2958-4f46-8327-e6abb83f719d"))
PpSoundFormatType
{
    ppSoundFormatMixed = -2,
    ppSoundFormatNone = 0,
    ppSoundFormatWAV = 1,
    ppSoundFormatMIDI = 2,
    ppSoundFormatCDAudio = 3
};

enum __declspec(uuid("c8f6bbd1-4841-4c73-acbb-69ce5637808e"))
PpFarEastLineBreakLevel
{
    ppFarEastLineBreakLevelNormal = 1,
    ppFarEastLineBreakLevelStrict = 2,
    ppFarEastLineBreakLevelCustom = 3
};

enum __declspec(uuid("170ecd11-1508-446d-99f0-a5df077f35ff"))
PpSlideShowRangeType
{
    ppShowAll = 1,
    ppShowSlideRange = 2,
    ppShowNamedSlideShow = 3
};

enum __declspec(uuid("dca36717-111a-4633-b688-32c9548576d4"))
PpFrameColors
{
    ppFrameColorsBrowserColors = 1,
    ppFrameColorsPresentationSchemeTextColor = 2,
    ppFrameColorsPresentationSchemeAccentColor = 3,
    ppFrameColorsWhiteTextOnBlack = 4,
    ppFrameColorsBlackTextOnWhite = 5
};

struct __declspec(uuid("91493450-5a91-11cf-8700-00aa0060263b"))
Collection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    _variant_t _Index (
        int Index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw__Index (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT * _Index ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
};

struct __declspec(uuid("91493441-5a91-11cf-8700-00aa0060263b"))
Application;
    // [ default ] interface _Application
    // [ default, source ] interface EApplication

struct __declspec(uuid("91493443-5a91-11cf-8700-00aa0060263b"))
Global;
    // [ default ] interface _Global

struct __declspec(uuid("91493452-5a91-11cf-8700-00aa0060263b"))
ColorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    __missing_type__  Type;
    __declspec(property(get=GetTintAndShade,put=PutTintAndShade))
    float TintAndShade;
    __declspec(property(get=GetBrightness,put=PutBrightness))
    float Brightness;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetSchemeColor,put=PutSchemeColor))
    enum PpColorSchemeIndex SchemeColor;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    __missing_type__  GetRGB ( );
    void PutRGB (
        __missing_type__ RGB );
    __missing_type__  GetType ( );
    enum PpColorSchemeIndex GetSchemeColor ( );
    void PutSchemeColor (
        enum PpColorSchemeIndex SchemeColor );
    float GetTintAndShade ( );
    void PutTintAndShade (
        float pValue );
    __missing_type__  GetObjectThemeColor ( );
    void PutObjectThemeColor (
        __missing_type__ ObjectThemeColor );
    float GetBrightness ( );
    void PutBrightness (
        float Brightness );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_RGB (
        /*[out,retval]*/ __missing_type__ * RGB ) = 0;
      virtual HRESULT __stdcall put_RGB (
        /*[in]*/ __missing_type__ RGB ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ __missing_type__ * Type ) = 0;
      virtual HRESULT __stdcall get_SchemeColor (
        /*[out,retval]*/ enum PpColorSchemeIndex * SchemeColor ) = 0;
      virtual HRESULT __stdcall put_SchemeColor (
        /*[in]*/ enum PpColorSchemeIndex SchemeColor ) = 0;
      virtual HRESULT __stdcall get_TintAndShade (
        /*[out,retval]*/ float * pValue ) = 0;
      virtual HRESULT __stdcall put_TintAndShade (
        /*[in]*/ float pValue ) = 0;
      virtual HRESULT __stdcall get_ObjectThemeColor (
        /*[out,retval]*/ __missing_type__ * ObjectThemeColor ) = 0;
      virtual HRESULT __stdcall put_ObjectThemeColor (
        /*[in]*/ __missing_type__ ObjectThemeColor ) = 0;
      virtual HRESULT __stdcall get_Brightness (
        /*[out,retval]*/ float * Brightness ) = 0;
      virtual HRESULT __stdcall put_Brightness (
        /*[in]*/ float Brightness ) = 0;
};

struct __declspec(uuid("9149345c-5a91-11cf-8700-00aa0060263b"))
NamedSlideShow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSlideIDs))
    _variant_t SlideIDs;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    HRESULT Delete ( );
    _variant_t GetSlideIDs ( );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_SlideIDs (
        /*[out,retval]*/ VARIANT * SlideIDs ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
};

struct __declspec(uuid("9149345b-5a91-11cf-8700-00aa0060263b"))
NamedSlideShows : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    NamedSlideShowPtr Item (
        const _variant_t & Index );
    NamedSlideShowPtr Add (
        _bstr_t Name,
        const _variant_t & safeArrayOfSlideIDs );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct NamedSlideShow * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT safeArrayOfSlideIDs,
        /*[out,retval]*/ struct NamedSlideShow * * Add ) = 0;
};

struct __declspec(uuid("9149345f-5a91-11cf-8700-00aa0060263b"))
PrintRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetStart))
    int Start;
    __declspec(property(get=GetEnd))
    int End;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    int GetStart ( );
    int GetEnd ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ int * Start ) = 0;
      virtual HRESULT __stdcall get_End (
        /*[out,retval]*/ int * End ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("9149345e-5a91-11cf-8700-00aa0060263b"))
PrintRanges : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    PrintRangePtr Add (
        int Start,
        int End );
    _ApplicationPtr GetApplication ( );
    HRESULT ClearAll ( );
    PrintRangePtr Item (
        int Index );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ int Start,
        /*[in]*/ int End,
        /*[out,retval]*/ struct PrintRange * * Add ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall raw_ClearAll ( ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct PrintRange * * Item ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
};

struct __declspec(uuid("9149345d-5a91-11cf-8700-00aa0060263b"))
PrintOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHandoutOrder,put=PutHandoutOrder))
    enum PpPrintHandoutOrder HandoutOrder;
    __declspec(property(get=GetsectionIndex,put=PutsectionIndex))
    int sectionIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetPrintColorType,put=PutPrintColorType))
    enum PpPrintColorType PrintColorType;
    __declspec(property(get=GetNumberOfCopies,put=PutNumberOfCopies))
    int NumberOfCopies;
    __declspec(property(get=GetOutputType,put=PutOutputType))
    enum PpPrintOutputType OutputType;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRangeType,put=PutRangeType))
    enum PpPrintRangeType RangeType;
    __declspec(property(get=GetRanges))
    PrintRangesPtr Ranges;
    __declspec(property(get=GetSlideShowName,put=PutSlideShowName))
    _bstr_t SlideShowName;
    __declspec(property(get=GetActivePrinter,put=PutActivePrinter))
    _bstr_t ActivePrinter;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum PpPrintColorType GetPrintColorType ( );
    void PutPrintColorType (
        enum PpPrintColorType PrintColorType );
    __missing_type__  GetCollate ( );
    void PutCollate (
        __missing_type__ Collate );
    __missing_type__  GetFitToPage ( );
    void PutFitToPage (
        __missing_type__ FitToPage );
    __missing_type__  GetFrameSlides ( );
    void PutFrameSlides (
        __missing_type__ FrameSlides );
    int GetNumberOfCopies ( );
    void PutNumberOfCopies (
        int NumberOfCopies );
    enum PpPrintOutputType GetOutputType ( );
    void PutOutputType (
        enum PpPrintOutputType OutputType );
    IDispatchPtr GetParent ( );
    __missing_type__  GetPrintHiddenSlides ( );
    void PutPrintHiddenSlides (
        __missing_type__ PrintHiddenSlides );
    __missing_type__  GetPrintInBackground ( );
    void PutPrintInBackground (
        __missing_type__ PrintInBackground );
    enum PpPrintRangeType GetRangeType ( );
    void PutRangeType (
        enum PpPrintRangeType RangeType );
    PrintRangesPtr GetRanges ( );
    __missing_type__  GetPrintFontsAsGraphics ( );
    void PutPrintFontsAsGraphics (
        __missing_type__ PrintFontsAsGraphics );
    _bstr_t GetSlideShowName ( );
    void PutSlideShowName (
        _bstr_t SlideShowName );
    _bstr_t GetActivePrinter ( );
    void PutActivePrinter (
        _bstr_t ActivePrinter );
    enum PpPrintHandoutOrder GetHandoutOrder ( );
    void PutHandoutOrder (
        enum PpPrintHandoutOrder HandoutOrder );
    __missing_type__  GetPrintComments ( );
    void PutPrintComments (
        __missing_type__ PrintComments );
    int GetsectionIndex ( );
    void PutsectionIndex (
        int sectionIndex );
    __missing_type__  GetHighQuality ( );
    void PutHighQuality (
        __missing_type__ HighQuality );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_PrintColorType (
        /*[out,retval]*/ enum PpPrintColorType * PrintColorType ) = 0;
      virtual HRESULT __stdcall put_PrintColorType (
        /*[in]*/ enum PpPrintColorType PrintColorType ) = 0;
      virtual HRESULT __stdcall get_Collate (
        /*[out,retval]*/ __missing_type__ * Collate ) = 0;
      virtual HRESULT __stdcall put_Collate (
        /*[in]*/ __missing_type__ Collate ) = 0;
      virtual HRESULT __stdcall get_FitToPage (
        /*[out,retval]*/ __missing_type__ * FitToPage ) = 0;
      virtual HRESULT __stdcall put_FitToPage (
        /*[in]*/ __missing_type__ FitToPage ) = 0;
      virtual HRESULT __stdcall get_FrameSlides (
        /*[out,retval]*/ __missing_type__ * FrameSlides ) = 0;
      virtual HRESULT __stdcall put_FrameSlides (
        /*[in]*/ __missing_type__ FrameSlides ) = 0;
      virtual HRESULT __stdcall get_NumberOfCopies (
        /*[out,retval]*/ int * NumberOfCopies ) = 0;
      virtual HRESULT __stdcall put_NumberOfCopies (
        /*[in]*/ int NumberOfCopies ) = 0;
      virtual HRESULT __stdcall get_OutputType (
        /*[out,retval]*/ enum PpPrintOutputType * OutputType ) = 0;
      virtual HRESULT __stdcall put_OutputType (
        /*[in]*/ enum PpPrintOutputType OutputType ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_PrintHiddenSlides (
        /*[out,retval]*/ __missing_type__ * PrintHiddenSlides ) = 0;
      virtual HRESULT __stdcall put_PrintHiddenSlides (
        /*[in]*/ __missing_type__ PrintHiddenSlides ) = 0;
      virtual HRESULT __stdcall get_PrintInBackground (
        /*[out,retval]*/ __missing_type__ * PrintInBackground ) = 0;
      virtual HRESULT __stdcall put_PrintInBackground (
        /*[in]*/ __missing_type__ PrintInBackground ) = 0;
      virtual HRESULT __stdcall get_RangeType (
        /*[out,retval]*/ enum PpPrintRangeType * RangeType ) = 0;
      virtual HRESULT __stdcall put_RangeType (
        /*[in]*/ enum PpPrintRangeType RangeType ) = 0;
      virtual HRESULT __stdcall get_Ranges (
        /*[out,retval]*/ struct PrintRanges * * Ranges ) = 0;
      virtual HRESULT __stdcall get_PrintFontsAsGraphics (
        /*[out,retval]*/ __missing_type__ * PrintFontsAsGraphics ) = 0;
      virtual HRESULT __stdcall put_PrintFontsAsGraphics (
        /*[in]*/ __missing_type__ PrintFontsAsGraphics ) = 0;
      virtual HRESULT __stdcall get_SlideShowName (
        /*[out,retval]*/ BSTR * SlideShowName ) = 0;
      virtual HRESULT __stdcall put_SlideShowName (
        /*[in]*/ BSTR SlideShowName ) = 0;
      virtual HRESULT __stdcall get_ActivePrinter (
        /*[out,retval]*/ BSTR * ActivePrinter ) = 0;
      virtual HRESULT __stdcall put_ActivePrinter (
        /*[in]*/ BSTR ActivePrinter ) = 0;
      virtual HRESULT __stdcall get_HandoutOrder (
        /*[out,retval]*/ enum PpPrintHandoutOrder * HandoutOrder ) = 0;
      virtual HRESULT __stdcall put_HandoutOrder (
        /*[in]*/ enum PpPrintHandoutOrder HandoutOrder ) = 0;
      virtual HRESULT __stdcall get_PrintComments (
        /*[out,retval]*/ __missing_type__ * PrintComments ) = 0;
      virtual HRESULT __stdcall put_PrintComments (
        /*[in]*/ __missing_type__ PrintComments ) = 0;
      virtual HRESULT __stdcall get_sectionIndex (
        /*[out,retval]*/ int * sectionIndex ) = 0;
      virtual HRESULT __stdcall put_sectionIndex (
        /*[in]*/ int sectionIndex ) = 0;
      virtual HRESULT __stdcall get_HighQuality (
        /*[out,retval]*/ __missing_type__ * HighQuality ) = 0;
      virtual HRESULT __stdcall put_HighQuality (
        /*[in]*/ __missing_type__ HighQuality ) = 0;
};

struct __declspec(uuid("91493461-5a91-11cf-8700-00aa0060263b"))
AddIn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetRegisteredInHKLM))
    __missing_type__  RegisteredInHKLM;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetFullName ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    __missing_type__  GetRegistered ( );
    void PutRegistered (
        __missing_type__ Registered );
    __missing_type__  GetAutoLoad ( );
    void PutAutoLoad (
        __missing_type__ AutoLoad );
    __missing_type__  GetLoaded ( );
    void PutLoaded (
        __missing_type__ Loaded );
    __missing_type__  GetDisplayAlerts ( );
    void PutDisplayAlerts (
        __missing_type__ DisplayAlerts );
    __missing_type__  GetRegisteredInHKLM ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * FullName ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall get_Registered (
        /*[out,retval]*/ __missing_type__ * Registered ) = 0;
      virtual HRESULT __stdcall put_Registered (
        /*[in]*/ __missing_type__ Registered ) = 0;
      virtual HRESULT __stdcall get_AutoLoad (
        /*[out,retval]*/ __missing_type__ * AutoLoad ) = 0;
      virtual HRESULT __stdcall put_AutoLoad (
        /*[in]*/ __missing_type__ AutoLoad ) = 0;
      virtual HRESULT __stdcall get_Loaded (
        /*[out,retval]*/ __missing_type__ * Loaded ) = 0;
      virtual HRESULT __stdcall put_Loaded (
        /*[in]*/ __missing_type__ Loaded ) = 0;
      virtual HRESULT __stdcall get_DisplayAlerts (
        /*[out,retval]*/ __missing_type__ * DisplayAlerts ) = 0;
      virtual HRESULT __stdcall put_DisplayAlerts (
        /*[in]*/ __missing_type__ DisplayAlerts ) = 0;
      virtual HRESULT __stdcall get_RegisteredInHKLM (
        /*[out,retval]*/ __missing_type__ * RegisteredInHKLM ) = 0;
};

struct __declspec(uuid("91493460-5a91-11cf-8700-00aa0060263b"))
AddIns : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    AddInPtr Item (
        VARIANT * Index );
    AddInPtr Add (
        _bstr_t FileName );
    HRESULT Remove (
        VARIANT * Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT * Index,
        /*[out,retval]*/ struct AddIn * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ struct AddIn * * Add ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT * Index ) = 0;
};

struct __declspec(uuid("91493463-5a91-11cf-8700-00aa0060263b"))
PresEvents : IUnknown
{};

struct __declspec(uuid("91493444-5a91-11cf-8700-00aa0060263b"))
Presentation;
    // [ default ] interface _Presentation
    // [ default, source ] interface PresEvents

struct __declspec(uuid("91493462-5a91-11cf-8700-00aa0060263b"))
Presentations : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _PresentationPtr Item (
        const _variant_t & Index );
    _PresentationPtr Add (
        __missing_type__ WithWindow );
    _PresentationPtr OpenOld (
        _bstr_t FileName,
        __missing_type__ ReadOnly,
        __missing_type__ Untitled,
        __missing_type__ WithWindow );
    _PresentationPtr Open (
        _bstr_t FileName,
        __missing_type__ ReadOnly,
        __missing_type__ Untitled,
        __missing_type__ WithWindow );
    HRESULT CheckOut (
        _bstr_t FileName );
    VARIANT_BOOL CanCheckOut (
        _bstr_t FileName );
    _PresentationPtr Open2007 (
        _bstr_t FileName,
        __missing_type__ ReadOnly,
        __missing_type__ Untitled,
        __missing_type__ WithWindow,
        __missing_type__ OpenAndRepair );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct _Presentation * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ __missing_type__ WithWindow,
        /*[out,retval]*/ struct _Presentation * * Add ) = 0;
      virtual HRESULT __stdcall raw_OpenOld (
        /*[in]*/ BSTR FileName,
        /*[in]*/ __missing_type__ ReadOnly,
        /*[in]*/ __missing_type__ Untitled,
        /*[in]*/ __missing_type__ WithWindow,
        /*[out,retval]*/ struct _Presentation * * OpenOld ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ BSTR FileName,
        /*[in]*/ __missing_type__ ReadOnly,
        /*[in]*/ __missing_type__ Untitled,
        /*[in]*/ __missing_type__ WithWindow,
        /*[out,retval]*/ struct _Presentation * * Open ) = 0;
      virtual HRESULT __stdcall raw_CheckOut (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_CanCheckOut (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * CanCheckOut ) = 0;
      virtual HRESULT __stdcall raw_Open2007 (
        /*[in]*/ BSTR FileName,
        /*[in]*/ __missing_type__ ReadOnly,
        /*[in]*/ __missing_type__ Untitled,
        /*[in]*/ __missing_type__ WithWindow,
        /*[in]*/ __missing_type__ OpenAndRepair,
        /*[out,retval]*/ struct _Presentation * * Open2007 ) = 0;
};

struct __declspec(uuid("91493465-5a91-11cf-8700-00aa0060263b"))
Hyperlink : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    __missing_type__  Type;
    __declspec(property(get=GetAddress,put=PutAddress))
    _bstr_t Address;
    __declspec(property(get=GetSubAddress,put=PutSubAddress))
    _bstr_t SubAddress;
    __declspec(property(get=GetEmailSubject,put=PutEmailSubject))
    _bstr_t EmailSubject;
    __declspec(property(get=GetScreenTip,put=PutScreenTip))
    _bstr_t ScreenTip;
    __declspec(property(get=GetTextToDisplay,put=PutTextToDisplay))
    _bstr_t TextToDisplay;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    __missing_type__  GetType ( );
    _bstr_t GetAddress ( );
    void PutAddress (
        _bstr_t Address );
    _bstr_t GetSubAddress ( );
    void PutSubAddress (
        _bstr_t SubAddress );
    HRESULT AddToFavorites ( );
    _bstr_t GetEmailSubject ( );
    void PutEmailSubject (
        _bstr_t EmailSubject );
    _bstr_t GetScreenTip ( );
    void PutScreenTip (
        _bstr_t ScreenTip );
    _bstr_t GetTextToDisplay ( );
    void PutTextToDisplay (
        _bstr_t TextToDisplay );
    __missing_type__  GetShowAndReturn ( );
    void PutShowAndReturn (
        __missing_type__ ShowAndReturn );
    HRESULT Follow ( );
    HRESULT CreateNewDocument (
        _bstr_t FileName,
        __missing_type__ EditNow,
        __missing_type__ Overwrite );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ __missing_type__ * Type ) = 0;
      virtual HRESULT __stdcall get_Address (
        /*[out,retval]*/ BSTR * Address ) = 0;
      virtual HRESULT __stdcall put_Address (
        /*[in]*/ BSTR Address ) = 0;
      virtual HRESULT __stdcall get_SubAddress (
        /*[out,retval]*/ BSTR * SubAddress ) = 0;
      virtual HRESULT __stdcall put_SubAddress (
        /*[in]*/ BSTR SubAddress ) = 0;
      virtual HRESULT __stdcall raw_AddToFavorites ( ) = 0;
      virtual HRESULT __stdcall get_EmailSubject (
        /*[out,retval]*/ BSTR * EmailSubject ) = 0;
      virtual HRESULT __stdcall put_EmailSubject (
        /*[in]*/ BSTR EmailSubject ) = 0;
      virtual HRESULT __stdcall get_ScreenTip (
        /*[out,retval]*/ BSTR * ScreenTip ) = 0;
      virtual HRESULT __stdcall put_ScreenTip (
        /*[in]*/ BSTR ScreenTip ) = 0;
      virtual HRESULT __stdcall get_TextToDisplay (
        /*[out,retval]*/ BSTR * TextToDisplay ) = 0;
      virtual HRESULT __stdcall put_TextToDisplay (
        /*[in]*/ BSTR TextToDisplay ) = 0;
      virtual HRESULT __stdcall get_ShowAndReturn (
        /*[out,retval]*/ __missing_type__ * ShowAndReturn ) = 0;
      virtual HRESULT __stdcall put_ShowAndReturn (
        /*[in]*/ __missing_type__ ShowAndReturn ) = 0;
      virtual HRESULT __stdcall raw_Follow ( ) = 0;
      virtual HRESULT __stdcall raw_CreateNewDocument (
        /*[in]*/ BSTR FileName,
        /*[in]*/ __missing_type__ EditNow,
        /*[in]*/ __missing_type__ Overwrite ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("91493464-5a91-11cf-8700-00aa0060263b"))
Hyperlinks : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HyperlinkPtr Item (
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Hyperlink * * Item ) = 0;
};

struct __declspec(uuid("91493466-5a91-11cf-8700-00aa0060263b"))
PageSetup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFirstSlideNumber,put=PutFirstSlideNumber))
    int FirstSlideNumber;
    __declspec(property(get=GetSlideHeight,put=PutSlideHeight))
    float SlideHeight;
    __declspec(property(get=GetSlideWidth,put=PutSlideWidth))
    float SlideWidth;
    __declspec(property(get=GetSlideSize,put=PutSlideSize))
    enum PpSlideSizeType SlideSize;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    int GetFirstSlideNumber ( );
    void PutFirstSlideNumber (
        int FirstSlideNumber );
    float GetSlideHeight ( );
    void PutSlideHeight (
        float SlideHeight );
    float GetSlideWidth ( );
    void PutSlideWidth (
        float SlideWidth );
    enum PpSlideSizeType GetSlideSize ( );
    void PutSlideSize (
        enum PpSlideSizeType SlideSize );
    __missing_type__  GetNotesOrientation ( );
    void PutNotesOrientation (
        __missing_type__ NotesOrientation );
    __missing_type__  GetSlideOrientation ( );
    void PutSlideOrientation (
        __missing_type__ SlideOrientation );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_FirstSlideNumber (
        /*[out,retval]*/ int * FirstSlideNumber ) = 0;
      virtual HRESULT __stdcall put_FirstSlideNumber (
        /*[in]*/ int FirstSlideNumber ) = 0;
      virtual HRESULT __stdcall get_SlideHeight (
        /*[out,retval]*/ float * SlideHeight ) = 0;
      virtual HRESULT __stdcall put_SlideHeight (
        /*[in]*/ float SlideHeight ) = 0;
      virtual HRESULT __stdcall get_SlideWidth (
        /*[out,retval]*/ float * SlideWidth ) = 0;
      virtual HRESULT __stdcall put_SlideWidth (
        /*[in]*/ float SlideWidth ) = 0;
      virtual HRESULT __stdcall get_SlideSize (
        /*[out,retval]*/ enum PpSlideSizeType * SlideSize ) = 0;
      virtual HRESULT __stdcall put_SlideSize (
        /*[in]*/ enum PpSlideSizeType SlideSize ) = 0;
      virtual HRESULT __stdcall get_NotesOrientation (
        /*[out,retval]*/ __missing_type__ * NotesOrientation ) = 0;
      virtual HRESULT __stdcall put_NotesOrientation (
        /*[in]*/ __missing_type__ NotesOrientation ) = 0;
      virtual HRESULT __stdcall get_SlideOrientation (
        /*[out,retval]*/ __missing_type__ * SlideOrientation ) = 0;
      virtual HRESULT __stdcall put_SlideOrientation (
        /*[in]*/ __missing_type__ SlideOrientation ) = 0;
};

struct __declspec(uuid("91493468-5a91-11cf-8700-00aa0060263b"))
ExtraColors : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    __missing_type__  Item (
        int Index );
    HRESULT Add (
        __missing_type__ Type );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ __missing_type__ * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ __missing_type__ Type ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("9149346d-5a91-11cf-8700-00aa0060263b"))
SldEvents : IUnknown
{};

struct __declspec(uuid("91493445-5a91-11cf-8700-00aa0060263b"))
Slide;
    // [ default ] interface _Slide
    // [ default, source ] interface SldEvents

struct __declspec(uuid("91493470-5a91-11cf-8700-00aa0060263b"))
RGBColor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    __missing_type__  GetRGB ( );
    void PutRGB (
        __missing_type__ RGB );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_RGB (
        /*[out,retval]*/ __missing_type__ * RGB ) = 0;
      virtual HRESULT __stdcall put_RGB (
        /*[in]*/ __missing_type__ RGB ) = 0;
};

struct __declspec(uuid("9149346f-5a91-11cf-8700-00aa0060263b"))
ColorScheme : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    RGBColorPtr Colors (
        enum PpColorSchemeIndex SchemeColor );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Colors (
        /*[in]*/ enum PpColorSchemeIndex SchemeColor,
        /*[out,retval]*/ struct RGBColor * * Colors ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("9149346e-5a91-11cf-8700-00aa0060263b"))
ColorSchemes : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ColorSchemePtr Item (
        int Index );
    ColorSchemePtr Add (
        struct ColorScheme * Scheme );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct ColorScheme * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct ColorScheme * Scheme,
        /*[out,retval]*/ struct ColorScheme * * Add ) = 0;
};

struct __declspec(uuid("91493472-5a91-11cf-8700-00aa0060263b"))
SoundEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetType,put=PutType))
    enum PpSoundEffectType Type;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    enum PpSoundEffectType GetType ( );
    void PutType (
        enum PpSoundEffectType Type );
    HRESULT ImportFromFile (
        _bstr_t FileName );
    HRESULT Play ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PpSoundEffectType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum PpSoundEffectType Type ) = 0;
      virtual HRESULT __stdcall raw_ImportFromFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_Play ( ) = 0;
};

struct __declspec(uuid("91493471-5a91-11cf-8700-00aa0060263b"))
SlideShowTransition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAdvanceTime,put=PutAdvanceTime))
    float AdvanceTime;
    __declspec(property(get=GetEntryEffect,put=PutEntryEffect))
    enum PpEntryEffect EntryEffect;
    __declspec(property(get=GetSoundEffect))
    SoundEffectPtr SoundEffect;
    __declspec(property(get=GetSpeed,put=PutSpeed))
    enum PpTransitionSpeed Speed;
    __declspec(property(get=GetDuration,put=PutDuration))
    float Duration;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    __missing_type__  GetAdvanceOnClick ( );
    void PutAdvanceOnClick (
        __missing_type__ AdvanceOnClick );
    __missing_type__  GetAdvanceOnTime ( );
    void PutAdvanceOnTime (
        __missing_type__ AdvanceOnTime );
    float GetAdvanceTime ( );
    void PutAdvanceTime (
        float AdvanceTime );
    enum PpEntryEffect GetEntryEffect ( );
    void PutEntryEffect (
        enum PpEntryEffect EntryEffect );
    __missing_type__  GetHidden ( );
    void PutHidden (
        __missing_type__ Hidden );
    __missing_type__  GetLoopSoundUntilNext ( );
    void PutLoopSoundUntilNext (
        __missing_type__ LoopSoundUntilNext );
    SoundEffectPtr GetSoundEffect ( );
    enum PpTransitionSpeed GetSpeed ( );
    void PutSpeed (
        enum PpTransitionSpeed Speed );
    float GetDuration ( );
    void PutDuration (
        float Duration );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_AdvanceOnClick (
        /*[out,retval]*/ __missing_type__ * AdvanceOnClick ) = 0;
      virtual HRESULT __stdcall put_AdvanceOnClick (
        /*[in]*/ __missing_type__ AdvanceOnClick ) = 0;
      virtual HRESULT __stdcall get_AdvanceOnTime (
        /*[out,retval]*/ __missing_type__ * AdvanceOnTime ) = 0;
      virtual HRESULT __stdcall put_AdvanceOnTime (
        /*[in]*/ __missing_type__ AdvanceOnTime ) = 0;
      virtual HRESULT __stdcall get_AdvanceTime (
        /*[out,retval]*/ float * AdvanceTime ) = 0;
      virtual HRESULT __stdcall put_AdvanceTime (
        /*[in]*/ float AdvanceTime ) = 0;
      virtual HRESULT __stdcall get_EntryEffect (
        /*[out,retval]*/ enum PpEntryEffect * EntryEffect ) = 0;
      virtual HRESULT __stdcall put_EntryEffect (
        /*[in]*/ enum PpEntryEffect EntryEffect ) = 0;
      virtual HRESULT __stdcall get_Hidden (
        /*[out,retval]*/ __missing_type__ * Hidden ) = 0;
      virtual HRESULT __stdcall put_Hidden (
        /*[in]*/ __missing_type__ Hidden ) = 0;
      virtual HRESULT __stdcall get_LoopSoundUntilNext (
        /*[out,retval]*/ __missing_type__ * LoopSoundUntilNext ) = 0;
      virtual HRESULT __stdcall put_LoopSoundUntilNext (
        /*[in]*/ __missing_type__ LoopSoundUntilNext ) = 0;
      virtual HRESULT __stdcall get_SoundEffect (
        /*[out,retval]*/ struct SoundEffect * * SoundEffect ) = 0;
      virtual HRESULT __stdcall get_Speed (
        /*[out,retval]*/ enum PpTransitionSpeed * Speed ) = 0;
      virtual HRESULT __stdcall put_Speed (
        /*[in]*/ enum PpTransitionSpeed Speed ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ float * Duration ) = 0;
      virtual HRESULT __stdcall put_Duration (
        /*[in]*/ float Duration ) = 0;
};

struct __declspec(uuid("91493473-5a91-11cf-8700-00aa0060263b"))
SoundFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum PpSoundFormatType Type;
    __declspec(property(get=GetSourceFullName))
    _bstr_t SourceFullName;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Play ( );
    HRESULT Import (
        _bstr_t FileName );
    enum PpSoundFormatType Export (
        _bstr_t FileName );
    enum PpSoundFormatType GetType ( );
    _bstr_t GetSourceFullName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Play ( ) = 0;
      virtual HRESULT __stdcall raw_Import (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ enum PpSoundFormatType * Export ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PpSoundFormatType * Type ) = 0;
      virtual HRESULT __stdcall get_SourceFullName (
        /*[out,retval]*/ BSTR * SourceFullName ) = 0;
};

struct __declspec(uuid("91493477-5a91-11cf-8700-00aa0060263b"))
PlaceholderFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum PpPlaceholderType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetContainedType))
    __missing_type__  ContainedType;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum PpPlaceholderType GetType ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    __missing_type__  GetContainedType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PpPlaceholderType * Type ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_ContainedType (
        /*[out,retval]*/ __missing_type__ * ContainedType ) = 0;
};

struct __declspec(uuid("9149347c-5a91-11cf-8700-00aa0060263b"))
Adjustments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem,put=PutItem))
    float Item[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );
    float GetItem (
        int Index );
    void PutItem (
        int Index,
        float Val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ float * Val ) = 0;
      virtual HRESULT __stdcall put_Item (
        /*[in]*/ int Index,
        /*[in]*/ float Val ) = 0;
};

struct __declspec(uuid("9149347d-5a91-11cf-8700-00aa0060263b"))
PictureFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBrightness,put=PutBrightness))
    float Brightness;
    __declspec(property(get=GetContrast,put=PutContrast))
    float Contrast;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    float CropBottom;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    float CropLeft;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    float CropRight;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    float CropTop;
    __declspec(property(get=GetCrop))
    __missing_type__ Crop;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT IncrementBrightness (
        float Increment );
    HRESULT IncrementContrast (
        float Increment );
    float GetBrightness ( );
    void PutBrightness (
        float Brightness );
    __missing_type__  GetColorType ( );
    void PutColorType (
        __missing_type__ ColorType );
    float GetContrast ( );
    void PutContrast (
        float Contrast );
    float GetCropBottom ( );
    void PutCropBottom (
        float CropBottom );
    float GetCropLeft ( );
    void PutCropLeft (
        float CropLeft );
    float GetCropRight ( );
    void PutCropRight (
        float CropRight );
    float GetCropTop ( );
    void PutCropTop (
        float CropTop );
    __missing_type__  GetTransparencyColor ( );
    void PutTransparencyColor (
        __missing_type__ TransparencyColor );
    __missing_type__  GetTransparentBackground ( );
    void PutTransparentBackground (
        __missing_type__ TransparentBackground );
    __missing_type__ GetCrop ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_IncrementBrightness (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementContrast (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall get_Brightness (
        /*[out,retval]*/ float * Brightness ) = 0;
      virtual HRESULT __stdcall put_Brightness (
        /*[in]*/ float Brightness ) = 0;
      virtual HRESULT __stdcall get_ColorType (
        /*[out,retval]*/ __missing_type__ * ColorType ) = 0;
      virtual HRESULT __stdcall put_ColorType (
        /*[in]*/ __missing_type__ ColorType ) = 0;
      virtual HRESULT __stdcall get_Contrast (
        /*[out,retval]*/ float * Contrast ) = 0;
      virtual HRESULT __stdcall put_Contrast (
        /*[in]*/ float Contrast ) = 0;
      virtual HRESULT __stdcall get_CropBottom (
        /*[out,retval]*/ float * CropBottom ) = 0;
      virtual HRESULT __stdcall put_CropBottom (
        /*[in]*/ float CropBottom ) = 0;
      virtual HRESULT __stdcall get_CropLeft (
        /*[out,retval]*/ float * CropLeft ) = 0;
      virtual HRESULT __stdcall put_CropLeft (
        /*[in]*/ float CropLeft ) = 0;
      virtual HRESULT __stdcall get_CropRight (
        /*[out,retval]*/ float * CropRight ) = 0;
      virtual HRESULT __stdcall put_CropRight (
        /*[in]*/ float CropRight ) = 0;
      virtual HRESULT __stdcall get_CropTop (
        /*[out,retval]*/ float * CropTop ) = 0;
      virtual HRESULT __stdcall put_CropTop (
        /*[in]*/ float CropTop ) = 0;
      virtual HRESULT __stdcall get_TransparencyColor (
        /*[out,retval]*/ __missing_type__ * TransparencyColor ) = 0;
      virtual HRESULT __stdcall put_TransparencyColor (
        /*[in]*/ __missing_type__ TransparencyColor ) = 0;
      virtual HRESULT __stdcall get_TransparentBackground (
        /*[out,retval]*/ __missing_type__ * TransparentBackground ) = 0;
      virtual HRESULT __stdcall put_TransparentBackground (
        /*[in]*/ __missing_type__ TransparentBackground ) = 0;
      virtual HRESULT __stdcall get_Crop (
        /*[out,retval]*/ __missing_type__ * * Crop ) = 0;
};

struct __declspec(uuid("9149347e-5a91-11cf-8700-00aa0060263b"))
FillFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    ColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetGradientColorType))
    __missing_type__  GradientColorType;
    __declspec(property(get=GetGradientDegree))
    float GradientDegree;
    __declspec(property(get=GetGradientStyle))
    __missing_type__  GradientStyle;
    __declspec(property(get=GetGradientVariant))
    int GradientVariant;
    __declspec(property(get=GetPattern))
    __missing_type__  Pattern;
    __declspec(property(get=GetPresetGradientType))
    __missing_type__  PresetGradientType;
    __declspec(property(get=GetPresetTexture))
    __missing_type__  PresetTexture;
    __declspec(property(get=GetTextureName))
    _bstr_t TextureName;
    __declspec(property(get=GetTextureType))
    __missing_type__  TextureType;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetType))
    __missing_type__  Type;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetGradientStops))
    __missing_type__ GradientStops;
    __declspec(property(get=GetTextureOffsetX,put=PutTextureOffsetX))
    float TextureOffsetX;
    __declspec(property(get=GetTextureOffsetY,put=PutTextureOffsetY))
    float TextureOffsetY;
    __declspec(property(get=GetTextureHorizontalScale,put=PutTextureHorizontalScale))
    float TextureHorizontalScale;
    __declspec(property(get=GetTextureVerticalScale,put=PutTextureVerticalScale))
    float TextureVerticalScale;
    __declspec(property(get=GetPictureEffects))
    __missing_type__ PictureEffects;
    __declspec(property(get=GetGradientAngle,put=PutGradientAngle))
    float GradientAngle;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Background ( );
    HRESULT OneColorGradient (
        __missing_type__ Style,
        int Variant,
        float Degree );
    HRESULT Patterned (
        __missing_type__ Pattern );
    HRESULT PresetGradient (
        __missing_type__ Style,
        int Variant,
        __missing_type__ PresetGradientType );
    HRESULT PresetTextured (
        __missing_type__ PresetTexture );
    HRESULT Solid ( );
    HRESULT TwoColorGradient (
        __missing_type__ Style,
        int Variant );
    HRESULT UserPicture (
        _bstr_t PictureFile );
    HRESULT UserTextured (
        _bstr_t TextureFile );
    ColorFormatPtr GetBackColor ( );
    void PutBackColor (
        struct ColorFormat * BackColor );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    __missing_type__  GetGradientColorType ( );
    float GetGradientDegree ( );
    __missing_type__  GetGradientStyle ( );
    int GetGradientVariant ( );
    __missing_type__  GetPattern ( );
    __missing_type__  GetPresetGradientType ( );
    __missing_type__  GetPresetTexture ( );
    _bstr_t GetTextureName ( );
    __missing_type__  GetTextureType ( );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    __missing_type__  GetType ( );
    __missing_type__  GetVisible ( );
    void PutVisible (
        __missing_type__ Visible );
    __missing_type__ GetGradientStops ( );
    float GetTextureOffsetX ( );
    void PutTextureOffsetX (
        float TextureOffsetX );
    float GetTextureOffsetY ( );
    void PutTextureOffsetY (
        float TextureOffsetY );
    __missing_type__  GetTextureAlignment ( );
    void PutTextureAlignment (
        __missing_type__ TextureAlignment );
    float GetTextureHorizontalScale ( );
    void PutTextureHorizontalScale (
        float HorizontalScale );
    float GetTextureVerticalScale ( );
    void PutTextureVerticalScale (
        float VerticalScale );
    __missing_type__  GetTextureTile ( );
    void PutTextureTile (
        __missing_type__ TextureTile );
    __missing_type__  GetRotateWithObject ( );
    void PutRotateWithObject (
        __missing_type__ RotateWithObject );
    __missing_type__ GetPictureEffects ( );
    float GetGradientAngle ( );
    void PutGradientAngle (
        float GradientAngle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Background ( ) = 0;
      virtual HRESULT __stdcall raw_OneColorGradient (
        /*[in]*/ __missing_type__ Style,
        /*[in]*/ int Variant,
        /*[in]*/ float Degree ) = 0;
      virtual HRESULT __stdcall raw_Patterned (
        /*[in]*/ __missing_type__ Pattern ) = 0;
      virtual HRESULT __stdcall raw_PresetGradient (
        /*[in]*/ __missing_type__ Style,
        /*[in]*/ int Variant,
        /*[in]*/ __missing_type__ PresetGradientType ) = 0;
      virtual HRESULT __stdcall raw_PresetTextured (
        /*[in]*/ __missing_type__ PresetTexture ) = 0;
      virtual HRESULT __stdcall raw_Solid ( ) = 0;
      virtual HRESULT __stdcall raw_TwoColorGradient (
        /*[in]*/ __missing_type__ Style,
        /*[in]*/ int Variant ) = 0;
      virtual HRESULT __stdcall raw_UserPicture (
        /*[in]*/ BSTR PictureFile ) = 0;
      virtual HRESULT __stdcall raw_UserTextured (
        /*[in]*/ BSTR TextureFile ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ struct ColorFormat * * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ struct ColorFormat * BackColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ColorFormat * * ForeColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ struct ColorFormat * ForeColor ) = 0;
      virtual HRESULT __stdcall get_GradientColorType (
        /*[out,retval]*/ __missing_type__ * GradientColorType ) = 0;
      virtual HRESULT __stdcall get_GradientDegree (
        /*[out,retval]*/ float * GradientDegree ) = 0;
      virtual HRESULT __stdcall get_GradientStyle (
        /*[out,retval]*/ __missing_type__ * GradientStyle ) = 0;
      virtual HRESULT __stdcall get_GradientVariant (
        /*[out,retval]*/ int * GradientVariant ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ __missing_type__ * Pattern ) = 0;
      virtual HRESULT __stdcall get_PresetGradientType (
        /*[out,retval]*/ __missing_type__ * PresetGradientType ) = 0;
      virtual HRESULT __stdcall get_PresetTexture (
        /*[out,retval]*/ __missing_type__ * PresetTexture ) = 0;
      virtual HRESULT __stdcall get_TextureName (
        /*[out,retval]*/ BSTR * TextureName ) = 0;
      virtual HRESULT __stdcall get_TextureType (
        /*[out,retval]*/ __missing_type__ * TextureType ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ float * Transparency ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ float Transparency ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ __missing_type__ * Type ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ __missing_type__ * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ __missing_type__ Visible ) = 0;
      virtual HRESULT __stdcall get_GradientStops (
        /*[out,retval]*/ __missing_type__ * * GradientStops ) = 0;
      virtual HRESULT __stdcall get_TextureOffsetX (
        /*[out,retval]*/ float * TextureOffsetX ) = 0;
      virtual HRESULT __stdcall put_TextureOffsetX (
        /*[in]*/ float TextureOffsetX ) = 0;
      virtual HRESULT __stdcall get_TextureOffsetY (
        /*[out,retval]*/ float * TextureOffsetY ) = 0;
      virtual HRESULT __stdcall put_TextureOffsetY (
        /*[in]*/ float TextureOffsetY ) = 0;
      virtual HRESULT __stdcall get_TextureAlignment (
        /*[out,retval]*/ __missing_type__ * TextureAlignment ) = 0;
      virtual HRESULT __stdcall put_TextureAlignment (
        /*[in]*/ __missing_type__ TextureAlignment ) = 0;
      virtual HRESULT __stdcall get_TextureHorizontalScale (
        /*[out,retval]*/ float * HorizontalScale ) = 0;
      virtual HRESULT __stdcall put_TextureHorizontalScale (
        /*[in]*/ float HorizontalScale ) = 0;
      virtual HRESULT __stdcall get_TextureVerticalScale (
        /*[out,retval]*/ float * VerticalScale ) = 0;
      virtual HRESULT __stdcall put_TextureVerticalScale (
        /*[in]*/ float VerticalScale ) = 0;
      virtual HRESULT __stdcall get_TextureTile (
        /*[out,retval]*/ __missing_type__ * TextureTile ) = 0;
      virtual HRESULT __stdcall put_TextureTile (
        /*[in]*/ __missing_type__ TextureTile ) = 0;
      virtual HRESULT __stdcall get_RotateWithObject (
        /*[out,retval]*/ __missing_type__ * RotateWithObject ) = 0;
      virtual HRESULT __stdcall put_RotateWithObject (
        /*[in]*/ __missing_type__ RotateWithObject ) = 0;
      virtual HRESULT __stdcall get_PictureEffects (
        /*[out,retval]*/ __missing_type__ * * PictureEffects ) = 0;
      virtual HRESULT __stdcall get_GradientAngle (
        /*[out,retval]*/ float * GradientAngle ) = 0;
      virtual HRESULT __stdcall put_GradientAngle (
        /*[in]*/ float GradientAngle ) = 0;
};

struct __declspec(uuid("9149347f-5a91-11cf-8700-00aa0060263b"))
LineFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    ColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetWeight,put=PutWeight))
    float Weight;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    ColorFormatPtr GetBackColor ( );
    void PutBackColor (
        struct ColorFormat * BackColor );
    __missing_type__  GetBeginArrowheadLength ( );
    void PutBeginArrowheadLength (
        __missing_type__ BeginArrowheadLength );
    __missing_type__  GetBeginArrowheadStyle ( );
    void PutBeginArrowheadStyle (
        __missing_type__ BeginArrowheadStyle );
    __missing_type__  GetBeginArrowheadWidth ( );
    void PutBeginArrowheadWidth (
        __missing_type__ BeginArrowheadWidth );
    __missing_type__  GetDashStyle ( );
    void PutDashStyle (
        __missing_type__ DashStyle );
    __missing_type__  GetEndArrowheadLength ( );
    void PutEndArrowheadLength (
        __missing_type__ EndArrowheadLength );
    __missing_type__  GetEndArrowheadStyle ( );
    void PutEndArrowheadStyle (
        __missing_type__ EndArrowheadStyle );
    __missing_type__  GetEndArrowheadWidth ( );
    void PutEndArrowheadWidth (
        __missing_type__ EndArrowheadWidth );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    __missing_type__  GetPattern ( );
    void PutPattern (
        __missing_type__ Pattern );
    __missing_type__  GetStyle ( );
    void PutStyle (
        __missing_type__ Style );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    __missing_type__  GetVisible ( );
    void PutVisible (
        __missing_type__ Visible );
    float GetWeight ( );
    void PutWeight (
        float Weight );
    __missing_type__  GetInsetPen ( );
    void PutInsetPen (
        __missing_type__ InsetPen );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ struct ColorFormat * * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ struct ColorFormat * BackColor ) = 0;
      virtual HRESULT __stdcall get_BeginArrowheadLength (
        /*[out,retval]*/ __missing_type__ * BeginArrowheadLength ) = 0;
      virtual HRESULT __stdcall put_BeginArrowheadLength (
        /*[in]*/ __missing_type__ BeginArrowheadLength ) = 0;
      virtual HRESULT __stdcall get_BeginArrowheadStyle (
        /*[out,retval]*/ __missing_type__ * BeginArrowheadStyle ) = 0;
      virtual HRESULT __stdcall put_BeginArrowheadStyle (
        /*[in]*/ __missing_type__ BeginArrowheadStyle ) = 0;
      virtual HRESULT __stdcall get_BeginArrowheadWidth (
        /*[out,retval]*/ __missing_type__ * BeginArrowheadWidth ) = 0;
      virtual HRESULT __stdcall put_BeginArrowheadWidth (
        /*[in]*/ __missing_type__ BeginArrowheadWidth ) = 0;
      virtual HRESULT __stdcall get_DashStyle (
        /*[out,retval]*/ __missing_type__ * DashStyle ) = 0;
      virtual HRESULT __stdcall put_DashStyle (
        /*[in]*/ __missing_type__ DashStyle ) = 0;
      virtual HRESULT __stdcall get_EndArrowheadLength (
        /*[out,retval]*/ __missing_type__ * EndArrowheadLength ) = 0;
      virtual HRESULT __stdcall put_EndArrowheadLength (
        /*[in]*/ __missing_type__ EndArrowheadLength ) = 0;
      virtual HRESULT __stdcall get_EndArrowheadStyle (
        /*[out,retval]*/ __missing_type__ * EndArrowheadStyle ) = 0;
      virtual HRESULT __stdcall put_EndArrowheadStyle (
        /*[in]*/ __missing_type__ EndArrowheadStyle ) = 0;
      virtual HRESULT __stdcall get_EndArrowheadWidth (
        /*[out,retval]*/ __missing_type__ * EndArrowheadWidth ) = 0;
      virtual HRESULT __stdcall put_EndArrowheadWidth (
        /*[in]*/ __missing_type__ EndArrowheadWidth ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ColorFormat * * ForeColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ struct ColorFormat * ForeColor ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ __missing_type__ * Pattern ) = 0;
      virtual HRESULT __stdcall put_Pattern (
        /*[in]*/ __missing_type__ Pattern ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ __missing_type__ * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ __missing_type__ Style ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ float * Transparency ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ float Transparency ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ __missing_type__ * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ __missing_type__ Visible ) = 0;
      virtual HRESULT __stdcall get_Weight (
        /*[out,retval]*/ float * Weight ) = 0;
      virtual HRESULT __stdcall put_Weight (
        /*[in]*/ float Weight ) = 0;
      virtual HRESULT __stdcall get_InsetPen (
        /*[out,retval]*/ __missing_type__ * InsetPen ) = 0;
      virtual HRESULT __stdcall put_InsetPen (
        /*[in]*/ __missing_type__ InsetPen ) = 0;
};

struct __declspec(uuid("91493480-5a91-11cf-8700-00aa0060263b"))
ShadowFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetOffsetX,put=PutOffsetX))
    float OffsetX;
    __declspec(property(get=GetOffsetY,put=PutOffsetY))
    float OffsetY;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetBlur,put=PutBlur))
    float Blur;
    __declspec(property(get=GetSize,put=PutSize))
    float Size;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT IncrementOffsetX (
        float Increment );
    HRESULT IncrementOffsetY (
        float Increment );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    __missing_type__  GetObscured ( );
    void PutObscured (
        __missing_type__ Obscured );
    float GetOffsetX ( );
    void PutOffsetX (
        float OffsetX );
    float GetOffsetY ( );
    void PutOffsetY (
        float OffsetY );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    __missing_type__  GetType ( );
    void PutType (
        __missing_type__ Type );
    __missing_type__  GetVisible ( );
    void PutVisible (
        __missing_type__ Visible );
    __missing_type__  GetStyle ( );
    void PutStyle (
        __missing_type__ ShadowStyle );
    float GetBlur ( );
    void PutBlur (
        float Blur );
    float GetSize ( );
    void PutSize (
        float Size );
    __missing_type__  GetRotateWithShape ( );
    void PutRotateWithShape (
        __missing_type__ RotateWithShape );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_IncrementOffsetX (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementOffsetY (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ColorFormat * * ForeColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ struct ColorFormat * ForeColor ) = 0;
      virtual HRESULT __stdcall get_Obscured (
        /*[out,retval]*/ __missing_type__ * Obscured ) = 0;
      virtual HRESULT __stdcall put_Obscured (
        /*[in]*/ __missing_type__ Obscured ) = 0;
      virtual HRESULT __stdcall get_OffsetX (
        /*[out,retval]*/ float * OffsetX ) = 0;
      virtual HRESULT __stdcall put_OffsetX (
        /*[in]*/ float OffsetX ) = 0;
      virtual HRESULT __stdcall get_OffsetY (
        /*[out,retval]*/ float * OffsetY ) = 0;
      virtual HRESULT __stdcall put_OffsetY (
        /*[in]*/ float OffsetY ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ float * Transparency ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ float Transparency ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ __missing_type__ * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ __missing_type__ Type ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ __missing_type__ * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ __missing_type__ Visible ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ __missing_type__ * ShadowStyle ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ __missing_type__ ShadowStyle ) = 0;
      virtual HRESULT __stdcall get_Blur (
        /*[out,retval]*/ float * Blur ) = 0;
      virtual HRESULT __stdcall put_Blur (
        /*[in]*/ float Blur ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ float * Size ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ float Size ) = 0;
      virtual HRESULT __stdcall get_RotateWithShape (
        /*[out,retval]*/ __missing_type__ * RotateWithShape ) = 0;
      virtual HRESULT __stdcall put_RotateWithShape (
        /*[in]*/ __missing_type__ RotateWithShape ) = 0;
};

struct __declspec(uuid("91493482-5a91-11cf-8700-00aa0060263b"))
TextEffectFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    float FontSize;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTracking,put=PutTracking))
    float Tracking;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT ToggleVerticalText ( );
    __missing_type__  GetAlignment ( );
    void PutAlignment (
        __missing_type__ Alignment );
    __missing_type__  GetFontBold ( );
    void PutFontBold (
        __missing_type__ FontBold );
    __missing_type__  GetFontItalic ( );
    void PutFontItalic (
        __missing_type__ FontItalic );
    _bstr_t GetFontName ( );
    void PutFontName (
        _bstr_t FontName );
    float GetFontSize ( );
    void PutFontSize (
        float FontSize );
    __missing_type__  GetKernedPairs ( );
    void PutKernedPairs (
        __missing_type__ KernedPairs );
    __missing_type__  GetNormalizedHeight ( );
    void PutNormalizedHeight (
        __missing_type__ NormalizedHeight );
    __missing_type__  GetPresetShape ( );
    void PutPresetShape (
        __missing_type__ PresetShape );
    __missing_type__  GetPresetTextEffect ( );
    void PutPresetTextEffect (
        __missing_type__ Preset );
    __missing_type__  GetRotatedChars ( );
    void PutRotatedChars (
        __missing_type__ RotatedChars );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Text );
    float GetTracking ( );
    void PutTracking (
        float Tracking );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_ToggleVerticalText ( ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ __missing_type__ * Alignment ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ __missing_type__ Alignment ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ __missing_type__ * FontBold ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ __missing_type__ FontBold ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ __missing_type__ * FontItalic ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ __missing_type__ FontItalic ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ float * FontSize ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ float FontSize ) = 0;
      virtual HRESULT __stdcall get_KernedPairs (
        /*[out,retval]*/ __missing_type__ * KernedPairs ) = 0;
      virtual HRESULT __stdcall put_KernedPairs (
        /*[in]*/ __missing_type__ KernedPairs ) = 0;
      virtual HRESULT __stdcall get_NormalizedHeight (
        /*[out,retval]*/ __missing_type__ * NormalizedHeight ) = 0;
      virtual HRESULT __stdcall put_NormalizedHeight (
        /*[in]*/ __missing_type__ NormalizedHeight ) = 0;
      virtual HRESULT __stdcall get_PresetShape (
        /*[out,retval]*/ __missing_type__ * PresetShape ) = 0;
      virtual HRESULT __stdcall put_PresetShape (
        /*[in]*/ __missing_type__ PresetShape ) = 0;
      virtual HRESULT __stdcall get_PresetTextEffect (
        /*[out,retval]*/ __missing_type__ * Preset ) = 0;
      virtual HRESULT __stdcall put_PresetTextEffect (
        /*[in]*/ __missing_type__ Preset ) = 0;
      virtual HRESULT __stdcall get_RotatedChars (
        /*[out,retval]*/ __missing_type__ * RotatedChars ) = 0;
      virtual HRESULT __stdcall put_RotatedChars (
        /*[in]*/ __missing_type__ RotatedChars ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Tracking (
        /*[out,retval]*/ float * Tracking ) = 0;
      virtual HRESULT __stdcall put_Tracking (
        /*[in]*/ float Tracking ) = 0;
};

struct __declspec(uuid("91493483-5a91-11cf-8700-00aa0060263b"))
ThreeDFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPresetCamera))
    __missing_type__  PresetCamera;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRotationZ,put=PutRotationZ))
    float RotationZ;
    __declspec(property(get=GetContourWidth,put=PutContourWidth))
    float ContourWidth;
    __declspec(property(get=GetContourColor))
    ColorFormatPtr ContourColor;
    __declspec(property(get=GetFieldOfView,put=PutFieldOfView))
    float FieldOfView;
    __declspec(property(get=GetLightAngle,put=PutLightAngle))
    float LightAngle;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetDepth,put=PutDepth))
    float Depth;
    __declspec(property(get=GetExtrusionColor))
    ColorFormatPtr ExtrusionColor;
    __declspec(property(get=GetPresetExtrusionDirection))
    __missing_type__  PresetExtrusionDirection;
    __declspec(property(get=GetPresetThreeDFormat))
    __missing_type__  PresetThreeDFormat;
    __declspec(property(get=GetRotationX,put=PutRotationX))
    float RotationX;
    __declspec(property(get=GetRotationY,put=PutRotationY))
    float RotationY;
    __declspec(property(get=GetZ,put=PutZ))
    float Z;
    __declspec(property(get=GetBevelTopInset,put=PutBevelTopInset))
    float BevelTopInset;
    __declspec(property(get=GetBevelTopDepth,put=PutBevelTopDepth))
    float BevelTopDepth;
    __declspec(property(get=GetBevelBottomInset,put=PutBevelBottomInset))
    float BevelBottomInset;
    __declspec(property(get=GetBevelBottomDepth,put=PutBevelBottomDepth))
    float BevelBottomDepth;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT IncrementRotationX (
        float Increment );
    HRESULT IncrementRotationY (
        float Increment );
    HRESULT ResetRotation ( );
    HRESULT SetThreeDFormat (
        __missing_type__ PresetThreeDFormat );
    HRESULT SetExtrusionDirection (
        __missing_type__ PresetExtrusionDirection );
    float GetDepth ( );
    void PutDepth (
        float Depth );
    ColorFormatPtr GetExtrusionColor ( );
    __missing_type__  GetExtrusionColorType ( );
    void PutExtrusionColorType (
        __missing_type__ ExtrusionColorType );
    __missing_type__  GetPerspective ( );
    void PutPerspective (
        __missing_type__ Perspective );
    __missing_type__  GetPresetExtrusionDirection ( );
    __missing_type__  GetPresetLightingDirection ( );
    void PutPresetLightingDirection (
        __missing_type__ PresetLightingDirection );
    __missing_type__  GetPresetLightingSoftness ( );
    void PutPresetLightingSoftness (
        __missing_type__ PresetLightingSoftness );
    __missing_type__  GetPresetMaterial ( );
    void PutPresetMaterial (
        __missing_type__ PresetMaterial );
    __missing_type__  GetPresetThreeDFormat ( );
    float GetRotationX ( );
    void PutRotationX (
        float RotationX );
    float GetRotationY ( );
    void PutRotationY (
        float RotationY );
    __missing_type__  GetVisible ( );
    void PutVisible (
        __missing_type__ Visible );
    HRESULT SetPresetCamera (
        __missing_type__ PresetCamera );
    HRESULT IncrementRotationZ (
        float Increment );
    HRESULT IncrementRotationHorizontal (
        float Increment );
    HRESULT IncrementRotationVertical (
        float Increment );
    __missing_type__  GetPresetLighting ( );
    void PutPresetLighting (
        __missing_type__ PresetLightRigType );
    float GetZ ( );
    void PutZ (
        float Z );
    __missing_type__  GetBevelTopType ( );
    void PutBevelTopType (
        __missing_type__ BevelTopType );
    float GetBevelTopInset ( );
    void PutBevelTopInset (
        float BevelTopInset );
    float GetBevelTopDepth ( );
    void PutBevelTopDepth (
        float BevelTopDepth );
    __missing_type__  GetBevelBottomType ( );
    void PutBevelBottomType (
        __missing_type__ BevelBottomType );
    float GetBevelBottomInset ( );
    void PutBevelBottomInset (
        float BevelBottomInset );
    float GetBevelBottomDepth ( );
    void PutBevelBottomDepth (
        float BevelBottomDepth );
    __missing_type__  GetPresetCamera ( );
    float GetRotationZ ( );
    void PutRotationZ (
        float RotationZ );
    float GetContourWidth ( );
    void PutContourWidth (
        float Width );
    ColorFormatPtr GetContourColor ( );
    float GetFieldOfView ( );
    void PutFieldOfView (
        float FOV );
    __missing_type__  GetProjectText ( );
    void PutProjectText (
        __missing_type__ ProjectText );
    float GetLightAngle ( );
    void PutLightAngle (
        float LightAngle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotationX (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotationY (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_ResetRotation ( ) = 0;
      virtual HRESULT __stdcall raw_SetThreeDFormat (
        /*[in]*/ __missing_type__ PresetThreeDFormat ) = 0;
      virtual HRESULT __stdcall raw_SetExtrusionDirection (
        /*[in]*/ __missing_type__ PresetExtrusionDirection ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ float * Depth ) = 0;
      virtual HRESULT __stdcall put_Depth (
        /*[in]*/ float Depth ) = 0;
      virtual HRESULT __stdcall get_ExtrusionColor (
        /*[out,retval]*/ struct ColorFormat * * ExtrusionColor ) = 0;
      virtual HRESULT __stdcall get_ExtrusionColorType (
        /*[out,retval]*/ __missing_type__ * ExtrusionColorType ) = 0;
      virtual HRESULT __stdcall put_ExtrusionColorType (
        /*[in]*/ __missing_type__ ExtrusionColorType ) = 0;
      virtual HRESULT __stdcall get_Perspective (
        /*[out,retval]*/ __missing_type__ * Perspective ) = 0;
      virtual HRESULT __stdcall put_Perspective (
        /*[in]*/ __missing_type__ Perspective ) = 0;
      virtual HRESULT __stdcall get_PresetExtrusionDirection (
        /*[out,retval]*/ __missing_type__ * PresetExtrusionDirection ) = 0;
      virtual HRESULT __stdcall get_PresetLightingDirection (
        /*[out,retval]*/ __missing_type__ * PresetLightingDirection ) = 0;
      virtual HRESULT __stdcall put_PresetLightingDirection (
        /*[in]*/ __missing_type__ PresetLightingDirection ) = 0;
      virtual HRESULT __stdcall get_PresetLightingSoftness (
        /*[out,retval]*/ __missing_type__ * PresetLightingSoftness ) = 0;
      virtual HRESULT __stdcall put_PresetLightingSoftness (
        /*[in]*/ __missing_type__ PresetLightingSoftness ) = 0;
      virtual HRESULT __stdcall get_PresetMaterial (
        /*[out,retval]*/ __missing_type__ * PresetMaterial ) = 0;
      virtual HRESULT __stdcall put_PresetMaterial (
        /*[in]*/ __missing_type__ PresetMaterial ) = 0;
      virtual HRESULT __stdcall get_PresetThreeDFormat (
        /*[out,retval]*/ __missing_type__ * PresetThreeDFormat ) = 0;
      virtual HRESULT __stdcall get_RotationX (
        /*[out,retval]*/ float * RotationX ) = 0;
      virtual HRESULT __stdcall put_RotationX (
        /*[in]*/ float RotationX ) = 0;
      virtual HRESULT __stdcall get_RotationY (
        /*[out,retval]*/ float * RotationY ) = 0;
      virtual HRESULT __stdcall put_RotationY (
        /*[in]*/ float RotationY ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ __missing_type__ * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ __missing_type__ Visible ) = 0;
      virtual HRESULT __stdcall raw_SetPresetCamera (
        /*[in]*/ __missing_type__ PresetCamera ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotationZ (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotationHorizontal (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotationVertical (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall get_PresetLighting (
        /*[out,retval]*/ __missing_type__ * PresetLightRigType ) = 0;
      virtual HRESULT __stdcall put_PresetLighting (
        /*[in]*/ __missing_type__ PresetLightRigType ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ float * Z ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ float Z ) = 0;
      virtual HRESULT __stdcall get_BevelTopType (
        /*[out,retval]*/ __missing_type__ * BevelTopType ) = 0;
      virtual HRESULT __stdcall put_BevelTopType (
        /*[in]*/ __missing_type__ BevelTopType ) = 0;
      virtual HRESULT __stdcall get_BevelTopInset (
        /*[out,retval]*/ float * BevelTopInset ) = 0;
      virtual HRESULT __stdcall put_BevelTopInset (
        /*[in]*/ float BevelTopInset ) = 0;
      virtual HRESULT __stdcall get_BevelTopDepth (
        /*[out,retval]*/ float * BevelTopDepth ) = 0;
      virtual HRESULT __stdcall put_BevelTopDepth (
        /*[in]*/ float BevelTopDepth ) = 0;
      virtual HRESULT __stdcall get_BevelBottomType (
        /*[out,retval]*/ __missing_type__ * BevelBottomType ) = 0;
      virtual HRESULT __stdcall put_BevelBottomType (
        /*[in]*/ __missing_type__ BevelBottomType ) = 0;
      virtual HRESULT __stdcall get_BevelBottomInset (
        /*[out,retval]*/ float * BevelBottomInset ) = 0;
      virtual HRESULT __stdcall put_BevelBottomInset (
        /*[in]*/ float BevelBottomInset ) = 0;
      virtual HRESULT __stdcall get_BevelBottomDepth (
        /*[out,retval]*/ float * BevelBottomDepth ) = 0;
      virtual HRESULT __stdcall put_BevelBottomDepth (
        /*[in]*/ float BevelBottomDepth ) = 0;
      virtual HRESULT __stdcall get_PresetCamera (
        /*[out,retval]*/ __missing_type__ * PresetCamera ) = 0;
      virtual HRESULT __stdcall get_RotationZ (
        /*[out,retval]*/ float * RotationZ ) = 0;
      virtual HRESULT __stdcall put_RotationZ (
        /*[in]*/ float RotationZ ) = 0;
      virtual HRESULT __stdcall get_ContourWidth (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_ContourWidth (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_ContourColor (
        /*[out,retval]*/ struct ColorFormat * * ContourColor ) = 0;
      virtual HRESULT __stdcall get_FieldOfView (
        /*[out,retval]*/ float * FOV ) = 0;
      virtual HRESULT __stdcall put_FieldOfView (
        /*[in]*/ float FOV ) = 0;
      virtual HRESULT __stdcall get_ProjectText (
        /*[out,retval]*/ __missing_type__ * ProjectText ) = 0;
      virtual HRESULT __stdcall put_ProjectText (
        /*[in]*/ __missing_type__ ProjectText ) = 0;
      virtual HRESULT __stdcall get_LightAngle (
        /*[out,retval]*/ float * LightAngle ) = 0;
      virtual HRESULT __stdcall put_LightAngle (
        /*[in]*/ float LightAngle ) = 0;
};

struct __declspec(uuid("91493485-5a91-11cf-8700-00aa0060263b"))
CalloutFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoLength))
    __missing_type__  AutoLength;
    __declspec(property(get=GetDrop))
    float Drop;
    __declspec(property(get=GetDropType))
    __missing_type__  DropType;
    __declspec(property(get=GetGap,put=PutGap))
    float Gap;
    __declspec(property(get=GetLength))
    float Length;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AutomaticLength ( );
    HRESULT CustomDrop (
        float Drop );
    HRESULT CustomLength (
        float Length );
    HRESULT PresetDrop (
        __missing_type__ DropType );
    __missing_type__  GetAccent ( );
    void PutAccent (
        __missing_type__ Accent );
    __missing_type__  GetAngle ( );
    void PutAngle (
        __missing_type__ Angle );
    __missing_type__  GetAutoAttach ( );
    void PutAutoAttach (
        __missing_type__ AutoAttach );
    __missing_type__  GetAutoLength ( );
    __missing_type__  GetBorder ( );
    void PutBorder (
        __missing_type__ Border );
    float GetDrop ( );
    __missing_type__  GetDropType ( );
    float GetGap ( );
    void PutGap (
        float Gap );
    float GetLength ( );
    __missing_type__  GetType ( );
    void PutType (
        __missing_type__ Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_AutomaticLength ( ) = 0;
      virtual HRESULT __stdcall raw_CustomDrop (
        /*[in]*/ float Drop ) = 0;
      virtual HRESULT __stdcall raw_CustomLength (
        /*[in]*/ float Length ) = 0;
      virtual HRESULT __stdcall raw_PresetDrop (
        /*[in]*/ __missing_type__ DropType ) = 0;
      virtual HRESULT __stdcall get_Accent (
        /*[out,retval]*/ __missing_type__ * Accent ) = 0;
      virtual HRESULT __stdcall put_Accent (
        /*[in]*/ __missing_type__ Accent ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ __missing_type__ * Angle ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ __missing_type__ Angle ) = 0;
      virtual HRESULT __stdcall get_AutoAttach (
        /*[out,retval]*/ __missing_type__ * AutoAttach ) = 0;
      virtual HRESULT __stdcall put_AutoAttach (
        /*[in]*/ __missing_type__ AutoAttach ) = 0;
      virtual HRESULT __stdcall get_AutoLength (
        /*[out,retval]*/ __missing_type__ * AutoLength ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ __missing_type__ * Border ) = 0;
      virtual HRESULT __stdcall put_Border (
        /*[in]*/ __missing_type__ Border ) = 0;
      virtual HRESULT __stdcall get_Drop (
        /*[out,retval]*/ float * Drop ) = 0;
      virtual HRESULT __stdcall get_DropType (
        /*[out,retval]*/ __missing_type__ * DropType ) = 0;
      virtual HRESULT __stdcall get_Gap (
        /*[out,retval]*/ float * Gap ) = 0;
      virtual HRESULT __stdcall put_Gap (
        /*[in]*/ float Gap ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ float * Length ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ __missing_type__ * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ __missing_type__ Type ) = 0;
};

struct __declspec(uuid("91493487-5a91-11cf-8700-00aa0060263b"))
ShapeNode : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEditingType))
    __missing_type__  EditingType;
    __declspec(property(get=GetPoints))
    _variant_t Points;
    __declspec(property(get=GetSegmentType))
    __missing_type__  SegmentType;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    __missing_type__  GetEditingType ( );
    _variant_t GetPoints ( );
    __missing_type__  GetSegmentType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_EditingType (
        /*[out,retval]*/ __missing_type__ * EditingType ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ VARIANT * Points ) = 0;
      virtual HRESULT __stdcall get_SegmentType (
        /*[out,retval]*/ __missing_type__ * SegmentType ) = 0;
};

struct __declspec(uuid("91493486-5a91-11cf-8700-00aa0060263b"))
ShapeNodes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapeNodePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete (
        int Index );
    HRESULT Insert (
        int Index,
        __missing_type__ SegmentType,
        __missing_type__ EditingType,
        float X1,
        float Y1,
        float X2,
        float Y2,
        float X3,
        float Y3 );
    HRESULT SetEditingType (
        int Index,
        __missing_type__ EditingType );
    HRESULT SetPosition (
        int Index,
        float X1,
        float Y1 );
    HRESULT SetSegmentType (
        int Index,
        __missing_type__ SegmentType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ShapeNode * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ int Index,
        /*[in]*/ __missing_type__ SegmentType,
        /*[in]*/ __missing_type__ EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[in]*/ float X2,
        /*[in]*/ float Y2,
        /*[in]*/ float X3,
        /*[in]*/ float Y3 ) = 0;
      virtual HRESULT __stdcall raw_SetEditingType (
        /*[in]*/ int Index,
        /*[in]*/ __missing_type__ EditingType ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ int Index,
        /*[in]*/ float X1,
        /*[in]*/ float Y1 ) = 0;
      virtual HRESULT __stdcall raw_SetSegmentType (
        /*[in]*/ int Index,
        /*[in]*/ __missing_type__ SegmentType ) = 0;
};

struct __declspec(uuid("91493489-5a91-11cf-8700-00aa0060263b"))
LinkFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSourceFullName,put=PutSourceFullName))
    _bstr_t SourceFullName;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    enum PpUpdateOption AutoUpdate;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetSourceFullName ( );
    void PutSourceFullName (
        _bstr_t SourceFullName );
    enum PpUpdateOption GetAutoUpdate ( );
    void PutAutoUpdate (
        enum PpUpdateOption AutoUpdate );
    HRESULT Update ( );
    HRESULT BreakLink ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_SourceFullName (
        /*[out,retval]*/ BSTR * SourceFullName ) = 0;
      virtual HRESULT __stdcall put_SourceFullName (
        /*[in]*/ BSTR SourceFullName ) = 0;
      virtual HRESULT __stdcall get_AutoUpdate (
        /*[out,retval]*/ enum PpUpdateOption * AutoUpdate ) = 0;
      virtual HRESULT __stdcall put_AutoUpdate (
        /*[in]*/ enum PpUpdateOption AutoUpdate ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall raw_BreakLink ( ) = 0;
};

struct __declspec(uuid("9149348a-5a91-11cf-8700-00aa0060263b"))
ObjectVerbs : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t Item (
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * Item ) = 0;
};

struct __declspec(uuid("91493488-5a91-11cf-8700-00aa0060263b"))
OLEFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetObjectVerbs))
    ObjectVerbsPtr ObjectVerbs;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;
    __declspec(property(get=GetProgID))
    _bstr_t ProgID;
    __declspec(property(get=GetFollowColors,put=PutFollowColors))
    enum PpFollowColors FollowColors;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ObjectVerbsPtr GetObjectVerbs ( );
    IDispatchPtr GetObject ( );
    _bstr_t GetProgID ( );
    enum PpFollowColors GetFollowColors ( );
    void PutFollowColors (
        enum PpFollowColors FollowColors );
    HRESULT DoVerb (
        int Index );
    HRESULT Activate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_ObjectVerbs (
        /*[out,retval]*/ struct ObjectVerbs * * ObjectVerbs ) = 0;
      virtual HRESULT __stdcall get_Object (
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall get_ProgID (
        /*[out,retval]*/ BSTR * ProgID ) = 0;
      virtual HRESULT __stdcall get_FollowColors (
        /*[out,retval]*/ enum PpFollowColors * FollowColors ) = 0;
      virtual HRESULT __stdcall put_FollowColors (
        /*[in]*/ enum PpFollowColors FollowColors ) = 0;
      virtual HRESULT __stdcall raw_DoVerb (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
};

struct __declspec(uuid("9149348d-5a91-11cf-8700-00aa0060263b"))
ActionSetting : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAction,put=PutAction))
    enum PpActionType Action;
    __declspec(property(get=GetActionVerb,put=PutActionVerb))
    _bstr_t ActionVerb;
    __declspec(property(get=GetRun,put=PutRun))
    _bstr_t Run;
    __declspec(property(get=GetSlideShowName,put=PutSlideShowName))
    _bstr_t SlideShowName;
    __declspec(property(get=GetHyperlink))
    HyperlinkPtr Hyperlink;
    __declspec(property(get=GetSoundEffect))
    SoundEffectPtr SoundEffect;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum PpActionType GetAction ( );
    void PutAction (
        enum PpActionType Action );
    _bstr_t GetActionVerb ( );
    void PutActionVerb (
        _bstr_t ActionVerb );
    __missing_type__  GetAnimateAction ( );
    void PutAnimateAction (
        __missing_type__ AnimateAction );
    _bstr_t GetRun ( );
    void PutRun (
        _bstr_t Run );
    _bstr_t GetSlideShowName ( );
    void PutSlideShowName (
        _bstr_t SlideShowName );
    HyperlinkPtr GetHyperlink ( );
    SoundEffectPtr GetSoundEffect ( );
    __missing_type__  GetShowAndReturn ( );
    void PutShowAndReturn (
        __missing_type__ ShowAndReturn );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Action (
        /*[out,retval]*/ enum PpActionType * Action ) = 0;
      virtual HRESULT __stdcall put_Action (
        /*[in]*/ enum PpActionType Action ) = 0;
      virtual HRESULT __stdcall get_ActionVerb (
        /*[out,retval]*/ BSTR * ActionVerb ) = 0;
      virtual HRESULT __stdcall put_ActionVerb (
        /*[in]*/ BSTR ActionVerb ) = 0;
      virtual HRESULT __stdcall get_AnimateAction (
        /*[out,retval]*/ __missing_type__ * AnimateAction ) = 0;
      virtual HRESULT __stdcall put_AnimateAction (
        /*[in]*/ __missing_type__ AnimateAction ) = 0;
      virtual HRESULT __stdcall get_Run (
        /*[out,retval]*/ BSTR * Run ) = 0;
      virtual HRESULT __stdcall put_Run (
        /*[in]*/ BSTR Run ) = 0;
      virtual HRESULT __stdcall get_SlideShowName (
        /*[out,retval]*/ BSTR * SlideShowName ) = 0;
      virtual HRESULT __stdcall put_SlideShowName (
        /*[in]*/ BSTR SlideShowName ) = 0;
      virtual HRESULT __stdcall get_Hyperlink (
        /*[out,retval]*/ struct Hyperlink * * Hyperlink ) = 0;
      virtual HRESULT __stdcall get_SoundEffect (
        /*[out,retval]*/ struct SoundEffect * * SoundEffect ) = 0;
      virtual HRESULT __stdcall get_ShowAndReturn (
        /*[out,retval]*/ __missing_type__ * ShowAndReturn ) = 0;
      virtual HRESULT __stdcall put_ShowAndReturn (
        /*[in]*/ __missing_type__ ShowAndReturn ) = 0;
};

struct __declspec(uuid("9149348c-5a91-11cf-8700-00aa0060263b"))
ActionSettings : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ActionSettingPtr Item (
        enum PpMouseActivation Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ enum PpMouseActivation Index,
        /*[out,retval]*/ struct ActionSetting * * Item ) = 0;
};

struct __declspec(uuid("9149348e-5a91-11cf-8700-00aa0060263b"))
PlaySettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActionVerb,put=PutActionVerb))
    _bstr_t ActionVerb;
    __declspec(property(get=GetStopAfterSlides,put=PutStopAfterSlides))
    int StopAfterSlides;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetActionVerb ( );
    void PutActionVerb (
        _bstr_t ActionVerb );
    __missing_type__  GetHideWhileNotPlaying ( );
    void PutHideWhileNotPlaying (
        __missing_type__ HideWhileNotPlaying );
    __missing_type__  GetLoopUntilStopped ( );
    void PutLoopUntilStopped (
        __missing_type__ LoopUntilStopped );
    __missing_type__  GetPlayOnEntry ( );
    void PutPlayOnEntry (
        __missing_type__ PlayOnEntry );
    __missing_type__  GetRewindMovie ( );
    void PutRewindMovie (
        __missing_type__ RewindMovie );
    __missing_type__  GetPauseAnimation ( );
    void PutPauseAnimation (
        __missing_type__ PauseAnimation );
    int GetStopAfterSlides ( );
    void PutStopAfterSlides (
        int StopAfterSlides );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_ActionVerb (
        /*[out,retval]*/ BSTR * ActionVerb ) = 0;
      virtual HRESULT __stdcall put_ActionVerb (
        /*[in]*/ BSTR ActionVerb ) = 0;
      virtual HRESULT __stdcall get_HideWhileNotPlaying (
        /*[out,retval]*/ __missing_type__ * HideWhileNotPlaying ) = 0;
      virtual HRESULT __stdcall put_HideWhileNotPlaying (
        /*[in]*/ __missing_type__ HideWhileNotPlaying ) = 0;
      virtual HRESULT __stdcall get_LoopUntilStopped (
        /*[out,retval]*/ __missing_type__ * LoopUntilStopped ) = 0;
      virtual HRESULT __stdcall put_LoopUntilStopped (
        /*[in]*/ __missing_type__ LoopUntilStopped ) = 0;
      virtual HRESULT __stdcall get_PlayOnEntry (
        /*[out,retval]*/ __missing_type__ * PlayOnEntry ) = 0;
      virtual HRESULT __stdcall put_PlayOnEntry (
        /*[in]*/ __missing_type__ PlayOnEntry ) = 0;
      virtual HRESULT __stdcall get_RewindMovie (
        /*[out,retval]*/ __missing_type__ * RewindMovie ) = 0;
      virtual HRESULT __stdcall put_RewindMovie (
        /*[in]*/ __missing_type__ RewindMovie ) = 0;
      virtual HRESULT __stdcall get_PauseAnimation (
        /*[out,retval]*/ __missing_type__ * PauseAnimation ) = 0;
      virtual HRESULT __stdcall put_PauseAnimation (
        /*[in]*/ __missing_type__ PauseAnimation ) = 0;
      virtual HRESULT __stdcall get_StopAfterSlides (
        /*[out,retval]*/ int * StopAfterSlides ) = 0;
      virtual HRESULT __stdcall put_StopAfterSlides (
        /*[in]*/ int StopAfterSlides ) = 0;
};

struct __declspec(uuid("9149348b-5a91-11cf-8700-00aa0060263b"))
AnimationSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetChartUnitEffect,put=PutChartUnitEffect))
    enum PpChartUnitEffect ChartUnitEffect;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDimColor))
    ColorFormatPtr DimColor;
    __declspec(property(get=GetSoundEffect))
    SoundEffectPtr SoundEffect;
    __declspec(property(get=GetEntryEffect,put=PutEntryEffect))
    enum PpEntryEffect EntryEffect;
    __declspec(property(get=GetAfterEffect,put=PutAfterEffect))
    enum PpAfterEffect AfterEffect;
    __declspec(property(get=GetAnimationOrder,put=PutAnimationOrder))
    int AnimationOrder;
    __declspec(property(get=GetAdvanceMode,put=PutAdvanceMode))
    enum PpAdvanceMode AdvanceMode;
    __declspec(property(get=GetAdvanceTime,put=PutAdvanceTime))
    float AdvanceTime;
    __declspec(property(get=GetPlaySettings))
    PlaySettingsPtr PlaySettings;
    __declspec(property(get=GetTextLevelEffect,put=PutTextLevelEffect))
    enum PpTextLevelEffect TextLevelEffect;
    __declspec(property(get=GetTextUnitEffect,put=PutTextUnitEffect))
    enum PpTextUnitEffect TextUnitEffect;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ColorFormatPtr GetDimColor ( );
    SoundEffectPtr GetSoundEffect ( );
    enum PpEntryEffect GetEntryEffect ( );
    void PutEntryEffect (
        enum PpEntryEffect EntryEffect );
    enum PpAfterEffect GetAfterEffect ( );
    void PutAfterEffect (
        enum PpAfterEffect AfterEffect );
    int GetAnimationOrder ( );
    void PutAnimationOrder (
        int AnimationOrder );
    enum PpAdvanceMode GetAdvanceMode ( );
    void PutAdvanceMode (
        enum PpAdvanceMode AdvanceMode );
    float GetAdvanceTime ( );
    void PutAdvanceTime (
        float AdvanceTime );
    PlaySettingsPtr GetPlaySettings ( );
    enum PpTextLevelEffect GetTextLevelEffect ( );
    void PutTextLevelEffect (
        enum PpTextLevelEffect TextLevelEffect );
    enum PpTextUnitEffect GetTextUnitEffect ( );
    void PutTextUnitEffect (
        enum PpTextUnitEffect TextUnitEffect );
    __missing_type__  GetAnimate ( );
    void PutAnimate (
        __missing_type__ Animate );
    __missing_type__  GetAnimateBackground ( );
    void PutAnimateBackground (
        __missing_type__ AnimateBackground );
    __missing_type__  GetAnimateTextInReverse ( );
    void PutAnimateTextInReverse (
        __missing_type__ AnimateTextInReverse );
    enum PpChartUnitEffect GetChartUnitEffect ( );
    void PutChartUnitEffect (
        enum PpChartUnitEffect ChartUnitEffect );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_DimColor (
        /*[out,retval]*/ struct ColorFormat * * DimColor ) = 0;
      virtual HRESULT __stdcall get_SoundEffect (
        /*[out,retval]*/ struct SoundEffect * * SoundEffect ) = 0;
      virtual HRESULT __stdcall get_EntryEffect (
        /*[out,retval]*/ enum PpEntryEffect * EntryEffect ) = 0;
      virtual HRESULT __stdcall put_EntryEffect (
        /*[in]*/ enum PpEntryEffect EntryEffect ) = 0;
      virtual HRESULT __stdcall get_AfterEffect (
        /*[out,retval]*/ enum PpAfterEffect * AfterEffect ) = 0;
      virtual HRESULT __stdcall put_AfterEffect (
        /*[in]*/ enum PpAfterEffect AfterEffect ) = 0;
      virtual HRESULT __stdcall get_AnimationOrder (
        /*[out,retval]*/ int * AnimationOrder ) = 0;
      virtual HRESULT __stdcall put_AnimationOrder (
        /*[in]*/ int AnimationOrder ) = 0;
      virtual HRESULT __stdcall get_AdvanceMode (
        /*[out,retval]*/ enum PpAdvanceMode * AdvanceMode ) = 0;
      virtual HRESULT __stdcall put_AdvanceMode (
        /*[in]*/ enum PpAdvanceMode AdvanceMode ) = 0;
      virtual HRESULT __stdcall get_AdvanceTime (
        /*[out,retval]*/ float * AdvanceTime ) = 0;
      virtual HRESULT __stdcall put_AdvanceTime (
        /*[in]*/ float AdvanceTime ) = 0;
      virtual HRESULT __stdcall get_PlaySettings (
        /*[out,retval]*/ struct PlaySettings * * PlaySettings ) = 0;
      virtual HRESULT __stdcall get_TextLevelEffect (
        /*[out,retval]*/ enum PpTextLevelEffect * TextLevelEffect ) = 0;
      virtual HRESULT __stdcall put_TextLevelEffect (
        /*[in]*/ enum PpTextLevelEffect TextLevelEffect ) = 0;
      virtual HRESULT __stdcall get_TextUnitEffect (
        /*[out,retval]*/ enum PpTextUnitEffect * TextUnitEffect ) = 0;
      virtual HRESULT __stdcall put_TextUnitEffect (
        /*[in]*/ enum PpTextUnitEffect TextUnitEffect ) = 0;
      virtual HRESULT __stdcall get_Animate (
        /*[out,retval]*/ __missing_type__ * Animate ) = 0;
      virtual HRESULT __stdcall put_Animate (
        /*[in]*/ __missing_type__ Animate ) = 0;
      virtual HRESULT __stdcall get_AnimateBackground (
        /*[out,retval]*/ __missing_type__ * AnimateBackground ) = 0;
      virtual HRESULT __stdcall put_AnimateBackground (
        /*[in]*/ __missing_type__ AnimateBackground ) = 0;
      virtual HRESULT __stdcall get_AnimateTextInReverse (
        /*[out,retval]*/ __missing_type__ * AnimateTextInReverse ) = 0;
      virtual HRESULT __stdcall put_AnimateTextInReverse (
        /*[in]*/ __missing_type__ AnimateTextInReverse ) = 0;
      virtual HRESULT __stdcall get_ChartUnitEffect (
        /*[out,retval]*/ enum PpChartUnitEffect * ChartUnitEffect ) = 0;
      virtual HRESULT __stdcall put_ChartUnitEffect (
        /*[in]*/ enum PpChartUnitEffect ChartUnitEffect ) = 0;
};

struct __declspec(uuid("91493492-5a91-11cf-8700-00aa0060263b"))
RulerLevel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFirstMargin,put=PutFirstMargin))
    float FirstMargin;
    __declspec(property(get=GetLeftMargin,put=PutLeftMargin))
    float LeftMargin;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    float GetFirstMargin ( );
    void PutFirstMargin (
        float FirstMargin );
    float GetLeftMargin ( );
    void PutLeftMargin (
        float LeftMargin );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_FirstMargin (
        /*[out,retval]*/ float * FirstMargin ) = 0;
      virtual HRESULT __stdcall put_FirstMargin (
        /*[in]*/ float FirstMargin ) = 0;
      virtual HRESULT __stdcall get_LeftMargin (
        /*[out,retval]*/ float * LeftMargin ) = 0;
      virtual HRESULT __stdcall put_LeftMargin (
        /*[in]*/ float LeftMargin ) = 0;
};

struct __declspec(uuid("91493491-5a91-11cf-8700-00aa0060263b"))
RulerLevels : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    RulerLevelPtr Item (
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct RulerLevel * * Item ) = 0;
};

struct __declspec(uuid("91493494-5a91-11cf-8700-00aa0060263b"))
TabStop : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType,put=PutType))
    enum PpTabStopType Type;
    __declspec(property(get=GetPosition,put=PutPosition))
    float Position;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum PpTabStopType GetType ( );
    void PutType (
        enum PpTabStopType Type );
    float GetPosition ( );
    void PutPosition (
        float Position );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PpTabStopType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum PpTabStopType Type ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ float * Position ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ float Position ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("91493493-5a91-11cf-8700-00aa0060263b"))
TabStops : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDefaultSpacing,put=PutDefaultSpacing))
    float DefaultSpacing;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    TabStopPtr Item (
        int Index );
    float GetDefaultSpacing ( );
    void PutDefaultSpacing (
        float DefaultSpacing );
    TabStopPtr Add (
        enum PpTabStopType Type,
        float Position );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct TabStop * * Item ) = 0;
      virtual HRESULT __stdcall get_DefaultSpacing (
        /*[out,retval]*/ float * DefaultSpacing ) = 0;
      virtual HRESULT __stdcall put_DefaultSpacing (
        /*[in]*/ float DefaultSpacing ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum PpTabStopType Type,
        /*[in]*/ float Position,
        /*[out,retval]*/ struct TabStop * * Add ) = 0;
};

struct __declspec(uuid("91493490-5a91-11cf-8700-00aa0060263b"))
Ruler : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetTabStops))
    TabStopsPtr TabStops;
    __declspec(property(get=GetLevels))
    RulerLevelsPtr Levels;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    TabStopsPtr GetTabStops ( );
    RulerLevelsPtr GetLevels ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_TabStops (
        /*[out,retval]*/ struct TabStops * * TabStops ) = 0;
      virtual HRESULT __stdcall get_Levels (
        /*[out,retval]*/ struct RulerLevels * * Levels ) = 0;
};

struct __declspec(uuid("91493495-5a91-11cf-8700-00aa0060263b"))
Font : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNameFarEast,put=PutNameFarEast))
    _bstr_t NameFarEast;
    __declspec(property(get=GetNameAscii,put=PutNameAscii))
    _bstr_t NameAscii;
    __declspec(property(get=GetNameOther,put=PutNameOther))
    _bstr_t NameOther;
    __declspec(property(get=GetNameComplexScript,put=PutNameComplexScript))
    _bstr_t NameComplexScript;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetColor))
    ColorFormatPtr Color;
    __declspec(property(get=GetBaselineOffset,put=PutBaselineOffset))
    float BaselineOffset;
    __declspec(property(get=GetEmbedded))
    __missing_type__  Embedded;
    __declspec(property(get=GetEmbeddable))
    __missing_type__  Embeddable;
    __declspec(property(get=GetSize,put=PutSize))
    float Size;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ColorFormatPtr GetColor ( );
    __missing_type__  GetBold ( );
    void PutBold (
        __missing_type__ Bold );
    __missing_type__  GetItalic ( );
    void PutItalic (
        __missing_type__ Italic );
    __missing_type__  GetShadow ( );
    void PutShadow (
        __missing_type__ Shadow );
    __missing_type__  GetEmboss ( );
    void PutEmboss (
        __missing_type__ Emboss );
    __missing_type__  GetUnderline ( );
    void PutUnderline (
        __missing_type__ Underline );
    __missing_type__  GetSubscript ( );
    void PutSubscript (
        __missing_type__ Subscript );
    __missing_type__  GetSuperscript ( );
    void PutSuperscript (
        __missing_type__ Superscript );
    float GetBaselineOffset ( );
    void PutBaselineOffset (
        float BaselineOffset );
    __missing_type__  GetEmbedded ( );
    __missing_type__  GetEmbeddable ( );
    float GetSize ( );
    void PutSize (
        float Size );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    _bstr_t GetNameFarEast ( );
    void PutNameFarEast (
        _bstr_t NameFarEast );
    _bstr_t GetNameAscii ( );
    void PutNameAscii (
        _bstr_t NameAscii );
    __missing_type__  GetAutoRotateNumbers ( );
    void PutAutoRotateNumbers (
        __missing_type__ AutoRotateNumbers );
    _bstr_t GetNameOther ( );
    void PutNameOther (
        _bstr_t NameOther );
    _bstr_t GetNameComplexScript ( );
    void PutNameComplexScript (
        _bstr_t NameComplexScript );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ struct ColorFormat * * Color ) = 0;
      virtual HRESULT __stdcall get_Bold (
        /*[out,retval]*/ __missing_type__ * Bold ) = 0;
      virtual HRESULT __stdcall put_Bold (
        /*[in]*/ __missing_type__ Bold ) = 0;
      virtual HRESULT __stdcall get_Italic (
        /*[out,retval]*/ __missing_type__ * Italic ) = 0;
      virtual HRESULT __stdcall put_Italic (
        /*[in]*/ __missing_type__ Italic ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ __missing_type__ * Shadow ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ __missing_type__ Shadow ) = 0;
      virtual HRESULT __stdcall get_Emboss (
        /*[out,retval]*/ __missing_type__ * Emboss ) = 0;
      virtual HRESULT __stdcall put_Emboss (
        /*[in]*/ __missing_type__ Emboss ) = 0;
      virtual HRESULT __stdcall get_Underline (
        /*[out,retval]*/ __missing_type__ * Underline ) = 0;
      virtual HRESULT __stdcall put_Underline (
        /*[in]*/ __missing_type__ Underline ) = 0;
      virtual HRESULT __stdcall get_Subscript (
        /*[out,retval]*/ __missing_type__ * Subscript ) = 0;
      virtual HRESULT __stdcall put_Subscript (
        /*[in]*/ __missing_type__ Subscript ) = 0;
      virtual HRESULT __stdcall get_Superscript (
        /*[out,retval]*/ __missing_type__ * Superscript ) = 0;
      virtual HRESULT __stdcall put_Superscript (
        /*[in]*/ __missing_type__ Superscript ) = 0;
      virtual HRESULT __stdcall get_BaselineOffset (
        /*[out,retval]*/ float * BaselineOffset ) = 0;
      virtual HRESULT __stdcall put_BaselineOffset (
        /*[in]*/ float BaselineOffset ) = 0;
      virtual HRESULT __stdcall get_Embedded (
        /*[out,retval]*/ __missing_type__ * Embedded ) = 0;
      virtual HRESULT __stdcall get_Embeddable (
        /*[out,retval]*/ __missing_type__ * Embeddable ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ float * Size ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ float Size ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_NameFarEast (
        /*[out,retval]*/ BSTR * NameFarEast ) = 0;
      virtual HRESULT __stdcall put_NameFarEast (
        /*[in]*/ BSTR NameFarEast ) = 0;
      virtual HRESULT __stdcall get_NameAscii (
        /*[out,retval]*/ BSTR * NameAscii ) = 0;
      virtual HRESULT __stdcall put_NameAscii (
        /*[in]*/ BSTR NameAscii ) = 0;
      virtual HRESULT __stdcall get_AutoRotateNumbers (
        /*[out,retval]*/ __missing_type__ * AutoRotateNumbers ) = 0;
      virtual HRESULT __stdcall put_AutoRotateNumbers (
        /*[in]*/ __missing_type__ AutoRotateNumbers ) = 0;
      virtual HRESULT __stdcall get_NameOther (
        /*[out,retval]*/ BSTR * NameOther ) = 0;
      virtual HRESULT __stdcall put_NameOther (
        /*[in]*/ BSTR NameOther ) = 0;
      virtual HRESULT __stdcall get_NameComplexScript (
        /*[out,retval]*/ BSTR * NameComplexScript ) = 0;
      virtual HRESULT __stdcall put_NameComplexScript (
        /*[in]*/ BSTR NameComplexScript ) = 0;
};

struct __declspec(uuid("91493467-5a91-11cf-8700-00aa0060263b"))
Fonts : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    FontPtr Item (
        const _variant_t & Index );
    HRESULT Replace (
        _bstr_t Original,
        _bstr_t Replacement );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Font * * Item ) = 0;
      virtual HRESULT __stdcall raw_Replace (
        /*[in]*/ BSTR Original,
        /*[in]*/ BSTR Replacement ) = 0;
};

struct __declspec(uuid("9149349c-5a91-11cf-8700-00aa0060263b"))
HeaderFooter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetFormat,put=PutFormat))
    enum PpDateTimeFormat Format;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    __missing_type__  GetVisible ( );
    void PutVisible (
        __missing_type__ Visible );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Text );
    __missing_type__  GetUseFormat ( );
    void PutUseFormat (
        __missing_type__ UseFormat );
    enum PpDateTimeFormat GetFormat ( );
    void PutFormat (
        enum PpDateTimeFormat Format );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ __missing_type__ * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ __missing_type__ Visible ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_UseFormat (
        /*[out,retval]*/ __missing_type__ * UseFormat ) = 0;
      virtual HRESULT __stdcall put_UseFormat (
        /*[in]*/ __missing_type__ UseFormat ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ enum PpDateTimeFormat * Format ) = 0;
      virtual HRESULT __stdcall put_Format (
        /*[in]*/ enum PpDateTimeFormat Format ) = 0;
};

struct __declspec(uuid("91493474-5a91-11cf-8700-00aa0060263b"))
HeadersFooters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDateAndTime))
    HeaderFooterPtr DateAndTime;
    __declspec(property(get=GetSlideNumber))
    HeaderFooterPtr SlideNumber;
    __declspec(property(get=GetHeader))
    HeaderFooterPtr Header;
    __declspec(property(get=GetFooter))
    HeaderFooterPtr Footer;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HeaderFooterPtr GetDateAndTime ( );
    HeaderFooterPtr GetSlideNumber ( );
    HeaderFooterPtr GetHeader ( );
    HeaderFooterPtr GetFooter ( );
    __missing_type__  GetDisplayOnTitleSlide ( );
    void PutDisplayOnTitleSlide (
        __missing_type__ DisplayOnTitleSlide );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_DateAndTime (
        /*[out,retval]*/ struct HeaderFooter * * DateAndTime ) = 0;
      virtual HRESULT __stdcall get_SlideNumber (
        /*[out,retval]*/ struct HeaderFooter * * SlideNumber ) = 0;
      virtual HRESULT __stdcall get_Header (
        /*[out,retval]*/ struct HeaderFooter * * Header ) = 0;
      virtual HRESULT __stdcall get_Footer (
        /*[out,retval]*/ struct HeaderFooter * * Footer ) = 0;
      virtual HRESULT __stdcall get_DisplayOnTitleSlide (
        /*[out,retval]*/ __missing_type__ * DisplayOnTitleSlide ) = 0;
      virtual HRESULT __stdcall put_DisplayOnTitleSlide (
        /*[in]*/ __missing_type__ DisplayOnTitleSlide ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("914934b9-5a91-11cf-8700-00aa0060263b"))
Tags : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t Item (
        _bstr_t Name );
    HRESULT Add (
        _bstr_t Name,
        _bstr_t Value );
    HRESULT Delete (
        _bstr_t Name );
    HRESULT AddBinary (
        _bstr_t Name,
        _bstr_t FilePath );
    long BinaryValue (
        _bstr_t Name );
    _bstr_t Name (
        int Index );
    _bstr_t Value (
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ BSTR * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_AddBinary (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR FilePath ) = 0;
      virtual HRESULT __stdcall raw_BinaryValue (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ long * BinaryValue ) = 0;
      virtual HRESULT __stdcall raw_Name (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall raw_Value (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * Value ) = 0;
};

struct __declspec(uuid("914934be-5a91-11cf-8700-00aa0060263b"))
MouseTracker : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnTrack (
        float X,
        float Y );
    HRESULT EndTrack (
        float X,
        float Y );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnTrack (
        /*[in]*/ float X,
        /*[in]*/ float Y ) = 0;
      virtual HRESULT __stdcall raw_EndTrack (
        /*[in]*/ float X,
        /*[in]*/ float Y ) = 0;
};

struct __declspec(uuid("914934bf-5a91-11cf-8700-00aa0060263b"))
MouseDownHandler : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnMouseDown (
        IUnknown * activeWin );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnMouseDown (
        /*[in]*/ IUnknown * activeWin ) = 0;
};

struct __declspec(uuid("914934c0-5a91-11cf-8700-00aa0060263b"))
OCXExtender : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrderPosition))
    int ZOrderPosition;
    __declspec(property(get=GetAltHTML,put=PutAltHTML))
    _bstr_t AltHTML;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    float GetLeft ( );
    void PutLeft (
        float Left );
    float GetTop ( );
    void PutTop (
        float Top );
    float GetHeight ( );
    void PutHeight (
        float Height );
    float GetWidth ( );
    void PutWidth (
        float Width );
    int GetZOrderPosition ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    _bstr_t GetAltHTML ( );
    void PutAltHTML (
        _bstr_t AltHTML );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_ZOrderPosition (
        /*[out,retval]*/ int * ZOrderPosition ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_AltHTML (
        /*[out,retval]*/ BSTR * AltHTML ) = 0;
      virtual HRESULT __stdcall put_AltHTML (
        /*[in]*/ BSTR AltHTML ) = 0;
};

struct __declspec(uuid("914934c1-5a91-11cf-8700-00aa0060263b"))
OCXExtenderEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GotFocus ( );
    HRESULT LostFocus ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GotFocus ( ) = 0;
      virtual HRESULT __stdcall raw_LostFocus ( ) = 0;
};

struct __declspec(uuid("91493446-5a91-11cf-8700-00aa0060263b"))
OLEControl;
    // [ default ] interface OCXExtender
    // [ default, source ] interface OCXExtenderEvents

enum __declspec(uuid("16c96dbe-e683-4bab-9358-58c539857de2"))
PpBorderType
{
    ppBorderTop = 1,
    ppBorderLeft = 2,
    ppBorderBottom = 3,
    ppBorderRight = 4,
    ppBorderDiagonalDown = 5,
    ppBorderDiagonalUp = 6
};

enum __declspec(uuid("24814860-3221-485e-805a-9db3e4b55775"))
PpHTMLVersion
{
    ppHTMLv3 = 1,
    ppHTMLv4 = 2,
    ppHTMLDual = 3,
    ppHTMLAutodetect = 4
};

enum __declspec(uuid("da5cb2a4-456b-4906-b3fa-5191f98f7068"))
PpPublishSourceType
{
    ppPublishAll = 1,
    ppPublishSlideRange = 2,
    ppPublishNamedSlideShow = 3
};

enum __declspec(uuid("66b3a5be-c68b-42e2-8ef9-a5bd49af516b"))
PpBulletType
{
    ppBulletMixed = -2,
    ppBulletNone = 0,
    ppBulletUnnumbered = 1,
    ppBulletNumbered = 2,
    ppBulletPicture = 3
};

enum __declspec(uuid("63740092-ef1c-4097-8147-d3e7c7a0be98"))
PpNumberedBulletStyle
{
    ppBulletStyleMixed = -2,
    ppBulletAlphaLCPeriod = 0,
    ppBulletAlphaUCPeriod = 1,
    ppBulletArabicParenRight = 2,
    ppBulletArabicPeriod = 3,
    ppBulletRomanLCParenBoth = 4,
    ppBulletRomanLCParenRight = 5,
    ppBulletRomanLCPeriod = 6,
    ppBulletRomanUCPeriod = 7,
    ppBulletAlphaLCParenBoth = 8,
    ppBulletAlphaLCParenRight = 9,
    ppBulletAlphaUCParenBoth = 10,
    ppBulletAlphaUCParenRight = 11,
    ppBulletArabicParenBoth = 12,
    ppBulletArabicPlain = 13,
    ppBulletRomanUCParenBoth = 14,
    ppBulletRomanUCParenRight = 15,
    ppBulletSimpChinPlain = 16,
    ppBulletSimpChinPeriod = 17,
    ppBulletCircleNumDBPlain = 18,
    ppBulletCircleNumWDWhitePlain = 19,
    ppBulletCircleNumWDBlackPlain = 20,
    ppBulletTradChinPlain = 21,
    ppBulletTradChinPeriod = 22,
    ppBulletArabicAlphaDash = 23,
    ppBulletArabicAbjadDash = 24,
    ppBulletHebrewAlphaDash = 25,
    ppBulletKanjiKoreanPlain = 26,
    ppBulletKanjiKoreanPeriod = 27,
    ppBulletArabicDBPlain = 28,
    ppBulletArabicDBPeriod = 29,
    ppBulletThaiAlphaPeriod = 30,
    ppBulletThaiAlphaParenRight = 31,
    ppBulletThaiAlphaParenBoth = 32,
    ppBulletThaiNumPeriod = 33,
    ppBulletThaiNumParenRight = 34,
    ppBulletThaiNumParenBoth = 35,
    ppBulletHindiAlphaPeriod = 36,
    ppBulletHindiNumPeriod = 37,
    ppBulletKanjiSimpChinDBPeriod = 38,
    ppBulletHindiNumParenRight = 39,
    ppBulletHindiAlpha1Period = 40
};

struct __declspec(uuid("91493497-5a91-11cf-8700-00aa0060263b"))
BulletFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCharacter,put=PutCharacter))
    int Character;
    __declspec(property(get=GetRelativeSize,put=PutRelativeSize))
    float RelativeSize;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetType,put=PutType))
    enum PpBulletType Type;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum PpNumberedBulletStyle Style;
    __declspec(property(get=GetStartValue,put=PutStartValue))
    int StartValue;
    __declspec(property(get=GetNumber))
    int Number;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    __missing_type__  GetVisible ( );
    void PutVisible (
        __missing_type__ Visible );
    int GetCharacter ( );
    void PutCharacter (
        int Character );
    float GetRelativeSize ( );
    void PutRelativeSize (
        float RelativeSize );
    __missing_type__  GetUseTextColor ( );
    void PutUseTextColor (
        __missing_type__ UseTextColor );
    __missing_type__  GetUseTextFont ( );
    void PutUseTextFont (
        __missing_type__ UseTextFont );
    FontPtr GetFont ( );
    enum PpBulletType GetType ( );
    void PutType (
        enum PpBulletType Type );
    enum PpNumberedBulletStyle GetStyle ( );
    void PutStyle (
        enum PpNumberedBulletStyle Style );
    int GetStartValue ( );
    void PutStartValue (
        int StartValue );
    HRESULT Picture (
        _bstr_t Picture );
    int GetNumber ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ __missing_type__ * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ __missing_type__ Visible ) = 0;
      virtual HRESULT __stdcall get_Character (
        /*[out,retval]*/ int * Character ) = 0;
      virtual HRESULT __stdcall put_Character (
        /*[in]*/ int Character ) = 0;
      virtual HRESULT __stdcall get_RelativeSize (
        /*[out,retval]*/ float * RelativeSize ) = 0;
      virtual HRESULT __stdcall put_RelativeSize (
        /*[in]*/ float RelativeSize ) = 0;
      virtual HRESULT __stdcall get_UseTextColor (
        /*[out,retval]*/ __missing_type__ * UseTextColor ) = 0;
      virtual HRESULT __stdcall put_UseTextColor (
        /*[in]*/ __missing_type__ UseTextColor ) = 0;
      virtual HRESULT __stdcall get_UseTextFont (
        /*[out,retval]*/ __missing_type__ * UseTextFont ) = 0;
      virtual HRESULT __stdcall put_UseTextFont (
        /*[in]*/ __missing_type__ UseTextFont ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PpBulletType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum PpBulletType Type ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum PpNumberedBulletStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum PpNumberedBulletStyle Style ) = 0;
      virtual HRESULT __stdcall get_StartValue (
        /*[out,retval]*/ int * StartValue ) = 0;
      virtual HRESULT __stdcall put_StartValue (
        /*[in]*/ int StartValue ) = 0;
      virtual HRESULT __stdcall raw_Picture (
        /*[in]*/ BSTR Picture ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ int * Number ) = 0;
};

struct __declspec(uuid("91493496-5a91-11cf-8700-00aa0060263b"))
ParagraphFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum PpParagraphAlignment Alignment;
    __declspec(property(get=GetBullet))
    BulletFormatPtr Bullet;
    __declspec(property(get=GetSpaceBefore,put=PutSpaceBefore))
    float SpaceBefore;
    __declspec(property(get=GetSpaceAfter,put=PutSpaceAfter))
    float SpaceAfter;
    __declspec(property(get=GetSpaceWithin,put=PutSpaceWithin))
    float SpaceWithin;
    __declspec(property(get=GetBaseLineAlignment,put=PutBaseLineAlignment))
    enum PpBaselineAlignment BaseLineAlignment;
    __declspec(property(get=GetTextDirection,put=PutTextDirection))
    enum PpDirection TextDirection;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum PpParagraphAlignment GetAlignment ( );
    void PutAlignment (
        enum PpParagraphAlignment Alignment );
    BulletFormatPtr GetBullet ( );
    __missing_type__  GetLineRuleBefore ( );
    void PutLineRuleBefore (
        __missing_type__ LineRuleBefore );
    __missing_type__  GetLineRuleAfter ( );
    void PutLineRuleAfter (
        __missing_type__ LineRuleAfter );
    __missing_type__  GetLineRuleWithin ( );
    void PutLineRuleWithin (
        __missing_type__ LineRuleWithin );
    float GetSpaceBefore ( );
    void PutSpaceBefore (
        float SpaceBefore );
    float GetSpaceAfter ( );
    void PutSpaceAfter (
        float SpaceAfter );
    float GetSpaceWithin ( );
    void PutSpaceWithin (
        float SpaceWithin );
    enum PpBaselineAlignment GetBaseLineAlignment ( );
    void PutBaseLineAlignment (
        enum PpBaselineAlignment BaseLineAlignment );
    __missing_type__  GetFarEastLineBreakControl ( );
    void PutFarEastLineBreakControl (
        __missing_type__ FarEastLineBreakControl );
    __missing_type__  GetWordWrap ( );
    void PutWordWrap (
        __missing_type__ WordWrap );
    __missing_type__  GetHangingPunctuation ( );
    void PutHangingPunctuation (
        __missing_type__ HangingPunctuation );
    enum PpDirection GetTextDirection ( );
    void PutTextDirection (
        enum PpDirection TextDirection );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum PpParagraphAlignment * Alignment ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum PpParagraphAlignment Alignment ) = 0;
      virtual HRESULT __stdcall get_Bullet (
        /*[out,retval]*/ struct BulletFormat * * Bullet ) = 0;
      virtual HRESULT __stdcall get_LineRuleBefore (
        /*[out,retval]*/ __missing_type__ * LineRuleBefore ) = 0;
      virtual HRESULT __stdcall put_LineRuleBefore (
        /*[in]*/ __missing_type__ LineRuleBefore ) = 0;
      virtual HRESULT __stdcall get_LineRuleAfter (
        /*[out,retval]*/ __missing_type__ * LineRuleAfter ) = 0;
      virtual HRESULT __stdcall put_LineRuleAfter (
        /*[in]*/ __missing_type__ LineRuleAfter ) = 0;
      virtual HRESULT __stdcall get_LineRuleWithin (
        /*[out,retval]*/ __missing_type__ * LineRuleWithin ) = 0;
      virtual HRESULT __stdcall put_LineRuleWithin (
        /*[in]*/ __missing_type__ LineRuleWithin ) = 0;
      virtual HRESULT __stdcall get_SpaceBefore (
        /*[out,retval]*/ float * SpaceBefore ) = 0;
      virtual HRESULT __stdcall put_SpaceBefore (
        /*[in]*/ float SpaceBefore ) = 0;
      virtual HRESULT __stdcall get_SpaceAfter (
        /*[out,retval]*/ float * SpaceAfter ) = 0;
      virtual HRESULT __stdcall put_SpaceAfter (
        /*[in]*/ float SpaceAfter ) = 0;
      virtual HRESULT __stdcall get_SpaceWithin (
        /*[out,retval]*/ float * SpaceWithin ) = 0;
      virtual HRESULT __stdcall put_SpaceWithin (
        /*[in]*/ float SpaceWithin ) = 0;
      virtual HRESULT __stdcall get_BaseLineAlignment (
        /*[out,retval]*/ enum PpBaselineAlignment * BaseLineAlignment ) = 0;
      virtual HRESULT __stdcall put_BaseLineAlignment (
        /*[in]*/ enum PpBaselineAlignment BaseLineAlignment ) = 0;
      virtual HRESULT __stdcall get_FarEastLineBreakControl (
        /*[out,retval]*/ __missing_type__ * FarEastLineBreakControl ) = 0;
      virtual HRESULT __stdcall put_FarEastLineBreakControl (
        /*[in]*/ __missing_type__ FarEastLineBreakControl ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ __missing_type__ * WordWrap ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ __missing_type__ WordWrap ) = 0;
      virtual HRESULT __stdcall get_HangingPunctuation (
        /*[out,retval]*/ __missing_type__ * HangingPunctuation ) = 0;
      virtual HRESULT __stdcall put_HangingPunctuation (
        /*[in]*/ __missing_type__ HangingPunctuation ) = 0;
      virtual HRESULT __stdcall get_TextDirection (
        /*[out,retval]*/ enum PpDirection * TextDirection ) = 0;
      virtual HRESULT __stdcall put_TextDirection (
        /*[in]*/ enum PpDirection TextDirection ) = 0;
};

struct __declspec(uuid("9149349b-5a91-11cf-8700-00aa0060263b"))
TextStyleLevel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetParagraphFormat))
    ParagraphFormatPtr ParagraphFormat;
    __declspec(property(get=GetFont))
    FontPtr Font;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ParagraphFormatPtr GetParagraphFormat ( );
    FontPtr GetFont ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_ParagraphFormat (
        /*[out,retval]*/ struct ParagraphFormat * * ParagraphFormat ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
};

struct __declspec(uuid("9149349a-5a91-11cf-8700-00aa0060263b"))
TextStyleLevels : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    TextStyleLevelPtr Item (
        int Level );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Level,
        /*[out,retval]*/ struct TextStyleLevel * * Item ) = 0;
};

enum __declspec(uuid("8e3d8175-9840-4f3d-9558-adbcf2339e94"))
PpShapeFormat
{
    ppShapeFormatGIF = 0,
    ppShapeFormatJPG = 1,
    ppShapeFormatPNG = 2,
    ppShapeFormatBMP = 3,
    ppShapeFormatWMF = 4,
    ppShapeFormatEMF = 5
};

enum __declspec(uuid("9c5b7379-ce75-4980-8e9b-d0e957af4a41"))
PpExportMode
{
    ppRelativeToSlide = 1,
    ppClipRelativeToSlide = 2,
    ppScaleToFit = 3,
    ppScaleXY = 4
};

struct __declspec(uuid("914934ca-5a91-11cf-8700-00aa0060263b"))
Borders : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    LineFormatPtr Item (
        enum PpBorderType BorderType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ enum PpBorderType BorderType,
        /*[out,retval]*/ struct LineFormat * * Item ) = 0;
};

struct __declspec(uuid("914934cc-5a91-11cf-8700-00aa0060263b"))
Pane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActive))
    __missing_type__  Active;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetViewType))
    enum PpViewType ViewType;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    __missing_type__  GetActive ( );
    _ApplicationPtr GetApplication ( );
    enum PpViewType GetViewType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ __missing_type__ * Active ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ enum PpViewType * ViewType ) = 0;
};

struct __declspec(uuid("914934cb-5a91-11cf-8700-00aa0060263b"))
Panes : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    PanePtr Item (
        int Index );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Pane * * Item ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
};

struct __declspec(uuid("914934cd-5a91-11cf-8700-00aa0060263b"))
DefaultWebOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHTMLVersion,put=PutHTMLVersion))
    enum PpHTMLVersion HTMLVersion;
    __declspec(property(get=GetFrameColors,put=PutFrameColors))
    enum PpFrameColors FrameColors;
    __declspec(property(get=GetFonts))
    __missing_type__ Fonts;
    __declspec(property(get=GetFolderSuffix))
    _bstr_t FolderSuffix;

    //
    // Wrapper methods for error-handling
    //

    __missing_type__  GetIncludeNavigation ( );
    void PutIncludeNavigation (
        __missing_type__ IncludeNavigation );
    enum PpFrameColors GetFrameColors ( );
    void PutFrameColors (
        enum PpFrameColors FrameColors );
    __missing_type__  GetResizeGraphics ( );
    void PutResizeGraphics (
        __missing_type__ ResizeGraphics );
    __missing_type__  GetShowSlideAnimation ( );
    void PutShowSlideAnimation (
        __missing_type__ ShowSlideAnimation );
    __missing_type__  GetOrganizeInFolder ( );
    void PutOrganizeInFolder (
        __missing_type__ OrganizeInFolder );
    __missing_type__  GetUseLongFileNames ( );
    void PutUseLongFileNames (
        __missing_type__ UseLongFileNames );
    __missing_type__  GetRelyOnVML ( );
    void PutRelyOnVML (
        __missing_type__ RelyOnVML );
    __missing_type__  GetAllowPNG ( );
    void PutAllowPNG (
        __missing_type__ AllowPNG );
    __missing_type__  GetScreenSize ( );
    void PutScreenSize (
        __missing_type__ ScreenSize );
    __missing_type__  GetEncoding ( );
    void PutEncoding (
        __missing_type__ Encoding );
    __missing_type__  GetUpdateLinksOnSave ( );
    void PutUpdateLinksOnSave (
        __missing_type__ UpdateLinksOnSave );
    __missing_type__  GetCheckIfOfficeIsHTMLEditor ( );
    void PutCheckIfOfficeIsHTMLEditor (
        __missing_type__ CheckIfOfficeIsHTMLEditor );
    __missing_type__  GetAlwaysSaveInDefaultEncoding ( );
    void PutAlwaysSaveInDefaultEncoding (
        __missing_type__ AlwaysSaveInDefaultEncoding );
    __missing_type__ GetFonts ( );
    _bstr_t GetFolderSuffix ( );
    __missing_type__  GetTargetBrowser ( );
    void PutTargetBrowser (
        __missing_type__ TargetBrowser );
    __missing_type__  GetSaveNewWebPagesAsWebArchives ( );
    void PutSaveNewWebPagesAsWebArchives (
        __missing_type__ SaveNewWebPagesAsWebArchives );
    enum PpHTMLVersion GetHTMLVersion ( );
    void PutHTMLVersion (
        enum PpHTMLVersion HTMLVersion );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IncludeNavigation (
        /*[out,retval]*/ __missing_type__ * IncludeNavigation ) = 0;
      virtual HRESULT __stdcall put_IncludeNavigation (
        /*[in]*/ __missing_type__ IncludeNavigation ) = 0;
      virtual HRESULT __stdcall get_FrameColors (
        /*[out,retval]*/ enum PpFrameColors * FrameColors ) = 0;
      virtual HRESULT __stdcall put_FrameColors (
        /*[in]*/ enum PpFrameColors FrameColors ) = 0;
      virtual HRESULT __stdcall get_ResizeGraphics (
        /*[out,retval]*/ __missing_type__ * ResizeGraphics ) = 0;
      virtual HRESULT __stdcall put_ResizeGraphics (
        /*[in]*/ __missing_type__ ResizeGraphics ) = 0;
      virtual HRESULT __stdcall get_ShowSlideAnimation (
        /*[out,retval]*/ __missing_type__ * ShowSlideAnimation ) = 0;
      virtual HRESULT __stdcall put_ShowSlideAnimation (
        /*[in]*/ __missing_type__ ShowSlideAnimation ) = 0;
      virtual HRESULT __stdcall get_OrganizeInFolder (
        /*[out,retval]*/ __missing_type__ * OrganizeInFolder ) = 0;
      virtual HRESULT __stdcall put_OrganizeInFolder (
        /*[in]*/ __missing_type__ OrganizeInFolder ) = 0;
      virtual HRESULT __stdcall get_UseLongFileNames (
        /*[out,retval]*/ __missing_type__ * UseLongFileNames ) = 0;
      virtual HRESULT __stdcall put_UseLongFileNames (
        /*[in]*/ __missing_type__ UseLongFileNames ) = 0;
      virtual HRESULT __stdcall get_RelyOnVML (
        /*[out,retval]*/ __missing_type__ * RelyOnVML ) = 0;
      virtual HRESULT __stdcall put_RelyOnVML (
        /*[in]*/ __missing_type__ RelyOnVML ) = 0;
      virtual HRESULT __stdcall get_AllowPNG (
        /*[out,retval]*/ __missing_type__ * AllowPNG ) = 0;
      virtual HRESULT __stdcall put_AllowPNG (
        /*[in]*/ __missing_type__ AllowPNG ) = 0;
      virtual HRESULT __stdcall get_ScreenSize (
        /*[out,retval]*/ __missing_type__ * ScreenSize ) = 0;
      virtual HRESULT __stdcall put_ScreenSize (
        /*[in]*/ __missing_type__ ScreenSize ) = 0;
      virtual HRESULT __stdcall get_Encoding (
        /*[out,retval]*/ __missing_type__ * Encoding ) = 0;
      virtual HRESULT __stdcall put_Encoding (
        /*[in]*/ __missing_type__ Encoding ) = 0;
      virtual HRESULT __stdcall get_UpdateLinksOnSave (
        /*[out,retval]*/ __missing_type__ * UpdateLinksOnSave ) = 0;
      virtual HRESULT __stdcall put_UpdateLinksOnSave (
        /*[in]*/ __missing_type__ UpdateLinksOnSave ) = 0;
      virtual HRESULT __stdcall get_CheckIfOfficeIsHTMLEditor (
        /*[out,retval]*/ __missing_type__ * CheckIfOfficeIsHTMLEditor ) = 0;
      virtual HRESULT __stdcall put_CheckIfOfficeIsHTMLEditor (
        /*[in]*/ __missing_type__ CheckIfOfficeIsHTMLEditor ) = 0;
      virtual HRESULT __stdcall get_AlwaysSaveInDefaultEncoding (
        /*[out,retval]*/ __missing_type__ * AlwaysSaveInDefaultEncoding ) = 0;
      virtual HRESULT __stdcall put_AlwaysSaveInDefaultEncoding (
        /*[in]*/ __missing_type__ AlwaysSaveInDefaultEncoding ) = 0;
      virtual HRESULT __stdcall get_Fonts (
        /*[out,retval]*/ __missing_type__ * * Fonts ) = 0;
      virtual HRESULT __stdcall get_FolderSuffix (
        /*[out,retval]*/ BSTR * FolderSuffix ) = 0;
      virtual HRESULT __stdcall get_TargetBrowser (
        /*[out,retval]*/ __missing_type__ * TargetBrowser ) = 0;
      virtual HRESULT __stdcall put_TargetBrowser (
        /*[in]*/ __missing_type__ TargetBrowser ) = 0;
      virtual HRESULT __stdcall get_SaveNewWebPagesAsWebArchives (
        /*[out,retval]*/ __missing_type__ * SaveNewWebPagesAsWebArchives ) = 0;
      virtual HRESULT __stdcall put_SaveNewWebPagesAsWebArchives (
        /*[in]*/ __missing_type__ SaveNewWebPagesAsWebArchives ) = 0;
      virtual HRESULT __stdcall get_HTMLVersion (
        /*[out,retval]*/ enum PpHTMLVersion * HTMLVersion ) = 0;
      virtual HRESULT __stdcall put_HTMLVersion (
        /*[in]*/ enum PpHTMLVersion HTMLVersion ) = 0;
};

struct __declspec(uuid("914934ce-5a91-11cf-8700-00aa0060263b"))
WebOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFrameColors,put=PutFrameColors))
    enum PpFrameColors FrameColors;
    __declspec(property(get=GetFolderSuffix))
    _bstr_t FolderSuffix;
    __declspec(property(get=GetHTMLVersion,put=PutHTMLVersion))
    enum PpHTMLVersion HTMLVersion;

    //
    // Wrapper methods for error-handling
    //

    __missing_type__  GetIncludeNavigation ( );
    void PutIncludeNavigation (
        __missing_type__ IncludeNavigation );
    enum PpFrameColors GetFrameColors ( );
    void PutFrameColors (
        enum PpFrameColors FrameColors );
    __missing_type__  GetResizeGraphics ( );
    void PutResizeGraphics (
        __missing_type__ ResizeGraphics );
    __missing_type__  GetShowSlideAnimation ( );
    void PutShowSlideAnimation (
        __missing_type__ ShowSlideAnimation );
    __missing_type__  GetOrganizeInFolder ( );
    void PutOrganizeInFolder (
        __missing_type__ OrganizeInFolder );
    __missing_type__  GetUseLongFileNames ( );
    void PutUseLongFileNames (
        __missing_type__ UseLongFileNames );
    __missing_type__  GetRelyOnVML ( );
    void PutRelyOnVML (
        __missing_type__ RelyOnVML );
    __missing_type__  GetAllowPNG ( );
    void PutAllowPNG (
        __missing_type__ AllowPNG );
    __missing_type__  GetScreenSize ( );
    void PutScreenSize (
        __missing_type__ ScreenSize );
    __missing_type__  GetEncoding ( );
    void PutEncoding (
        __missing_type__ Encoding );
    _bstr_t GetFolderSuffix ( );
    HRESULT UseDefaultFolderSuffix ( );
    __missing_type__  GetTargetBrowser ( );
    void PutTargetBrowser (
        __missing_type__ TargetBrowser );
    enum PpHTMLVersion GetHTMLVersion ( );
    void PutHTMLVersion (
        enum PpHTMLVersion HTMLVersion );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IncludeNavigation (
        /*[out,retval]*/ __missing_type__ * IncludeNavigation ) = 0;
      virtual HRESULT __stdcall put_IncludeNavigation (
        /*[in]*/ __missing_type__ IncludeNavigation ) = 0;
      virtual HRESULT __stdcall get_FrameColors (
        /*[out,retval]*/ enum PpFrameColors * FrameColors ) = 0;
      virtual HRESULT __stdcall put_FrameColors (
        /*[in]*/ enum PpFrameColors FrameColors ) = 0;
      virtual HRESULT __stdcall get_ResizeGraphics (
        /*[out,retval]*/ __missing_type__ * ResizeGraphics ) = 0;
      virtual HRESULT __stdcall put_ResizeGraphics (
        /*[in]*/ __missing_type__ ResizeGraphics ) = 0;
      virtual HRESULT __stdcall get_ShowSlideAnimation (
        /*[out,retval]*/ __missing_type__ * ShowSlideAnimation ) = 0;
      virtual HRESULT __stdcall put_ShowSlideAnimation (
        /*[in]*/ __missing_type__ ShowSlideAnimation ) = 0;
      virtual HRESULT __stdcall get_OrganizeInFolder (
        /*[out,retval]*/ __missing_type__ * OrganizeInFolder ) = 0;
      virtual HRESULT __stdcall put_OrganizeInFolder (
        /*[in]*/ __missing_type__ OrganizeInFolder ) = 0;
      virtual HRESULT __stdcall get_UseLongFileNames (
        /*[out,retval]*/ __missing_type__ * UseLongFileNames ) = 0;
      virtual HRESULT __stdcall put_UseLongFileNames (
        /*[in]*/ __missing_type__ UseLongFileNames ) = 0;
      virtual HRESULT __stdcall get_RelyOnVML (
        /*[out,retval]*/ __missing_type__ * RelyOnVML ) = 0;
      virtual HRESULT __stdcall put_RelyOnVML (
        /*[in]*/ __missing_type__ RelyOnVML ) = 0;
      virtual HRESULT __stdcall get_AllowPNG (
        /*[out,retval]*/ __missing_type__ * AllowPNG ) = 0;
      virtual HRESULT __stdcall put_AllowPNG (
        /*[in]*/ __missing_type__ AllowPNG ) = 0;
      virtual HRESULT __stdcall get_ScreenSize (
        /*[out,retval]*/ __missing_type__ * ScreenSize ) = 0;
      virtual HRESULT __stdcall put_ScreenSize (
        /*[in]*/ __missing_type__ ScreenSize ) = 0;
      virtual HRESULT __stdcall get_Encoding (
        /*[out,retval]*/ __missing_type__ * Encoding ) = 0;
      virtual HRESULT __stdcall put_Encoding (
        /*[in]*/ __missing_type__ Encoding ) = 0;
      virtual HRESULT __stdcall get_FolderSuffix (
        /*[out,retval]*/ BSTR * FolderSuffix ) = 0;
      virtual HRESULT __stdcall raw_UseDefaultFolderSuffix ( ) = 0;
      virtual HRESULT __stdcall get_TargetBrowser (
        /*[out,retval]*/ __missing_type__ * TargetBrowser ) = 0;
      virtual HRESULT __stdcall put_TargetBrowser (
        /*[in]*/ __missing_type__ TargetBrowser ) = 0;
      virtual HRESULT __stdcall get_HTMLVersion (
        /*[out,retval]*/ enum PpHTMLVersion * HTMLVersion ) = 0;
      virtual HRESULT __stdcall put_HTMLVersion (
        /*[in]*/ enum PpHTMLVersion HTMLVersion ) = 0;
};

struct __declspec(uuid("914934d0-5a91-11cf-8700-00aa0060263b"))
PublishObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetHTMLVersion,put=PutHTMLVersion))
    enum PpHTMLVersion HTMLVersion;
    __declspec(property(get=GetSourceType,put=PutSourceType))
    enum PpPublishSourceType SourceType;
    __declspec(property(get=GetRangeStart,put=PutRangeStart))
    int RangeStart;
    __declspec(property(get=GetRangeEnd,put=PutRangeEnd))
    int RangeEnd;
    __declspec(property(get=GetSlideShowName,put=PutSlideShowName))
    _bstr_t SlideShowName;
    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum PpHTMLVersion GetHTMLVersion ( );
    void PutHTMLVersion (
        enum PpHTMLVersion HTMLVersion );
    enum PpPublishSourceType GetSourceType ( );
    void PutSourceType (
        enum PpPublishSourceType SourceType );
    int GetRangeStart ( );
    void PutRangeStart (
        int RangeStart );
    int GetRangeEnd ( );
    void PutRangeEnd (
        int RangeEnd );
    _bstr_t GetSlideShowName ( );
    void PutSlideShowName (
        _bstr_t SlideShowName );
    __missing_type__  GetSpeakerNotes ( );
    void PutSpeakerNotes (
        __missing_type__ SpeakerNotes );
    _bstr_t GetFileName ( );
    void PutFileName (
        _bstr_t FileName );
    HRESULT Publish ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_HTMLVersion (
        /*[out,retval]*/ enum PpHTMLVersion * HTMLVersion ) = 0;
      virtual HRESULT __stdcall put_HTMLVersion (
        /*[in]*/ enum PpHTMLVersion HTMLVersion ) = 0;
      virtual HRESULT __stdcall get_SourceType (
        /*[out,retval]*/ enum PpPublishSourceType * SourceType ) = 0;
      virtual HRESULT __stdcall put_SourceType (
        /*[in]*/ enum PpPublishSourceType SourceType ) = 0;
      virtual HRESULT __stdcall get_RangeStart (
        /*[out,retval]*/ int * RangeStart ) = 0;
      virtual HRESULT __stdcall put_RangeStart (
        /*[in]*/ int RangeStart ) = 0;
      virtual HRESULT __stdcall get_RangeEnd (
        /*[out,retval]*/ int * RangeEnd ) = 0;
      virtual HRESULT __stdcall put_RangeEnd (
        /*[in]*/ int RangeEnd ) = 0;
      virtual HRESULT __stdcall get_SlideShowName (
        /*[out,retval]*/ BSTR * SlideShowName ) = 0;
      virtual HRESULT __stdcall put_SlideShowName (
        /*[in]*/ BSTR SlideShowName ) = 0;
      virtual HRESULT __stdcall get_SpeakerNotes (
        /*[out,retval]*/ __missing_type__ * SpeakerNotes ) = 0;
      virtual HRESULT __stdcall put_SpeakerNotes (
        /*[in]*/ __missing_type__ SpeakerNotes ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * FileName ) = 0;
      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_Publish ( ) = 0;
};

struct __declspec(uuid("914934cf-5a91-11cf-8700-00aa0060263b"))
PublishObjects : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    PublishObjectPtr Item (
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct PublishObject * * Item ) = 0;
};

struct __declspec(uuid("914934d2-5a91-11cf-8700-00aa0060263b"))
MasterEvents : IUnknown
{};

struct __declspec(uuid("91493447-5a91-11cf-8700-00aa0060263b"))
Master;
    // [ default ] interface _Master
    // [ default, source ] interface MasterEvents

enum __declspec(uuid("83329628-509c-4cf8-a6b4-afca95a071bb"))
PpPasteDataType
{
    ppPasteDefault = 0,
    ppPasteBitmap = 1,
    ppPasteEnhancedMetafile = 2,
    ppPasteMetafilePicture = 3,
    ppPasteGIF = 4,
    ppPasteJPG = 5,
    ppPastePNG = 6,
    ppPasteText = 7,
    ppPasteHTML = 8,
    ppPasteRTF = 9,
    ppPasteOLEObject = 10,
    ppPasteShape = 11
};

struct __declspec(uuid("9149348f-5a91-11cf-8700-00aa0060263b"))
TextRange : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetParagraphFormat))
    ParagraphFormatPtr ParagraphFormat;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    int IndentLevel;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActionSettings))
    ActionSettingsPtr ActionSettings;
    __declspec(property(get=GetStart))
    long Start;
    __declspec(property(get=GetLength))
    long Length;
    __declspec(property(get=GetBoundLeft))
    float BoundLeft;
    __declspec(property(get=GetBoundTop))
    float BoundTop;
    __declspec(property(get=GetBoundWidth))
    float BoundWidth;
    __declspec(property(get=GetBoundHeight))
    float BoundHeight;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ActionSettingsPtr GetActionSettings ( );
    long GetStart ( );
    long GetLength ( );
    float GetBoundLeft ( );
    float GetBoundTop ( );
    float GetBoundWidth ( );
    float GetBoundHeight ( );
    TextRangePtr Paragraphs (
        int Start,
        int Length );
    TextRangePtr Sentences (
        int Start,
        int Length );
    TextRangePtr Words (
        int Start,
        int Length );
    TextRangePtr Characters (
        int Start,
        int Length );
    TextRangePtr Lines (
        int Start,
        int Length );
    TextRangePtr Runs (
        int Start,
        int Length );
    TextRangePtr TrimText ( );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Text );
    TextRangePtr InsertAfter (
        _bstr_t NewText );
    TextRangePtr InsertBefore (
        _bstr_t NewText );
    TextRangePtr InsertDateTime (
        enum PpDateTimeFormat DateTimeFormat,
        __missing_type__ InsertAsField );
    TextRangePtr InsertSlideNumber ( );
    TextRangePtr InsertSymbol (
        _bstr_t FontName,
        int CharNumber,
        __missing_type__ Unicode );
    FontPtr GetFont ( );
    ParagraphFormatPtr GetParagraphFormat ( );
    int GetIndentLevel ( );
    void PutIndentLevel (
        int IndentLevel );
    HRESULT Select ( );
    HRESULT Cut ( );
    HRESULT Copy ( );
    HRESULT Delete ( );
    TextRangePtr Paste ( );
    HRESULT ChangeCase (
        enum PpChangeCase Type );
    HRESULT AddPeriods ( );
    HRESULT RemovePeriods ( );
    TextRangePtr Find (
        _bstr_t FindWhat,
        int After,
        __missing_type__ MatchCase,
        __missing_type__ WholeWords );
    TextRangePtr Replace (
        _bstr_t FindWhat,
        _bstr_t ReplaceWhat,
        int After,
        __missing_type__ MatchCase,
        __missing_type__ WholeWords );
    HRESULT RotatedBounds (
        float * X1,
        float * Y1,
        float * X2,
        float * Y2,
        float * X3,
        float * Y3,
        float * x4,
        float * y4 );
    __missing_type__  GetLanguageID ( );
    void PutLanguageID (
        __missing_type__ LanguageID );
    HRESULT RtlRun ( );
    HRESULT LtrRun ( );
    TextRangePtr PasteSpecial (
        enum PpPasteDataType DataType,
        __missing_type__ DisplayAsIcon,
        _bstr_t IconFileName,
        int IconIndex,
        _bstr_t IconLabel,
        __missing_type__ Link );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_ActionSettings (
        /*[out,retval]*/ struct ActionSettings * * ActionSettings ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ long * Start ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ long * Length ) = 0;
      virtual HRESULT __stdcall get_BoundLeft (
        /*[out,retval]*/ float * BoundLeft ) = 0;
      virtual HRESULT __stdcall get_BoundTop (
        /*[out,retval]*/ float * BoundTop ) = 0;
      virtual HRESULT __stdcall get_BoundWidth (
        /*[out,retval]*/ float * BoundWidth ) = 0;
      virtual HRESULT __stdcall get_BoundHeight (
        /*[out,retval]*/ float * BoundHeight ) = 0;
      virtual HRESULT __stdcall raw_Paragraphs (
        /*[in]*/ int Start,
        /*[in]*/ int Length,
        /*[out,retval]*/ struct TextRange * * Paragraphs ) = 0;
      virtual HRESULT __stdcall raw_Sentences (
        /*[in]*/ int Start,
        /*[in]*/ int Length,
        /*[out,retval]*/ struct TextRange * * Sentences ) = 0;
      virtual HRESULT __stdcall raw_Words (
        /*[in]*/ int Start,
        /*[in]*/ int Length,
        /*[out,retval]*/ struct TextRange * * Words ) = 0;
      virtual HRESULT __stdcall raw_Characters (
        /*[in]*/ int Start,
        /*[in]*/ int Length,
        /*[out,retval]*/ struct TextRange * * Characters ) = 0;
      virtual HRESULT __stdcall raw_Lines (
        /*[in]*/ int Start,
        /*[in]*/ int Length,
        /*[out,retval]*/ struct TextRange * * Lines ) = 0;
      virtual HRESULT __stdcall raw_Runs (
        /*[in]*/ int Start,
        /*[in]*/ int Length,
        /*[out,retval]*/ struct TextRange * * Runs ) = 0;
      virtual HRESULT __stdcall raw_TrimText (
        /*[out,retval]*/ struct TextRange * * TrimText ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall raw_InsertAfter (
        /*[in]*/ BSTR NewText,
        /*[out,retval]*/ struct TextRange * * After ) = 0;
      virtual HRESULT __stdcall raw_InsertBefore (
        /*[in]*/ BSTR NewText,
        /*[out,retval]*/ struct TextRange * * Before ) = 0;
      virtual HRESULT __stdcall raw_InsertDateTime (
        /*[in]*/ enum PpDateTimeFormat DateTimeFormat,
        /*[in]*/ __missing_type__ InsertAsField,
        /*[out,retval]*/ struct TextRange * * DateTime ) = 0;
      virtual HRESULT __stdcall raw_InsertSlideNumber (
        /*[out,retval]*/ struct TextRange * * SlideNumber ) = 0;
      virtual HRESULT __stdcall raw_InsertSymbol (
        /*[in]*/ BSTR FontName,
        /*[in]*/ int CharNumber,
        /*[in]*/ __missing_type__ Unicode,
        /*[out,retval]*/ struct TextRange * * Symbol ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall get_ParagraphFormat (
        /*[out,retval]*/ struct ParagraphFormat * * ParagraphFormat ) = 0;
      virtual HRESULT __stdcall get_IndentLevel (
        /*[out,retval]*/ int * IndentLevel ) = 0;
      virtual HRESULT __stdcall put_IndentLevel (
        /*[in]*/ int IndentLevel ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[out,retval]*/ struct TextRange * * Paste ) = 0;
      virtual HRESULT __stdcall raw_ChangeCase (
        /*[in]*/ enum PpChangeCase Type ) = 0;
      virtual HRESULT __stdcall raw_AddPeriods ( ) = 0;
      virtual HRESULT __stdcall raw_RemovePeriods ( ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ BSTR FindWhat,
        /*[in]*/ int After,
        /*[in]*/ __missing_type__ MatchCase,
        /*[in]*/ __missing_type__ WholeWords,
        /*[out,retval]*/ struct TextRange * * Find ) = 0;
      virtual HRESULT __stdcall raw_Replace (
        /*[in]*/ BSTR FindWhat,
        /*[in]*/ BSTR ReplaceWhat,
        /*[in]*/ int After,
        /*[in]*/ __missing_type__ MatchCase,
        /*[in]*/ __missing_type__ WholeWords,
        /*[out,retval]*/ struct TextRange * * Replace ) = 0;
      virtual HRESULT __stdcall raw_RotatedBounds (
        /*[out]*/ float * X1,
        /*[out]*/ float * Y1,
        /*[out]*/ float * X2,
        /*[out]*/ float * Y2,
        /*[out]*/ float * X3,
        /*[out]*/ float * Y3,
        /*[out]*/ float * x4,
        /*[out]*/ float * y4 ) = 0;
      virtual HRESULT __stdcall get_LanguageID (
        /*[out,retval]*/ __missing_type__ * LanguageID ) = 0;
      virtual HRESULT __stdcall put_LanguageID (
        /*[in]*/ __missing_type__ LanguageID ) = 0;
      virtual HRESULT __stdcall raw_RtlRun ( ) = 0;
      virtual HRESULT __stdcall raw_LtrRun ( ) = 0;
      virtual HRESULT __stdcall raw_PasteSpecial (
        /*[in]*/ enum PpPasteDataType DataType,
        /*[in]*/ __missing_type__ DisplayAsIcon,
        /*[in]*/ BSTR IconFileName,
        /*[in]*/ int IconIndex,
        /*[in]*/ BSTR IconLabel,
        /*[in]*/ __missing_type__ Link,
        /*[out,retval]*/ struct TextRange * * PasteSpecial ) = 0;
};

struct __declspec(uuid("91493484-5a91-11cf-8700-00aa0060263b"))
TextFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMarginBottom,put=PutMarginBottom))
    float MarginBottom;
    __declspec(property(get=GetMarginLeft,put=PutMarginLeft))
    float MarginLeft;
    __declspec(property(get=GetMarginRight,put=PutMarginRight))
    float MarginRight;
    __declspec(property(get=GetMarginTop,put=PutMarginTop))
    float MarginTop;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetHasText))
    __missing_type__  HasText;
    __declspec(property(get=GetTextRange))
    TextRangePtr TextRange;
    __declspec(property(get=GetRuler))
    RulerPtr Ruler;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    enum PpAutoSize AutoSize;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetMarginBottom ( );
    void PutMarginBottom (
        float MarginBottom );
    float GetMarginLeft ( );
    void PutMarginLeft (
        float MarginLeft );
    float GetMarginRight ( );
    void PutMarginRight (
        float MarginRight );
    float GetMarginTop ( );
    void PutMarginTop (
        float MarginTop );
    __missing_type__  GetOrientation ( );
    void PutOrientation (
        __missing_type__ Orientation );
    __missing_type__  GetHasText ( );
    TextRangePtr GetTextRange ( );
    RulerPtr GetRuler ( );
    __missing_type__  GetHorizontalAnchor ( );
    void PutHorizontalAnchor (
        __missing_type__ HorizontalAnchor );
    __missing_type__  GetVerticalAnchor ( );
    void PutVerticalAnchor (
        __missing_type__ VerticalAnchor );
    enum PpAutoSize GetAutoSize ( );
    void PutAutoSize (
        enum PpAutoSize AutoSize );
    __missing_type__  GetWordWrap ( );
    void PutWordWrap (
        __missing_type__ WordWrap );
    HRESULT DeleteText ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_MarginBottom (
        /*[out,retval]*/ float * MarginBottom ) = 0;
      virtual HRESULT __stdcall put_MarginBottom (
        /*[in]*/ float MarginBottom ) = 0;
      virtual HRESULT __stdcall get_MarginLeft (
        /*[out,retval]*/ float * MarginLeft ) = 0;
      virtual HRESULT __stdcall put_MarginLeft (
        /*[in]*/ float MarginLeft ) = 0;
      virtual HRESULT __stdcall get_MarginRight (
        /*[out,retval]*/ float * MarginRight ) = 0;
      virtual HRESULT __stdcall put_MarginRight (
        /*[in]*/ float MarginRight ) = 0;
      virtual HRESULT __stdcall get_MarginTop (
        /*[out,retval]*/ float * MarginTop ) = 0;
      virtual HRESULT __stdcall put_MarginTop (
        /*[in]*/ float MarginTop ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ __missing_type__ * Orientation ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ __missing_type__ Orientation ) = 0;
      virtual HRESULT __stdcall get_HasText (
        /*[out,retval]*/ __missing_type__ * HasText ) = 0;
      virtual HRESULT __stdcall get_TextRange (
        /*[out,retval]*/ struct TextRange * * TextRange ) = 0;
      virtual HRESULT __stdcall get_Ruler (
        /*[out,retval]*/ struct Ruler * * Ruler ) = 0;
      virtual HRESULT __stdcall get_HorizontalAnchor (
        /*[out,retval]*/ __missing_type__ * HorizontalAnchor ) = 0;
      virtual HRESULT __stdcall put_HorizontalAnchor (
        /*[in]*/ __missing_type__ HorizontalAnchor ) = 0;
      virtual HRESULT __stdcall get_VerticalAnchor (
        /*[out,retval]*/ __missing_type__ * VerticalAnchor ) = 0;
      virtual HRESULT __stdcall put_VerticalAnchor (
        /*[in]*/ __missing_type__ VerticalAnchor ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ enum PpAutoSize * AutoSize ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ enum PpAutoSize AutoSize ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ __missing_type__ * WordWrap ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ __missing_type__ WordWrap ) = 0;
      virtual HRESULT __stdcall raw_DeleteText ( ) = 0;
};

struct __declspec(uuid("91493499-5a91-11cf-8700-00aa0060263b"))
TextStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRuler))
    RulerPtr Ruler;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetLevels))
    TextStyleLevelsPtr Levels;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    RulerPtr GetRuler ( );
    TextFramePtr GetTextFrame ( );
    TextStyleLevelsPtr GetLevels ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Ruler (
        /*[out,retval]*/ struct Ruler * * Ruler ) = 0;
      virtual HRESULT __stdcall get_TextFrame (
        /*[out,retval]*/ struct TextFrame * * TextFrame ) = 0;
      virtual HRESULT __stdcall get_Levels (
        /*[out,retval]*/ struct TextStyleLevels * * Levels ) = 0;
};

struct __declspec(uuid("91493498-5a91-11cf-8700-00aa0060263b"))
TextStyles : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    TextStylePtr Item (
        enum PpTextStyleType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ enum PpTextStyleType Type,
        /*[out,retval]*/ struct TextStyle * * Item ) = 0;
};

struct __declspec(uuid("914934d3-5a91-11cf-8700-00aa0060263b"))
_PowerRex : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnAsfEncoderEvent (
        const _variant_t & erorCode,
        const _variant_t & bstrErrorDesc );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnAsfEncoderEvent (
        /*[in]*/ VARIANT erorCode,
        /*[in]*/ VARIANT bstrErrorDesc ) = 0;
};

struct __declspec(uuid("91493448-5a91-11cf-8700-00aa0060263b"))
PowerRex;
    // [ default ] interface _PowerRex

enum __declspec(uuid("4927ea82-23fb-4f6f-9c8b-4204ceb23d21"))
MsoAnimEffect
{
    msoAnimEffectCustom = 0,
    msoAnimEffectAppear = 1,
    msoAnimEffectFly = 2,
    msoAnimEffectBlinds = 3,
    msoAnimEffectBox = 4,
    msoAnimEffectCheckerboard = 5,
    msoAnimEffectCircle = 6,
    msoAnimEffectCrawl = 7,
    msoAnimEffectDiamond = 8,
    msoAnimEffectDissolve = 9,
    msoAnimEffectFade = 10,
    msoAnimEffectFlashOnce = 11,
    msoAnimEffectPeek = 12,
    msoAnimEffectPlus = 13,
    msoAnimEffectRandomBars = 14,
    msoAnimEffectSpiral = 15,
    msoAnimEffectSplit = 16,
    msoAnimEffectStretch = 17,
    msoAnimEffectStrips = 18,
    msoAnimEffectSwivel = 19,
    msoAnimEffectWedge = 20,
    msoAnimEffectWheel = 21,
    msoAnimEffectWipe = 22,
    msoAnimEffectZoom = 23,
    msoAnimEffectRandomEffects = 24,
    msoAnimEffectBoomerang = 25,
    msoAnimEffectBounce = 26,
    msoAnimEffectColorReveal = 27,
    msoAnimEffectCredits = 28,
    msoAnimEffectEaseIn = 29,
    msoAnimEffectFloat = 30,
    msoAnimEffectGrowAndTurn = 31,
    msoAnimEffectLightSpeed = 32,
    msoAnimEffectPinwheel = 33,
    msoAnimEffectRiseUp = 34,
    msoAnimEffectSwish = 35,
    msoAnimEffectThinLine = 36,
    msoAnimEffectUnfold = 37,
    msoAnimEffectWhip = 38,
    msoAnimEffectAscend = 39,
    msoAnimEffectCenterRevolve = 40,
    msoAnimEffectFadedSwivel = 41,
    msoAnimEffectDescend = 42,
    msoAnimEffectSling = 43,
    msoAnimEffectSpinner = 44,
    msoAnimEffectStretchy = 45,
    msoAnimEffectZip = 46,
    msoAnimEffectArcUp = 47,
    msoAnimEffectFadedZoom = 48,
    msoAnimEffectGlide = 49,
    msoAnimEffectExpand = 50,
    msoAnimEffectFlip = 51,
    msoAnimEffectShimmer = 52,
    msoAnimEffectFold = 53,
    msoAnimEffectChangeFillColor = 54,
    msoAnimEffectChangeFont = 55,
    msoAnimEffectChangeFontColor = 56,
    msoAnimEffectChangeFontSize = 57,
    msoAnimEffectChangeFontStyle = 58,
    msoAnimEffectGrowShrink = 59,
    msoAnimEffectChangeLineColor = 60,
    msoAnimEffectSpin = 61,
    msoAnimEffectTransparency = 62,
    msoAnimEffectBoldFlash = 63,
    msoAnimEffectBlast = 64,
    msoAnimEffectBoldReveal = 65,
    msoAnimEffectBrushOnColor = 66,
    msoAnimEffectBrushOnUnderline = 67,
    msoAnimEffectColorBlend = 68,
    msoAnimEffectColorWave = 69,
    msoAnimEffectComplementaryColor = 70,
    msoAnimEffectComplementaryColor2 = 71,
    msoAnimEffectContrastingColor = 72,
    msoAnimEffectDarken = 73,
    msoAnimEffectDesaturate = 74,
    msoAnimEffectFlashBulb = 75,
    msoAnimEffectFlicker = 76,
    msoAnimEffectGrowWithColor = 77,
    msoAnimEffectLighten = 78,
    msoAnimEffectStyleEmphasis = 79,
    msoAnimEffectTeeter = 80,
    msoAnimEffectVerticalGrow = 81,
    msoAnimEffectWave = 82,
    msoAnimEffectMediaPlay = 83,
    msoAnimEffectMediaPause = 84,
    msoAnimEffectMediaStop = 85,
    msoAnimEffectPathCircle = 86,
    msoAnimEffectPathRightTriangle = 87,
    msoAnimEffectPathDiamond = 88,
    msoAnimEffectPathHexagon = 89,
    msoAnimEffectPath5PointStar = 90,
    msoAnimEffectPathCrescentMoon = 91,
    msoAnimEffectPathSquare = 92,
    msoAnimEffectPathTrapezoid = 93,
    msoAnimEffectPathHeart = 94,
    msoAnimEffectPathOctagon = 95,
    msoAnimEffectPath6PointStar = 96,
    msoAnimEffectPathFootball = 97,
    msoAnimEffectPathEqualTriangle = 98,
    msoAnimEffectPathParallelogram = 99,
    msoAnimEffectPathPentagon = 100,
    msoAnimEffectPath4PointStar = 101,
    msoAnimEffectPath8PointStar = 102,
    msoAnimEffectPathTeardrop = 103,
    msoAnimEffectPathPointyStar = 104,
    msoAnimEffectPathCurvedSquare = 105,
    msoAnimEffectPathCurvedX = 106,
    msoAnimEffectPathVerticalFigure8 = 107,
    msoAnimEffectPathCurvyStar = 108,
    msoAnimEffectPathLoopdeLoop = 109,
    msoAnimEffectPathBuzzsaw = 110,
    msoAnimEffectPathHorizontalFigure8 = 111,
    msoAnimEffectPathPeanut = 112,
    msoAnimEffectPathFigure8Four = 113,
    msoAnimEffectPathNeutron = 114,
    msoAnimEffectPathSwoosh = 115,
    msoAnimEffectPathBean = 116,
    msoAnimEffectPathPlus = 117,
    msoAnimEffectPathInvertedTriangle = 118,
    msoAnimEffectPathInvertedSquare = 119,
    msoAnimEffectPathLeft = 120,
    msoAnimEffectPathTurnRight = 121,
    msoAnimEffectPathArcDown = 122,
    msoAnimEffectPathZigzag = 123,
    msoAnimEffectPathSCurve2 = 124,
    msoAnimEffectPathSineWave = 125,
    msoAnimEffectPathBounceLeft = 126,
    msoAnimEffectPathDown = 127,
    msoAnimEffectPathTurnUp = 128,
    msoAnimEffectPathArcUp = 129,
    msoAnimEffectPathHeartbeat = 130,
    msoAnimEffectPathSpiralRight = 131,
    msoAnimEffectPathWave = 132,
    msoAnimEffectPathCurvyLeft = 133,
    msoAnimEffectPathDiagonalDownRight = 134,
    msoAnimEffectPathTurnDown = 135,
    msoAnimEffectPathArcLeft = 136,
    msoAnimEffectPathFunnel = 137,
    msoAnimEffectPathSpring = 138,
    msoAnimEffectPathBounceRight = 139,
    msoAnimEffectPathSpiralLeft = 140,
    msoAnimEffectPathDiagonalUpRight = 141,
    msoAnimEffectPathTurnUpRight = 142,
    msoAnimEffectPathArcRight = 143,
    msoAnimEffectPathSCurve1 = 144,
    msoAnimEffectPathDecayingWave = 145,
    msoAnimEffectPathCurvyRight = 146,
    msoAnimEffectPathStairsDown = 147,
    msoAnimEffectPathUp = 148,
    msoAnimEffectPathRight = 149,
    msoAnimEffectMediaPlayFromBookmark = 150
};

enum __declspec(uuid("4290d45b-433a-452f-8402-447fd15187e0"))
MsoAnimateByLevel
{
    msoAnimateLevelMixed = -1,
    msoAnimateLevelNone = 0,
    msoAnimateTextByAllLevels = 1,
    msoAnimateTextByFirstLevel = 2,
    msoAnimateTextBySecondLevel = 3,
    msoAnimateTextByThirdLevel = 4,
    msoAnimateTextByFourthLevel = 5,
    msoAnimateTextByFifthLevel = 6,
    msoAnimateChartAllAtOnce = 7,
    msoAnimateChartByCategory = 8,
    msoAnimateChartByCategoryElements = 9,
    msoAnimateChartBySeries = 10,
    msoAnimateChartBySeriesElements = 11,
    msoAnimateDiagramAllAtOnce = 12,
    msoAnimateDiagramDepthByNode = 13,
    msoAnimateDiagramDepthByBranch = 14,
    msoAnimateDiagramBreadthByNode = 15,
    msoAnimateDiagramBreadthByLevel = 16,
    msoAnimateDiagramClockwise = 17,
    msoAnimateDiagramClockwiseIn = 18,
    msoAnimateDiagramClockwiseOut = 19,
    msoAnimateDiagramCounterClockwise = 20,
    msoAnimateDiagramCounterClockwiseIn = 21,
    msoAnimateDiagramCounterClockwiseOut = 22,
    msoAnimateDiagramInByRing = 23,
    msoAnimateDiagramOutByRing = 24,
    msoAnimateDiagramUp = 25,
    msoAnimateDiagramDown = 26
};

enum __declspec(uuid("45f2ed98-f126-47ef-9521-420dd5d364af"))
MsoAnimTriggerType
{
    msoAnimTriggerMixed = -1,
    msoAnimTriggerNone = 0,
    msoAnimTriggerOnPageClick = 1,
    msoAnimTriggerWithPrevious = 2,
    msoAnimTriggerAfterPrevious = 3,
    msoAnimTriggerOnShapeClick = 4,
    msoAnimTriggerOnMediaBookmark = 5
};

enum __declspec(uuid("6bf95896-a5b8-44c5-81e1-03d78481c890"))
MsoAnimAfterEffect
{
    msoAnimAfterEffectMixed = -1,
    msoAnimAfterEffectNone = 0,
    msoAnimAfterEffectDim = 1,
    msoAnimAfterEffectHide = 2,
    msoAnimAfterEffectHideOnNextClick = 3
};

enum __declspec(uuid("8ba1e4a7-c122-4400-af6b-6905a8863766"))
MsoAnimTextUnitEffect
{
    msoAnimTextUnitEffectMixed = -1,
    msoAnimTextUnitEffectByParagraph = 0,
    msoAnimTextUnitEffectByCharacter = 1,
    msoAnimTextUnitEffectByWord = 2
};

enum __declspec(uuid("da113e67-ed91-4427-9415-83960759d3fb"))
MsoAnimEffectRestart
{
    msoAnimEffectRestartAlways = 1,
    msoAnimEffectRestartWhenOff = 2,
    msoAnimEffectRestartNever = 3
};

enum __declspec(uuid("a2f1daf6-7eec-46c9-ab9f-877c909cb47d"))
MsoAnimEffectAfter
{
    msoAnimEffectAfterFreeze = 1,
    msoAnimEffectAfterRemove = 2,
    msoAnimEffectAfterHold = 3,
    msoAnimEffectAfterTransition = 4
};

enum __declspec(uuid("9d777915-eb83-4f30-aae5-d96db9a3cf7a"))
MsoAnimDirection
{
    msoAnimDirectionNone = 0,
    msoAnimDirectionUp = 1,
    msoAnimDirectionRight = 2,
    msoAnimDirectionDown = 3,
    msoAnimDirectionLeft = 4,
    msoAnimDirectionOrdinalMask = 5,
    msoAnimDirectionUpLeft = 6,
    msoAnimDirectionUpRight = 7,
    msoAnimDirectionDownRight = 8,
    msoAnimDirectionDownLeft = 9,
    msoAnimDirectionTop = 10,
    msoAnimDirectionBottom = 11,
    msoAnimDirectionTopLeft = 12,
    msoAnimDirectionTopRight = 13,
    msoAnimDirectionBottomRight = 14,
    msoAnimDirectionBottomLeft = 15,
    msoAnimDirectionHorizontal = 16,
    msoAnimDirectionVertical = 17,
    msoAnimDirectionAcross = 18,
    msoAnimDirectionIn = 19,
    msoAnimDirectionOut = 20,
    msoAnimDirectionClockwise = 21,
    msoAnimDirectionCounterclockwise = 22,
    msoAnimDirectionHorizontalIn = 23,
    msoAnimDirectionHorizontalOut = 24,
    msoAnimDirectionVerticalIn = 25,
    msoAnimDirectionVerticalOut = 26,
    msoAnimDirectionSlightly = 27,
    msoAnimDirectionCenter = 28,
    msoAnimDirectionInSlightly = 29,
    msoAnimDirectionInCenter = 30,
    msoAnimDirectionInBottom = 31,
    msoAnimDirectionOutSlightly = 32,
    msoAnimDirectionOutCenter = 33,
    msoAnimDirectionOutBottom = 34,
    msoAnimDirectionFontBold = 35,
    msoAnimDirectionFontItalic = 36,
    msoAnimDirectionFontUnderline = 37,
    msoAnimDirectionFontStrikethrough = 38,
    msoAnimDirectionFontShadow = 39,
    msoAnimDirectionFontAllCaps = 40,
    msoAnimDirectionInstant = 41,
    msoAnimDirectionGradual = 42,
    msoAnimDirectionCycleClockwise = 43,
    msoAnimDirectionCycleCounterclockwise = 44
};

struct __declspec(uuid("914934e1-5a91-11cf-8700-00aa0060263b"))
EffectParameters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDirection,put=PutDirection))
    enum MsoAnimDirection Direction;
    __declspec(property(get=GetAmount,put=PutAmount))
    float Amount;
    __declspec(property(get=GetSize,put=PutSize))
    float Size;
    __declspec(property(get=GetColor2))
    ColorFormatPtr Color2;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum MsoAnimDirection GetDirection ( );
    void PutDirection (
        enum MsoAnimDirection Direction );
    float GetAmount ( );
    void PutAmount (
        float Amount );
    float GetSize ( );
    void PutSize (
        float Size );
    ColorFormatPtr GetColor2 ( );
    __missing_type__  GetRelative ( );
    void PutRelative (
        __missing_type__ Relative );
    _bstr_t GetFontName ( );
    void PutFontName (
        _bstr_t FontName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum MsoAnimDirection * Direction ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum MsoAnimDirection Direction ) = 0;
      virtual HRESULT __stdcall get_Amount (
        /*[out,retval]*/ float * Amount ) = 0;
      virtual HRESULT __stdcall put_Amount (
        /*[in]*/ float Amount ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ float * Size ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ float Size ) = 0;
      virtual HRESULT __stdcall get_Color2 (
        /*[out,retval]*/ struct ColorFormat * * Color2 ) = 0;
      virtual HRESULT __stdcall get_Relative (
        /*[out,retval]*/ __missing_type__ * Relative ) = 0;
      virtual HRESULT __stdcall put_Relative (
        /*[in]*/ __missing_type__ Relative ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
};

struct __declspec(uuid("914934e2-5a91-11cf-8700-00aa0060263b"))
EffectInformation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAfterEffect))
    enum MsoAnimAfterEffect AfterEffect;
    __declspec(property(get=GetAnimateBackground))
    __missing_type__  AnimateBackground;
    __declspec(property(get=GetAnimateTextInReverse))
    __missing_type__  AnimateTextInReverse;
    __declspec(property(get=GetBuildByLevelEffect))
    enum MsoAnimateByLevel BuildByLevelEffect;
    __declspec(property(get=GetDim))
    ColorFormatPtr Dim;
    __declspec(property(get=GetPlaySettings))
    PlaySettingsPtr PlaySettings;
    __declspec(property(get=GetSoundEffect))
    SoundEffectPtr SoundEffect;
    __declspec(property(get=GetTextUnitEffect))
    enum MsoAnimTextUnitEffect TextUnitEffect;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum MsoAnimAfterEffect GetAfterEffect ( );
    __missing_type__  GetAnimateBackground ( );
    __missing_type__  GetAnimateTextInReverse ( );
    enum MsoAnimateByLevel GetBuildByLevelEffect ( );
    ColorFormatPtr GetDim ( );
    PlaySettingsPtr GetPlaySettings ( );
    SoundEffectPtr GetSoundEffect ( );
    enum MsoAnimTextUnitEffect GetTextUnitEffect ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_AfterEffect (
        /*[out,retval]*/ enum MsoAnimAfterEffect * AfterEffect ) = 0;
      virtual HRESULT __stdcall get_AnimateBackground (
        /*[out,retval]*/ __missing_type__ * AnimateBackground ) = 0;
      virtual HRESULT __stdcall get_AnimateTextInReverse (
        /*[out,retval]*/ __missing_type__ * AnimateTextInReverse ) = 0;
      virtual HRESULT __stdcall get_BuildByLevelEffect (
        /*[out,retval]*/ enum MsoAnimateByLevel * BuildByLevelEffect ) = 0;
      virtual HRESULT __stdcall get_Dim (
        /*[out,retval]*/ struct ColorFormat * * Dim ) = 0;
      virtual HRESULT __stdcall get_PlaySettings (
        /*[out,retval]*/ struct PlaySettings * * PlaySettings ) = 0;
      virtual HRESULT __stdcall get_SoundEffect (
        /*[out,retval]*/ struct SoundEffect * * SoundEffect ) = 0;
      virtual HRESULT __stdcall get_TextUnitEffect (
        /*[out,retval]*/ enum MsoAnimTextUnitEffect * TextUnitEffect ) = 0;
};

enum __declspec(uuid("6b9efdd2-199b-41a0-8192-6a50cd6e521f"))
MsoAnimType
{
    msoAnimTypeMixed = -2,
    msoAnimTypeNone = 0,
    msoAnimTypeMotion = 1,
    msoAnimTypeColor = 2,
    msoAnimTypeScale = 3,
    msoAnimTypeRotation = 4,
    msoAnimTypeProperty = 5,
    msoAnimTypeCommand = 6,
    msoAnimTypeFilter = 7,
    msoAnimTypeSet = 8
};

enum __declspec(uuid("f9d204a8-2d7b-4f32-abe4-94650f0e2b72"))
MsoAnimAdditive
{
    msoAnimAdditiveAddBase = 1,
    msoAnimAdditiveAddSum = 2
};

enum __declspec(uuid("661ecfc7-4d4f-4bf9-b5f1-d4718ee3f9ca"))
MsoAnimAccumulate
{
    msoAnimAccumulateNone = 1,
    msoAnimAccumulateAlways = 2
};

struct __declspec(uuid("914934e5-5a91-11cf-8700-00aa0060263b"))
MotionEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetByX,put=PutByX))
    float ByX;
    __declspec(property(get=GetByY,put=PutByY))
    float ByY;
    __declspec(property(get=GetFromX,put=PutFromX))
    float FromX;
    __declspec(property(get=GetFromY,put=PutFromY))
    float FromY;
    __declspec(property(get=GetToX,put=PutToX))
    float ToX;
    __declspec(property(get=GetToY,put=PutToY))
    float ToY;
    __declspec(property(get=GetPath,put=PutPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    float GetByX ( );
    void PutByX (
        float ByX );
    float GetByY ( );
    void PutByY (
        float ByY );
    float GetFromX ( );
    void PutFromX (
        float FromX );
    float GetFromY ( );
    void PutFromY (
        float FromY );
    float GetToX ( );
    void PutToX (
        float ToX );
    float GetToY ( );
    void PutToY (
        float ToY );
    _bstr_t GetPath ( );
    void PutPath (
        _bstr_t Path );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_ByX (
        /*[out,retval]*/ float * ByX ) = 0;
      virtual HRESULT __stdcall put_ByX (
        /*[in]*/ float ByX ) = 0;
      virtual HRESULT __stdcall get_ByY (
        /*[out,retval]*/ float * ByY ) = 0;
      virtual HRESULT __stdcall put_ByY (
        /*[in]*/ float ByY ) = 0;
      virtual HRESULT __stdcall get_FromX (
        /*[out,retval]*/ float * FromX ) = 0;
      virtual HRESULT __stdcall put_FromX (
        /*[in]*/ float FromX ) = 0;
      virtual HRESULT __stdcall get_FromY (
        /*[out,retval]*/ float * FromY ) = 0;
      virtual HRESULT __stdcall put_FromY (
        /*[in]*/ float FromY ) = 0;
      virtual HRESULT __stdcall get_ToX (
        /*[out,retval]*/ float * ToX ) = 0;
      virtual HRESULT __stdcall put_ToX (
        /*[in]*/ float ToX ) = 0;
      virtual HRESULT __stdcall get_ToY (
        /*[out,retval]*/ float * ToY ) = 0;
      virtual HRESULT __stdcall put_ToY (
        /*[in]*/ float ToY ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_Path (
        /*[in]*/ BSTR Path ) = 0;
};

struct __declspec(uuid("914934e6-5a91-11cf-8700-00aa0060263b"))
ColorEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBy))
    ColorFormatPtr By;
    __declspec(property(get=GetFrom))
    ColorFormatPtr From;
    __declspec(property(get=GetTo))
    ColorFormatPtr To;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ColorFormatPtr GetBy ( );
    ColorFormatPtr GetFrom ( );
    ColorFormatPtr GetTo ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_By (
        /*[out,retval]*/ struct ColorFormat * * By ) = 0;
      virtual HRESULT __stdcall get_From (
        /*[out,retval]*/ struct ColorFormat * * From ) = 0;
      virtual HRESULT __stdcall get_To (
        /*[out,retval]*/ struct ColorFormat * * To ) = 0;
};

struct __declspec(uuid("914934e7-5a91-11cf-8700-00aa0060263b"))
ScaleEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetByX,put=PutByX))
    float ByX;
    __declspec(property(get=GetByY,put=PutByY))
    float ByY;
    __declspec(property(get=GetFromX,put=PutFromX))
    float FromX;
    __declspec(property(get=GetFromY,put=PutFromY))
    float FromY;
    __declspec(property(get=GetToX,put=PutToX))
    float ToX;
    __declspec(property(get=GetToY,put=PutToY))
    float ToY;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    float GetByX ( );
    void PutByX (
        float ByX );
    float GetByY ( );
    void PutByY (
        float ByY );
    float GetFromX ( );
    void PutFromX (
        float FromX );
    float GetFromY ( );
    void PutFromY (
        float FromY );
    float GetToX ( );
    void PutToX (
        float ToX );
    float GetToY ( );
    void PutToY (
        float ToY );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_ByX (
        /*[out,retval]*/ float * ByX ) = 0;
      virtual HRESULT __stdcall put_ByX (
        /*[in]*/ float ByX ) = 0;
      virtual HRESULT __stdcall get_ByY (
        /*[out,retval]*/ float * ByY ) = 0;
      virtual HRESULT __stdcall put_ByY (
        /*[in]*/ float ByY ) = 0;
      virtual HRESULT __stdcall get_FromX (
        /*[out,retval]*/ float * FromX ) = 0;
      virtual HRESULT __stdcall put_FromX (
        /*[in]*/ float FromX ) = 0;
      virtual HRESULT __stdcall get_FromY (
        /*[out,retval]*/ float * FromY ) = 0;
      virtual HRESULT __stdcall put_FromY (
        /*[in]*/ float FromY ) = 0;
      virtual HRESULT __stdcall get_ToX (
        /*[out,retval]*/ float * ToX ) = 0;
      virtual HRESULT __stdcall put_ToX (
        /*[in]*/ float ToX ) = 0;
      virtual HRESULT __stdcall get_ToY (
        /*[out,retval]*/ float * ToY ) = 0;
      virtual HRESULT __stdcall put_ToY (
        /*[in]*/ float ToY ) = 0;
};

struct __declspec(uuid("914934e8-5a91-11cf-8700-00aa0060263b"))
RotationEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBy,put=PutBy))
    float By;
    __declspec(property(get=GetFrom,put=PutFrom))
    float From;
    __declspec(property(get=GetTo,put=PutTo))
    float To;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    float GetBy ( );
    void PutBy (
        float By );
    float GetFrom ( );
    void PutFrom (
        float From );
    float GetTo ( );
    void PutTo (
        float To );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_By (
        /*[out,retval]*/ float * By ) = 0;
      virtual HRESULT __stdcall put_By (
        /*[in]*/ float By ) = 0;
      virtual HRESULT __stdcall get_From (
        /*[out,retval]*/ float * From ) = 0;
      virtual HRESULT __stdcall put_From (
        /*[in]*/ float From ) = 0;
      virtual HRESULT __stdcall get_To (
        /*[out,retval]*/ float * To ) = 0;
      virtual HRESULT __stdcall put_To (
        /*[in]*/ float To ) = 0;
};

enum __declspec(uuid("bd7baabc-c4f9-402e-a98c-b9840a10d355"))
MsoAnimProperty
{
    msoAnimNone = 0,
    msoAnimX = 1,
    msoAnimY = 2,
    msoAnimWidth = 3,
    msoAnimHeight = 4,
    msoAnimOpacity = 5,
    msoAnimRotation = 6,
    msoAnimColor = 7,
    msoAnimVisibility = 8,
    msoAnimTextFontBold = 100,
    msoAnimTextFontColor = 101,
    msoAnimTextFontEmboss = 102,
    msoAnimTextFontItalic = 103,
    msoAnimTextFontName = 104,
    msoAnimTextFontShadow = 105,
    msoAnimTextFontSize = 106,
    msoAnimTextFontSubscript = 107,
    msoAnimTextFontSuperscript = 108,
    msoAnimTextFontUnderline = 109,
    msoAnimTextFontStrikeThrough = 110,
    msoAnimTextBulletCharacter = 111,
    msoAnimTextBulletFontName = 112,
    msoAnimTextBulletNumber = 113,
    msoAnimTextBulletColor = 114,
    msoAnimTextBulletRelativeSize = 115,
    msoAnimTextBulletStyle = 116,
    msoAnimTextBulletType = 117,
    msoAnimShapePictureContrast = 1000,
    msoAnimShapePictureBrightness = 1001,
    msoAnimShapePictureGamma = 1002,
    msoAnimShapePictureGrayscale = 1003,
    msoAnimShapeFillOn = 1004,
    msoAnimShapeFillColor = 1005,
    msoAnimShapeFillOpacity = 1006,
    msoAnimShapeFillBackColor = 1007,
    msoAnimShapeLineOn = 1008,
    msoAnimShapeLineColor = 1009,
    msoAnimShapeShadowOn = 1010,
    msoAnimShapeShadowType = 1011,
    msoAnimShapeShadowColor = 1012,
    msoAnimShapeShadowOpacity = 1013,
    msoAnimShapeShadowOffsetX = 1014,
    msoAnimShapeShadowOffsetY = 1015
};

struct __declspec(uuid("914934eb-5a91-11cf-8700-00aa0060263b"))
AnimationPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetTime,put=PutTime))
    float Time;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    float GetTime ( );
    void PutTime (
        float Time );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & Value );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t Formula );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ float * Time ) = 0;
      virtual HRESULT __stdcall put_Time (
        /*[in]*/ float Time ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * Formula ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR Formula ) = 0;
};

struct __declspec(uuid("914934ea-5a91-11cf-8700-00aa0060263b"))
AnimationPoints : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    AnimationPointPtr Item (
        int Index );
    AnimationPointPtr Add (
        int Index );
    __missing_type__  GetSmooth ( );
    void PutSmooth (
        __missing_type__ Smooth );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct AnimationPoint * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct AnimationPoint * * Add ) = 0;
      virtual HRESULT __stdcall get_Smooth (
        /*[out,retval]*/ __missing_type__ * Smooth ) = 0;
      virtual HRESULT __stdcall put_Smooth (
        /*[in]*/ __missing_type__ Smooth ) = 0;
};

struct __declspec(uuid("914934e9-5a91-11cf-8700-00aa0060263b"))
PropertyEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetProperty,put=PutProperty))
    enum MsoAnimProperty Property;
    __declspec(property(get=GetPoints))
    AnimationPointsPtr Points;
    __declspec(property(get=GetFrom,put=PutFrom))
    _variant_t From;
    __declspec(property(get=GetTo,put=PutTo))
    _variant_t To;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum MsoAnimProperty GetProperty ( );
    void PutProperty (
        enum MsoAnimProperty Property );
    AnimationPointsPtr GetPoints ( );
    _variant_t GetFrom ( );
    void PutFrom (
        const _variant_t & From );
    _variant_t GetTo ( );
    void PutTo (
        const _variant_t & To );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Property (
        /*[out,retval]*/ enum MsoAnimProperty * Property ) = 0;
      virtual HRESULT __stdcall put_Property (
        /*[in]*/ enum MsoAnimProperty Property ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ struct AnimationPoints * * Points ) = 0;
      virtual HRESULT __stdcall get_From (
        /*[out,retval]*/ VARIANT * From ) = 0;
      virtual HRESULT __stdcall put_From (
        /*[in]*/ VARIANT From ) = 0;
      virtual HRESULT __stdcall get_To (
        /*[out,retval]*/ VARIANT * To ) = 0;
      virtual HRESULT __stdcall put_To (
        /*[in]*/ VARIANT To ) = 0;
};

enum __declspec(uuid("14876707-af12-41ee-983d-e7366840a4df"))
PpAlertLevel
{
    ppAlertsNone = 1,
    ppAlertsAll = 2
};

enum __declspec(uuid("ddfe9852-7847-4826-a6ab-0322e069c378"))
PpRevisionInfo
{
    ppRevisionInfoNone = 0,
    ppRevisionInfoBaseline = 1,
    ppRevisionInfoMerged = 2
};

struct __declspec(uuid("914934ed-5a91-11cf-8700-00aa0060263b"))
AutoCorrect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplayAutoCorrectOptions,put=PutDisplayAutoCorrectOptions))
    VARIANT_BOOL DisplayAutoCorrectOptions;
    __declspec(property(get=GetDisplayAutoLayoutOptions,put=PutDisplayAutoLayoutOptions))
    VARIANT_BOOL DisplayAutoLayoutOptions;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetDisplayAutoCorrectOptions ( );
    void PutDisplayAutoCorrectOptions (
        VARIANT_BOOL DisplayAutoCorrectOptions );
    VARIANT_BOOL GetDisplayAutoLayoutOptions ( );
    void PutDisplayAutoLayoutOptions (
        VARIANT_BOOL DisplayAutoLayoutOptions );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DisplayAutoCorrectOptions (
        /*[out,retval]*/ VARIANT_BOOL * DisplayAutoCorrectOptions ) = 0;
      virtual HRESULT __stdcall put_DisplayAutoCorrectOptions (
        /*[in]*/ VARIANT_BOOL DisplayAutoCorrectOptions ) = 0;
      virtual HRESULT __stdcall get_DisplayAutoLayoutOptions (
        /*[out,retval]*/ VARIANT_BOOL * DisplayAutoLayoutOptions ) = 0;
      virtual HRESULT __stdcall put_DisplayAutoLayoutOptions (
        /*[in]*/ VARIANT_BOOL DisplayAutoLayoutOptions ) = 0;
};

struct __declspec(uuid("914934ee-5a91-11cf-8700-00aa0060263b"))
Options : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShowCoauthoringMergeChanges,put=PutShowCoauthoringMergeChanges))
    VARIANT_BOOL ShowCoauthoringMergeChanges;

    //
    // Wrapper methods for error-handling
    //

    __missing_type__  GetDisplayPasteOptions ( );
    void PutDisplayPasteOptions (
        __missing_type__ DisplayPasteOptions );
    __missing_type__  GetDoNotPromptForConvert ( );
    void PutDoNotPromptForConvert (
        __missing_type__ DoNotPromptForConvert );
    VARIANT_BOOL GetShowCoauthoringMergeChanges ( );
    void PutShowCoauthoringMergeChanges (
        VARIANT_BOOL ShowCoauthoringMergeChanges );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DisplayPasteOptions (
        /*[out,retval]*/ __missing_type__ * DisplayPasteOptions ) = 0;
      virtual HRESULT __stdcall put_DisplayPasteOptions (
        /*[in]*/ __missing_type__ DisplayPasteOptions ) = 0;
      virtual HRESULT __stdcall get_DoNotPromptForConvert (
        /*[out,retval]*/ __missing_type__ * DoNotPromptForConvert ) = 0;
      virtual HRESULT __stdcall put_DoNotPromptForConvert (
        /*[in]*/ __missing_type__ DoNotPromptForConvert ) = 0;
      virtual HRESULT __stdcall get_ShowCoauthoringMergeChanges (
        /*[out,retval]*/ VARIANT_BOOL * ShowCoauthoringMergeChanges ) = 0;
      virtual HRESULT __stdcall put_ShowCoauthoringMergeChanges (
        /*[in]*/ VARIANT_BOOL ShowCoauthoringMergeChanges ) = 0;
};

enum __declspec(uuid("25daee6c-e895-441f-bf3e-69fb4253dfe5"))
MsoAnimCommandType
{
    msoAnimCommandTypeEvent = 0,
    msoAnimCommandTypeCall = 1,
    msoAnimCommandTypeVerb = 2
};

struct __declspec(uuid("914934ef-5a91-11cf-8700-00aa0060263b"))
CommandEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType,put=PutType))
    enum MsoAnimCommandType Type;
    __declspec(property(get=GetCommand,put=PutCommand))
    _bstr_t Command;
    __declspec(property(get=Getbookmark,put=Putbookmark))
    _bstr_t bookmark;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum MsoAnimCommandType GetType ( );
    void PutType (
        enum MsoAnimCommandType Type );
    _bstr_t GetCommand ( );
    void PutCommand (
        _bstr_t Command );
    _bstr_t Getbookmark ( );
    void Putbookmark (
        _bstr_t bookmark );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum MsoAnimCommandType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum MsoAnimCommandType Type ) = 0;
      virtual HRESULT __stdcall get_Command (
        /*[out,retval]*/ BSTR * Command ) = 0;
      virtual HRESULT __stdcall put_Command (
        /*[in]*/ BSTR Command ) = 0;
      virtual HRESULT __stdcall get_bookmark (
        /*[out,retval]*/ BSTR * bookmark ) = 0;
      virtual HRESULT __stdcall put_bookmark (
        /*[in]*/ BSTR bookmark ) = 0;
};

enum __declspec(uuid("2f291805-eabf-4f68-801d-a2cc04340f2b"))
MsoAnimFilterEffectType
{
    msoAnimFilterEffectTypeNone = 0,
    msoAnimFilterEffectTypeBarn = 1,
    msoAnimFilterEffectTypeBlinds = 2,
    msoAnimFilterEffectTypeBox = 3,
    msoAnimFilterEffectTypeCheckerboard = 4,
    msoAnimFilterEffectTypeCircle = 5,
    msoAnimFilterEffectTypeDiamond = 6,
    msoAnimFilterEffectTypeDissolve = 7,
    msoAnimFilterEffectTypeFade = 8,
    msoAnimFilterEffectTypeImage = 9,
    msoAnimFilterEffectTypePixelate = 10,
    msoAnimFilterEffectTypePlus = 11,
    msoAnimFilterEffectTypeRandomBar = 12,
    msoAnimFilterEffectTypeSlide = 13,
    msoAnimFilterEffectTypeStretch = 14,
    msoAnimFilterEffectTypeStrips = 15,
    msoAnimFilterEffectTypeWedge = 16,
    msoAnimFilterEffectTypeWheel = 17,
    msoAnimFilterEffectTypeWipe = 18
};

enum __declspec(uuid("fcfb2414-4ebb-4875-b0a4-a697ca47af6a"))
MsoAnimFilterEffectSubtype
{
    msoAnimFilterEffectSubtypeNone = 0,
    msoAnimFilterEffectSubtypeInVertical = 1,
    msoAnimFilterEffectSubtypeOutVertical = 2,
    msoAnimFilterEffectSubtypeInHorizontal = 3,
    msoAnimFilterEffectSubtypeOutHorizontal = 4,
    msoAnimFilterEffectSubtypeHorizontal = 5,
    msoAnimFilterEffectSubtypeVertical = 6,
    msoAnimFilterEffectSubtypeIn = 7,
    msoAnimFilterEffectSubtypeOut = 8,
    msoAnimFilterEffectSubtypeAcross = 9,
    msoAnimFilterEffectSubtypeFromLeft = 10,
    msoAnimFilterEffectSubtypeFromRight = 11,
    msoAnimFilterEffectSubtypeFromTop = 12,
    msoAnimFilterEffectSubtypeFromBottom = 13,
    msoAnimFilterEffectSubtypeDownLeft = 14,
    msoAnimFilterEffectSubtypeUpLeft = 15,
    msoAnimFilterEffectSubtypeDownRight = 16,
    msoAnimFilterEffectSubtypeUpRight = 17,
    msoAnimFilterEffectSubtypeSpokes1 = 18,
    msoAnimFilterEffectSubtypeSpokes2 = 19,
    msoAnimFilterEffectSubtypeSpokes3 = 20,
    msoAnimFilterEffectSubtypeSpokes4 = 21,
    msoAnimFilterEffectSubtypeSpokes8 = 22,
    msoAnimFilterEffectSubtypeLeft = 23,
    msoAnimFilterEffectSubtypeRight = 24,
    msoAnimFilterEffectSubtypeDown = 25,
    msoAnimFilterEffectSubtypeUp = 26
};

struct __declspec(uuid("914934f0-5a91-11cf-8700-00aa0060263b"))
FilterEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType,put=PutType))
    enum MsoAnimFilterEffectType Type;
    __declspec(property(get=GetSubtype,put=PutSubtype))
    enum MsoAnimFilterEffectSubtype Subtype;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum MsoAnimFilterEffectType GetType ( );
    void PutType (
        enum MsoAnimFilterEffectType Type );
    enum MsoAnimFilterEffectSubtype GetSubtype ( );
    void PutSubtype (
        enum MsoAnimFilterEffectSubtype Subtype );
    __missing_type__  GetReveal ( );
    void PutReveal (
        __missing_type__ Reveal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum MsoAnimFilterEffectType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum MsoAnimFilterEffectType Type ) = 0;
      virtual HRESULT __stdcall get_Subtype (
        /*[out,retval]*/ enum MsoAnimFilterEffectSubtype * Subtype ) = 0;
      virtual HRESULT __stdcall put_Subtype (
        /*[in]*/ enum MsoAnimFilterEffectSubtype Subtype ) = 0;
      virtual HRESULT __stdcall get_Reveal (
        /*[out,retval]*/ __missing_type__ * Reveal ) = 0;
      virtual HRESULT __stdcall put_Reveal (
        /*[in]*/ __missing_type__ Reveal ) = 0;
};

struct __declspec(uuid("914934f1-5a91-11cf-8700-00aa0060263b"))
SetEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetProperty,put=PutProperty))
    enum MsoAnimProperty Property;
    __declspec(property(get=GetTo,put=PutTo))
    _variant_t To;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum MsoAnimProperty GetProperty ( );
    void PutProperty (
        enum MsoAnimProperty Property );
    _variant_t GetTo ( );
    void PutTo (
        const _variant_t & To );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Property (
        /*[out,retval]*/ enum MsoAnimProperty * Property ) = 0;
      virtual HRESULT __stdcall put_Property (
        /*[in]*/ enum MsoAnimProperty Property ) = 0;
      virtual HRESULT __stdcall get_To (
        /*[out,retval]*/ VARIANT * To ) = 0;
      virtual HRESULT __stdcall put_To (
        /*[in]*/ VARIANT To ) = 0;
};

enum __declspec(uuid("3b006e87-e68c-4933-9095-bbb3336fe234"))
PpRemoveDocInfoType
{
    ppRDIComments = 1,
    ppRDIRemovePersonalInformation = 4,
    ppRDIDocumentProperties = 8,
    ppRDIDocumentWorkspace = 10,
    ppRDIInkAnnotations = 11,
    ppRDIPublishPath = 13,
    ppRDIDocumentServerProperties = 14,
    ppRDIDocumentManagementPolicy = 15,
    ppRDIContentType = 16,
    ppRDISlideUpdateInformation = 17,
    ppRDIAll = 99
};

enum __declspec(uuid("f4694af5-8686-44e1-978f-eeba63557b90"))
PpCheckInVersionType
{
    ppCheckInMinorVersion = 0,
    ppCheckInMajorVersion = 1,
    ppCheckInOverwriteVersion = 2
};

enum __declspec(uuid("abf6bcae-eb69-4044-bd66-87db3a1e0211"))
MsoClickState
{
    msoClickStateAfterAllAnimations = -2,
    msoClickStateBeforeAutomaticAnimations = -1
};

enum __declspec(uuid("cd470fbb-4284-4670-87e5-f315ef63d556"))
PpFixedFormatType
{
    ppFixedFormatTypeXPS = 1,
    ppFixedFormatTypePDF = 2
};

enum __declspec(uuid("2cf9706b-e805-4ef6-ba87-7b7ebbd43d42"))
PpFixedFormatIntent
{
    ppFixedFormatIntentScreen = 1,
    ppFixedFormatIntentPrint = 2
};

struct __declspec(uuid("914934f5-5a91-11cf-8700-00aa0060263b"))
TableStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetId))
    _bstr_t Id;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _bstr_t GetId ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ BSTR * Id ) = 0;
};

struct __declspec(uuid("914934f6-5a91-11cf-8700-00aa0060263b"))
CustomerData : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    __missing_type__ Item (
        _bstr_t Id );
    __missing_type__ Add ( );
    HRESULT Delete (
        _bstr_t Id );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ BSTR Id,
        /*[out,retval]*/ __missing_type__ * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ __missing_type__ * * Add ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ BSTR Id ) = 0;
};

struct __declspec(uuid("914934f7-5a91-11cf-8700-00aa0060263b"))
Research : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT Query (
        _bstr_t ServiceID,
        VARIANT * QueryString,
        VARIANT * QueryLanguage,
        VARIANT_BOOL UseSelection,
        VARIANT_BOOL LaunchQuery );
    HRESULT SetLanguagePair (
        VARIANT * Language1,
        VARIANT * Language2 );
    VARIANT_BOOL IsResearchService (
        _bstr_t ServiceID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Query (
        /*[in]*/ BSTR ServiceID,
        /*[in]*/ VARIANT * QueryString,
        /*[in]*/ VARIANT * QueryLanguage,
        /*[in]*/ VARIANT_BOOL UseSelection,
        /*[in]*/ VARIANT_BOOL LaunchQuery ) = 0;
      virtual HRESULT __stdcall raw_SetLanguagePair (
        /*[in]*/ VARIANT * Language1,
        /*[in]*/ VARIANT * Language2 ) = 0;
      virtual HRESULT __stdcall raw_IsResearchService (
        /*[in]*/ BSTR ServiceID,
        /*[out,retval]*/ VARIANT_BOOL * IsResearchService ) = 0;
};

struct __declspec(uuid("914934f8-5a91-11cf-8700-00aa0060263b"))
TableBackground : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetPicture))
    PictureFormatPtr Picture;
    __declspec(property(get=GetReflection))
    __missing_type__ Reflection;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;

    //
    // Wrapper methods for error-handling
    //

    FillFormatPtr GetFill ( );
    PictureFormatPtr GetPicture ( );
    __missing_type__ GetReflection ( );
    ShadowFormatPtr GetShadow ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct FillFormat * * Fill ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ struct PictureFormat * * Picture ) = 0;
      virtual HRESULT __stdcall get_Reflection (
        /*[out,retval]*/ __missing_type__ * * Reflection ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ShadowFormat * * Shadow ) = 0;
};

struct __declspec(uuid("914934f9-5a91-11cf-8700-00aa0060263b"))
TextFrame2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMarginBottom,put=PutMarginBottom))
    float MarginBottom;
    __declspec(property(get=GetMarginLeft,put=PutMarginLeft))
    float MarginLeft;
    __declspec(property(get=GetMarginRight,put=PutMarginRight))
    float MarginRight;
    __declspec(property(get=GetMarginTop,put=PutMarginTop))
    float MarginTop;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetHasText))
    __missing_type__  HasText;
    __declspec(property(get=GetTextRange))
    __missing_type__ TextRange;
    __declspec(property(get=GetColumn))
    __missing_type__ Column;
    __declspec(property(get=GetRuler))
    __missing_type__ Ruler;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetMarginBottom ( );
    void PutMarginBottom (
        float MarginBottom );
    float GetMarginLeft ( );
    void PutMarginLeft (
        float MarginLeft );
    float GetMarginRight ( );
    void PutMarginRight (
        float MarginRight );
    float GetMarginTop ( );
    void PutMarginTop (
        float MarginTop );
    __missing_type__  GetOrientation ( );
    void PutOrientation (
        __missing_type__ Orientation );
    __missing_type__  GetHorizontalAnchor ( );
    void PutHorizontalAnchor (
        __missing_type__ HorizontalAnchor );
    __missing_type__  GetVerticalAnchor ( );
    void PutVerticalAnchor (
        __missing_type__ VerticalAnchor );
    __missing_type__  GetPathFormat ( );
    void PutPathFormat (
        __missing_type__ PathFormat );
    __missing_type__  GetWarpFormat ( );
    void PutWarpFormat (
        __missing_type__ WarpFormat );
    __missing_type__  GetWordArtFormat ( );
    void PutWordArtFormat (
        __missing_type__ WordArtFormat );
    __missing_type__  GetWordWrap ( );
    void PutWordWrap (
        __missing_type__ WordWrap );
    __missing_type__  GetAutoSize ( );
    void PutAutoSize (
        __missing_type__ AutoSize );
    ThreeDFormatPtr GetThreeD ( );
    __missing_type__  GetHasText ( );
    __missing_type__ GetTextRange ( );
    __missing_type__ GetColumn ( );
    __missing_type__ GetRuler ( );
    HRESULT DeleteText ( );
    __missing_type__  GetNoTextRotation ( );
    void PutNoTextRotation (
        __missing_type__ NoTextRotation );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_MarginBottom (
        /*[out,retval]*/ float * MarginBottom ) = 0;
      virtual HRESULT __stdcall put_MarginBottom (
        /*[in]*/ float MarginBottom ) = 0;
      virtual HRESULT __stdcall get_MarginLeft (
        /*[out,retval]*/ float * MarginLeft ) = 0;
      virtual HRESULT __stdcall put_MarginLeft (
        /*[in]*/ float MarginLeft ) = 0;
      virtual HRESULT __stdcall get_MarginRight (
        /*[out,retval]*/ float * MarginRight ) = 0;
      virtual HRESULT __stdcall put_MarginRight (
        /*[in]*/ float MarginRight ) = 0;
      virtual HRESULT __stdcall get_MarginTop (
        /*[out,retval]*/ float * MarginTop ) = 0;
      virtual HRESULT __stdcall put_MarginTop (
        /*[in]*/ float MarginTop ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ __missing_type__ * Orientation ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ __missing_type__ Orientation ) = 0;
      virtual HRESULT __stdcall get_HorizontalAnchor (
        /*[out,retval]*/ __missing_type__ * HorizontalAnchor ) = 0;
      virtual HRESULT __stdcall put_HorizontalAnchor (
        /*[in]*/ __missing_type__ HorizontalAnchor ) = 0;
      virtual HRESULT __stdcall get_VerticalAnchor (
        /*[out,retval]*/ __missing_type__ * VerticalAnchor ) = 0;
      virtual HRESULT __stdcall put_VerticalAnchor (
        /*[in]*/ __missing_type__ VerticalAnchor ) = 0;
      virtual HRESULT __stdcall get_PathFormat (
        /*[out,retval]*/ __missing_type__ * PathFormat ) = 0;
      virtual HRESULT __stdcall put_PathFormat (
        /*[in]*/ __missing_type__ PathFormat ) = 0;
      virtual HRESULT __stdcall get_WarpFormat (
        /*[out,retval]*/ __missing_type__ * WarpFormat ) = 0;
      virtual HRESULT __stdcall put_WarpFormat (
        /*[in]*/ __missing_type__ WarpFormat ) = 0;
      virtual HRESULT __stdcall get_WordArtFormat (
        /*[out,retval]*/ __missing_type__ * WordArtFormat ) = 0;
      virtual HRESULT __stdcall put_WordArtFormat (
        /*[in]*/ __missing_type__ WordArtFormat ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ __missing_type__ * WordWrap ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ __missing_type__ WordWrap ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ __missing_type__ * AutoSize ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ __missing_type__ AutoSize ) = 0;
      virtual HRESULT __stdcall get_ThreeD (
        /*[out,retval]*/ struct ThreeDFormat * * ThreeD ) = 0;
      virtual HRESULT __stdcall get_HasText (
        /*[out,retval]*/ __missing_type__ * pHasText ) = 0;
      virtual HRESULT __stdcall get_TextRange (
        /*[out,retval]*/ __missing_type__ * * Range ) = 0;
      virtual HRESULT __stdcall get_Column (
        /*[out,retval]*/ __missing_type__ * * Column ) = 0;
      virtual HRESULT __stdcall get_Ruler (
        /*[out,retval]*/ __missing_type__ * * Ruler ) = 0;
      virtual HRESULT __stdcall raw_DeleteText ( ) = 0;
      virtual HRESULT __stdcall get_NoTextRotation (
        /*[out,retval]*/ __missing_type__ * NoTextRotation ) = 0;
      virtual HRESULT __stdcall put_NoTextRotation (
        /*[in]*/ __missing_type__ NoTextRotation ) = 0;
};

enum __declspec(uuid("628c4ecd-2840-41ab-ba67-fe836c277e76"))
XlBackground
{
    xlBackgroundAutomatic = -4105,
    xlBackgroundOpaque = 3,
    xlBackgroundTransparent = 2
};

enum __declspec(uuid("b1ac486b-feb5-4f91-ab5a-674bd3c93ff7"))
XlChartGallery
{
    xlBuiltIn = 21,
    xlUserDefined = 22,
    xlAnyGallery = 23
};

enum __declspec(uuid("361d6719-c6c7-438c-849f-09f55b485c30"))
XlChartPicturePlacement
{
    xlSides = 1,
    xlEnd = 2,
    xlEndSides = 3,
    xlFront = 4,
    xlFrontSides = 5,
    xlFrontEnd = 6,
    xlAllFaces = 7
};

enum __declspec(uuid("6d851b33-e263-4602-b4bd-96ed7cb4f542"))
XlDataLabelSeparator
{
    xlDataLabelSeparatorDefault = 1
};

enum __declspec(uuid("f800b4fc-157e-49f8-80a8-07a524f87c63"))
XlPattern
{
    xlPatternAutomatic = -4105,
    xlPatternChecker = 9,
    xlPatternCrissCross = 16,
    xlPatternDown = -4121,
    xlPatternGray16 = 17,
    xlPatternGray25 = -4124,
    xlPatternGray50 = -4125,
    xlPatternGray75 = -4126,
    xlPatternGray8 = 18,
    xlPatternGrid = 15,
    xlPatternHorizontal = -4128,
    xlPatternLightDown = 13,
    xlPatternLightHorizontal = 11,
    xlPatternLightUp = 14,
    xlPatternLightVertical = 12,
    xlPatternNone = -4142,
    xlPatternSemiGray75 = 10,
    xlPatternSolid = 1,
    xlPatternUp = -4162,
    xlPatternVertical = -4166,
    xlPatternLinearGradient = 4000,
    xlPatternRectangularGradient = 4001
};

enum __declspec(uuid("a7e68d3b-0a7d-4f2e-a398-7fa9f2db0d8a"))
XlPictureAppearance
{
    xlPrinter = 2,
    xlScreen = 1
};

enum __declspec(uuid("0acdcd15-22e1-467c-a50b-9940132630a2"))
XlCopyPictureFormat
{
    xlBitmap = 2,
    xlPicture = -4147
};

enum __declspec(uuid("1e1c4c4b-742d-40ca-8dd8-6e9b772d117d"))
XlRgbColor
{
    rgbAliceBlue = 16775408,
    rgbAntiqueWhite = 14150650,
    rgbAqua = 16776960,
    rgbAquamarine = 13959039,
    rgbAzure = 16777200,
    rgbBeige = 14480885,
    rgbBisque = 12903679,
    rgbBlack = 0,
    rgbBlanchedAlmond = 13495295,
    rgbBlue = 16711680,
    rgbBlueViolet = 14822282,
    rgbBrown = 2763429,
    rgbBurlyWood = 8894686,
    rgbCadetBlue = 10526303,
    rgbChartreuse = 65407,
    rgbCoral = 5275647,
    rgbCornflowerBlue = 15570276,
    rgbCornsilk = 14481663,
    rgbCrimson = 3937500,
    rgbDarkBlue = 9109504,
    rgbDarkCyan = 9145088,
    rgbDarkGoldenrod = 755384,
    rgbDarkGreen = 25600,
    rgbDarkGray = 11119017,
    rgbDarkGrey = 11119017,
    rgbDarkKhaki = 7059389,
    rgbDarkMagenta = 9109643,
    rgbDarkOliveGreen = 3107669,
    rgbDarkOrange = 36095,
    rgbDarkOrchid = 13382297,
    rgbDarkRed = 139,
    rgbDarkSalmon = 8034025,
    rgbDarkSeaGreen = 9419919,
    rgbDarkSlateBlue = 9125192,
    rgbDarkSlateGray = 5197615,
    rgbDarkSlateGrey = 5197615,
    rgbDarkTurquoise = 13749760,
    rgbDarkViolet = 13828244,
    rgbDeepPink = 9639167,
    rgbDeepSkyBlue = 16760576,
    rgbDimGray = 6908265,
    rgbDimGrey = 6908265,
    rgbDodgerBlue = 16748574,
    rgbFireBrick = 2237106,
    rgbFloralWhite = 15792895,
    rgbForestGreen = 2263842,
    rgbFuchsia = 16711935,
    rgbGainsboro = 14474460,
    rgbGhostWhite = 16775416,
    rgbGold = 55295,
    rgbGoldenrod = 2139610,
    rgbGray = 8421504,
    rgbGreen = 32768,
    rgbGrey = 8421504,
    rgbGreenYellow = 3145645,
    rgbHoneydew = 15794160,
    rgbHotPink = 11823615,
    rgbIndianRed = 6053069,
    rgbIndigo = 8519755,
    rgbIvory = 15794175,
    rgbKhaki = 9234160,
    rgbLavender = 16443110,
    rgbLavenderBlush = 16118015,
    rgbLawnGreen = 64636,
    rgbLemonChiffon = 13499135,
    rgbLightBlue = 15128749,
    rgbLightCoral = 8421616,
    rgbLightCyan = 9145088,
    rgbLightGoldenrodYellow = 13826810,
    rgbLightGray = 13882323,
    rgbLightGreen = 9498256,
    rgbLightGrey = 13882323,
    rgbLightPink = 12695295,
    rgbLightSalmon = 8036607,
    rgbLightSeaGreen = 11186720,
    rgbLightSkyBlue = 16436871,
    rgbLightSlateGray = 10061943,
    rgbLightSlateGrey = 10061943,
    rgbLightSteelBlue = 14599344,
    rgbLightYellow = 14745599,
    rgbLime = 65280,
    rgbLimeGreen = 3329330,
    rgbLinen = 15134970,
    rgbMaroon = 128,
    rgbMediumAquamarine = 11206502,
    rgbMediumBlue = 13434880,
    rgbMediumOrchid = 13850042,
    rgbMediumPurple = 14381203,
    rgbMediumSeaGreen = 7451452,
    rgbMediumSlateBlue = 15624315,
    rgbMediumSpringGreen = 10156544,
    rgbMediumTurquoise = 13422920,
    rgbMediumVioletRed = 8721863,
    rgbMidnightBlue = 7346457,
    rgbMintCream = 16449525,
    rgbMistyRose = 14804223,
    rgbMoccasin = 11920639,
    rgbNavajoWhite = 11394815,
    rgbNavy = 8388608,
    rgbNavyBlue = 8388608,
    rgbOldLace = 15136253,
    rgbOlive = 32896,
    rgbOliveDrab = 2330219,
    rgbOrange = 42495,
    rgbOrangeRed = 17919,
    rgbOrchid = 14053594,
    rgbPaleGoldenrod = 7071982,
    rgbPaleGreen = 10025880,
    rgbPaleTurquoise = 15658671,
    rgbPaleVioletRed = 9662683,
    rgbPapayaWhip = 14020607,
    rgbPeachPuff = 12180223,
    rgbPeru = 4163021,
    rgbPink = 13353215,
    rgbPlum = 14524637,
    rgbPowderBlue = 15130800,
    rgbPurple = 8388736,
    rgbRed = 255,
    rgbRosyBrown = 9408444,
    rgbRoyalBlue = 14772545,
    rgbSalmon = 7504122,
    rgbSandyBrown = 6333684,
    rgbSeaGreen = 5737262,
    rgbSeashell = 15660543,
    rgbSienna = 2970272,
    rgbSilver = 12632256,
    rgbSkyBlue = 15453831,
    rgbSlateBlue = 13458026,
    rgbSlateGray = 9470064,
    rgbSlateGrey = 9470064,
    rgbSnow = 16448255,
    rgbSpringGreen = 8388352,
    rgbSteelBlue = 11829830,
    rgbTan = 9221330,
    rgbTeal = 8421376,
    rgbThistle = 14204888,
    rgbTomato = 4678655,
    rgbTurquoise = 13688896,
    rgbYellow = 65535,
    rgbYellowGreen = 3329434,
    rgbViolet = 15631086,
    rgbWheat = 11788021,
    rgbWhite = 16777215,
    rgbWhiteSmoke = 16119285
};

enum __declspec(uuid("850b18fb-afb2-489c-a498-df16aff614f3"))
XlLineStyle
{
    xlContinuous = 1,
    xlDash = -4115,
    xlDashDot = 4,
    xlDashDotDot = 5,
    xlDot = -4118,
    xlDouble = -4119,
    xlSlantDashDot = 13,
    xlLineStyleNone = -4142
};

enum __declspec(uuid("b95c5967-64bb-4d6f-9ee8-9916b8637a41"))
XlAxisCrosses
{
    xlAxisCrossesAutomatic = -4105,
    xlAxisCrossesCustom = -4114,
    xlAxisCrossesMaximum = 2,
    xlAxisCrossesMinimum = 4
};

enum __declspec(uuid("9f3a2942-5ba4-4578-b6e3-4819c4cad7b0"))
XlAxisGroup
{
    xlPrimary = 1,
    xlSecondary = 2
};

enum __declspec(uuid("dd79733b-5e46-49c9-8400-6bcf316ec79e"))
XlAxisType
{
    xlCategory = 1,
    xlSeriesAxis = 3,
    xlValue = 2
};

enum __declspec(uuid("d2431a3d-f112-4a83-97b2-bc3ce3c9b73b"))
XlBarShape
{
    xlBox = 0,
    xlPyramidToPoint = 1,
    xlPyramidToMax = 2,
    xlCylinder = 3,
    xlConeToPoint = 4,
    xlConeToMax = 5
};

enum __declspec(uuid("3918e32a-fd7f-461c-b2e0-f5605207c30b"))
XlBorderWeight
{
    xlHairline = 1,
    xlMedium = -4138,
    xlThick = 4,
    xlThin = 2
};

enum __declspec(uuid("406223e5-9460-41d9-babf-b6e6d3c62f2d"))
XlCategoryType
{
    xlCategoryScale = 2,
    xlTimeScale = 3,
    xlAutomaticScale = -4105
};

enum __declspec(uuid("a66eb34b-bcc6-40e7-9722-398cf51f2a17"))
XlChartElementPosition
{
    xlChartElementPositionAutomatic = -4105,
    xlChartElementPositionCustom = -4114
};

enum __declspec(uuid("fb55f3eb-2f7c-4410-982e-ed9bc7812e32"))
XlChartItem
{
    xlDataLabel = 0,
    xlChartArea = 2,
    xlSeries = 3,
    xlChartTitle = 4,
    xlWalls = 5,
    xlCorners = 6,
    xlDataTable = 7,
    xlTrendline = 8,
    xlErrorBars = 9,
    xlXErrorBars = 10,
    xlYErrorBars = 11,
    xlLegendEntry = 12,
    xlLegendKey = 13,
    xlShape = 14,
    xlMajorGridlines = 15,
    xlMinorGridlines = 16,
    xlAxisTitle = 17,
    xlUpBars = 18,
    xlPlotArea = 19,
    xlDownBars = 20,
    xlAxis = 21,
    xlSeriesLines = 22,
    xlFloor = 23,
    xlLegend = 24,
    xlHiLoLines = 25,
    xlDropLines = 26,
    xlRadarAxisLabels = 27,
    xlNothing = 28,
    xlLeaderLines = 29,
    xlDisplayUnitLabel = 30,
    xlPivotChartFieldButton = 31,
    xlPivotChartDropZone = 32
};

enum __declspec(uuid("bcc70dfc-c553-4fa1-99cc-c599a711add0"))
XlOrientation
{
    xlDownward = -4170,
    xlHorizontal = -4128,
    xlUpward = -4171,
    xlVertical = -4166
};

enum __declspec(uuid("de37e118-9080-45e2-8f09-67161638990f"))
XlChartPictureType
{
    xlStackScale = 3,
    xlStack = 2,
    xlStretch = 1
};

enum __declspec(uuid("878f9ad5-d422-4ca3-80a0-ae420918f413"))
XlChartSplitType
{
    xlSplitByPosition = 1,
    xlSplitByPercentValue = 3,
    xlSplitByCustomSplit = 4,
    xlSplitByValue = 2
};

enum __declspec(uuid("9dcda232-6504-4f31-a174-ceee2efe5f27"))
XlColorIndex
{
    xlColorIndexAutomatic = -4105,
    xlColorIndexNone = -4142
};

enum __declspec(uuid("183eb140-c143-4a88-a7e0-15fc6e00c217"))
XlConstants
{
    xlAutomatic = -4105,
    xlCombination = -4111,
    xlCustom = -4114,
    xlBar = 2,
    xlColumn = 3,
    xl3DBar = -4099,
    xl3DSurface = -4103,
    xlDefaultAutoFormat = -1,
    xlNone = -4142,
    xlAbove = 0,
    xlBelow = 1,
    xlBoth = 1,
    xlBottom = -4107,
    xlCenter = -4108,
    xlChecker = 9,
    xlCircle = 8,
    xlCorner = 2,
    xlCrissCross = 16,
    xlCross = 4,
    xlDiamond = 2,
    xlDistributed = -4117,
    xlFill = 5,
    xlFixedValue = 1,
    xlGeneral = 1,
    xlGray16 = 17,
    xlGray25 = -4124,
    xlGray50 = -4125,
    xlGray75 = -4126,
    xlGray8 = 18,
    xlGrid = 15,
    xlHigh = -4127,
    xlInside = 2,
    xlJustify = -4130,
    xlLeft = -4131,
    xlLightDown = 13,
    xlLightHorizontal = 11,
    xlLightUp = 14,
    xlLightVertical = 12,
    xlLow = -4134,
    xlMaximum = 2,
    xlMinimum = 4,
    xlMinusValues = 3,
    xlNextToAxis = 4,
    xlOpaque = 3,
    xlOutside = 3,
    xlPercent = 2,
    xlPlus = 9,
    xlPlusValues = 2,
    xlRight = -4152,
    xlScale = 3,
    xlSemiGray75 = 10,
    xlShowLabel = 4,
    xlShowLabelAndPercent = 5,
    xlShowPercent = 3,
    xlShowValue = 2,
    xlSingle = 2,
    xlSolid = 1,
    xlSquare = 1,
    xlStar = 5,
    xlStError = 4,
    xlTop = -4160,
    xlTransparent = 2,
    xlTriangle = 3
};

enum __declspec(uuid("f11b2572-8ff8-44ae-9876-aef9a8b749a8"))
XlDataLabelPosition
{
    xlLabelPositionCenter = -4108,
    xlLabelPositionAbove = 0,
    xlLabelPositionBelow = 1,
    xlLabelPositionLeft = -4131,
    xlLabelPositionRight = -4152,
    xlLabelPositionOutsideEnd = 2,
    xlLabelPositionInsideEnd = 3,
    xlLabelPositionInsideBase = 4,
    xlLabelPositionBestFit = 5,
    xlLabelPositionMixed = 6,
    xlLabelPositionCustom = 7
};

enum __declspec(uuid("840d3be9-75b9-44f8-a4a9-8c23f48dffe0"))
XlDataLabelsType
{
    xlDataLabelsShowNone = -4142,
    xlDataLabelsShowValue = 2,
    xlDataLabelsShowPercent = 3,
    xlDataLabelsShowLabel = 4,
    xlDataLabelsShowLabelAndPercent = 5,
    xlDataLabelsShowBubbleSizes = 6
};

enum __declspec(uuid("04b01227-b5bd-448c-89ab-d990e9e346f4"))
XlDisplayBlanksAs
{
    xlInterpolated = 3,
    xlNotPlotted = 1,
    xlZero = 2
};

enum __declspec(uuid("87a9a6ee-10d5-41c4-bd53-fdca6ec7e139"))
XlDisplayUnit
{
    xlHundreds = -2,
    xlThousands = -3,
    xlTenThousands = -4,
    xlHundredThousands = -5,
    xlMillions = -6,
    xlTenMillions = -7,
    xlHundredMillions = -8,
    xlThousandMillions = -9,
    xlMillionMillions = -10
};

enum __declspec(uuid("7bd721fc-e709-48b5-9358-18408f131030"))
XlEndStyleCap
{
    xlCap = 1,
    xlNoCap = 2
};

enum __declspec(uuid("3ad2fbbd-b1ae-4bed-925d-ce60450115cb"))
XlErrorBarDirection
{
    xlChartX = -4168,
    xlChartY = 1
};

enum __declspec(uuid("00c9e500-2e7d-4ecf-b7bc-d0b86cb8f3a6"))
XlErrorBarInclude
{
    xlErrorBarIncludeBoth = 1,
    xlErrorBarIncludeMinusValues = 3,
    xlErrorBarIncludeNone = -4142,
    xlErrorBarIncludePlusValues = 2
};

enum __declspec(uuid("00983aab-ca07-437d-9415-154dad6918f0"))
XlErrorBarType
{
    xlErrorBarTypeCustom = -4114,
    xlErrorBarTypeFixedValue = 1,
    xlErrorBarTypePercent = 2,
    xlErrorBarTypeStDev = -4155,
    xlErrorBarTypeStError = 4
};

enum __declspec(uuid("9d60ef74-103f-4acb-8042-20c4d100f034"))
XlHAlign
{
    xlHAlignCenter = -4108,
    xlHAlignCenterAcrossSelection = 7,
    xlHAlignDistributed = -4117,
    xlHAlignFill = 5,
    xlHAlignGeneral = 1,
    xlHAlignJustify = -4130,
    xlHAlignLeft = -4131,
    xlHAlignRight = -4152
};

enum __declspec(uuid("db4b1313-f371-453b-9eca-9c9495fc23ad"))
XlLegendPosition
{
    xlLegendPositionBottom = -4107,
    xlLegendPositionCorner = 2,
    xlLegendPositionLeft = -4131,
    xlLegendPositionRight = -4152,
    xlLegendPositionTop = -4160,
    xlLegendPositionCustom = -4161
};

enum __declspec(uuid("12b55737-a883-42ff-b5f7-d7360e7b97b4"))
XlMarkerStyle
{
    xlMarkerStyleAutomatic = -4105,
    xlMarkerStyleCircle = 8,
    xlMarkerStyleDash = -4115,
    xlMarkerStyleDiamond = 2,
    xlMarkerStyleDot = -4118,
    xlMarkerStyleNone = -4142,
    xlMarkerStylePicture = -4147,
    xlMarkerStylePlus = 9,
    xlMarkerStyleSquare = 1,
    xlMarkerStyleStar = 5,
    xlMarkerStyleTriangle = 3,
    xlMarkerStyleX = -4168
};

enum __declspec(uuid("7fac3690-46d1-49cd-8793-5690439ddc8b"))
XlPivotFieldOrientation
{
    xlColumnField = 2,
    xlDataField = 4,
    xlHidden = 0,
    xlPageField = 3,
    xlRowField = 1
};

enum __declspec(uuid("34a545f2-2447-4991-9cd2-b7f0d5707591"))
XlReadingOrder
{
    xlContext = -5002,
    xlLTR = -5003,
    xlRTL = -5004
};

enum __declspec(uuid("08474527-2498-4302-9408-aaa07de998d7"))
XlRowCol
{
    xlColumns = 2,
    xlRows = 1
};

enum __declspec(uuid("ca98c99c-d154-4b5e-a142-ed2e49fe6ea1"))
XlScaleType
{
    xlScaleLinear = -4132,
    xlScaleLogarithmic = -4133
};

enum __declspec(uuid("b5c2a6b9-6991-478a-86c0-c4a227f44940"))
XlSizeRepresents
{
    xlSizeIsWidth = 2,
    xlSizeIsArea = 1
};

enum __declspec(uuid("dc28ed70-abb0-41a1-b45e-73d98203b3b5"))
XlTickLabelOrientation
{
    xlTickLabelOrientationAutomatic = -4105,
    xlTickLabelOrientationDownward = -4170,
    xlTickLabelOrientationHorizontal = -4128,
    xlTickLabelOrientationUpward = -4171,
    xlTickLabelOrientationVertical = -4166
};

enum __declspec(uuid("fbb0d012-58f0-4251-aba7-0c0a5e416514"))
XlTickLabelPosition
{
    xlTickLabelPositionHigh = -4127,
    xlTickLabelPositionLow = -4134,
    xlTickLabelPositionNextToAxis = 4,
    xlTickLabelPositionNone = -4142
};

enum __declspec(uuid("6d1edf65-fb90-465c-8777-015d7028e975"))
XlTickMark
{
    xlTickMarkCross = 4,
    xlTickMarkInside = 2,
    xlTickMarkNone = -4142,
    xlTickMarkOutside = 3
};

enum __declspec(uuid("b5e8c11d-ec7b-491b-96e8-af57a773eed2"))
XlTimeUnit
{
    xlDays = 0,
    xlMonths = 1,
    xlYears = 2
};

enum __declspec(uuid("f2bfa1d6-b1e6-4375-96f0-11540cd587c2"))
XlTrendlineType
{
    xlExponential = 5,
    xlLinear = -4132,
    xlLogarithmic = -4133,
    xlMovingAvg = 6,
    xlPolynomial = 3,
    xlPower = 4
};

enum __declspec(uuid("ddafa8b9-3bbb-4679-8d6c-8701b9f234e2"))
XlUnderlineStyle
{
    xlUnderlineStyleDouble = -4119,
    xlUnderlineStyleDoubleAccounting = 5,
    xlUnderlineStyleNone = -4142,
    xlUnderlineStyleSingle = 2,
    xlUnderlineStyleSingleAccounting = 4
};

enum __declspec(uuid("e0662922-d918-4344-8a6a-d95499304ce2"))
XlVAlign
{
    xlVAlignBottom = -4107,
    xlVAlignCenter = -4108,
    xlVAlignDistributed = -4117,
    xlVAlignJustify = -4130,
    xlVAlignTop = -4160
};

struct __declspec(uuid("92d41a56-f07e-4ca4-af6f-bef486aa4e6f"))
ChartBorder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    _variant_t LineStyle;
    __declspec(property(get=GetWeight,put=PutWeight))
    _variant_t Weight;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    void PutColor (
        const _variant_t & RHS );
    _variant_t GetColor ( );
    void PutColorIndex (
        const _variant_t & RHS );
    _variant_t GetColorIndex ( );
    void PutLineStyle (
        const _variant_t & RHS );
    _variant_t GetLineStyle ( );
    void PutWeight (
        const _variant_t & RHS );
    _variant_t GetWeight ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _ApplicationPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Color (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ColorIndex (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ColorIndex (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Weight (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Weight (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
};

struct __declspec(uuid("92d41a59-f07e-4ca4-af6f-bef486aa4e6f"))
ChartColorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    long _Default;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetSchemeColor,put=PutSchemeColor))
    long SchemeColor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetRGB))
    long RGB;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    long GetSchemeColor ( );
    void PutSchemeColor (
        long RHS );
    long Get_Default ( );
    long GetType ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );
    long GetRGB ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_SchemeColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SchemeColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_RGB (
        /*[out,retval]*/ long * RHS ) = 0;
};

struct __declspec(uuid("92d41a5a-f07e-4ca4-af6f-bef486aa4e6f"))
ChartData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWorkbook))
    IDispatchPtr Workbook;
    __declspec(property(get=GetIsLinked))
    VARIANT_BOOL IsLinked;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetWorkbook ( );
    HRESULT Activate ( );
    VARIANT_BOOL GetIsLinked ( );
    HRESULT BreakLink ( );
    HRESULT ActivateChartDataWindow ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Workbook (
        /*[out,retval]*/ IDispatch * * ppdispWorkbook ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_IsLinked (
        /*[out,retval]*/ VARIANT_BOOL * pfIsLinked ) = 0;
      virtual HRESULT __stdcall raw_BreakLink ( ) = 0;
      virtual HRESULT __stdcall raw_ActivateChartDataWindow ( ) = 0;
};

struct __declspec(uuid("92d41a5b-f07e-4ca4-af6f-bef486aa4e6f"))
ChartFillFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPresetTexture))
    __missing_type__  PresetTexture;
    __declspec(property(get=GetTextureType))
    __missing_type__  TextureType;
    __declspec(property(get=GetType))
    __missing_type__  Type;
    __declspec(property(get=GetBackColor))
    ChartColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor))
    ChartColorFormatPtr ForeColor;
    __declspec(property(get=GetGradientDegree))
    float GradientDegree;
    __declspec(property(get=GetTextureName))
    _bstr_t TextureName;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetGradientColorType))
    __missing_type__  GradientColorType;
    __declspec(property(get=GetGradientStyle))
    __missing_type__  GradientStyle;
    __declspec(property(get=GetGradientVariant))
    long GradientVariant;
    __declspec(property(get=GetPattern))
    __missing_type__  Pattern;
    __declspec(property(get=GetPresetGradientType))
    __missing_type__  PresetGradientType;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Solid ( );
    HRESULT UserTextured (
        _bstr_t TextureFile );
    ChartColorFormatPtr GetBackColor ( );
    ChartColorFormatPtr GetForeColor ( );
    float GetGradientDegree ( );
    _bstr_t GetTextureName ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _ApplicationPtr GetApplication ( );
    HRESULT OneColorGradient (
        __missing_type__ Style,
        long Variant,
        float Degree );
    __missing_type__  GetGradientColorType ( );
    __missing_type__  GetGradientStyle ( );
    long GetGradientVariant ( );
    __missing_type__  GetPattern ( );
    HRESULT Patterned (
        __missing_type__ Pattern );
    HRESULT PresetGradient (
        __missing_type__ Style,
        long Variant,
        __missing_type__ PresetGradientType );
    __missing_type__  GetPresetGradientType ( );
    __missing_type__  GetPresetTexture ( );
    HRESULT PresetTextured (
        __missing_type__ PresetTexture );
    __missing_type__  GetTextureType ( );
    HRESULT TwoColorGradient (
        __missing_type__ Style,
        long Variant );
    __missing_type__  GetType ( );
    HRESULT UserPicture (
        const _variant_t & PictureFile = vtMissing,
        const _variant_t & PictureFormat = vtMissing,
        const _variant_t & PictureStackUnit = vtMissing,
        const _variant_t & PicturePlacement = vtMissing );
    __missing_type__  GetVisible ( );
    void PutVisible (
        __missing_type__ RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Solid ( ) = 0;
      virtual HRESULT __stdcall raw_UserTextured (
        /*[in]*/ BSTR TextureFile ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ struct ChartColorFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ChartColorFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_GradientDegree (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall get_TextureName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall raw_OneColorGradient (
        /*[in]*/ __missing_type__ Style,
        /*[in]*/ long Variant,
        /*[in]*/ float Degree ) = 0;
      virtual HRESULT __stdcall get_GradientColorType (
        /*[out,retval]*/ __missing_type__ * RHS ) = 0;
      virtual HRESULT __stdcall get_GradientStyle (
        /*[out,retval]*/ __missing_type__ * RHS ) = 0;
      virtual HRESULT __stdcall get_GradientVariant (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ __missing_type__ * RHS ) = 0;
      virtual HRESULT __stdcall raw_Patterned (
        /*[in]*/ __missing_type__ Pattern ) = 0;
      virtual HRESULT __stdcall raw_PresetGradient (
        /*[in]*/ __missing_type__ Style,
        /*[in]*/ long Variant,
        /*[in]*/ __missing_type__ PresetGradientType ) = 0;
      virtual HRESULT __stdcall get_PresetGradientType (
        /*[out,retval]*/ __missing_type__ * RHS ) = 0;
      virtual HRESULT __stdcall get_PresetTexture (
        /*[out,retval]*/ __missing_type__ * RHS ) = 0;
      virtual HRESULT __stdcall raw_PresetTextured (
        /*[in]*/ __missing_type__ PresetTexture ) = 0;
      virtual HRESULT __stdcall get_TextureType (
        /*[out,retval]*/ __missing_type__ * RHS ) = 0;
      virtual HRESULT __stdcall raw_TwoColorGradient (
        /*[in]*/ __missing_type__ Style,
        /*[in]*/ long Variant ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ __missing_type__ * RHS ) = 0;
      virtual HRESULT __stdcall raw_UserPicture (
        /*[in]*/ VARIANT PictureFile = vtMissing,
        /*[in]*/ VARIANT PictureFormat = vtMissing,
        /*[in]*/ VARIANT PictureStackUnit = vtMissing,
        /*[in]*/ VARIANT PicturePlacement = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ __missing_type__ * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ __missing_type__ RHS ) = 0;
};

struct __declspec(uuid("92d41a5c-f07e-4ca4-af6f-bef486aa4e6f"))
ChartFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetGlow))
    __missing_type__ Glow;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetSoftEdge))
    __missing_type__ SoftEdge;
    __declspec(property(get=GetTextFrame2))
    TextFrame2Ptr TextFrame2;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;

    //
    // Wrapper methods for error-handling
    //

    FillFormatPtr GetFill ( );
    __missing_type__ GetGlow ( );
    LineFormatPtr GetLine ( );
    IDispatchPtr GetParent ( );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    __missing_type__ GetSoftEdge ( );
    TextFrame2Ptr GetTextFrame2 ( );
    ThreeDFormatPtr GetThreeD ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );
    AdjustmentsPtr GetAdjustments ( );
    __missing_type__  GetAutoShapeType ( );
    void PutAutoShapeType (
        __missing_type__ AutoShapeType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct FillFormat * * ppFill ) = 0;
      virtual HRESULT __stdcall get_Glow (
        /*[out,retval]*/ __missing_type__ * * ppGlow ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct LineFormat * * ppLine ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppparent ) = 0;
      virtual HRESULT __stdcall get_PictureFormat (
        /*[out,retval]*/ struct PictureFormat * * ppPictureFormat ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ShadowFormat * * ppShadow ) = 0;
      virtual HRESULT __stdcall get_SoftEdge (
        /*[out,retval]*/ __missing_type__ * * ppSoftEdge ) = 0;
      virtual HRESULT __stdcall get_TextFrame2 (
        /*[out,retval]*/ struct TextFrame2 * * ppTextFrame ) = 0;
      virtual HRESULT __stdcall get_ThreeD (
        /*[out,retval]*/ struct ThreeDFormat * * ppThreeD ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Adjustments (
        /*[out,retval]*/ struct Adjustments * * ppAdjustments ) = 0;
      virtual HRESULT __stdcall get_AutoShapeType (
        /*[out,retval]*/ __missing_type__ * AutoShapeType ) = 0;
      virtual HRESULT __stdcall put_AutoShapeType (
        /*[in]*/ __missing_type__ AutoShapeType ) = 0;
};

struct __declspec(uuid("92d41a60-f07e-4ca4-af6f-bef486aa4e6f"))
Corners : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
};

struct __declspec(uuid("92d41a66-f07e-4ca4-af6f-bef486aa4e6f"))
DropLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    IDispatchPtr GetParent ( );
    ChartBorderPtr GetBorder ( );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );
    _variant_t Delete ( );
    _variant_t Select ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * RHS ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("92d41a67-f07e-4ca4-af6f-bef486aa4e6f"))
ErrorBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetEndStyle,put=PutEndStyle))
    enum XlEndStyleCap EndStyle;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    ChartBorderPtr GetBorder ( );
    _variant_t Delete ( );
    _variant_t ClearFormats ( );
    enum XlEndStyleCap GetEndStyle ( );
    void PutEndStyle (
        enum XlEndStyleCap RHS );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_EndStyle (
        /*[out,retval]*/ enum XlEndStyleCap * RHS ) = 0;
      virtual HRESULT __stdcall put_EndStyle (
        /*[in]*/ enum XlEndStyleCap RHS ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
};

struct __declspec(uuid("92d41a69-f07e-4ca4-af6f-bef486aa4e6f"))
ChartFont : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetBackground,put=PutBackground))
    _variant_t Background;
    __declspec(property(get=GetBold,put=PutBold))
    _variant_t Bold;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _variant_t FontStyle;
    __declspec(property(get=GetItalic,put=PutItalic))
    _variant_t Italic;
    __declspec(property(get=GetName,put=PutName))
    _variant_t Name;
    __declspec(property(get=GetOutlineFont,put=PutOutlineFont))
    _variant_t OutlineFont;
    __declspec(property(get=GetShadow,put=PutShadow))
    _variant_t Shadow;
    __declspec(property(get=GetSize,put=PutSize))
    _variant_t Size;
    __declspec(property(get=GetStrikethrough,put=PutStrikethrough))
    _variant_t Strikethrough;
    __declspec(property(get=GetSubscript,put=PutSubscript))
    _variant_t Subscript;
    __declspec(property(get=GetSuperscript,put=PutSuperscript))
    _variant_t Superscript;
    __declspec(property(get=GetUnderline,put=PutUnderline))
    _variant_t Underline;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    void PutBackground (
        const _variant_t & RHS );
    _variant_t GetBackground ( );
    void PutBold (
        const _variant_t & RHS );
    _variant_t GetBold ( );
    void PutColor (
        const _variant_t & RHS );
    _variant_t GetColor ( );
    void PutColorIndex (
        const _variant_t & RHS );
    _variant_t GetColorIndex ( );
    void PutFontStyle (
        const _variant_t & RHS );
    _variant_t GetFontStyle ( );
    void PutItalic (
        const _variant_t & RHS );
    _variant_t GetItalic ( );
    void PutName (
        const _variant_t & RHS );
    _variant_t GetName ( );
    void PutOutlineFont (
        const _variant_t & RHS );
    _variant_t GetOutlineFont ( );
    void PutShadow (
        const _variant_t & RHS );
    _variant_t GetShadow ( );
    void PutSize (
        const _variant_t & RHS );
    _variant_t GetSize ( );
    void PutStrikethrough (
        const _variant_t & RHS );
    _variant_t GetStrikethrough ( );
    void PutSubscript (
        const _variant_t & RHS );
    _variant_t GetSubscript ( );
    void PutSuperscript (
        const _variant_t & RHS );
    _variant_t GetSuperscript ( );
    void PutUnderline (
        const _variant_t & RHS );
    _variant_t GetUnderline ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _ApplicationPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Background (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Bold (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Bold (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ColorIndex (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ColorIndex (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Italic (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Italic (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_OutlineFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_OutlineFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Strikethrough (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Strikethrough (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Subscript (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Subscript (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Superscript (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Superscript (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Underline (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Underline (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
};

struct __declspec(uuid("92d41a57-f07e-4ca4-af6f-bef486aa4e6f"))
ChartCharacters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetFont))
    ChartFontPtr Font;
    __declspec(property(get=GetPhoneticCharacters,put=PutPhoneticCharacters))
    _bstr_t PhoneticCharacters;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    long GetCount ( );
    _variant_t Delete ( );
    ChartFontPtr GetFont ( );
    _variant_t Insert (
        _bstr_t String );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _bstr_t GetPhoneticCharacters ( );
    void PutPhoneticCharacters (
        _bstr_t RHS );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct ChartFont * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ BSTR String,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticCharacters (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticCharacters (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
};

struct __declspec(uuid("92d41a63-f07e-4ca4-af6f-bef486aa4e6f"))
DataTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetHasBorderHorizontal,put=PutHasBorderHorizontal))
    VARIANT_BOOL HasBorderHorizontal;
    __declspec(property(get=GetHasBorderVertical,put=PutHasBorderVertical))
    VARIANT_BOOL HasBorderVertical;
    __declspec(property(get=GetHasBorderOutline,put=PutHasBorderOutline))
    VARIANT_BOOL HasBorderOutline;
    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetFont))
    ChartFontPtr Font;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    void PutShowLegendKey (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutHasBorderHorizontal (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasBorderHorizontal ( );
    void PutHasBorderVertical (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasBorderVertical ( );
    void PutHasBorderOutline (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasBorderOutline ( );
    ChartBorderPtr GetBorder ( );
    ChartFontPtr GetFont ( );
    HRESULT Select ( );
    HRESULT Delete ( );
    IDispatchPtr GetParent ( );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ShowLegendKey (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowLegendKey (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasBorderHorizontal (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasBorderHorizontal (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasBorderVertical (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasBorderVertical (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasBorderOutline (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasBorderOutline (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * ppLine ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct ChartFont * * pfont ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
};

struct __declspec(uuid("92d41a6a-f07e-4ca4-af6f-bef486aa4e6f"))
Gridlines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _variant_t Select ( );
    IDispatchPtr GetParent ( );
    ChartBorderPtr GetBorder ( );
    _variant_t Delete ( );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstr ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppparent ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * ppborder ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
};

struct __declspec(uuid("92d41a6b-f07e-4ca4-af6f-bef486aa4e6f"))
HiLoLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    ChartBorderPtr GetBorder ( );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );
    _variant_t Delete ( );
    _variant_t Select ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * RHS ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("92d41a6c-f07e-4ca4-af6f-bef486aa4e6f"))
Interior : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    _variant_t InvertIfNegative;
    __declspec(property(get=GetPattern,put=PutPattern))
    _variant_t Pattern;
    __declspec(property(get=GetPatternColor,put=PutPatternColor))
    _variant_t PatternColor;
    __declspec(property(get=GetPatternColorIndex,put=PutPatternColorIndex))
    _variant_t PatternColorIndex;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    void PutColor (
        const _variant_t & RHS );
    _variant_t GetColor ( );
    void PutColorIndex (
        const _variant_t & RHS );
    _variant_t GetColorIndex ( );
    void PutInvertIfNegative (
        const _variant_t & RHS );
    _variant_t GetInvertIfNegative ( );
    void PutPattern (
        const _variant_t & RHS );
    _variant_t GetPattern ( );
    void PutPatternColor (
        const _variant_t & RHS );
    _variant_t GetPatternColor ( );
    void PutPatternColorIndex (
        const _variant_t & RHS );
    _variant_t GetPatternColorIndex ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _ApplicationPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Color (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ColorIndex (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ColorIndex (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_InvertIfNegative (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_InvertIfNegative (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Pattern (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PatternColor (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PatternColor (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PatternColorIndex (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PatternColorIndex (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
};

struct __declspec(uuid("92d41a54-f07e-4ca4-af6f-bef486aa4e6f"))
AxisTitle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetFormulaR1C1,put=PutFormulaR1C1))
    _bstr_t FormulaR1C1;
    __declspec(property(get=GetFormulaLocal,put=PutFormulaLocal))
    _bstr_t FormulaLocal;
    __declspec(property(get=GetFormulaR1C1Local,put=PutFormulaR1C1Local))
    _bstr_t FormulaR1C1Local;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetCharacters))
    ChartCharactersPtr Characters[][];
    __declspec(property(get=GetFont))
    ChartFontPtr Font;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetIncludeInLayout,put=PutIncludeInLayout))
    VARIANT_BOOL IncludeInLayout;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlChartElementPosition Position;

    //
    // Wrapper methods for error-handling
    //

    void PutCaption (
        _bstr_t RHS );
    _bstr_t GetCaption ( );
    ChartCharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    ChartFontPtr GetFont ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    _variant_t GetHorizontalAlignment ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    void PutOrientation (
        const _variant_t & RHS );
    _variant_t GetOrientation ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    void PutText (
        _bstr_t RHS );
    _bstr_t GetText ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    _variant_t GetVerticalAlignment ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    _variant_t GetAutoScaleFont ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _variant_t Delete ( );
    ChartBorderPtr GetBorder ( );
    _bstr_t GetName ( );
    IDispatchPtr GetParent ( );
    _variant_t Select ( );
    VARIANT_BOOL GetIncludeInLayout ( );
    void PutIncludeInLayout (
        VARIANT_BOOL RHS );
    enum XlChartElementPosition GetPosition ( );
    void PutPosition (
        enum XlChartElementPosition RHS );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    double GetHeight ( );
    double GetWidth ( );
    void PutFormula (
        _bstr_t pbstr );
    _bstr_t GetFormula ( );
    void PutFormulaR1C1 (
        _bstr_t pbstr );
    _bstr_t GetFormulaR1C1 ( );
    void PutFormulaLocal (
        _bstr_t pbstr );
    _bstr_t GetFormulaLocal ( );
    void PutFormulaR1C1Local (
        _bstr_t pbstr );
    _bstr_t GetFormulaR1C1Local ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct ChartCharacters * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct ChartFont * * ppfont ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * ppinterior ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * ppinterior ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * ppborder ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_IncludeInLayout (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IncludeInLayout (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum XlChartElementPosition * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum XlChartElementPosition RHS ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * Width ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1 (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1 (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_FormulaLocal (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_FormulaLocal (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1Local (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1Local (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
};

struct __declspec(uuid("92d41a58-f07e-4ca4-af6f-bef486aa4e6f"))
ChartArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetFont))
    ChartFontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _variant_t Select ( );
    IDispatchPtr GetParent ( );
    ChartBorderPtr GetBorder ( );
    _variant_t Clear ( );
    _variant_t ClearContents ( );
    _variant_t Copy ( );
    ChartFontPtr GetFont ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t ClearFormats ( );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & pvar );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppparent ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * ppborder ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall raw_ClearContents (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct ChartFont * * ppfont ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * ppinterior ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * ppFill ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT pvar ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
};

struct __declspec(uuid("92d41a5f-f07e-4ca4-af6f-bef486aa4e6f"))
ChartTitle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetFormulaR1C1,put=PutFormulaR1C1))
    _bstr_t FormulaR1C1;
    __declspec(property(get=GetFormulaLocal,put=PutFormulaLocal))
    _bstr_t FormulaLocal;
    __declspec(property(get=GetFormulaR1C1Local,put=PutFormulaR1C1Local))
    _bstr_t FormulaR1C1Local;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetCharacters))
    ChartCharactersPtr Characters[][];
    __declspec(property(get=GetFont))
    ChartFontPtr Font;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetIncludeInLayout,put=PutIncludeInLayout))
    VARIANT_BOOL IncludeInLayout;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlChartElementPosition Position;

    //
    // Wrapper methods for error-handling
    //

    void PutCaption (
        _bstr_t RHS );
    _bstr_t GetCaption ( );
    ChartCharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    ChartFontPtr GetFont ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    _variant_t GetHorizontalAlignment ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    void PutOrientation (
        const _variant_t & RHS );
    _variant_t GetOrientation ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    void PutText (
        _bstr_t RHS );
    _bstr_t GetText ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    _variant_t GetVerticalAlignment ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    _variant_t GetAutoScaleFont ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _variant_t Delete ( );
    ChartBorderPtr GetBorder ( );
    _bstr_t GetName ( );
    IDispatchPtr GetParent ( );
    _variant_t Select ( );
    VARIANT_BOOL GetIncludeInLayout ( );
    void PutIncludeInLayout (
        VARIANT_BOOL RHS );
    enum XlChartElementPosition GetPosition ( );
    void PutPosition (
        enum XlChartElementPosition RHS );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    double GetHeight ( );
    double GetWidth ( );
    void PutFormula (
        _bstr_t pbstr );
    _bstr_t GetFormula ( );
    void PutFormulaR1C1 (
        _bstr_t pbstr );
    _bstr_t GetFormulaR1C1 ( );
    void PutFormulaLocal (
        _bstr_t pbstr );
    _bstr_t GetFormulaLocal ( );
    void PutFormulaR1C1Local (
        _bstr_t pbstr );
    _bstr_t GetFormulaR1C1Local ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct ChartCharacters * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct ChartFont * * ppfont ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * ppinterior ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * ppinterior ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * ppborder ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppval ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_IncludeInLayout (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IncludeInLayout (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum XlChartElementPosition * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum XlChartElementPosition RHS ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * Width ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1 (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1 (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_FormulaLocal (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_FormulaLocal (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1Local (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1Local (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
};

struct __declspec(uuid("92d41a61-f07e-4ca4-af6f-bef486aa4e6f"))
DataLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetType,put=PutType))
    _variant_t Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetCharacters))
    ChartCharactersPtr Characters[][];
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=Get_Height))
    double _Height;
    __declspec(property(get=Get_Width))
    double _Width;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetFormulaR1C1,put=PutFormulaR1C1))
    _bstr_t FormulaR1C1;
    __declspec(property(get=GetFormulaLocal,put=PutFormulaLocal))
    _bstr_t FormulaLocal;
    __declspec(property(get=GetFormulaR1C1Local,put=PutFormulaR1C1Local))
    _bstr_t FormulaR1C1Local;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlDataLabelPosition Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoText,put=PutAutoText))
    VARIANT_BOOL AutoText;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetShowSeriesName,put=PutShowSeriesName))
    VARIANT_BOOL ShowSeriesName;
    __declspec(property(get=GetShowCategoryName,put=PutShowCategoryName))
    VARIANT_BOOL ShowCategoryName;
    __declspec(property(get=GetShowValue,put=PutShowValue))
    VARIANT_BOOL ShowValue;
    __declspec(property(get=GetShowPercentage,put=PutShowPercentage))
    VARIANT_BOOL ShowPercentage;
    __declspec(property(get=GetShowBubbleSize,put=PutShowBubbleSize))
    VARIANT_BOOL ShowBubbleSize;
    __declspec(property(get=GetSeparator,put=PutSeparator))
    _variant_t Separator;
    __declspec(property(get=GetFont))
    ChartFontPtr Font;
    __declspec(property(get=GetShowRange,put=PutShowRange))
    VARIANT_BOOL ShowRange;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    ChartBorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    ChartCharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    ChartFontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoText ( );
    void PutAutoText (
        VARIANT_BOOL RHS );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL RHS );
    _variant_t GetType ( );
    void PutType (
        const _variant_t & RHS );
    enum XlDataLabelPosition GetPosition ( );
    void PutPosition (
        enum XlDataLabelPosition RHS );
    VARIANT_BOOL GetShowSeriesName ( );
    void PutShowSeriesName (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowCategoryName ( );
    void PutShowCategoryName (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowValue ( );
    void PutShowValue (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowPercentage ( );
    void PutShowPercentage (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowBubbleSize ( );
    void PutShowBubbleSize (
        VARIANT_BOOL RHS );
    _variant_t GetSeparator ( );
    void PutSeparator (
        const _variant_t & RHS );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );
    double Get_Height ( );
    double Get_Width ( );
    void PutFormula (
        _bstr_t pbstr );
    _bstr_t GetFormula ( );
    void PutFormulaR1C1 (
        _bstr_t pbstr );
    _bstr_t GetFormulaR1C1 ( );
    void PutFormulaLocal (
        _bstr_t pbstr );
    _bstr_t GetFormulaLocal ( );
    void PutFormulaR1C1Local (
        _bstr_t pbstr );
    _bstr_t GetFormulaR1C1Local ( );
    VARIANT_BOOL GetShowRange ( );
    void PutShowRange (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double Height );
    double GetWidth ( );
    void PutWidth (
        double Width );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct ChartCharacters * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct ChartFont * * RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLinked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLinked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ShowLegendKey (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowLegendKey (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum XlDataLabelPosition * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum XlDataLabelPosition RHS ) = 0;
      virtual HRESULT __stdcall get_ShowSeriesName (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowSeriesName (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowCategoryName (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowCategoryName (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowValue (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowValue (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowPercentage (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowPercentage (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowBubbleSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowBubbleSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Separator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Separator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get__Height (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall get__Width (
        /*[out,retval]*/ double * Width ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1 (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1 (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_FormulaLocal (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_FormulaLocal (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1Local (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1Local (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_ShowRange (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowRange (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double Width ) = 0;
};

struct __declspec(uuid("92d41a62-f07e-4ca4-af6f-bef486aa4e6f"))
DataLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlDataLabelPosition Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoText,put=PutAutoText))
    VARIANT_BOOL AutoText;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    ChartFontPtr Font;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShowSeriesName,put=PutShowSeriesName))
    VARIANT_BOOL ShowSeriesName;
    __declspec(property(get=GetShowCategoryName,put=PutShowCategoryName))
    VARIANT_BOOL ShowCategoryName;
    __declspec(property(get=GetShowValue,put=PutShowValue))
    VARIANT_BOOL ShowValue;
    __declspec(property(get=GetShowPercentage,put=PutShowPercentage))
    VARIANT_BOOL ShowPercentage;
    __declspec(property(get=GetShowBubbleSize,put=PutShowBubbleSize))
    VARIANT_BOOL ShowBubbleSize;
    __declspec(property(get=GetSeparator,put=PutSeparator))
    _variant_t Separator;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetShowRange,put=PutShowRange))
    VARIANT_BOOL ShowRange;
    __declspec(property(get=GetType,put=PutType))
    _variant_t Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    ChartBorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    ChartFontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoText ( );
    void PutAutoText (
        VARIANT_BOOL RHS );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL RHS );
    _variant_t GetType ( );
    void PutType (
        const _variant_t & RHS );
    enum XlDataLabelPosition GetPosition ( );
    void PutPosition (
        enum XlDataLabelPosition RHS );
    VARIANT_BOOL GetShowSeriesName ( );
    void PutShowSeriesName (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowCategoryName ( );
    void PutShowCategoryName (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowValue ( );
    void PutShowValue (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowPercentage ( );
    void PutShowPercentage (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowBubbleSize ( );
    void PutShowBubbleSize (
        VARIANT_BOOL RHS );
    _variant_t GetSeparator ( );
    void PutSeparator (
        const _variant_t & RHS );
    long GetCount ( );
    DataLabelPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );
    DataLabelPtr _Default (
        const _variant_t & Index );
    HRESULT Propagate (
        const _variant_t & Index );
    VARIANT_BOOL GetShowRange ( );
    void PutShowRange (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct ChartFont * * RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLinked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLinked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ShowLegendKey (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowLegendKey (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum XlDataLabelPosition * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum XlDataLabelPosition RHS ) = 0;
      virtual HRESULT __stdcall get_ShowSeriesName (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowSeriesName (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowCategoryName (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowCategoryName (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowValue (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowValue (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowPercentage (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowPercentage (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowBubbleSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowBubbleSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Separator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Separator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct DataLabel * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall raw__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct DataLabel * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Propagate (
        /*[in]*/ VARIANT Index ) = 0;
      virtual HRESULT __stdcall get_ShowRange (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowRange (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("92d41a64-f07e-4ca4-af6f-bef486aa4e6f"))
DisplayUnitLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetFormulaR1C1,put=PutFormulaR1C1))
    _bstr_t FormulaR1C1;
    __declspec(property(get=GetFormulaLocal,put=PutFormulaLocal))
    _bstr_t FormulaLocal;
    __declspec(property(get=GetFormulaR1C1Local,put=PutFormulaR1C1Local))
    _bstr_t FormulaR1C1Local;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetCharacters))
    ChartCharactersPtr Characters[][];
    __declspec(property(get=GetFont))
    ChartFontPtr Font;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlChartElementPosition Position;

    //
    // Wrapper methods for error-handling
    //

    void PutCaption (
        _bstr_t RHS );
    _bstr_t GetCaption ( );
    ChartCharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    ChartFontPtr GetFont ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    _variant_t GetHorizontalAlignment ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    void PutOrientation (
        const _variant_t & RHS );
    _variant_t GetOrientation ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    void PutText (
        _bstr_t RHS );
    _bstr_t GetText ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    _variant_t GetVerticalAlignment ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    _variant_t GetAutoScaleFont ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _variant_t Delete ( );
    ChartBorderPtr GetBorder ( );
    _bstr_t GetName ( );
    IDispatchPtr GetParent ( );
    _variant_t Select ( );
    enum XlChartElementPosition GetPosition ( );
    void PutPosition (
        enum XlChartElementPosition RHS );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    double GetHeight ( );
    double GetWidth ( );
    void PutFormula (
        _bstr_t pbstr );
    _bstr_t GetFormula ( );
    void PutFormulaR1C1 (
        _bstr_t pbstr );
    _bstr_t GetFormulaR1C1 ( );
    void PutFormulaLocal (
        _bstr_t pbstr );
    _bstr_t GetFormulaLocal ( );
    void PutFormulaR1C1Local (
        _bstr_t pbstr );
    _bstr_t GetFormulaR1C1Local ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct ChartCharacters * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct ChartFont * * ppfont ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * ppinterior ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * ppinterior ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * ppborder ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppval ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum XlChartElementPosition * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum XlChartElementPosition RHS ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * Width ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1 (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1 (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_FormulaLocal (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_FormulaLocal (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1Local (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1Local (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
};

struct __declspec(uuid("92d41a65-f07e-4ca4-af6f-bef486aa4e6f"))
DownBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _variant_t Select ( );
    IDispatchPtr GetParent ( );
    ChartBorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstr ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppparent ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * ppborder ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * ppinterior ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * ppFill ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
};

struct __declspec(uuid("92d41a68-f07e-4ca4-af6f-bef486aa4e6f"))
Floor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    _variant_t PictureType;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetThickness,put=PutThickness))
    long Thickness;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _variant_t Select ( );
    IDispatchPtr GetParent ( );
    ChartBorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _variant_t GetPictureType ( );
    void PutPictureType (
        const _variant_t & RHS );
    HRESULT Paste ( );
    long GetThickness ( );
    void PutThickness (
        long RHS );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstr ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppparent ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * ppborder ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * ppinterior ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * ppFill ) = 0;
      virtual HRESULT __stdcall get_PictureType (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureType (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste ( ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
};

struct __declspec(uuid("92d41a6d-f07e-4ca4-af6f-bef486aa4e6f"))
LeaderLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Select ( );
    ChartBorderPtr GetBorder ( );
    HRESULT Delete ( );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _ApplicationPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * ppborder ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
};

struct __declspec(uuid("92d41a6e-f07e-4ca4-af6f-bef486aa4e6f"))
Legend : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlLegendPosition Position;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetFont))
    ChartFontPtr Font;
    __declspec(property(get=GetIncludeInLayout,put=PutIncludeInLayout))
    VARIANT_BOOL IncludeInLayout;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    ChartBorderPtr GetBorder ( );
    _variant_t Delete ( );
    ChartFontPtr GetFont ( );
    IDispatchPtr LegendEntries (
        const _variant_t & Index = vtMissing );
    enum XlLegendPosition GetPosition ( );
    void PutPosition (
        enum XlLegendPosition RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t Clear ( );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetIncludeInLayout ( );
    void PutIncludeInLayout (
        VARIANT_BOOL RHS );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct ChartFont * * RHS ) = 0;
      virtual HRESULT __stdcall raw_LegendEntries (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum XlLegendPosition * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum XlLegendPosition RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_IncludeInLayout (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IncludeInLayout (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
};

struct __declspec(uuid("92d41a71-f07e-4ca4-af6f-bef486aa4e6f"))
LegendKey : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetPictureUnit2,put=PutPictureUnit2))
    double PictureUnit2;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    long PictureType;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetLeft))
    double Left;
    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    ChartBorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL RHS );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long RHS );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long RHS );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long RHS );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle RHS );
    long GetPictureType ( );
    void PutPictureType (
        long RHS );
    _variant_t Select ( );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL RHS );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    double GetPictureUnit2 ( );
    void PutPictureUnit2 (
        double RHS );
    _ApplicationPtr GetApplication ( );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_InvertIfNegative (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InvertIfNegative (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerSize (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerSize (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ enum XlMarkerStyle * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ enum XlMarkerStyle RHS ) = 0;
      virtual HRESULT __stdcall get_PictureType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureType (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Smooth (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Smooth (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_PictureUnit2 (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureUnit2 (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_PictureUnit (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureUnit (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("92d41a70-f07e-4ca4-af6f-bef486aa4e6f"))
LegendEntry : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetLegendKey))
    LegendKeyPtr LegendKey;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetFont))
    ChartFontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    ChartFontPtr GetFont ( );
    long GetIndex ( );
    LegendKeyPtr GetLegendKey ( );
    _variant_t Select ( );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct ChartFont * * RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_LegendKey (
        /*[out,retval]*/ struct LegendKey * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
};

struct __declspec(uuid("92d41a6f-f07e-4ca4-af6f-bef486aa4e6f"))
LegendEntries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    long GetCount ( );
    LegendEntryPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );
    LegendEntryPtr _Default (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct LegendEntry * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall raw__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct LegendEntry * * RHS ) = 0;
};

struct __declspec(uuid("92d41a72-f07e-4ca4-af6f-bef486aa4e6f"))
PlotArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetInsideLeft,put=PutInsideLeft))
    double InsideLeft;
    __declspec(property(get=GetInsideTop,put=PutInsideTop))
    double InsideTop;
    __declspec(property(get=GetInsideWidth,put=PutInsideWidth))
    double InsideWidth;
    __declspec(property(get=GetInsideHeight,put=PutInsideHeight))
    double InsideHeight;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlChartElementPosition Position;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _variant_t Select ( );
    IDispatchPtr GetParent ( );
    ChartBorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    double GetInsideLeft ( );
    void PutInsideLeft (
        double RHS );
    double GetInsideTop ( );
    void PutInsideTop (
        double RHS );
    double GetInsideWidth ( );
    void PutInsideWidth (
        double RHS );
    double GetInsideHeight ( );
    void PutInsideHeight (
        double RHS );
    enum XlChartElementPosition GetPosition ( );
    void PutPosition (
        enum XlChartElementPosition RHS );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstr ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppparent ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * ppborder ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * ppinterior ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * ppFill ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_InsideLeft (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_InsideLeft (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_InsideTop (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_InsideTop (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_InsideWidth (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_InsideWidth (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_InsideHeight (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_InsideHeight (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum XlChartElementPosition * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum XlChartElementPosition RHS ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
};

struct __declspec(uuid("92d41a77-f07e-4ca4-af6f-bef486aa4e6f"))
SeriesLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _variant_t Select ( );
    IDispatchPtr GetParent ( );
    ChartBorderPtr GetBorder ( );
    _variant_t Delete ( );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstr ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppparent ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * ppborder ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
};

struct __declspec(uuid("92d41a78-f07e-4ca4-af6f-bef486aa4e6f"))
TickLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFont))
    ChartFontPtr Font;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlTickLabelOrientation Orientation;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetDepth))
    int Depth;
    __declspec(property(get=GetOffset,put=PutOffset))
    int Offset;
    __declspec(property(get=GetMultiLevel,put=PutMultiLevel))
    VARIANT_BOOL MultiLevel;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    ChartFontPtr GetFont ( );
    _bstr_t GetName ( );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    enum XlTickLabelOrientation GetOrientation ( );
    void PutOrientation (
        enum XlTickLabelOrientation RHS );
    _variant_t Select ( );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    int GetDepth ( );
    int GetOffset ( );
    void PutOffset (
        int RHS );
    VARIANT_BOOL GetMultiLevel ( );
    void PutMultiLevel (
        VARIANT_BOOL RHS );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );
    long GetAlignment ( );
    void PutAlignment (
        long RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppval ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct ChartFont * * ppval ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLinked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLinked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum XlTickLabelOrientation * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum XlTickLabelOrientation RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ int * RHS ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ int * RHS ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ int RHS ) = 0;
      virtual HRESULT __stdcall get_MultiLevel (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiLevel (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("92d41a53-f07e-4ca4-af6f-bef486aa4e6f"))
Axis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetAxisBetweenCategories,put=PutAxisBetweenCategories))
    VARIANT_BOOL AxisBetweenCategories;
    __declspec(property(get=GetAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetAxisTitle))
    AxisTitlePtr AxisTitle;
    __declspec(property(get=GetCategoryNames,put=PutCategoryNames))
    _variant_t CategoryNames;
    __declspec(property(get=GetCrosses,put=PutCrosses))
    enum XlAxisCrosses Crosses;
    __declspec(property(get=GetCrossesAt,put=PutCrossesAt))
    double CrossesAt;
    __declspec(property(get=GetHasMajorGridlines,put=PutHasMajorGridlines))
    VARIANT_BOOL HasMajorGridlines;
    __declspec(property(get=GetHasMinorGridlines,put=PutHasMinorGridlines))
    VARIANT_BOOL HasMinorGridlines;
    __declspec(property(get=GetHasTitle,put=PutHasTitle))
    VARIANT_BOOL HasTitle;
    __declspec(property(get=GetMajorGridlines))
    GridlinesPtr MajorGridlines;
    __declspec(property(get=GetMajorTickMark,put=PutMajorTickMark))
    enum XlTickMark MajorTickMark;
    __declspec(property(get=GetMajorUnit,put=PutMajorUnit))
    double MajorUnit;
    __declspec(property(get=GetLogBase,put=PutLogBase))
    double LogBase;
    __declspec(property(get=GetTickLabelSpacingIsAuto,put=PutTickLabelSpacingIsAuto))
    VARIANT_BOOL TickLabelSpacingIsAuto;
    __declspec(property(get=GetMajorUnitIsAuto,put=PutMajorUnitIsAuto))
    VARIANT_BOOL MajorUnitIsAuto;
    __declspec(property(get=GetMaximumScale,put=PutMaximumScale))
    double MaximumScale;
    __declspec(property(get=GetMaximumScaleIsAuto,put=PutMaximumScaleIsAuto))
    VARIANT_BOOL MaximumScaleIsAuto;
    __declspec(property(get=GetMinimumScale,put=PutMinimumScale))
    double MinimumScale;
    __declspec(property(get=GetMinimumScaleIsAuto,put=PutMinimumScaleIsAuto))
    VARIANT_BOOL MinimumScaleIsAuto;
    __declspec(property(get=GetMinorGridlines))
    GridlinesPtr MinorGridlines;
    __declspec(property(get=GetMinorTickMark,put=PutMinorTickMark))
    enum XlTickMark MinorTickMark;
    __declspec(property(get=GetMinorUnit,put=PutMinorUnit))
    double MinorUnit;
    __declspec(property(get=GetMinorUnitIsAuto,put=PutMinorUnitIsAuto))
    VARIANT_BOOL MinorUnitIsAuto;
    __declspec(property(get=GetReversePlotOrder,put=PutReversePlotOrder))
    VARIANT_BOOL ReversePlotOrder;
    __declspec(property(get=GetScaleType,put=PutScaleType))
    enum XlScaleType ScaleType;
    __declspec(property(get=GetTickLabelPosition,put=PutTickLabelPosition))
    enum XlTickLabelPosition TickLabelPosition;
    __declspec(property(get=GetTickLabels))
    TickLabelsPtr TickLabels;
    __declspec(property(get=GetTickLabelSpacing,put=PutTickLabelSpacing))
    long TickLabelSpacing;
    __declspec(property(get=GetTickMarkSpacing,put=PutTickMarkSpacing))
    long TickMarkSpacing;
    __declspec(property(get=GetType,put=PutType))
    enum XlAxisType Type;
    __declspec(property(get=GetBaseUnit,put=PutBaseUnit))
    enum XlTimeUnit BaseUnit;
    __declspec(property(get=GetBaseUnitIsAuto,put=PutBaseUnitIsAuto))
    VARIANT_BOOL BaseUnitIsAuto;
    __declspec(property(get=GetMajorUnitScale,put=PutMajorUnitScale))
    enum XlTimeUnit MajorUnitScale;
    __declspec(property(get=GetMinorUnitScale,put=PutMinorUnitScale))
    enum XlTimeUnit MinorUnitScale;
    __declspec(property(get=GetCategoryType,put=PutCategoryType))
    enum XlCategoryType CategoryType;
    __declspec(property(get=GetLeft))
    double Left;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetDisplayUnit,put=PutDisplayUnit))
    enum XlDisplayUnit DisplayUnit;
    __declspec(property(get=GetDisplayUnitCustom,put=PutDisplayUnitCustom))
    double DisplayUnitCustom;
    __declspec(property(get=GetHasDisplayUnitLabel,put=PutHasDisplayUnitLabel))
    VARIANT_BOOL HasDisplayUnitLabel;
    __declspec(property(get=GetDisplayUnitLabel))
    DisplayUnitLabelPtr DisplayUnitLabel;
    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAxisBetweenCategories ( );
    void PutAxisBetweenCategories (
        VARIANT_BOOL RHS );
    enum XlAxisGroup GetAxisGroup ( );
    AxisTitlePtr GetAxisTitle ( );
    _variant_t GetCategoryNames ( );
    void PutCategoryNames (
        const _variant_t & RHS );
    enum XlAxisCrosses GetCrosses ( );
    void PutCrosses (
        enum XlAxisCrosses RHS );
    double GetCrossesAt ( );
    void PutCrossesAt (
        double RHS );
    _variant_t Delete ( );
    VARIANT_BOOL GetHasMajorGridlines ( );
    void PutHasMajorGridlines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasMinorGridlines ( );
    void PutHasMinorGridlines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasTitle ( );
    void PutHasTitle (
        VARIANT_BOOL RHS );
    GridlinesPtr GetMajorGridlines ( );
    enum XlTickMark GetMajorTickMark ( );
    void PutMajorTickMark (
        enum XlTickMark RHS );
    double GetMajorUnit ( );
    void PutMajorUnit (
        double RHS );
    double GetLogBase ( );
    void PutLogBase (
        double RHS );
    VARIANT_BOOL GetTickLabelSpacingIsAuto ( );
    void PutTickLabelSpacingIsAuto (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetMajorUnitIsAuto ( );
    void PutMajorUnitIsAuto (
        VARIANT_BOOL RHS );
    double GetMaximumScale ( );
    void PutMaximumScale (
        double RHS );
    VARIANT_BOOL GetMaximumScaleIsAuto ( );
    void PutMaximumScaleIsAuto (
        VARIANT_BOOL RHS );
    double GetMinimumScale ( );
    void PutMinimumScale (
        double RHS );
    VARIANT_BOOL GetMinimumScaleIsAuto ( );
    void PutMinimumScaleIsAuto (
        VARIANT_BOOL RHS );
    GridlinesPtr GetMinorGridlines ( );
    enum XlTickMark GetMinorTickMark ( );
    void PutMinorTickMark (
        enum XlTickMark RHS );
    double GetMinorUnit ( );
    void PutMinorUnit (
        double RHS );
    VARIANT_BOOL GetMinorUnitIsAuto ( );
    void PutMinorUnitIsAuto (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetReversePlotOrder ( );
    void PutReversePlotOrder (
        VARIANT_BOOL RHS );
    enum XlScaleType GetScaleType ( );
    void PutScaleType (
        enum XlScaleType RHS );
    _variant_t Select ( );
    enum XlTickLabelPosition GetTickLabelPosition ( );
    void PutTickLabelPosition (
        enum XlTickLabelPosition RHS );
    TickLabelsPtr GetTickLabels ( );
    long GetTickLabelSpacing ( );
    void PutTickLabelSpacing (
        long RHS );
    long GetTickMarkSpacing ( );
    void PutTickMarkSpacing (
        long RHS );
    enum XlAxisType GetType ( );
    void PutType (
        enum XlAxisType RHS );
    enum XlTimeUnit GetBaseUnit ( );
    void PutBaseUnit (
        enum XlTimeUnit RHS );
    VARIANT_BOOL GetBaseUnitIsAuto ( );
    void PutBaseUnitIsAuto (
        VARIANT_BOOL RHS );
    enum XlTimeUnit GetMajorUnitScale ( );
    void PutMajorUnitScale (
        enum XlTimeUnit RHS );
    enum XlTimeUnit GetMinorUnitScale ( );
    void PutMinorUnitScale (
        enum XlTimeUnit RHS );
    enum XlCategoryType GetCategoryType ( );
    void PutCategoryType (
        enum XlCategoryType RHS );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
    enum XlDisplayUnit GetDisplayUnit ( );
    void PutDisplayUnit (
        enum XlDisplayUnit RHS );
    double GetDisplayUnitCustom ( );
    void PutDisplayUnitCustom (
        double RHS );
    VARIANT_BOOL GetHasDisplayUnitLabel ( );
    void PutHasDisplayUnitLabel (
        VARIANT_BOOL RHS );
    DisplayUnitLabelPtr GetDisplayUnitLabel ( );
    ChartBorderPtr GetBorder ( );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _ApplicationPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AxisBetweenCategories (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AxisBetweenCategories (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AxisGroup (
        /*[out,retval]*/ enum XlAxisGroup * RHS ) = 0;
      virtual HRESULT __stdcall get_AxisTitle (
        /*[out,retval]*/ struct AxisTitle * * RHS ) = 0;
      virtual HRESULT __stdcall get_CategoryNames (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_CategoryNames (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Crosses (
        /*[out,retval]*/ enum XlAxisCrosses * RHS ) = 0;
      virtual HRESULT __stdcall put_Crosses (
        /*[in]*/ enum XlAxisCrosses RHS ) = 0;
      virtual HRESULT __stdcall get_CrossesAt (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_CrossesAt (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_HasMajorGridlines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasMajorGridlines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasMinorGridlines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasMinorGridlines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasTitle (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasTitle (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MajorGridlines (
        /*[out,retval]*/ struct Gridlines * * RHS ) = 0;
      virtual HRESULT __stdcall get_MajorTickMark (
        /*[out,retval]*/ enum XlTickMark * RHS ) = 0;
      virtual HRESULT __stdcall put_MajorTickMark (
        /*[in]*/ enum XlTickMark RHS ) = 0;
      virtual HRESULT __stdcall get_MajorUnit (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_MajorUnit (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_LogBase (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_LogBase (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TickLabelSpacingIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TickLabelSpacingIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MajorUnitIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MajorUnitIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MaximumScale (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_MaximumScale (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_MaximumScaleIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MaximumScaleIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MinimumScale (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_MinimumScale (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_MinimumScaleIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MinimumScaleIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MinorGridlines (
        /*[out,retval]*/ struct Gridlines * * RHS ) = 0;
      virtual HRESULT __stdcall get_MinorTickMark (
        /*[out,retval]*/ enum XlTickMark * RHS ) = 0;
      virtual HRESULT __stdcall put_MinorTickMark (
        /*[in]*/ enum XlTickMark RHS ) = 0;
      virtual HRESULT __stdcall get_MinorUnit (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_MinorUnit (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_MinorUnitIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MinorUnitIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ReversePlotOrder (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ReversePlotOrder (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ScaleType (
        /*[out,retval]*/ enum XlScaleType * RHS ) = 0;
      virtual HRESULT __stdcall put_ScaleType (
        /*[in]*/ enum XlScaleType RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_TickLabelPosition (
        /*[out,retval]*/ enum XlTickLabelPosition * RHS ) = 0;
      virtual HRESULT __stdcall put_TickLabelPosition (
        /*[in]*/ enum XlTickLabelPosition RHS ) = 0;
      virtual HRESULT __stdcall get_TickLabels (
        /*[out,retval]*/ struct TickLabels * * RHS ) = 0;
      virtual HRESULT __stdcall get_TickLabelSpacing (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_TickLabelSpacing (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_TickMarkSpacing (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_TickMarkSpacing (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlAxisType * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum XlAxisType RHS ) = 0;
      virtual HRESULT __stdcall get_BaseUnit (
        /*[out,retval]*/ enum XlTimeUnit * RHS ) = 0;
      virtual HRESULT __stdcall put_BaseUnit (
        /*[in]*/ enum XlTimeUnit RHS ) = 0;
      virtual HRESULT __stdcall get_BaseUnitIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_BaseUnitIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MajorUnitScale (
        /*[out,retval]*/ enum XlTimeUnit * RHS ) = 0;
      virtual HRESULT __stdcall put_MajorUnitScale (
        /*[in]*/ enum XlTimeUnit RHS ) = 0;
      virtual HRESULT __stdcall get_MinorUnitScale (
        /*[out,retval]*/ enum XlTimeUnit * RHS ) = 0;
      virtual HRESULT __stdcall put_MinorUnitScale (
        /*[in]*/ enum XlTimeUnit RHS ) = 0;
      virtual HRESULT __stdcall get_CategoryType (
        /*[out,retval]*/ enum XlCategoryType * RHS ) = 0;
      virtual HRESULT __stdcall put_CategoryType (
        /*[in]*/ enum XlCategoryType RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayUnit (
        /*[out,retval]*/ enum XlDisplayUnit * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayUnit (
        /*[in]*/ enum XlDisplayUnit RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayUnitCustom (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayUnitCustom (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_HasDisplayUnitLabel (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasDisplayUnitLabel (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayUnitLabel (
        /*[out,retval]*/ struct DisplayUnitLabel * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * ppborder ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
};

struct __declspec(uuid("92d41a52-f07e-4ca4-af6f-bef486aa4e6f"))
Axes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _ApplicationPtr GetApplication ( );
    AxisPtr Item (
        enum XlAxisType Type,
        enum XlAxisGroup AxisGroup );
    IUnknownPtr _NewEnum ( );
    AxisPtr _Default (
        enum XlAxisType Type,
        enum XlAxisGroup AxisGroup );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ enum XlAxisType Type,
        /*[in]*/ enum XlAxisGroup AxisGroup,
        /*[out,retval]*/ struct Axis * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw__Default (
        /*[in]*/ enum XlAxisType Type,
        /*[in]*/ enum XlAxisGroup AxisGroup,
        /*[out,retval]*/ struct Axis * * RHS ) = 0;
};

struct __declspec(uuid("92d41a79-f07e-4ca4-af6f-bef486aa4e6f"))
Trendline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetOrder,put=PutOrder))
    long Order;
    __declspec(property(get=GetBackward2,put=PutBackward2))
    double Backward2;
    __declspec(property(get=GetForward2,put=PutForward2))
    double Forward2;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetType,put=PutType))
    enum XlTrendlineType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetBackward,put=PutBackward))
    long Backward;
    __declspec(property(get=GetForward,put=PutForward))
    long Forward;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPeriod,put=PutPeriod))
    long Period;
    __declspec(property(get=GetIntercept,put=PutIntercept))
    double Intercept;
    __declspec(property(get=GetInterceptIsAuto,put=PutInterceptIsAuto))
    VARIANT_BOOL InterceptIsAuto;
    __declspec(property(get=GetNameIsAuto,put=PutNameIsAuto))
    VARIANT_BOOL NameIsAuto;
    __declspec(property(get=GetDisplayRSquared,put=PutDisplayRSquared))
    VARIANT_BOOL DisplayRSquared;
    __declspec(property(get=GetDataLabel))
    DataLabelPtr DataLabel;
    __declspec(property(get=GetDisplayEquation,put=PutDisplayEquation))
    VARIANT_BOOL DisplayEquation;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    ChartBorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    DataLabelPtr GetDataLabel ( );
    _variant_t Delete ( );
    VARIANT_BOOL GetDisplayEquation ( );
    void PutDisplayEquation (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayRSquared ( );
    void PutDisplayRSquared (
        VARIANT_BOOL RHS );
    long GetIndex ( );
    double GetIntercept ( );
    void PutIntercept (
        double RHS );
    VARIANT_BOOL GetInterceptIsAuto ( );
    void PutInterceptIsAuto (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    VARIANT_BOOL GetNameIsAuto ( );
    void PutNameIsAuto (
        VARIANT_BOOL RHS );
    long GetOrder ( );
    void PutOrder (
        long RHS );
    long GetPeriod ( );
    void PutPeriod (
        long RHS );
    _variant_t Select ( );
    enum XlTrendlineType GetType ( );
    void PutType (
        enum XlTrendlineType RHS );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    double GetBackward2 ( );
    void PutBackward2 (
        double RHS );
    double GetForward2 ( );
    void PutForward2 (
        double RHS );
    _ApplicationPtr GetApplication ( );
    long GetBackward ( );
    void PutBackward (
        long RHS );
    long GetForward ( );
    void PutForward (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DataLabel (
        /*[out,retval]*/ struct DataLabel * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayEquation (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayEquation (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayRSquared (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayRSquared (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Intercept (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Intercept (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_InterceptIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InterceptIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NameIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_NameIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Period (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Period (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlTrendlineType * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum XlTrendlineType RHS ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Backward2 (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Backward2 (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Forward2 (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Forward2 (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Backward (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Backward (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Forward (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Forward (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("92d41a7a-f07e-4ca4-af6f-bef486aa4e6f"))
Trendlines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    TrendlinePtr Add (
        enum XlTrendlineType Type,
        const _variant_t & Order = vtMissing,
        const _variant_t & Period = vtMissing,
        const _variant_t & Forward = vtMissing,
        const _variant_t & Backward = vtMissing,
        const _variant_t & Intercept = vtMissing,
        const _variant_t & DisplayEquation = vtMissing,
        const _variant_t & DisplayRSquared = vtMissing,
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    TrendlinePtr Item (
        const _variant_t & Index = vtMissing );
    IUnknownPtr _NewEnum ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );
    TrendlinePtr _Default (
        const _variant_t & Index = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum XlTrendlineType Type,
        /*[in]*/ VARIANT Order,
        /*[in]*/ VARIANT Period,
        /*[in]*/ VARIANT Forward,
        /*[in]*/ VARIANT Backward,
        /*[in]*/ VARIANT Intercept,
        /*[in]*/ VARIANT DisplayEquation,
        /*[in]*/ VARIANT DisplayRSquared,
        /*[in]*/ VARIANT Name,
        /*[out,retval]*/ struct Trendline * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Trendline * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall raw__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Trendline * * RHS ) = 0;
};

struct __declspec(uuid("92d41a7b-f07e-4ca4-af6f-bef486aa4e6f"))
UpBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _variant_t Select ( );
    IDispatchPtr GetParent ( );
    ChartBorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstr ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppparent ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * ppborder ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * ppinterior ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * ppFill ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
};

struct __declspec(uuid("92d41a7c-f07e-4ca4-af6f-bef486aa4e6f"))
Walls : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    _variant_t PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    _variant_t PictureUnit;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetThickness,put=PutThickness))
    long Thickness;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _variant_t Select ( );
    IDispatchPtr GetParent ( );
    ChartBorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _variant_t GetPictureType ( );
    void PutPictureType (
        const _variant_t & pvar );
    HRESULT Paste ( );
    _variant_t GetPictureUnit ( );
    void PutPictureUnit (
        const _variant_t & pvar );
    long GetThickness ( );
    void PutThickness (
        long RHS );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstr ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppparent ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * ppborder ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * ppinterior ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * ppFill ) = 0;
      virtual HRESULT __stdcall get_PictureType (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall put_PictureType (
        /*[in]*/ VARIANT pvar ) = 0;
      virtual HRESULT __stdcall raw_Paste ( ) = 0;
      virtual HRESULT __stdcall get_PictureUnit (
        /*[out,retval]*/ VARIANT * pvar ) = 0;
      virtual HRESULT __stdcall put_PictureUnit (
        /*[in]*/ VARIANT pvar ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
};

enum __declspec(uuid("cb5dd948-aab3-405f-9f29-79468f1f5971"))
PpResampleMediaProfile
{
    ppResampleMediaProfileCustom = 1,
    ppResampleMediaProfileSmall = 2,
    ppResampleMediaProfileSmaller = 3,
    ppResampleMediaProfileSmallest = 4
};

enum __declspec(uuid("b44003e4-31c5-46da-9fba-985a62352afd"))
PpMediaTaskStatus
{
    ppMediaTaskStatusNone = 0,
    ppMediaTaskStatusInProgress = 1,
    ppMediaTaskStatusQueued = 2,
    ppMediaTaskStatusDone = 3,
    ppMediaTaskStatusFailed = 4
};

struct __declspec(uuid("ba72e551-4ff5-48f4-8215-5505f990966f"))
SectionProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    _bstr_t Name (
        int sectionIndex );
    HRESULT Rename (
        int sectionIndex,
        _bstr_t sectionName );
    long SlidesCount (
        int sectionIndex );
    int FirstSlide (
        int sectionIndex );
    int AddBeforeSlide (
        int SlideIndex,
        _bstr_t sectionName );
    int AddSection (
        int sectionIndex,
        const _variant_t & sectionName = vtMissing );
    HRESULT Move (
        int sectionIndex,
        int toPos );
    HRESULT Delete (
        int sectionIndex,
        VARIANT_BOOL deleteSlides );
    _bstr_t SectionID (
        int sectionIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_Name (
        /*[in]*/ int sectionIndex,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ int sectionIndex,
        /*[in]*/ BSTR sectionName ) = 0;
      virtual HRESULT __stdcall raw_SlidesCount (
        /*[in]*/ int sectionIndex,
        /*[out,retval]*/ long * SlidesCount ) = 0;
      virtual HRESULT __stdcall raw_FirstSlide (
        /*[in]*/ int sectionIndex,
        /*[out,retval]*/ int * FirstSlide ) = 0;
      virtual HRESULT __stdcall raw_AddBeforeSlide (
        /*[in]*/ int SlideIndex,
        /*[in]*/ BSTR sectionName,
        /*[out,retval]*/ int * BeforeSlide ) = 0;
      virtual HRESULT __stdcall raw_AddSection (
        /*[in]*/ int sectionIndex,
        /*[in]*/ VARIANT sectionName,
        /*[out,retval]*/ int * Section ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ int sectionIndex,
        /*[in]*/ int toPos ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ int sectionIndex,
        /*[in]*/ VARIANT_BOOL deleteSlides ) = 0;
      virtual HRESULT __stdcall raw_SectionID (
        /*[in]*/ int sectionIndex,
        /*[out,retval]*/ BSTR * SectionID ) = 0;
};

enum __declspec(uuid("1ab5ac71-b868-45ce-94dd-42b327b8bc0f"))
PpPlayerState
{
    ppPlaying = 0,
    ppPaused = 1,
    ppStopped = 2,
    ppNotReady = 3
};

struct __declspec(uuid("ba72e552-4ff5-48f4-8215-5505f990966f"))
Player : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCurrentPosition,put=PutCurrentPosition))
    long CurrentPosition;
    __declspec(property(get=GetState))
    enum PpPlayerState State;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT Play ( );
    HRESULT Pause ( );
    HRESULT Stop ( );
    HRESULT GoToNextBookmark ( );
    HRESULT GoToPreviousBookmark ( );
    long GetCurrentPosition ( );
    void PutCurrentPosition (
        long CurrentPosition );
    enum PpPlayerState GetState ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Play ( ) = 0;
      virtual HRESULT __stdcall raw_Pause ( ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall raw_GoToNextBookmark ( ) = 0;
      virtual HRESULT __stdcall raw_GoToPreviousBookmark ( ) = 0;
      virtual HRESULT __stdcall get_CurrentPosition (
        /*[out,retval]*/ long * CurrentPosition ) = 0;
      virtual HRESULT __stdcall put_CurrentPosition (
        /*[in]*/ long CurrentPosition ) = 0;
      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ enum PpPlayerState * State ) = 0;
};

struct __declspec(uuid("91493458-5a91-11cf-8700-00aa0060263b"))
View : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMediaControlsTop))
    float MediaControlsTop;
    __declspec(property(get=GetMediaControlsWidth))
    float MediaControlsWidth;
    __declspec(property(get=GetMediaControlsHeight))
    float MediaControlsHeight;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum PpViewType Type;
    __declspec(property(get=GetZoom,put=PutZoom))
    int Zoom;
    __declspec(property(get=GetSlide,put=PutSlide))
    IDispatchPtr Slide;
    __declspec(property(get=GetPrintOptions))
    PrintOptionsPtr PrintOptions;
    __declspec(property(get=GetMediaControlsVisible))
    __missing_type__  MediaControlsVisible;
    __declspec(property(get=GetMediaControlsLeft))
    float MediaControlsLeft;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum PpViewType GetType ( );
    int GetZoom ( );
    void PutZoom (
        int Zoom );
    HRESULT Paste ( );
    IDispatchPtr GetSlide ( );
    void PutSlide (
        IDispatch * Slide );
    HRESULT GotoSlide (
        int Index );
    __missing_type__  GetDisplaySlideMiniature ( );
    void PutDisplaySlideMiniature (
        __missing_type__ DisplaySlideMiniature );
    __missing_type__  GetZoomToFit ( );
    void PutZoomToFit (
        __missing_type__ ZoomToFit );
    HRESULT PasteSpecial (
        enum PpPasteDataType DataType,
        __missing_type__ DisplayAsIcon,
        _bstr_t IconFileName,
        int IconIndex,
        _bstr_t IconLabel,
        __missing_type__ Link );
    PrintOptionsPtr GetPrintOptions ( );
    HRESULT PrintOut (
        int From,
        int To,
        _bstr_t PrintToFile,
        int Copies,
        __missing_type__ Collate );
    PlayerPtr Player (
        const _variant_t & ShapeId );
    __missing_type__  GetMediaControlsVisible ( );
    float GetMediaControlsLeft ( );
    float GetMediaControlsTop ( );
    float GetMediaControlsWidth ( );
    float GetMediaControlsHeight ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PpViewType * Type ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ int * Zoom ) = 0;
      virtual HRESULT __stdcall put_Zoom (
        /*[in]*/ int Zoom ) = 0;
      virtual HRESULT __stdcall raw_Paste ( ) = 0;
      virtual HRESULT __stdcall get_Slide (
        /*[out,retval]*/ IDispatch * * Slide ) = 0;
      virtual HRESULT __stdcall put_Slide (
        /*[in]*/ IDispatch * Slide ) = 0;
      virtual HRESULT __stdcall raw_GotoSlide (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall get_DisplaySlideMiniature (
        /*[out,retval]*/ __missing_type__ * DisplaySlideMiniature ) = 0;
      virtual HRESULT __stdcall put_DisplaySlideMiniature (
        /*[in]*/ __missing_type__ DisplaySlideMiniature ) = 0;
      virtual HRESULT __stdcall get_ZoomToFit (
        /*[out,retval]*/ __missing_type__ * ZoomToFit ) = 0;
      virtual HRESULT __stdcall put_ZoomToFit (
        /*[in]*/ __missing_type__ ZoomToFit ) = 0;
      virtual HRESULT __stdcall raw_PasteSpecial (
        /*[in]*/ enum PpPasteDataType DataType,
        /*[in]*/ __missing_type__ DisplayAsIcon,
        /*[in]*/ BSTR IconFileName,
        /*[in]*/ int IconIndex,
        /*[in]*/ BSTR IconLabel,
        /*[in]*/ __missing_type__ Link ) = 0;
      virtual HRESULT __stdcall get_PrintOptions (
        /*[out,retval]*/ struct PrintOptions * * PrintOptions ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ int From,
        /*[in]*/ int To,
        /*[in]*/ BSTR PrintToFile,
        /*[in]*/ int Copies,
        /*[in]*/ __missing_type__ Collate ) = 0;
      virtual HRESULT __stdcall raw_Player (
        /*[in]*/ VARIANT ShapeId,
        /*[out,retval]*/ struct Player * * Player ) = 0;
      virtual HRESULT __stdcall get_MediaControlsVisible (
        /*[out,retval]*/ __missing_type__ * MediaControlsVisible ) = 0;
      virtual HRESULT __stdcall get_MediaControlsLeft (
        /*[out,retval]*/ float * MediaControlsLeft ) = 0;
      virtual HRESULT __stdcall get_MediaControlsTop (
        /*[out,retval]*/ float * MediaControlsTop ) = 0;
      virtual HRESULT __stdcall get_MediaControlsWidth (
        /*[out,retval]*/ float * MediaControlsWidth ) = 0;
      virtual HRESULT __stdcall get_MediaControlsHeight (
        /*[out,retval]*/ float * MediaControlsHeight ) = 0;
};

struct __declspec(uuid("91493459-5a91-11cf-8700-00aa0060263b"))
SlideShowView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMediaControlsLeft))
    float MediaControlsLeft;
    __declspec(property(get=GetMediaControlsTop))
    float MediaControlsTop;
    __declspec(property(get=GetMediaControlsWidth))
    float MediaControlsWidth;
    __declspec(property(get=GetMediaControlsHeight))
    float MediaControlsHeight;
    __declspec(property(get=GetLaserPointerEnabled,put=PutLaserPointerEnabled))
    VARIANT_BOOL LaserPointerEnabled;
    __declspec(property(get=GetCurrentShowPosition))
    int CurrentShowPosition;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetZoom))
    int Zoom;
    __declspec(property(get=GetSlide))
    _SlidePtr Slide;
    __declspec(property(get=GetPointerType,put=PutPointerType))
    enum PpSlideShowPointerType PointerType;
    __declspec(property(get=GetState,put=PutState))
    enum PpSlideShowState State;
    __declspec(property(get=GetPresentationElapsedTime))
    float PresentationElapsedTime;
    __declspec(property(get=GetSlideElapsedTime,put=PutSlideElapsedTime))
    float SlideElapsedTime;
    __declspec(property(get=GetLastSlideViewed))
    _SlidePtr LastSlideViewed;
    __declspec(property(get=GetAdvanceMode))
    enum PpSlideShowAdvanceMode AdvanceMode;
    __declspec(property(get=GetPointerColor))
    ColorFormatPtr PointerColor;
    __declspec(property(get=GetIsNamedShow))
    __missing_type__  IsNamedShow;
    __declspec(property(get=GetSlideShowName))
    _bstr_t SlideShowName;
    __declspec(property(get=GetMediaControlsVisible))
    __missing_type__  MediaControlsVisible;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    int GetZoom ( );
    _SlidePtr GetSlide ( );
    enum PpSlideShowPointerType GetPointerType ( );
    void PutPointerType (
        enum PpSlideShowPointerType PointerType );
    enum PpSlideShowState GetState ( );
    void PutState (
        enum PpSlideShowState State );
    __missing_type__  GetAcceleratorsEnabled ( );
    void PutAcceleratorsEnabled (
        __missing_type__ AcceleratorsEnabled );
    float GetPresentationElapsedTime ( );
    float GetSlideElapsedTime ( );
    void PutSlideElapsedTime (
        float SlideElapsedTime );
    _SlidePtr GetLastSlideViewed ( );
    enum PpSlideShowAdvanceMode GetAdvanceMode ( );
    ColorFormatPtr GetPointerColor ( );
    __missing_type__  GetIsNamedShow ( );
    _bstr_t GetSlideShowName ( );
    HRESULT DrawLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    HRESULT EraseDrawing ( );
    HRESULT First ( );
    HRESULT Last ( );
    HRESULT Next ( );
    HRESULT Previous ( );
    HRESULT GotoSlide (
        int Index,
        __missing_type__ ResetSlide );
    HRESULT GotoNamedShow (
        _bstr_t SlideShowName );
    HRESULT EndNamedShow ( );
    HRESULT ResetSlideTime ( );
    HRESULT Exit ( );
    HRESULT InstallTracker (
        struct MouseTracker * pTracker,
        __missing_type__ Presenter );
    int GetCurrentShowPosition ( );
    HRESULT GotoClick (
        int Index );
    int GetClickIndex ( );
    int GetClickCount ( );
    VARIANT_BOOL FirstAnimationIsAutomatic ( );
    PlayerPtr Player (
        const _variant_t & ShapeId );
    __missing_type__  GetMediaControlsVisible ( );
    float GetMediaControlsLeft ( );
    float GetMediaControlsTop ( );
    float GetMediaControlsWidth ( );
    float GetMediaControlsHeight ( );
    VARIANT_BOOL GetLaserPointerEnabled ( );
    void PutLaserPointerEnabled (
        VARIANT_BOOL LaserPointerEnabled );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ int * Zoom ) = 0;
      virtual HRESULT __stdcall get_Slide (
        /*[out,retval]*/ struct _Slide * * Slide ) = 0;
      virtual HRESULT __stdcall get_PointerType (
        /*[out,retval]*/ enum PpSlideShowPointerType * PointerType ) = 0;
      virtual HRESULT __stdcall put_PointerType (
        /*[in]*/ enum PpSlideShowPointerType PointerType ) = 0;
      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ enum PpSlideShowState * State ) = 0;
      virtual HRESULT __stdcall put_State (
        /*[in]*/ enum PpSlideShowState State ) = 0;
      virtual HRESULT __stdcall get_AcceleratorsEnabled (
        /*[out,retval]*/ __missing_type__ * AcceleratorsEnabled ) = 0;
      virtual HRESULT __stdcall put_AcceleratorsEnabled (
        /*[in]*/ __missing_type__ AcceleratorsEnabled ) = 0;
      virtual HRESULT __stdcall get_PresentationElapsedTime (
        /*[out,retval]*/ float * PresentationElapsedTime ) = 0;
      virtual HRESULT __stdcall get_SlideElapsedTime (
        /*[out,retval]*/ float * SlideElapsedTime ) = 0;
      virtual HRESULT __stdcall put_SlideElapsedTime (
        /*[in]*/ float SlideElapsedTime ) = 0;
      virtual HRESULT __stdcall get_LastSlideViewed (
        /*[out,retval]*/ struct _Slide * * LastSlideViewed ) = 0;
      virtual HRESULT __stdcall get_AdvanceMode (
        /*[out,retval]*/ enum PpSlideShowAdvanceMode * AdvanceMode ) = 0;
      virtual HRESULT __stdcall get_PointerColor (
        /*[out,retval]*/ struct ColorFormat * * PointerColor ) = 0;
      virtual HRESULT __stdcall get_IsNamedShow (
        /*[out,retval]*/ __missing_type__ * IsNamedShow ) = 0;
      virtual HRESULT __stdcall get_SlideShowName (
        /*[out,retval]*/ BSTR * SlideShowName ) = 0;
      virtual HRESULT __stdcall raw_DrawLine (
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY ) = 0;
      virtual HRESULT __stdcall raw_EraseDrawing ( ) = 0;
      virtual HRESULT __stdcall raw_First ( ) = 0;
      virtual HRESULT __stdcall raw_Last ( ) = 0;
      virtual HRESULT __stdcall raw_Next ( ) = 0;
      virtual HRESULT __stdcall raw_Previous ( ) = 0;
      virtual HRESULT __stdcall raw_GotoSlide (
        /*[in]*/ int Index,
        /*[in]*/ __missing_type__ ResetSlide ) = 0;
      virtual HRESULT __stdcall raw_GotoNamedShow (
        /*[in]*/ BSTR SlideShowName ) = 0;
      virtual HRESULT __stdcall raw_EndNamedShow ( ) = 0;
      virtual HRESULT __stdcall raw_ResetSlideTime ( ) = 0;
      virtual HRESULT __stdcall raw_Exit ( ) = 0;
      virtual HRESULT __stdcall raw_InstallTracker (
        /*[in]*/ struct MouseTracker * pTracker,
        /*[in]*/ __missing_type__ Presenter ) = 0;
      virtual HRESULT __stdcall get_CurrentShowPosition (
        /*[out,retval]*/ int * CurrentShowPosition ) = 0;
      virtual HRESULT __stdcall raw_GotoClick (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall raw_GetClickIndex (
        /*[out,retval]*/ int * GetClickIndex ) = 0;
      virtual HRESULT __stdcall raw_GetClickCount (
        /*[out,retval]*/ int * GetClickCount ) = 0;
      virtual HRESULT __stdcall raw_FirstAnimationIsAutomatic (
        /*[out,retval]*/ VARIANT_BOOL * FirstAnimationIsAutomatic ) = 0;
      virtual HRESULT __stdcall raw_Player (
        /*[in]*/ VARIANT ShapeId,
        /*[out,retval]*/ struct Player * * Player ) = 0;
      virtual HRESULT __stdcall get_MediaControlsVisible (
        /*[out,retval]*/ __missing_type__ * MediaControlsVisible ) = 0;
      virtual HRESULT __stdcall get_MediaControlsLeft (
        /*[out,retval]*/ float * MediaControlsLeft ) = 0;
      virtual HRESULT __stdcall get_MediaControlsTop (
        /*[out,retval]*/ float * MediaControlsTop ) = 0;
      virtual HRESULT __stdcall get_MediaControlsWidth (
        /*[out,retval]*/ float * MediaControlsWidth ) = 0;
      virtual HRESULT __stdcall get_MediaControlsHeight (
        /*[out,retval]*/ float * MediaControlsHeight ) = 0;
      virtual HRESULT __stdcall get_LaserPointerEnabled (
        /*[out,retval]*/ VARIANT_BOOL * LaserPointerEnabled ) = 0;
      virtual HRESULT __stdcall put_LaserPointerEnabled (
        /*[in]*/ VARIANT_BOOL LaserPointerEnabled ) = 0;
};

struct __declspec(uuid("ba72e555-4ff5-48f4-8215-5505f990966f"))
MediaBookmark : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    int Index;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPosition))
    long Position;

    //
    // Wrapper methods for error-handling
    //

    int GetIndex ( );
    _bstr_t GetName ( );
    long GetPosition ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ int * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ long * Position ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("ba72e556-4ff5-48f4-8215-5505f990966f"))
MediaBookmarks : Collection
{
    //
    // Wrapper methods for error-handling
    //

    MediaBookmarkPtr Item (
        int Index );
    MediaBookmarkPtr Add (
        long Position,
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct MediaBookmark * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ long Position,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct MediaBookmark * * Add ) = 0;
};

struct __declspec(uuid("ba72e550-4ff5-48f4-8215-5505f990966f"))
MediaFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsEmbedded))
    VARIANT_BOOL IsEmbedded;
    __declspec(property(get=GetAudioSamplingRate))
    long AudioSamplingRate;
    __declspec(property(get=GetVideoFrameRate))
    long VideoFrameRate;
    __declspec(property(get=GetSampleHeight))
    long SampleHeight;
    __declspec(property(get=GetSampleWidth))
    long SampleWidth;
    __declspec(property(get=GetVideoCompressionType))
    _bstr_t VideoCompressionType;
    __declspec(property(get=GetAudioCompressionType))
    _bstr_t AudioCompressionType;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetVolume,put=PutVolume))
    float Volume;
    __declspec(property(get=GetMuted,put=PutMuted))
    VARIANT_BOOL Muted;
    __declspec(property(get=GetLength))
    long Length;
    __declspec(property(get=GetStartPoint,put=PutStartPoint))
    long StartPoint;
    __declspec(property(get=GetEndPoint,put=PutEndPoint))
    long EndPoint;
    __declspec(property(get=GetFadeInDuration,put=PutFadeInDuration))
    long FadeInDuration;
    __declspec(property(get=GetFadeOutDuration,put=PutFadeOutDuration))
    long FadeOutDuration;
    __declspec(property(get=GetMediaBookmarks))
    MediaBookmarksPtr MediaBookmarks;
    __declspec(property(get=GetResamplingStatus))
    enum PpMediaTaskStatus ResamplingStatus;
    __declspec(property(get=GetIsLinked))
    VARIANT_BOOL IsLinked;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    float GetVolume ( );
    void PutVolume (
        float Volume );
    VARIANT_BOOL GetMuted ( );
    void PutMuted (
        VARIANT_BOOL Muted );
    long GetLength ( );
    long GetStartPoint ( );
    void PutStartPoint (
        long StartPoint );
    long GetEndPoint ( );
    void PutEndPoint (
        long EndPoint );
    long GetFadeInDuration ( );
    void PutFadeInDuration (
        long FadeInDuration );
    long GetFadeOutDuration ( );
    void PutFadeOutDuration (
        long FadeOutDuration );
    MediaBookmarksPtr GetMediaBookmarks ( );
    HRESULT SetDisplayPicture (
        long Position );
    HRESULT SetDisplayPictureFromFile (
        _bstr_t FilePath );
    HRESULT Resample (
        VARIANT_BOOL Trim,
        int SampleHeight,
        int SampleWidth,
        long VideoFrameRate,
        long AudioSamplingRate,
        long VideoBitRate );
    HRESULT ResampleFromProfile (
        enum PpResampleMediaProfile profile );
    enum PpMediaTaskStatus GetResamplingStatus ( );
    VARIANT_BOOL GetIsLinked ( );
    VARIANT_BOOL GetIsEmbedded ( );
    long GetAudioSamplingRate ( );
    long GetVideoFrameRate ( );
    long GetSampleHeight ( );
    long GetSampleWidth ( );
    _bstr_t GetVideoCompressionType ( );
    _bstr_t GetAudioCompressionType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ float * Volume ) = 0;
      virtual HRESULT __stdcall put_Volume (
        /*[in]*/ float Volume ) = 0;
      virtual HRESULT __stdcall get_Muted (
        /*[out,retval]*/ VARIANT_BOOL * Muted ) = 0;
      virtual HRESULT __stdcall put_Muted (
        /*[in]*/ VARIANT_BOOL Muted ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ long * Length ) = 0;
      virtual HRESULT __stdcall get_StartPoint (
        /*[out,retval]*/ long * StartPoint ) = 0;
      virtual HRESULT __stdcall put_StartPoint (
        /*[in]*/ long StartPoint ) = 0;
      virtual HRESULT __stdcall get_EndPoint (
        /*[out,retval]*/ long * EndPoint ) = 0;
      virtual HRESULT __stdcall put_EndPoint (
        /*[in]*/ long EndPoint ) = 0;
      virtual HRESULT __stdcall get_FadeInDuration (
        /*[out,retval]*/ long * FadeInDuration ) = 0;
      virtual HRESULT __stdcall put_FadeInDuration (
        /*[in]*/ long FadeInDuration ) = 0;
      virtual HRESULT __stdcall get_FadeOutDuration (
        /*[out,retval]*/ long * FadeOutDuration ) = 0;
      virtual HRESULT __stdcall put_FadeOutDuration (
        /*[in]*/ long FadeOutDuration ) = 0;
      virtual HRESULT __stdcall get_MediaBookmarks (
        /*[out,retval]*/ struct MediaBookmarks * * MediaBookmarks ) = 0;
      virtual HRESULT __stdcall raw_SetDisplayPicture (
        /*[in]*/ long Position ) = 0;
      virtual HRESULT __stdcall raw_SetDisplayPictureFromFile (
        /*[in]*/ BSTR FilePath ) = 0;
      virtual HRESULT __stdcall raw_Resample (
        /*[in]*/ VARIANT_BOOL Trim,
        /*[in]*/ int SampleHeight,
        /*[in]*/ int SampleWidth,
        /*[in]*/ long VideoFrameRate,
        /*[in]*/ long AudioSamplingRate,
        /*[in]*/ long VideoBitRate ) = 0;
      virtual HRESULT __stdcall raw_ResampleFromProfile (
        /*[in]*/ enum PpResampleMediaProfile profile ) = 0;
      virtual HRESULT __stdcall get_ResamplingStatus (
        /*[out,retval]*/ enum PpMediaTaskStatus * ResamplingStatus ) = 0;
      virtual HRESULT __stdcall get_IsLinked (
        /*[out,retval]*/ VARIANT_BOOL * IsLinked ) = 0;
      virtual HRESULT __stdcall get_IsEmbedded (
        /*[out,retval]*/ VARIANT_BOOL * IsEmbedded ) = 0;
      virtual HRESULT __stdcall get_AudioSamplingRate (
        /*[out,retval]*/ long * AudioSamplingRate ) = 0;
      virtual HRESULT __stdcall get_VideoFrameRate (
        /*[out,retval]*/ long * VideoFrameRate ) = 0;
      virtual HRESULT __stdcall get_SampleHeight (
        /*[out,retval]*/ long * SampleHeight ) = 0;
      virtual HRESULT __stdcall get_SampleWidth (
        /*[out,retval]*/ long * SampleWidth ) = 0;
      virtual HRESULT __stdcall get_VideoCompressionType (
        /*[out,retval]*/ BSTR * VideoCompressionType ) = 0;
      virtual HRESULT __stdcall get_AudioCompressionType (
        /*[out,retval]*/ BSTR * AudioCompressionType ) = 0;
};

struct __declspec(uuid("ba72e557-4ff5-48f4-8215-5505f990966f"))
Coauthoring : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMergeMode))
    VARIANT_BOOL MergeMode;
    __declspec(property(get=GetFavorServerEditsDuringMerge,put=PutFavorServerEditsDuringMerge))
    VARIANT_BOOL FavorServerEditsDuringMerge;
    __declspec(property(get=GetPendingUpdates))
    VARIANT_BOOL PendingUpdates;
    __declspec(property(get=GetCoauthorCount))
    long CoauthorCount;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetMergeMode ( );
    VARIANT_BOOL GetFavorServerEditsDuringMerge ( );
    void PutFavorServerEditsDuringMerge (
        VARIANT_BOOL FavorServerEditsDuringMerge );
    HRESULT EndReview ( );
    VARIANT_BOOL GetPendingUpdates ( );
    long GetCoauthorCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_MergeMode (
        /*[out,retval]*/ VARIANT_BOOL * MergeMode ) = 0;
      virtual HRESULT __stdcall get_FavorServerEditsDuringMerge (
        /*[out,retval]*/ VARIANT_BOOL * FavorServerEditsDuringMerge ) = 0;
      virtual HRESULT __stdcall put_FavorServerEditsDuringMerge (
        /*[in]*/ VARIANT_BOOL FavorServerEditsDuringMerge ) = 0;
      virtual HRESULT __stdcall raw_EndReview ( ) = 0;
      virtual HRESULT __stdcall get_PendingUpdates (
        /*[out,retval]*/ VARIANT_BOOL * PendingUpdates ) = 0;
      virtual HRESULT __stdcall get_CoauthorCount (
        /*[out,retval]*/ long * CoauthorCount ) = 0;
};

struct __declspec(uuid("ba72e558-4ff5-48f4-8215-5505f990966f"))
Broadcast : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAttendeeUrl))
    _bstr_t AttendeeUrl;
    __declspec(property(get=GetIsBroadcasting))
    VARIANT_BOOL IsBroadcasting;
    __declspec(property(get=GetState))
    __missing_type__  State;
    __declspec(property(get=GetCapabilities))
    long Capabilities;
    __declspec(property(get=GetSessionID))
    _bstr_t SessionID;
    __declspec(property(get=GetPresenterServiceUrl))
    _bstr_t PresenterServiceUrl;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT Start (
        _bstr_t serverUrl );
    HRESULT End ( );
    _bstr_t GetAttendeeUrl ( );
    VARIANT_BOOL GetIsBroadcasting ( );
    HRESULT Pause ( );
    HRESULT Resume ( );
    HRESULT AddMeetingNotes (
        _bstr_t notesUrl,
        _bstr_t notesWacUrl );
    __missing_type__  GetState ( );
    long GetCapabilities ( );
    _bstr_t GetSessionID ( );
    _bstr_t GetPresenterServiceUrl ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Start (
        /*[in]*/ BSTR serverUrl ) = 0;
      virtual HRESULT __stdcall raw_End ( ) = 0;
      virtual HRESULT __stdcall get_AttendeeUrl (
        /*[out,retval]*/ BSTR * AttendeeUrl ) = 0;
      virtual HRESULT __stdcall get_IsBroadcasting (
        /*[out,retval]*/ VARIANT_BOOL * IsBroadcasting ) = 0;
      virtual HRESULT __stdcall raw_Pause ( ) = 0;
      virtual HRESULT __stdcall raw_Resume ( ) = 0;
      virtual HRESULT __stdcall raw_AddMeetingNotes (
        /*[in]*/ BSTR notesUrl,
        /*[in]*/ BSTR notesWacUrl ) = 0;
      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ __missing_type__ * BroadcastState ) = 0;
      virtual HRESULT __stdcall get_Capabilities (
        /*[out,retval]*/ long * Capabilities ) = 0;
      virtual HRESULT __stdcall get_SessionID (
        /*[out,retval]*/ BSTR * SessionID ) = 0;
      virtual HRESULT __stdcall get_PresenterServiceUrl (
        /*[out,retval]*/ BSTR * PresenterServiceUrl ) = 0;
};

enum __declspec(uuid("33e189f9-6f21-42c5-95cb-b064abf618ea"))
XlPieSliceLocation
{
    xlHorizontalCoordinate = 1,
    xlVerticalCoordinate = 2
};

enum __declspec(uuid("c11f48f8-2ecb-4a6d-81ce-96c4c604a765"))
XlPieSliceIndex
{
    xlOuterCounterClockwisePoint = 1,
    xlOuterCenterPoint = 2,
    xlOuterClockwisePoint = 3,
    xlMidClockwiseRadiusPoint = 4,
    xlCenterPoint = 5,
    xlMidCounterClockwiseRadiusPoint = 6,
    xlInnerClockwisePoint = 7,
    xlInnerCenterPoint = 8,
    xlInnerCounterClockwisePoint = 9
};

struct __declspec(uuid("92d41a73-f07e-4ca4-af6f-bef486aa4e6f"))
Point : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExplosion,put=PutExplosion))
    long Explosion;
    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetPictureUnit2,put=PutPictureUnit2))
    double PictureUnit2;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetHasDataLabel,put=PutHasDataLabel))
    VARIANT_BOOL HasDataLabel;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetLeft))
    double Left;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetIsTotal,put=PutIsTotal))
    VARIANT_BOOL IsTotal;
    __declspec(property(get=GetDataLabel))
    DataLabelPtr DataLabel;
    __declspec(property(get=GetApplyPictToSides,put=PutApplyPictToSides))
    VARIANT_BOOL ApplyPictToSides;
    __declspec(property(get=GetApplyPictToFront,put=PutApplyPictToFront))
    VARIANT_BOOL ApplyPictToFront;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    enum XlChartPictureType PictureType;
    __declspec(property(get=GetApplyPictToEnd,put=PutApplyPictToEnd))
    VARIANT_BOOL ApplyPictToEnd;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetHas3DEffect,put=PutHas3DEffect))
    VARIANT_BOOL Has3DEffect;
    __declspec(property(get=GetSecondaryPlot,put=PutSecondaryPlot))
    VARIANT_BOOL SecondaryPlot;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    ChartBorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Copy ( );
    DataLabelPtr GetDataLabel ( );
    _variant_t Delete ( );
    long GetExplosion ( );
    void PutExplosion (
        long RHS );
    VARIANT_BOOL GetHasDataLabel ( );
    void PutHasDataLabel (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL RHS );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long RHS );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long RHS );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long RHS );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle RHS );
    _variant_t Paste ( );
    enum XlChartPictureType GetPictureType ( );
    void PutPictureType (
        enum XlChartPictureType RHS );
    _variant_t Select ( );
    VARIANT_BOOL GetApplyPictToSides ( );
    void PutApplyPictToSides (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetApplyPictToFront ( );
    void PutApplyPictToFront (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetApplyPictToEnd ( );
    void PutApplyPictToEnd (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSecondaryPlot ( );
    void PutSecondaryPlot (
        VARIANT_BOOL RHS );
    ChartFillFormatPtr GetFill ( );
    VARIANT_BOOL GetHas3DEffect ( );
    void PutHas3DEffect (
        VARIANT_BOOL RHS );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    double GetPictureUnit2 ( );
    void PutPictureUnit2 (
        double RHS );
    _ApplicationPtr GetApplication ( );
    _variant_t _ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing );
    _variant_t ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        const _variant_t & ShowSeriesName = vtMissing,
        const _variant_t & ShowCategoryName = vtMissing,
        const _variant_t & ShowValue = vtMissing,
        const _variant_t & ShowPercentage = vtMissing,
        const _variant_t & ShowBubbleSize = vtMissing,
        const _variant_t & Separator = vtMissing );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long RHS );
    _bstr_t GetName ( );
    double GetHeight ( );
    double GetWidth ( );
    double GetLeft ( );
    double GetTop ( );
    double PieSliceLocation (
        enum XlPieSliceLocation loc,
        enum XlPieSliceIndex Index );
    VARIANT_BOOL GetIsTotal ( );
    void PutIsTotal (
        VARIANT_BOOL pval );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DataLabel (
        /*[out,retval]*/ struct DataLabel * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Explosion (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Explosion (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_HasDataLabel (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasDataLabel (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_InvertIfNegative (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InvertIfNegative (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerSize (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerSize (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ enum XlMarkerStyle * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ enum XlMarkerStyle RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_PictureType (
        /*[out,retval]*/ enum XlChartPictureType * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureType (
        /*[in]*/ enum XlChartPictureType RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToSides (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToSides (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToFront (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToFront (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToEnd (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToEnd (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SecondaryPlot (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SecondaryPlot (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Has3DEffect (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Has3DEffect (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_PictureUnit2 (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureUnit2 (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall raw__ApplyDataLabels (
        /*[in]*/ enum XlDataLabelsType Type,
        /*[in]*/ VARIANT LegendKey,
        /*[in]*/ VARIANT AutoText,
        /*[in]*/ VARIANT HasLeaderLines,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyDataLabels (
        /*[in]*/ enum XlDataLabelsType Type,
        /*[in]*/ VARIANT LegendKey,
        /*[in]*/ VARIANT AutoText,
        /*[in]*/ VARIANT HasLeaderLines,
        /*[in]*/ VARIANT ShowSeriesName,
        /*[in]*/ VARIANT ShowCategoryName,
        /*[in]*/ VARIANT ShowValue,
        /*[in]*/ VARIANT ShowPercentage,
        /*[in]*/ VARIANT ShowBubbleSize,
        /*[in]*/ VARIANT Separator,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_PictureUnit (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureUnit (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pval ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pval ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * pval ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * pval ) = 0;
      virtual HRESULT __stdcall raw_PieSliceLocation (
        /*[in]*/ enum XlPieSliceLocation loc,
        /*[in]*/ enum XlPieSliceIndex Index,
        /*[out,retval]*/ double * pval ) = 0;
      virtual HRESULT __stdcall get_IsTotal (
        /*[out,retval]*/ VARIANT_BOOL * pval ) = 0;
      virtual HRESULT __stdcall put_IsTotal (
        /*[in]*/ VARIANT_BOOL pval ) = 0;
};

struct __declspec(uuid("92d41a74-f07e-4ca4-af6f-bef486aa4e6f"))
Points : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    long GetCount ( );
    PointPtr Item (
        long Index );
    IUnknownPtr _NewEnum ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );
    PointPtr _Default (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Point * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall raw__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Point * * RHS ) = 0;
};

enum __declspec(uuid("7f9b36c7-48cc-335e-b058-49658fd8cece"))
PpProtectedViewCloseReason
{
    ppProtectedViewCloseNormal = 0,
    ppProtectedViewCloseEdit = 1,
    ppProtectedViewCloseForced = 2
};

struct __declspec(uuid("ba72e55a-4ff5-48f4-8215-5505f990966f"))
ProtectedViewWindow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCaption))
    _bstr_t Caption;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPresentation))
    _PresentationPtr Presentation;
    __declspec(property(get=GetActive))
    __missing_type__  Active;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum PpWindowState WindowState;
    __declspec(property(get=GetSourcePath))
    _bstr_t SourcePath;
    __declspec(property(get=GetSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetHWND))
    long HWND;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _PresentationPtr GetPresentation ( );
    __missing_type__  GetActive ( );
    enum PpWindowState GetWindowState ( );
    void PutWindowState (
        enum PpWindowState WindowState );
    _bstr_t GetCaption ( );
    _bstr_t GetSourcePath ( );
    _bstr_t GetSourceName ( );
    float GetLeft ( );
    void PutLeft (
        float Left );
    float GetTop ( );
    void PutTop (
        float Top );
    float GetWidth ( );
    void PutWidth (
        float Width );
    float GetHeight ( );
    void PutHeight (
        float Height );
    HRESULT Activate ( );
    HRESULT Close ( );
    _PresentationPtr Edit (
        _bstr_t ModifyPassword );
    long GetHWND ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Presentation (
        /*[out,retval]*/ struct _Presentation * * Presentation ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ __missing_type__ * Active ) = 0;
      virtual HRESULT __stdcall get_WindowState (
        /*[out,retval]*/ enum PpWindowState * WindowState ) = 0;
      virtual HRESULT __stdcall put_WindowState (
        /*[in]*/ enum PpWindowState WindowState ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall get_SourcePath (
        /*[out,retval]*/ BSTR * SourcePath ) = 0;
      virtual HRESULT __stdcall get_SourceName (
        /*[out,retval]*/ BSTR * SourceName ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_Edit (
        /*[in]*/ BSTR ModifyPassword,
        /*[out,retval]*/ struct _Presentation * * Edit ) = 0;
      virtual HRESULT __stdcall get_HWND (
        /*[out,retval]*/ long * HWND ) = 0;
};

struct __declspec(uuid("ba72e559-4ff5-48f4-8215-5505f990966f"))
ProtectedViewWindows : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ProtectedViewWindowPtr Item (
        int Index );
    ProtectedViewWindowPtr Open (
        _bstr_t FileName,
        _bstr_t ReadPassword,
        __missing_type__ OpenAndRepair );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct ProtectedViewWindow * * Item ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ BSTR FileName,
        /*[in]*/ BSTR ReadPassword,
        /*[in]*/ __missing_type__ OpenAndRepair,
        /*[out,retval]*/ struct ProtectedViewWindow * * Open ) = 0;
};

struct __declspec(uuid("af028401-4619-4271-afdd-f480fa925186"))
ChartCategory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetIsFiltered,put=PutIsFiltered))
    VARIANT_BOOL IsFiltered;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetIsFiltered ( );
    void PutIsFiltered (
        VARIANT_BOOL pfIsFiltered );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_IsFiltered (
        /*[out,retval]*/ VARIANT_BOOL * pfIsFiltered ) = 0;
      virtual HRESULT __stdcall put_IsFiltered (
        /*[in]*/ VARIANT_BOOL pfIsFiltered ) = 0;
};

struct __declspec(uuid("2432f529-514b-4575-aa71-1754c74a13d6"))
CategoryCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    long GetCount ( );
    ChartCategoryPtr Item (
        const _variant_t & Index );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    ChartCategoryPtr _Default (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * cCategory ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ChartCategory * * ppcategory ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * ppval ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall raw__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ChartCategory * * RHS ) = 0;
};

struct __declspec(uuid("c9195677-b4f9-4228-bfd0-40c1f77d2f6a"))
ThemeVariant : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetWidth))
    long Width;
    __declspec(property(get=GetHeight))
    long Height;
    __declspec(property(get=GetId))
    _bstr_t Id;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    long GetWidth ( );
    long GetHeight ( );
    _bstr_t GetId ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Width ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Height ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ BSTR * Id ) = 0;
};

struct __declspec(uuid("9e116a3c-2c6d-4d07-93af-8675d452fca2"))
ThemeVariants : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ThemeVariantPtr Item (
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct ThemeVariant * * Item ) = 0;
};

struct __declspec(uuid("d9d60eb3-d4b4-4991-9c16-75585b3346bb"))
Theme : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetThemeVariants))
    ThemeVariantsPtr ThemeVariants;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ThemeVariantsPtr GetThemeVariants ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ThemeVariants (
        /*[out,retval]*/ struct ThemeVariants * * ThemeVariants ) = 0;
};

enum __declspec(uuid("bffe8f80-6a67-4b7a-aeaa-8823e7932c87"))
XlCategoryLabelLevel
{
    xlCategoryLabelLevelNone = -3,
    xlCategoryLabelLevelCustom = -2,
    xlCategoryLabelLevelAll = -1
};

enum __declspec(uuid("76d9466c-84c2-4355-81fe-cb1b9cb03c19"))
XlSeriesNameLevel
{
    xlSeriesNameLevelNone = -3,
    xlSeriesNameLevelCustom = -2,
    xlSeriesNameLevelAll = -1
};

struct __declspec(uuid("f658e3ec-f2d3-4272-aa49-4ec155d5aa76"))
SlideNavigation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
};

struct __declspec(uuid("91493453-5a91-11cf-8700-00aa0060263b"))
SlideShowWindow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetView))
    SlideShowViewPtr View;
    __declspec(property(get=GetPresentation))
    _PresentationPtr Presentation;
    __declspec(property(get=GetIsFullScreen))
    __missing_type__  IsFullScreen;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetHWND))
    long HWND;
    __declspec(property(get=GetActive))
    __missing_type__  Active;
    __declspec(property(get=GetSlideNavigation))
    SlideNavigationPtr SlideNavigation;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    SlideShowViewPtr GetView ( );
    _PresentationPtr GetPresentation ( );
    __missing_type__  GetIsFullScreen ( );
    float GetLeft ( );
    void PutLeft (
        float Left );
    float GetTop ( );
    void PutTop (
        float Top );
    float GetWidth ( );
    void PutWidth (
        float Width );
    float GetHeight ( );
    void PutHeight (
        float Height );
    long GetHWND ( );
    __missing_type__  GetActive ( );
    HRESULT Activate ( );
    SlideNavigationPtr GetSlideNavigation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_View (
        /*[out,retval]*/ struct SlideShowView * * View ) = 0;
      virtual HRESULT __stdcall get_Presentation (
        /*[out,retval]*/ struct _Presentation * * Presentation ) = 0;
      virtual HRESULT __stdcall get_IsFullScreen (
        /*[out,retval]*/ __missing_type__ * IsFullScreen ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_HWND (
        /*[out,retval]*/ long * HWND ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ __missing_type__ * Active ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_SlideNavigation (
        /*[out,retval]*/ struct SlideNavigation * * navigation ) = 0;
};

struct __declspec(uuid("91493456-5a91-11cf-8700-00aa0060263b"))
SlideShowWindows : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    SlideShowWindowPtr Item (
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct SlideShowWindow * * Item ) = 0;
};

struct __declspec(uuid("9149345a-5a91-11cf-8700-00aa0060263b"))
SlideShowSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPointerColor))
    ColorFormatPtr PointerColor;
    __declspec(property(get=GetNamedSlideShows))
    NamedSlideShowsPtr NamedSlideShows;
    __declspec(property(get=GetStartingSlide,put=PutStartingSlide))
    int StartingSlide;
    __declspec(property(get=GetEndingSlide,put=PutEndingSlide))
    int EndingSlide;
    __declspec(property(get=GetAdvanceMode,put=PutAdvanceMode))
    enum PpSlideShowAdvanceMode AdvanceMode;
    __declspec(property(get=GetShowType,put=PutShowType))
    enum PpSlideShowType ShowType;
    __declspec(property(get=GetSlideShowName,put=PutSlideShowName))
    _bstr_t SlideShowName;
    __declspec(property(get=GetRangeType,put=PutRangeType))
    enum PpSlideShowRangeType RangeType;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ColorFormatPtr GetPointerColor ( );
    NamedSlideShowsPtr GetNamedSlideShows ( );
    int GetStartingSlide ( );
    void PutStartingSlide (
        int StartingSlide );
    int GetEndingSlide ( );
    void PutEndingSlide (
        int EndingSlide );
    enum PpSlideShowAdvanceMode GetAdvanceMode ( );
    void PutAdvanceMode (
        enum PpSlideShowAdvanceMode AdvanceMode );
    SlideShowWindowPtr Run ( );
    __missing_type__  GetLoopUntilStopped ( );
    void PutLoopUntilStopped (
        __missing_type__ LoopUntilStopped );
    enum PpSlideShowType GetShowType ( );
    void PutShowType (
        enum PpSlideShowType ShowType );
    __missing_type__  GetShowWithNarration ( );
    void PutShowWithNarration (
        __missing_type__ ShowWithNarration );
    __missing_type__  GetShowWithAnimation ( );
    void PutShowWithAnimation (
        __missing_type__ ShowWithAnimation );
    _bstr_t GetSlideShowName ( );
    void PutSlideShowName (
        _bstr_t SlideShowName );
    enum PpSlideShowRangeType GetRangeType ( );
    void PutRangeType (
        enum PpSlideShowRangeType RangeType );
    __missing_type__  GetShowScrollbar ( );
    void PutShowScrollbar (
        __missing_type__ ShowScrollbar );
    __missing_type__  GetShowPresenterView ( );
    void PutShowPresenterView (
        __missing_type__ ShowPresenterView );
    __missing_type__  GetShowMediaControls ( );
    void PutShowMediaControls (
        __missing_type__ ShowMediaControls );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_PointerColor (
        /*[out,retval]*/ struct ColorFormat * * PointerColor ) = 0;
      virtual HRESULT __stdcall get_NamedSlideShows (
        /*[out,retval]*/ struct NamedSlideShows * * NamedSlideShows ) = 0;
      virtual HRESULT __stdcall get_StartingSlide (
        /*[out,retval]*/ int * StartingSlide ) = 0;
      virtual HRESULT __stdcall put_StartingSlide (
        /*[in]*/ int StartingSlide ) = 0;
      virtual HRESULT __stdcall get_EndingSlide (
        /*[out,retval]*/ int * EndingSlide ) = 0;
      virtual HRESULT __stdcall put_EndingSlide (
        /*[in]*/ int EndingSlide ) = 0;
      virtual HRESULT __stdcall get_AdvanceMode (
        /*[out,retval]*/ enum PpSlideShowAdvanceMode * AdvanceMode ) = 0;
      virtual HRESULT __stdcall put_AdvanceMode (
        /*[in]*/ enum PpSlideShowAdvanceMode AdvanceMode ) = 0;
      virtual HRESULT __stdcall raw_Run (
        /*[out,retval]*/ struct SlideShowWindow * * Run ) = 0;
      virtual HRESULT __stdcall get_LoopUntilStopped (
        /*[out,retval]*/ __missing_type__ * LoopUntilStopped ) = 0;
      virtual HRESULT __stdcall put_LoopUntilStopped (
        /*[in]*/ __missing_type__ LoopUntilStopped ) = 0;
      virtual HRESULT __stdcall get_ShowType (
        /*[out,retval]*/ enum PpSlideShowType * ShowType ) = 0;
      virtual HRESULT __stdcall put_ShowType (
        /*[in]*/ enum PpSlideShowType ShowType ) = 0;
      virtual HRESULT __stdcall get_ShowWithNarration (
        /*[out,retval]*/ __missing_type__ * ShowWithNarration ) = 0;
      virtual HRESULT __stdcall put_ShowWithNarration (
        /*[in]*/ __missing_type__ ShowWithNarration ) = 0;
      virtual HRESULT __stdcall get_ShowWithAnimation (
        /*[out,retval]*/ __missing_type__ * ShowWithAnimation ) = 0;
      virtual HRESULT __stdcall put_ShowWithAnimation (
        /*[in]*/ __missing_type__ ShowWithAnimation ) = 0;
      virtual HRESULT __stdcall get_SlideShowName (
        /*[out,retval]*/ BSTR * SlideShowName ) = 0;
      virtual HRESULT __stdcall put_SlideShowName (
        /*[in]*/ BSTR SlideShowName ) = 0;
      virtual HRESULT __stdcall get_RangeType (
        /*[out,retval]*/ enum PpSlideShowRangeType * RangeType ) = 0;
      virtual HRESULT __stdcall put_RangeType (
        /*[in]*/ enum PpSlideShowRangeType RangeType ) = 0;
      virtual HRESULT __stdcall get_ShowScrollbar (
        /*[out,retval]*/ __missing_type__ * ShowScrollbar ) = 0;
      virtual HRESULT __stdcall put_ShowScrollbar (
        /*[in]*/ __missing_type__ ShowScrollbar ) = 0;
      virtual HRESULT __stdcall get_ShowPresenterView (
        /*[out,retval]*/ __missing_type__ * ShowPresenterView ) = 0;
      virtual HRESULT __stdcall put_ShowPresenterView (
        /*[in]*/ __missing_type__ ShowPresenterView ) = 0;
      virtual HRESULT __stdcall get_ShowMediaControls (
        /*[out,retval]*/ __missing_type__ * ShowMediaControls ) = 0;
      virtual HRESULT __stdcall put_ShowMediaControls (
        /*[in]*/ __missing_type__ ShowMediaControls ) = 0;
};

enum __declspec(uuid("6e8c12bd-5fd3-4ae8-a61f-d0f27bcbb2d2"))
PpGuideOrientation
{
    ppHorizontalGuide = 1,
    ppVerticalGuide = 2
};

struct __declspec(uuid("3d2f865b-e2db-4896-bc35-6a006df896dc"))
Guide : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOrientation))
    enum PpGuideOrientation Orientation;
    __declspec(property(get=GetPosition,put=PutPosition))
    float Position;
    __declspec(property(get=GetColor))
    ColorFormatPtr Color;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    enum PpGuideOrientation GetOrientation ( );
    float GetPosition ( );
    void PutPosition (
        float Position );
    ColorFormatPtr GetColor ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum PpGuideOrientation * Orientation ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ float * Position ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ float Position ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ struct ColorFormat * * Color ) = 0;
};

struct __declspec(uuid("1641e775-2277-46de-a06d-8c49c3c5d5e7"))
Guides : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    GuidePtr Item (
        int Index );
    GuidePtr Add (
        enum PpGuideOrientation Orientation,
        float Position );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Guide * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum PpGuideOrientation Orientation,
        /*[in]*/ float Position,
        /*[out,retval]*/ struct Guide * * Add ) = 0;
};

enum __declspec(uuid("445bb65f-2ed4-4653-a80a-04ff61373cb4"))
XlParentDataLabelOptions
{
    xlParentDataLabelOptionsNone = 0,
    xlParentDataLabelOptionsBanner = 1,
    xlParentDataLabelOptionsOverlapping = 2
};

struct __declspec(uuid("92d41a75-f07e-4ca4-af6f-bef486aa4e6f"))
Series : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHasLeaderLines,put=PutHasLeaderLines))
    VARIANT_BOOL HasLeaderLines;
    __declspec(property(get=GetValues,put=PutValues))
    _variant_t Values;
    __declspec(property(get=GetBarShape,put=PutBarShape))
    enum XlBarShape BarShape;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetFormulaLocal,put=PutFormulaLocal))
    _bstr_t FormulaLocal;
    __declspec(property(get=GetExplosion,put=PutExplosion))
    long Explosion;
    __declspec(property(get=GetFormulaR1C1,put=PutFormulaR1C1))
    _bstr_t FormulaR1C1;
    __declspec(property(get=GetFormulaR1C1Local,put=PutFormulaR1C1Local))
    _bstr_t FormulaR1C1Local;
    __declspec(property(get=GetApplyPictToSides,put=PutApplyPictToSides))
    VARIANT_BOOL ApplyPictToSides;
    __declspec(property(get=GetApplyPictToFront,put=PutApplyPictToFront))
    VARIANT_BOOL ApplyPictToFront;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetBubbleSizes,put=PutBubbleSizes))
    _variant_t BubbleSizes;
    __declspec(property(get=GetPictureUnit2,put=PutPictureUnit2))
    double PictureUnit2;
    __declspec(property(get=GetType,put=PutType))
    long Type;
    __declspec(property(get=GetApplyPictToEnd,put=PutApplyPictToEnd))
    VARIANT_BOOL ApplyPictToEnd;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetHas3DEffect,put=PutHas3DEffect))
    VARIANT_BOOL Has3DEffect;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetLeaderLines))
    LeaderLinesPtr LeaderLines;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetPlotColorIndex))
    long PlotColorIndex;
    __declspec(property(get=GetInvertColor,put=PutInvertColor))
    long InvertColor;
    __declspec(property(get=GetInvertColorIndex,put=PutInvertColorIndex))
    enum XlColorIndex InvertColorIndex;
    __declspec(property(get=GetIsFiltered,put=PutIsFiltered))
    VARIANT_BOOL IsFiltered;
    __declspec(property(get=GetParentDataLabelOption,put=PutParentDataLabelOption))
    enum XlParentDataLabelOptions ParentDataLabelOption;
    __declspec(property(get=GetQuartileCalculationInclusiveMedian,put=PutQuartileCalculationInclusiveMedian))
    VARIANT_BOOL QuartileCalculationInclusiveMedian;
    __declspec(property(get=GetXValues,put=PutXValues))
    _variant_t XValues;
    __declspec(property(get=GetBorder))
    ChartBorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetAxisGroup,put=PutAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetPlotOrder,put=PutPlotOrder))
    long PlotOrder;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetErrorBars))
    ErrorBarsPtr ErrorBars;
    __declspec(property(get=GetHasDataLabels,put=PutHasDataLabels))
    VARIANT_BOOL HasDataLabels;
    __declspec(property(get=GetHasErrorBars,put=PutHasErrorBars))
    VARIANT_BOOL HasErrorBars;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    enum XlChartPictureType PictureType;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    enum XlAxisGroup GetAxisGroup ( );
    void PutAxisGroup (
        enum XlAxisGroup RHS );
    ChartBorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Copy ( );
    IDispatchPtr DataLabels (
        const _variant_t & Index = vtMissing );
    _variant_t Delete ( );
    _variant_t ErrorBar (
        enum XlErrorBarDirection Direction,
        enum XlErrorBarInclude Include,
        enum XlErrorBarType Type,
        const _variant_t & Amount = vtMissing,
        const _variant_t & MinusValues = vtMissing );
    ErrorBarsPtr GetErrorBars ( );
    long GetExplosion ( );
    void PutExplosion (
        long RHS );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _bstr_t GetFormulaLocal ( );
    void PutFormulaLocal (
        _bstr_t RHS );
    _bstr_t GetFormulaR1C1 ( );
    void PutFormulaR1C1 (
        _bstr_t RHS );
    _bstr_t GetFormulaR1C1Local ( );
    void PutFormulaR1C1Local (
        _bstr_t RHS );
    VARIANT_BOOL GetHasDataLabels ( );
    void PutHasDataLabels (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasErrorBars ( );
    void PutHasErrorBars (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL RHS );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long RHS );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long RHS );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long RHS );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _variant_t Paste ( );
    enum XlChartPictureType GetPictureType ( );
    void PutPictureType (
        enum XlChartPictureType RHS );
    long GetPlotOrder ( );
    void PutPlotOrder (
        long RHS );
    IDispatchPtr Points (
        const _variant_t & Index = vtMissing );
    _variant_t Select ( );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL RHS );
    IDispatchPtr Trendlines (
        const _variant_t & Index = vtMissing );
    long GetType ( );
    void PutType (
        long RHS );
    __missing_type__  GetChartType ( );
    void PutChartType (
        __missing_type__ RHS );
    HRESULT ApplyCustomType (
        __missing_type__ ChartType );
    _variant_t GetValues ( );
    void PutValues (
        const _variant_t & RHS );
    _variant_t GetXValues ( );
    void PutXValues (
        const _variant_t & RHS );
    _variant_t GetBubbleSizes ( );
    void PutBubbleSizes (
        const _variant_t & RHS );
    enum XlBarShape GetBarShape ( );
    void PutBarShape (
        enum XlBarShape RHS );
    VARIANT_BOOL GetApplyPictToSides ( );
    void PutApplyPictToSides (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetApplyPictToFront ( );
    void PutApplyPictToFront (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetApplyPictToEnd ( );
    void PutApplyPictToEnd (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHas3DEffect ( );
    void PutHas3DEffect (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasLeaderLines ( );
    void PutHasLeaderLines (
        VARIANT_BOOL RHS );
    LeaderLinesPtr GetLeaderLines ( );
    ChartFormatPtr GetFormat ( );
    long GetCreator ( );
    double GetPictureUnit2 ( );
    void PutPictureUnit2 (
        double RHS );
    _ApplicationPtr GetApplication ( );
    _variant_t _ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing );
    _variant_t ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        const _variant_t & ShowSeriesName = vtMissing,
        const _variant_t & ShowCategoryName = vtMissing,
        const _variant_t & ShowValue = vtMissing,
        const _variant_t & ShowPercentage = vtMissing,
        const _variant_t & ShowBubbleSize = vtMissing,
        const _variant_t & Separator = vtMissing );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long RHS );
    long GetPlotColorIndex ( );
    long GetInvertColor ( );
    void PutInvertColor (
        long RHS );
    enum XlColorIndex GetInvertColorIndex ( );
    void PutInvertColorIndex (
        enum XlColorIndex RHS );
    VARIANT_BOOL GetIsFiltered ( );
    void PutIsFiltered (
        VARIANT_BOOL RHS );
    enum XlParentDataLabelOptions GetParentDataLabelOption ( );
    void PutParentDataLabelOption (
        enum XlParentDataLabelOptions RHS );
    VARIANT_BOOL GetQuartileCalculationInclusiveMedian ( );
    void PutQuartileCalculationInclusiveMedian (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AxisGroup (
        /*[out,retval]*/ enum XlAxisGroup * RHS ) = 0;
      virtual HRESULT __stdcall put_AxisGroup (
        /*[in]*/ enum XlAxisGroup RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct ChartBorder * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_DataLabels (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ErrorBar (
        /*[in]*/ enum XlErrorBarDirection Direction,
        /*[in]*/ enum XlErrorBarInclude Include,
        /*[in]*/ enum XlErrorBarType Type,
        /*[in]*/ VARIANT Amount,
        /*[in]*/ VARIANT MinusValues,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ErrorBars (
        /*[out,retval]*/ struct ErrorBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_Explosion (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Explosion (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaLocal (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaLocal (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1 (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1 (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1Local (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1Local (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HasDataLabels (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasDataLabels (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasErrorBars (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasErrorBars (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_InvertIfNegative (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InvertIfNegative (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerSize (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerSize (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ enum XlMarkerStyle * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ enum XlMarkerStyle RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_PictureType (
        /*[out,retval]*/ enum XlChartPictureType * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureType (
        /*[in]*/ enum XlChartPictureType RHS ) = 0;
      virtual HRESULT __stdcall get_PlotOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PlotOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Points (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Smooth (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Smooth (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Trendlines (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ChartType (
        /*[out,retval]*/ __missing_type__ * RHS ) = 0;
      virtual HRESULT __stdcall put_ChartType (
        /*[in]*/ __missing_type__ RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyCustomType (
        /*[in]*/ __missing_type__ ChartType ) = 0;
      virtual HRESULT __stdcall get_Values (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Values (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_XValues (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_XValues (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_BubbleSizes (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_BubbleSizes (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_BarShape (
        /*[out,retval]*/ enum XlBarShape * RHS ) = 0;
      virtual HRESULT __stdcall put_BarShape (
        /*[in]*/ enum XlBarShape RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToSides (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToSides (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToFront (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToFront (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToEnd (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToEnd (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Has3DEffect (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Has3DEffect (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasLeaderLines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasLeaderLines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LeaderLines (
        /*[out,retval]*/ struct LeaderLines * * RHS ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_PictureUnit2 (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureUnit2 (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall raw__ApplyDataLabels (
        /*[in]*/ enum XlDataLabelsType Type,
        /*[in]*/ VARIANT LegendKey,
        /*[in]*/ VARIANT AutoText,
        /*[in]*/ VARIANT HasLeaderLines,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyDataLabels (
        /*[in]*/ enum XlDataLabelsType Type,
        /*[in]*/ VARIANT LegendKey,
        /*[in]*/ VARIANT AutoText,
        /*[in]*/ VARIANT HasLeaderLines,
        /*[in]*/ VARIANT ShowSeriesName,
        /*[in]*/ VARIANT ShowCategoryName,
        /*[in]*/ VARIANT ShowValue,
        /*[in]*/ VARIANT ShowPercentage,
        /*[in]*/ VARIANT ShowBubbleSize,
        /*[in]*/ VARIANT Separator,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_PictureUnit (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureUnit (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_PlotColorIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_InvertColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_InvertColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_InvertColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_InvertColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_IsFiltered (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IsFiltered (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ParentDataLabelOption (
        /*[out,retval]*/ enum XlParentDataLabelOptions * RHS ) = 0;
      virtual HRESULT __stdcall put_ParentDataLabelOption (
        /*[in]*/ enum XlParentDataLabelOptions RHS ) = 0;
      virtual HRESULT __stdcall get_QuartileCalculationInclusiveMedian (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_QuartileCalculationInclusiveMedian (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("92d41a76-f07e-4ca4-af6f-bef486aa4e6f"))
SeriesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    long GetCount ( );
    _variant_t Extend (
        const _variant_t & Source,
        const _variant_t & Rowcol = vtMissing,
        const _variant_t & CategoryLabels = vtMissing );
    SeriesPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    SeriesPtr NewSeries ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );
    SeriesPtr Add (
        const _variant_t & Source,
        enum XlRowCol Rowcol,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & Replace = vtMissing );
    SeriesPtr _Default (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Extend (
        /*[in]*/ VARIANT Source,
        /*[in]*/ VARIANT Rowcol,
        /*[in]*/ VARIANT CategoryLabels,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Series * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_NewSeries (
        /*[out,retval]*/ struct Series * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Source,
        /*[in]*/ enum XlRowCol Rowcol,
        /*[in]*/ VARIANT SeriesLabels,
        /*[in]*/ VARIANT CategoryLabels,
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ struct Series * * RHS ) = 0;
      virtual HRESULT __stdcall raw__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Series * * RHS ) = 0;
};

struct __declspec(uuid("288b25a9-98ef-41e5-beba-f547d7169bf2"))
FullSeriesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    long GetCount ( );
    SeriesPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    _ApplicationPtr GetApplication ( );
    long GetCreator ( );
    SeriesPtr _Default (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Series * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * ppval ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall raw__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Series * * RHS ) = 0;
};

enum __declspec(uuid("d66a5206-a935-4e70-8383-5a1010bca0be"))
XlBinsType
{
    xlBinsTypeAutomatic = 0,
    xlBinsTypeCategorical = 1,
    xlBinsTypeManual = 2,
    xlBinsTypeBinSize = 3,
    xlBinsTypeBinCount = 4
};

struct __declspec(uuid("92d41a5d-f07e-4ca4-af6f-bef486aa4e6f"))
ChartGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDownBars))
    DownBarsPtr DownBars;
    __declspec(property(get=GetDropLines))
    DropLinesPtr DropLines;
    __declspec(property(get=GetHasDropLines,put=PutHasDropLines))
    VARIANT_BOOL HasDropLines;
    __declspec(property(get=GetHasHiLoLines,put=PutHasHiLoLines))
    VARIANT_BOOL HasHiLoLines;
    __declspec(property(get=GetHasRadarAxisLabels,put=PutHasRadarAxisLabels))
    VARIANT_BOOL HasRadarAxisLabels;
    __declspec(property(get=GetHasSeriesLines,put=PutHasSeriesLines))
    VARIANT_BOOL HasSeriesLines;
    __declspec(property(get=GetHasUpDownBars,put=PutHasUpDownBars))
    VARIANT_BOOL HasUpDownBars;
    __declspec(property(get=GetHiLoLines))
    HiLoLinesPtr HiLoLines;
    __declspec(property(get=GetSeriesLines))
    SeriesLinesPtr SeriesLines;
    __declspec(property(get=GetUpBars))
    UpBarsPtr UpBars;
    __declspec(property(get=GetVaryByCategories,put=PutVaryByCategories))
    VARIANT_BOOL VaryByCategories;
    __declspec(property(get=GetSizeRepresents,put=PutSizeRepresents))
    enum XlSizeRepresents SizeRepresents;
    __declspec(property(get=GetShowNegativeBubbles,put=PutShowNegativeBubbles))
    VARIANT_BOOL ShowNegativeBubbles;
    __declspec(property(get=GetSplitType,put=PutSplitType))
    enum XlChartSplitType SplitType;
    __declspec(property(get=GetSplitValue,put=PutSplitValue))
    _variant_t SplitValue;
    __declspec(property(get=GetHas3DShading,put=PutHas3DShading))
    VARIANT_BOOL Has3DShading;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetAxisGroup,put=PutAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetBubbleScale,put=PutBubbleScale))
    long BubbleScale;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDoughnutHoleSize,put=PutDoughnutHoleSize))
    long DoughnutHoleSize;
    __declspec(property(get=GetFirstSliceAngle,put=PutFirstSliceAngle))
    long FirstSliceAngle;
    __declspec(property(get=GetGapWidth,put=PutGapWidth))
    long GapWidth;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetOverlap,put=PutOverlap))
    long Overlap;
    __declspec(property(get=GetRadarAxisLabels))
    TickLabelsPtr RadarAxisLabels;
    __declspec(property(get=GetSubtype,put=PutSubtype))
    long Subtype;
    __declspec(property(get=GetType,put=PutType))
    long Type;
    __declspec(property(get=GetSecondPlotSize,put=PutSecondPlotSize))
    long SecondPlotSize;
    __declspec(property(get=GetBinsType,put=PutBinsType))
    enum XlBinsType BinsType;
    __declspec(property(get=GetBinWidthValue,put=PutBinWidthValue))
    double BinWidthValue;
    __declspec(property(get=GetBinsCountValue,put=PutBinsCountValue))
    int BinsCountValue;
    __declspec(property(get=GetBinsOverflowEnabled,put=PutBinsOverflowEnabled))
    VARIANT_BOOL BinsOverflowEnabled;
    __declspec(property(get=GetBinsOverflowValue,put=PutBinsOverflowValue))
    double BinsOverflowValue;
    __declspec(property(get=GetBinsUnderflowEnabled,put=PutBinsUnderflowEnabled))
    VARIANT_BOOL BinsUnderflowEnabled;
    __declspec(property(get=GetBinsUnderflowValue,put=PutBinsUnderflowValue))
    double BinsUnderflowValue;

    //
    // Wrapper methods for error-handling
    //

    DownBarsPtr GetDownBars ( );
    DropLinesPtr GetDropLines ( );
    void PutHasDropLines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasDropLines ( );
    void PutHasHiLoLines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasHiLoLines ( );
    void PutHasRadarAxisLabels (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasRadarAxisLabels ( );
    void PutHasSeriesLines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasSeriesLines ( );
    void PutHasUpDownBars (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasUpDownBars ( );
    HiLoLinesPtr GetHiLoLines ( );
    IDispatchPtr SeriesCollection (
        const _variant_t & Index = vtMissing );
    SeriesLinesPtr GetSeriesLines ( );
    UpBarsPtr GetUpBars ( );
    void PutVaryByCategories (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetVaryByCategories ( );
    enum XlSizeRepresents GetSizeRepresents ( );
    void PutSizeRepresents (
        enum XlSizeRepresents RHS );
    void PutShowNegativeBubbles (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowNegativeBubbles ( );
    void PutSplitType (
        enum XlChartSplitType RHS );
    enum XlChartSplitType GetSplitType ( );
    _variant_t GetSplitValue ( );
    void PutSplitValue (
        const _variant_t & RHS );
    VARIANT_BOOL GetHas3DShading ( );
    void PutHas3DShading (
        VARIANT_BOOL RHS );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    _ApplicationPtr GetApplication ( );
    enum XlAxisGroup GetAxisGroup ( );
    void PutAxisGroup (
        enum XlAxisGroup RHS );
    long GetBubbleScale ( );
    void PutBubbleScale (
        long RHS );
    long GetDoughnutHoleSize ( );
    void PutDoughnutHoleSize (
        long RHS );
    long GetFirstSliceAngle ( );
    void PutFirstSliceAngle (
        long RHS );
    long GetGapWidth ( );
    void PutGapWidth (
        long RHS );
    long GetIndex ( );
    long GetOverlap ( );
    void PutOverlap (
        long RHS );
    TickLabelsPtr GetRadarAxisLabels ( );
    long GetSubtype ( );
    void PutSubtype (
        long RHS );
    long GetType ( );
    void PutType (
        long RHS );
    long GetSecondPlotSize ( );
    void PutSecondPlotSize (
        long RHS );
    IDispatchPtr CategoryCollection (
        const _variant_t & Index = vtMissing );
    IDispatchPtr FullCategoryCollection (
        const _variant_t & Index = vtMissing );
    enum XlBinsType GetBinsType ( );
    void PutBinsType (
        enum XlBinsType RHS );
    double GetBinWidthValue ( );
    void PutBinWidthValue (
        double pval );
    int GetBinsCountValue ( );
    void PutBinsCountValue (
        int pval );
    VARIANT_BOOL GetBinsOverflowEnabled ( );
    void PutBinsOverflowEnabled (
        VARIANT_BOOL pval );
    double GetBinsOverflowValue ( );
    void PutBinsOverflowValue (
        double pval );
    VARIANT_BOOL GetBinsUnderflowEnabled ( );
    void PutBinsUnderflowEnabled (
        VARIANT_BOOL pval );
    double GetBinsUnderflowValue ( );
    void PutBinsUnderflowValue (
        double pval );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DownBars (
        /*[out,retval]*/ struct DownBars * * ppdownbars ) = 0;
      virtual HRESULT __stdcall get_DropLines (
        /*[out,retval]*/ struct DropLines * * ppdroplines ) = 0;
      virtual HRESULT __stdcall put_HasDropLines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasDropLines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasHiLoLines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasHiLoLines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasRadarAxisLabels (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasRadarAxisLabels (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasSeriesLines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasSeriesLines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasUpDownBars (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasUpDownBars (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_HiLoLines (
        /*[out,retval]*/ struct HiLoLines * * ppHiLoLines ) = 0;
      virtual HRESULT __stdcall raw_SeriesCollection (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * ppSeriesCollection ) = 0;
      virtual HRESULT __stdcall get_SeriesLines (
        /*[out,retval]*/ struct SeriesLines * * ppSeriesLines ) = 0;
      virtual HRESULT __stdcall get_UpBars (
        /*[out,retval]*/ struct UpBars * * ppUpBars ) = 0;
      virtual HRESULT __stdcall put_VaryByCategories (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_VaryByCategories (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_SizeRepresents (
        /*[out,retval]*/ enum XlSizeRepresents * RHS ) = 0;
      virtual HRESULT __stdcall put_SizeRepresents (
        /*[in]*/ enum XlSizeRepresents RHS ) = 0;
      virtual HRESULT __stdcall put_ShowNegativeBubbles (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowNegativeBubbles (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SplitType (
        /*[in]*/ enum XlChartSplitType RHS ) = 0;
      virtual HRESULT __stdcall get_SplitType (
        /*[out,retval]*/ enum XlChartSplitType * RHS ) = 0;
      virtual HRESULT __stdcall get_SplitValue (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_SplitValue (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Has3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Has3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_AxisGroup (
        /*[out,retval]*/ enum XlAxisGroup * RHS ) = 0;
      virtual HRESULT __stdcall put_AxisGroup (
        /*[in]*/ enum XlAxisGroup RHS ) = 0;
      virtual HRESULT __stdcall get_BubbleScale (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_BubbleScale (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_DoughnutHoleSize (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DoughnutHoleSize (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_FirstSliceAngle (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_FirstSliceAngle (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_GapWidth (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_GapWidth (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Overlap (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Overlap (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_RadarAxisLabels (
        /*[out,retval]*/ struct TickLabels * * RHS ) = 0;
      virtual HRESULT __stdcall get_Subtype (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Subtype (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SecondPlotSize (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SecondPlotSize (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_CategoryCollection (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_FullCategoryCollection (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BinsType (
        /*[out,retval]*/ enum XlBinsType * RHS ) = 0;
      virtual HRESULT __stdcall put_BinsType (
        /*[in]*/ enum XlBinsType RHS ) = 0;
      virtual HRESULT __stdcall get_BinWidthValue (
        /*[out,retval]*/ double * pval ) = 0;
      virtual HRESULT __stdcall put_BinWidthValue (
        /*[in]*/ double pval ) = 0;
      virtual HRESULT __stdcall get_BinsCountValue (
        /*[out,retval]*/ int * pval ) = 0;
      virtual HRESULT __stdcall put_BinsCountValue (
        /*[in]*/ int pval ) = 0;
      virtual HRESULT __stdcall get_BinsOverflowEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pval ) = 0;
      virtual HRESULT __stdcall put_BinsOverflowEnabled (
        /*[in]*/ VARIANT_BOOL pval ) = 0;
      virtual HRESULT __stdcall get_BinsOverflowValue (
        /*[out,retval]*/ double * pval ) = 0;
      virtual HRESULT __stdcall put_BinsOverflowValue (
        /*[in]*/ double pval ) = 0;
      virtual HRESULT __stdcall get_BinsUnderflowEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pval ) = 0;
      virtual HRESULT __stdcall put_BinsUnderflowEnabled (
        /*[in]*/ VARIANT_BOOL pval ) = 0;
      virtual HRESULT __stdcall get_BinsUnderflowValue (
        /*[out,retval]*/ double * pval ) = 0;
      virtual HRESULT __stdcall put_BinsUnderflowValue (
        /*[in]*/ double pval ) = 0;
};

struct __declspec(uuid("92d41a5e-f07e-4ca4-af6f-bef486aa4e6f"))
ChartGroups : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    long GetCount ( );
    ChartGroupPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    long GetCreator ( );
    _ApplicationPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
};

struct __declspec(uuid("91493442-5a91-11cf-8700-00aa0060263b"))
_Application : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPresentations))
    PresentationsPtr Presentations;
    __declspec(property(get=GetWindows))
    DocumentWindowsPtr Windows;
    __declspec(property(get=GetDialogs))
    IUnknownPtr Dialogs;
    __declspec(property(get=GetActiveWindow))
    DocumentWindowPtr ActiveWindow;
    __declspec(property(get=GetActivePresentation))
    _PresentationPtr ActivePresentation;
    __declspec(property(get=GetSlideShowWindows))
    SlideShowWindowsPtr SlideShowWindows;
    __declspec(property(get=GetCommandBars))
    __missing_type__ CommandBars;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetAssistant))
    __missing_type__ Assistant;
    __declspec(property(get=GetFileSearch))
    __missing_type__ FileSearch;
    __declspec(property(get=GetFileFind))
    __missing_type__ FileFind;
    __declspec(property(get=GetBuild))
    _bstr_t Build;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetOperatingSystem))
    _bstr_t OperatingSystem;
    __declspec(property(get=GetActivePrinter))
    _bstr_t ActivePrinter;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetAddIns))
    AddInsPtr AddIns;
    __declspec(property(get=GetVBE))
    VBEPtr VBE;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum PpWindowState WindowState;
    __declspec(property(get=GetHWND))
    long HWND;
    __declspec(property(get=GetActive))
    __missing_type__  Active;
    __declspec(property(get=GetAnswerWizard))
    __missing_type__ AnswerWizard;
    __declspec(property(get=GetCOMAddIns))
    __missing_type__ COMAddIns;
    __declspec(property(get=GetProductCode))
    _bstr_t ProductCode;
    __declspec(property(get=GetDefaultWebOptions))
    DefaultWebOptionsPtr DefaultWebOptions;
    __declspec(property(get=GetLanguageSettings))
    __missing_type__ LanguageSettings;
    __declspec(property(get=GetMsoDebugOptions))
    __missing_type__ MsoDebugOptions;
    __declspec(property(get=GetMarker))
    IUnknownPtr Marker;
    __declspec(property(get=GetFileDialog))
    __missing_type__ FileDialog[];
    __declspec(property(get=GetNewPresentation))
    __missing_type__ NewPresentation;
    __declspec(property(get=GetDisplayAlerts,put=PutDisplayAlerts))
    enum PpAlertLevel DisplayAlerts;
    __declspec(property(get=GetAutoCorrect))
    AutoCorrectPtr AutoCorrect;
    __declspec(property(get=GetOptions))
    OptionsPtr Options;
    __declspec(property(get=GetDisplayDocumentInformationPanel,put=PutDisplayDocumentInformationPanel))
    VARIANT_BOOL DisplayDocumentInformationPanel;
    __declspec(property(get=GetAssistance))
    __missing_type__ Assistance;
    __declspec(property(get=GetActiveEncryptionSession))
    long ActiveEncryptionSession;
    __declspec(property(get=GetFileConverters))
    FileConvertersPtr FileConverters;
    __declspec(property(get=GetSmartArtLayouts))
    __missing_type__ SmartArtLayouts;
    __declspec(property(get=GetSmartArtQuickStyles))
    __missing_type__ SmartArtQuickStyles;
    __declspec(property(get=GetSmartArtColors))
    __missing_type__ SmartArtColors;
    __declspec(property(get=GetProtectedViewWindows))
    ProtectedViewWindowsPtr ProtectedViewWindows;
    __declspec(property(get=GetActiveProtectedViewWindow))
    ProtectedViewWindowPtr ActiveProtectedViewWindow;
    __declspec(property(get=GetIsSandboxed))
    VARIANT_BOOL IsSandboxed;
    __declspec(property(get=GetResampleMediaTasks))
    ResampleMediaTasksPtr ResampleMediaTasks;
    __declspec(property(get=GetChartDataPointTrack,put=PutChartDataPointTrack))
    VARIANT_BOOL ChartDataPointTrack;

    //
    // Wrapper methods for error-handling
    //

    PresentationsPtr GetPresentations ( );
    DocumentWindowsPtr GetWindows ( );
    IUnknownPtr GetDialogs ( );
    DocumentWindowPtr GetActiveWindow ( );
    _PresentationPtr GetActivePresentation ( );
    SlideShowWindowsPtr GetSlideShowWindows ( );
    __missing_type__ GetCommandBars ( );
    _bstr_t GetPath ( );
    _bstr_t GetName ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t Caption );
    __missing_type__ GetAssistant ( );
    __missing_type__ GetFileSearch ( );
    __missing_type__ GetFileFind ( );
    _bstr_t GetBuild ( );
    _bstr_t GetVersion ( );
    _bstr_t GetOperatingSystem ( );
    _bstr_t GetActivePrinter ( );
    long GetCreator ( );
    AddInsPtr GetAddIns ( );
    VBEPtr GetVBE ( );
    HRESULT Help (
        _bstr_t HelpFile,
        int ContextID );
    HRESULT Quit ( );
    _variant_t Run (
        _bstr_t MacroName,
        SAFEARRAY * * safeArrayOfParams );
    IUnknownPtr PPFileDialog (
        enum PpFileDialogType Type );
    HRESULT LaunchSpelling (
        struct DocumentWindow * pWindow );
    float GetLeft ( );
    void PutLeft (
        float Left );
    float GetTop ( );
    void PutTop (
        float Top );
    float GetWidth ( );
    void PutWidth (
        float Width );
    float GetHeight ( );
    void PutHeight (
        float Height );
    enum PpWindowState GetWindowState ( );
    void PutWindowState (
        enum PpWindowState WindowState );
    __missing_type__  GetVisible ( );
    void PutVisible (
        __missing_type__ Visible );
    long GetHWND ( );
    __missing_type__  GetActive ( );
    HRESULT Activate ( );
    __missing_type__ GetAnswerWizard ( );
    __missing_type__ GetCOMAddIns ( );
    _bstr_t GetProductCode ( );
    DefaultWebOptionsPtr GetDefaultWebOptions ( );
    __missing_type__ GetLanguageSettings ( );
    __missing_type__ GetMsoDebugOptions ( );
    __missing_type__  GetShowWindowsInTaskbar ( );
    void PutShowWindowsInTaskbar (
        __missing_type__ ShowWindowsInTaskbar );
    IUnknownPtr GetMarker ( );
    __missing_type__  GetFeatureInstall ( );
    void PutFeatureInstall (
        __missing_type__ FeatureInstall );
    VARIANT_BOOL GetOptionFlag (
        long Option,
        VARIANT_BOOL Persist );
    HRESULT SetOptionFlag (
        long Option,
        VARIANT_BOOL State,
        VARIANT_BOOL Persist );
    __missing_type__ GetFileDialog (
        __missing_type__ Type );
    __missing_type__  GetDisplayGridLines ( );
    void PutDisplayGridLines (
        __missing_type__ DisplayGridLines );
    __missing_type__  GetAutomationSecurity ( );
    void PutAutomationSecurity (
        __missing_type__ AutomationSecurity );
    __missing_type__ GetNewPresentation ( );
    enum PpAlertLevel GetDisplayAlerts ( );
    void PutDisplayAlerts (
        enum PpAlertLevel DisplayAlerts );
    __missing_type__  GetShowStartupDialog ( );
    void PutShowStartupDialog (
        __missing_type__ ShowStartupDialog );
    HRESULT SetPerfMarker (
        int Marker );
    AutoCorrectPtr GetAutoCorrect ( );
    OptionsPtr GetOptions ( );
    HRESULT LaunchPublishSlidesDialog (
        _bstr_t SlideLibraryUrl );
    HRESULT LaunchSendToPPTDialog (
        VARIANT * SlideUrls );
    VARIANT_BOOL GetDisplayDocumentInformationPanel ( );
    void PutDisplayDocumentInformationPanel (
        VARIANT_BOOL DisplayDocumentInformationPanel );
    __missing_type__ GetAssistance ( );
    long GetActiveEncryptionSession ( );
    FileConvertersPtr GetFileConverters ( );
    __missing_type__ GetSmartArtLayouts ( );
    __missing_type__ GetSmartArtQuickStyles ( );
    __missing_type__ GetSmartArtColors ( );
    ProtectedViewWindowsPtr GetProtectedViewWindows ( );
    ProtectedViewWindowPtr GetActiveProtectedViewWindow ( );
    VARIANT_BOOL GetIsSandboxed ( );
    ResampleMediaTasksPtr GetResampleMediaTasks ( );
    HRESULT StartNewUndoEntry ( );
    __missing_type__  GetFileValidation ( );
    void PutFileValidation (
        __missing_type__ FileValidation );
    ThemePtr OpenThemeFile (
        _bstr_t themeFileName );
    VARIANT_BOOL GetChartDataPointTrack ( );
    void PutChartDataPointTrack (
        VARIANT_BOOL pfChartDataPointTrack );
    __missing_type__  GetDisplayGuides ( );
    void PutDisplayGuides (
        __missing_type__ DisplayGridLines );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Presentations (
        /*[out,retval]*/ struct Presentations * * Presentations ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct DocumentWindows * * Windows ) = 0;
      virtual HRESULT __stdcall get_Dialogs (
        /*[out,retval]*/ IUnknown * * Dialogs ) = 0;
      virtual HRESULT __stdcall get_ActiveWindow (
        /*[out,retval]*/ struct DocumentWindow * * ActiveWindow ) = 0;
      virtual HRESULT __stdcall get_ActivePresentation (
        /*[out,retval]*/ struct _Presentation * * ActivePresentation ) = 0;
      virtual HRESULT __stdcall get_SlideShowWindows (
        /*[out,retval]*/ struct SlideShowWindows * * SlideShowWindows ) = 0;
      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ __missing_type__ * * CommandBars ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_Assistant (
        /*[out,retval]*/ __missing_type__ * * Assistant ) = 0;
      virtual HRESULT __stdcall get_FileSearch (
        /*[out,retval]*/ __missing_type__ * * FileSearch ) = 0;
      virtual HRESULT __stdcall get_FileFind (
        /*[out,retval]*/ __missing_type__ * * FileFind ) = 0;
      virtual HRESULT __stdcall get_Build (
        /*[out,retval]*/ BSTR * Build ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * Version ) = 0;
      virtual HRESULT __stdcall get_OperatingSystem (
        /*[out,retval]*/ BSTR * OperatingSystem ) = 0;
      virtual HRESULT __stdcall get_ActivePrinter (
        /*[out,retval]*/ BSTR * ActivePrinter ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * Creator ) = 0;
      virtual HRESULT __stdcall get_AddIns (
        /*[out,retval]*/ struct AddIns * * AddIns ) = 0;
      virtual HRESULT __stdcall get_VBE (
        /*[out,retval]*/ struct VBE * * VBE ) = 0;
      virtual HRESULT __stdcall raw_Help (
        /*[in]*/ BSTR HelpFile,
        /*[in]*/ int ContextID ) = 0;
      virtual HRESULT __stdcall raw_Quit ( ) = 0;
      virtual HRESULT __stdcall raw_Run (
        /*[in]*/ BSTR MacroName,
        /*[in]*/ SAFEARRAY * * safeArrayOfParams,
        /*[out,retval]*/ VARIANT * Run ) = 0;
      virtual HRESULT __stdcall raw_PPFileDialog (
        /*[in]*/ enum PpFileDialogType Type,
        /*[out,retval]*/ IUnknown * * PPFileDialog ) = 0;
      virtual HRESULT __stdcall raw_LaunchSpelling (
        /*[in]*/ struct DocumentWindow * pWindow ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_WindowState (
        /*[out,retval]*/ enum PpWindowState * WindowState ) = 0;
      virtual HRESULT __stdcall put_WindowState (
        /*[in]*/ enum PpWindowState WindowState ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ __missing_type__ * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ __missing_type__ Visible ) = 0;
      virtual HRESULT __stdcall get_HWND (
        /*[out,retval]*/ long * HWND ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ __missing_type__ * Active ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_AnswerWizard (
        /*[out,retval]*/ __missing_type__ * * AnswerWizard ) = 0;
      virtual HRESULT __stdcall get_COMAddIns (
        /*[out,retval]*/ __missing_type__ * * COMAddIns ) = 0;
      virtual HRESULT __stdcall get_ProductCode (
        /*[out,retval]*/ BSTR * ProductCode ) = 0;
      virtual HRESULT __stdcall get_DefaultWebOptions (
        /*[out,retval]*/ struct DefaultWebOptions * * DefaultWebOptions ) = 0;
      virtual HRESULT __stdcall get_LanguageSettings (
        /*[out,retval]*/ __missing_type__ * * LanguageSettings ) = 0;
      virtual HRESULT __stdcall get_MsoDebugOptions (
        /*[out,retval]*/ __missing_type__ * * MsoDebugOptions ) = 0;
      virtual HRESULT __stdcall get_ShowWindowsInTaskbar (
        /*[out,retval]*/ __missing_type__ * ShowWindowsInTaskbar ) = 0;
      virtual HRESULT __stdcall put_ShowWindowsInTaskbar (
        /*[in]*/ __missing_type__ ShowWindowsInTaskbar ) = 0;
      virtual HRESULT __stdcall get_Marker (
        /*[out,retval]*/ IUnknown * * Marker ) = 0;
      virtual HRESULT __stdcall get_FeatureInstall (
        /*[out,retval]*/ __missing_type__ * FeatureInstall ) = 0;
      virtual HRESULT __stdcall put_FeatureInstall (
        /*[in]*/ __missing_type__ FeatureInstall ) = 0;
      virtual HRESULT __stdcall raw_GetOptionFlag (
        /*[in]*/ long Option,
        /*[in]*/ VARIANT_BOOL Persist,
        /*[out,retval]*/ VARIANT_BOOL * GetOptionFlag ) = 0;
      virtual HRESULT __stdcall raw_SetOptionFlag (
        /*[in]*/ long Option,
        /*[in]*/ VARIANT_BOOL State,
        /*[in]*/ VARIANT_BOOL Persist ) = 0;
      virtual HRESULT __stdcall get_FileDialog (
        /*[in]*/ __missing_type__ Type,
        /*[out,retval]*/ __missing_type__ * * FileDialog ) = 0;
      virtual HRESULT __stdcall get_DisplayGridLines (
        /*[out,retval]*/ __missing_type__ * DisplayGridLines ) = 0;
      virtual HRESULT __stdcall put_DisplayGridLines (
        /*[in]*/ __missing_type__ DisplayGridLines ) = 0;
      virtual HRESULT __stdcall get_AutomationSecurity (
        /*[out,retval]*/ __missing_type__ * AutomationSecurity ) = 0;
      virtual HRESULT __stdcall put_AutomationSecurity (
        /*[in]*/ __missing_type__ AutomationSecurity ) = 0;
      virtual HRESULT __stdcall get_NewPresentation (
        /*[out,retval]*/ __missing_type__ * * NewPresentation ) = 0;
      virtual HRESULT __stdcall get_DisplayAlerts (
        /*[out,retval]*/ enum PpAlertLevel * DisplayAlerts ) = 0;
      virtual HRESULT __stdcall put_DisplayAlerts (
        /*[in]*/ enum PpAlertLevel DisplayAlerts ) = 0;
      virtual HRESULT __stdcall get_ShowStartupDialog (
        /*[out,retval]*/ __missing_type__ * ShowStartupDialog ) = 0;
      virtual HRESULT __stdcall put_ShowStartupDialog (
        /*[in]*/ __missing_type__ ShowStartupDialog ) = 0;
      virtual HRESULT __stdcall raw_SetPerfMarker (
        /*[in]*/ int Marker ) = 0;
      virtual HRESULT __stdcall get_AutoCorrect (
        /*[out,retval]*/ struct AutoCorrect * * AutoCorrect ) = 0;
      virtual HRESULT __stdcall get_Options (
        /*[out,retval]*/ struct Options * * Options ) = 0;
      virtual HRESULT __stdcall raw_LaunchPublishSlidesDialog (
        /*[in]*/ BSTR SlideLibraryUrl ) = 0;
      virtual HRESULT __stdcall raw_LaunchSendToPPTDialog (
        /*[in]*/ VARIANT * SlideUrls ) = 0;
      virtual HRESULT __stdcall get_DisplayDocumentInformationPanel (
        /*[out,retval]*/ VARIANT_BOOL * DisplayDocumentInformationPanel ) = 0;
      virtual HRESULT __stdcall put_DisplayDocumentInformationPanel (
        /*[in]*/ VARIANT_BOOL DisplayDocumentInformationPanel ) = 0;
      virtual HRESULT __stdcall get_Assistance (
        /*[out,retval]*/ __missing_type__ * * Assistance ) = 0;
      virtual HRESULT __stdcall get_ActiveEncryptionSession (
        /*[out,retval]*/ long * ActiveEncryptionSession ) = 0;
      virtual HRESULT __stdcall get_FileConverters (
        /*[out,retval]*/ struct FileConverters * * FileConverters ) = 0;
      virtual HRESULT __stdcall get_SmartArtLayouts (
        /*[out,retval]*/ __missing_type__ * * SmartArtLayouts ) = 0;
      virtual HRESULT __stdcall get_SmartArtQuickStyles (
        /*[out,retval]*/ __missing_type__ * * SmartArtQuickStyles ) = 0;
      virtual HRESULT __stdcall get_SmartArtColors (
        /*[out,retval]*/ __missing_type__ * * SmartArtColors ) = 0;
      virtual HRESULT __stdcall get_ProtectedViewWindows (
        /*[out,retval]*/ struct ProtectedViewWindows * * ProtectedViewWindows ) = 0;
      virtual HRESULT __stdcall get_ActiveProtectedViewWindow (
        /*[out,retval]*/ struct ProtectedViewWindow * * ActiveProtectedViewWindow ) = 0;
      virtual HRESULT __stdcall get_IsSandboxed (
        /*[out,retval]*/ VARIANT_BOOL * IsSandboxed ) = 0;
      virtual HRESULT __stdcall get_ResampleMediaTasks (
        /*[out,retval]*/ struct ResampleMediaTasks * * ResampleMediaTasks ) = 0;
      virtual HRESULT __stdcall raw_StartNewUndoEntry ( ) = 0;
      virtual HRESULT __stdcall get_FileValidation (
        /*[out,retval]*/ __missing_type__ * FileValidation ) = 0;
      virtual HRESULT __stdcall put_FileValidation (
        /*[in]*/ __missing_type__ FileValidation ) = 0;
      virtual HRESULT __stdcall raw_OpenThemeFile (
        /*[in]*/ BSTR themeFileName,
        /*[out,retval]*/ struct Theme * * Theme ) = 0;
      virtual HRESULT __stdcall get_ChartDataPointTrack (
        /*[out,retval]*/ VARIANT_BOOL * pfChartDataPointTrack ) = 0;
      virtual HRESULT __stdcall put_ChartDataPointTrack (
        /*[in]*/ VARIANT_BOOL pfChartDataPointTrack ) = 0;
      virtual HRESULT __stdcall get_DisplayGuides (
        /*[out,retval]*/ __missing_type__ * DisplayGridLines ) = 0;
      virtual HRESULT __stdcall put_DisplayGuides (
        /*[in]*/ __missing_type__ DisplayGridLines ) = 0;
};

struct __declspec(uuid("91493451-5a91-11cf-8700-00aa0060263b"))
_Global : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetActivePresentation))
    _PresentationPtr ActivePresentation;
    __declspec(property(get=GetActiveWindow))
    DocumentWindowPtr ActiveWindow;
    __declspec(property(get=GetAddIns))
    AddInsPtr AddIns;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetAssistant))
    __missing_type__ Assistant;
    __declspec(property(get=GetDialogs))
    IUnknownPtr Dialogs;
    __declspec(property(get=GetPresentations))
    PresentationsPtr Presentations;
    __declspec(property(get=GetSlideShowWindows))
    SlideShowWindowsPtr SlideShowWindows;
    __declspec(property(get=GetWindows))
    DocumentWindowsPtr Windows;
    __declspec(property(get=GetCommandBars))
    __missing_type__ CommandBars;
    __declspec(property(get=GetAnswerWizard))
    __missing_type__ AnswerWizard;
    __declspec(property(get=GetFileConverters))
    FileConvertersPtr FileConverters;
    __declspec(property(get=GetProtectedViewWindows))
    ProtectedViewWindowsPtr ProtectedViewWindows;
    __declspec(property(get=GetActiveProtectedViewWindow))
    ProtectedViewWindowPtr ActiveProtectedViewWindow;
    __declspec(property(get=GetIsSandboxed))
    VARIANT_BOOL IsSandboxed;

    //
    // Wrapper methods for error-handling
    //

    _PresentationPtr GetActivePresentation ( );
    DocumentWindowPtr GetActiveWindow ( );
    AddInsPtr GetAddIns ( );
    _ApplicationPtr GetApplication ( );
    __missing_type__ GetAssistant ( );
    IUnknownPtr GetDialogs ( );
    PresentationsPtr GetPresentations ( );
    SlideShowWindowsPtr GetSlideShowWindows ( );
    DocumentWindowsPtr GetWindows ( );
    __missing_type__ GetCommandBars ( );
    __missing_type__ GetAnswerWizard ( );
    FileConvertersPtr GetFileConverters ( );
    ProtectedViewWindowsPtr GetProtectedViewWindows ( );
    ProtectedViewWindowPtr GetActiveProtectedViewWindow ( );
    VARIANT_BOOL GetIsSandboxed ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ActivePresentation (
        /*[out,retval]*/ struct _Presentation * * ActivePresentation ) = 0;
      virtual HRESULT __stdcall get_ActiveWindow (
        /*[out,retval]*/ struct DocumentWindow * * ActiveWindow ) = 0;
      virtual HRESULT __stdcall get_AddIns (
        /*[out,retval]*/ struct AddIns * * AddIns ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Assistant (
        /*[out,retval]*/ __missing_type__ * * Assistant ) = 0;
      virtual HRESULT __stdcall get_Dialogs (
        /*[out,retval]*/ IUnknown * * Dialogs ) = 0;
      virtual HRESULT __stdcall get_Presentations (
        /*[out,retval]*/ struct Presentations * * Presentations ) = 0;
      virtual HRESULT __stdcall get_SlideShowWindows (
        /*[out,retval]*/ struct SlideShowWindows * * SlideShowWindows ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct DocumentWindows * * Windows ) = 0;
      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ __missing_type__ * * CommandBars ) = 0;
      virtual HRESULT __stdcall get_AnswerWizard (
        /*[out,retval]*/ __missing_type__ * * AnswerWizard ) = 0;
      virtual HRESULT __stdcall get_FileConverters (
        /*[out,retval]*/ struct FileConverters * * FileConverters ) = 0;
      virtual HRESULT __stdcall get_ProtectedViewWindows (
        /*[out,retval]*/ struct ProtectedViewWindows * * ProtectedViewWindows ) = 0;
      virtual HRESULT __stdcall get_ActiveProtectedViewWindow (
        /*[out,retval]*/ struct ProtectedViewWindow * * ActiveProtectedViewWindow ) = 0;
      virtual HRESULT __stdcall get_IsSandboxed (
        /*[out,retval]*/ VARIANT_BOOL * IsSandboxed ) = 0;
};

struct __declspec(uuid("91493454-5a91-11cf-8700-00aa0060263b"))
Selection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum PpSelectionType Type;
    __declspec(property(get=GetSlideRange))
    SlideRangePtr SlideRange;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetTextRange))
    TextRangePtr TextRange;
    __declspec(property(get=GetChildShapeRange))
    ShapeRangePtr ChildShapeRange;
    __declspec(property(get=GetHasChildShapeRange))
    VARIANT_BOOL HasChildShapeRange;
    __declspec(property(get=GetTextRange2))
    __missing_type__ TextRange2;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT Cut ( );
    HRESULT Copy ( );
    HRESULT Delete ( );
    HRESULT Unselect ( );
    enum PpSelectionType GetType ( );
    SlideRangePtr GetSlideRange ( );
    ShapeRangePtr GetShapeRange ( );
    TextRangePtr GetTextRange ( );
    ShapeRangePtr GetChildShapeRange ( );
    VARIANT_BOOL GetHasChildShapeRange ( );
    __missing_type__ GetTextRange2 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Unselect ( ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PpSelectionType * Type ) = 0;
      virtual HRESULT __stdcall get_SlideRange (
        /*[out,retval]*/ struct SlideRange * * SlideRange ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * ShapeRange ) = 0;
      virtual HRESULT __stdcall get_TextRange (
        /*[out,retval]*/ struct TextRange * * TextRange ) = 0;
      virtual HRESULT __stdcall get_ChildShapeRange (
        /*[out,retval]*/ struct ShapeRange * * ChildShapeRange ) = 0;
      virtual HRESULT __stdcall get_HasChildShapeRange (
        /*[out,retval]*/ VARIANT_BOOL * HasChildShapeRange ) = 0;
      virtual HRESULT __stdcall get_TextRange2 (
        /*[out,retval]*/ __missing_type__ * * TextRange2 ) = 0;
};

struct __declspec(uuid("91493457-5a91-11cf-8700-00aa0060263b"))
DocumentWindow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCaption))
    _bstr_t Caption;
    __declspec(property(get=GetHWND))
    long HWND;
    __declspec(property(get=GetActivePane))
    PanePtr ActivePane;
    __declspec(property(get=GetPanes))
    PanesPtr Panes;
    __declspec(property(get=GetSplitVertical,put=PutSplitVertical))
    long SplitVertical;
    __declspec(property(get=GetSplitHorizontal,put=PutSplitHorizontal))
    long SplitHorizontal;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSelection))
    SelectionPtr Selection;
    __declspec(property(get=GetView))
    ViewPtr View;
    __declspec(property(get=GetPresentation))
    _PresentationPtr Presentation;
    __declspec(property(get=GetViewType,put=PutViewType))
    enum PpViewType ViewType;
    __declspec(property(get=GetActive))
    __missing_type__  Active;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum PpWindowState WindowState;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    SelectionPtr GetSelection ( );
    ViewPtr GetView ( );
    _PresentationPtr GetPresentation ( );
    enum PpViewType GetViewType ( );
    void PutViewType (
        enum PpViewType ViewType );
    __missing_type__  GetBlackAndWhite ( );
    void PutBlackAndWhite (
        __missing_type__ BlackAndWhite );
    __missing_type__  GetActive ( );
    enum PpWindowState GetWindowState ( );
    void PutWindowState (
        enum PpWindowState WindowState );
    _bstr_t GetCaption ( );
    float GetLeft ( );
    void PutLeft (
        float Left );
    float GetTop ( );
    void PutTop (
        float Top );
    float GetWidth ( );
    void PutWidth (
        float Width );
    float GetHeight ( );
    void PutHeight (
        float Height );
    HRESULT FitToPage ( );
    HRESULT Activate ( );
    HRESULT LargeScroll (
        int Down,
        int Up,
        int ToRight,
        int ToLeft );
    HRESULT SmallScroll (
        int Down,
        int Up,
        int ToRight,
        int ToLeft );
    DocumentWindowPtr NewWindow ( );
    HRESULT Close ( );
    long GetHWND ( );
    PanePtr GetActivePane ( );
    PanesPtr GetPanes ( );
    long GetSplitVertical ( );
    void PutSplitVertical (
        long SplitVertical );
    long GetSplitHorizontal ( );
    void PutSplitHorizontal (
        long SplitHorizontal );
    IDispatchPtr RangeFromPoint (
        int X,
        int Y );
    int PointsToScreenPixelsX (
        float Points );
    int PointsToScreenPixelsY (
        float Points );
    HRESULT ScrollIntoView (
        float Left,
        float Top,
        float Width,
        float Height,
        __missing_type__ Start );
    VARIANT_BOOL IsSectionExpanded (
        int sectionIndex );
    HRESULT ExpandSection (
        int sectionIndex,
        VARIANT_BOOL Expand );
    HRESULT ShowInsertAppDialog (
        int Filter );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Selection (
        /*[out,retval]*/ struct Selection * * Selection ) = 0;
      virtual HRESULT __stdcall get_View (
        /*[out,retval]*/ struct View * * View ) = 0;
      virtual HRESULT __stdcall get_Presentation (
        /*[out,retval]*/ struct _Presentation * * Presentation ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ enum PpViewType * ViewType ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ enum PpViewType ViewType ) = 0;
      virtual HRESULT __stdcall get_BlackAndWhite (
        /*[out,retval]*/ __missing_type__ * BlackAndWhite ) = 0;
      virtual HRESULT __stdcall put_BlackAndWhite (
        /*[in]*/ __missing_type__ BlackAndWhite ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ __missing_type__ * Active ) = 0;
      virtual HRESULT __stdcall get_WindowState (
        /*[out,retval]*/ enum PpWindowState * WindowState ) = 0;
      virtual HRESULT __stdcall put_WindowState (
        /*[in]*/ enum PpWindowState WindowState ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall raw_FitToPage ( ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_LargeScroll (
        /*[in]*/ int Down,
        /*[in]*/ int Up,
        /*[in]*/ int ToRight,
        /*[in]*/ int ToLeft ) = 0;
      virtual HRESULT __stdcall raw_SmallScroll (
        /*[in]*/ int Down,
        /*[in]*/ int Up,
        /*[in]*/ int ToRight,
        /*[in]*/ int ToLeft ) = 0;
      virtual HRESULT __stdcall raw_NewWindow (
        /*[out,retval]*/ struct DocumentWindow * * NewWindow ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall get_HWND (
        /*[out,retval]*/ long * HWND ) = 0;
      virtual HRESULT __stdcall get_ActivePane (
        /*[out,retval]*/ struct Pane * * ActivePane ) = 0;
      virtual HRESULT __stdcall get_Panes (
        /*[out,retval]*/ struct Panes * * Panes ) = 0;
      virtual HRESULT __stdcall get_SplitVertical (
        /*[out,retval]*/ long * SplitVertical ) = 0;
      virtual HRESULT __stdcall put_SplitVertical (
        /*[in]*/ long SplitVertical ) = 0;
      virtual HRESULT __stdcall get_SplitHorizontal (
        /*[out,retval]*/ long * SplitHorizontal ) = 0;
      virtual HRESULT __stdcall put_SplitHorizontal (
        /*[in]*/ long SplitHorizontal ) = 0;
      virtual HRESULT __stdcall raw_RangeFromPoint (
        /*[in]*/ int X,
        /*[in]*/ int Y,
        /*[out,retval]*/ IDispatch * * RangeFromPoint ) = 0;
      virtual HRESULT __stdcall raw_PointsToScreenPixelsX (
        /*[in]*/ float Points,
        /*[out,retval]*/ int * PointsToScreenPixelsX ) = 0;
      virtual HRESULT __stdcall raw_PointsToScreenPixelsY (
        /*[in]*/ float Points,
        /*[out,retval]*/ int * PointsToScreenPixelsY ) = 0;
      virtual HRESULT __stdcall raw_ScrollIntoView (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[in]*/ __missing_type__ Start ) = 0;
      virtual HRESULT __stdcall raw_IsSectionExpanded (
        /*[in]*/ int sectionIndex,
        /*[out,retval]*/ VARIANT_BOOL * IsSectionExpanded ) = 0;
      virtual HRESULT __stdcall raw_ExpandSection (
        /*[in]*/ int sectionIndex,
        /*[in]*/ VARIANT_BOOL Expand ) = 0;
      virtual HRESULT __stdcall raw_ShowInsertAppDialog (
        /*[in]*/ int Filter ) = 0;
};

struct __declspec(uuid("91493455-5a91-11cf-8700-00aa0060263b"))
DocumentWindows : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    DocumentWindowPtr Item (
        int Index );
    HRESULT Arrange (
        enum PpArrangeStyle arrangeStyle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct DocumentWindow * * Item ) = 0;
      virtual HRESULT __stdcall raw_Arrange (
        /*[in]*/ enum PpArrangeStyle arrangeStyle ) = 0;
};

struct __declspec(uuid("91493469-5a91-11cf-8700-00aa0060263b"))
Slides : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _SlidePtr Item (
        const _variant_t & Index );
    _SlidePtr FindBySlideID (
        long SlideID );
    _SlidePtr Add (
        int Index,
        enum PpSlideLayout Layout );
    int InsertFromFile (
        _bstr_t FileName,
        int Index,
        int SlideStart,
        int SlideEnd );
    SlideRangePtr Range (
        const _variant_t & Index = vtMissing );
    SlideRangePtr Paste (
        int Index );
    _SlidePtr AddSlide (
        int Index,
        struct CustomLayout * pCustomLayout );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct _Slide * * Item ) = 0;
      virtual HRESULT __stdcall raw_FindBySlideID (
        /*[in]*/ long SlideID,
        /*[out,retval]*/ struct _Slide * * FindBySlideID ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ int Index,
        /*[in]*/ enum PpSlideLayout Layout,
        /*[out,retval]*/ struct _Slide * * Add ) = 0;
      virtual HRESULT __stdcall raw_InsertFromFile (
        /*[in]*/ BSTR FileName,
        /*[in]*/ int Index,
        /*[in]*/ int SlideStart,
        /*[in]*/ int SlideEnd,
        /*[out,retval]*/ int * FromFile ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct SlideRange * * Range ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct SlideRange * * Paste ) = 0;
      virtual HRESULT __stdcall raw_AddSlide (
        /*[in]*/ int Index,
        /*[in]*/ struct CustomLayout * pCustomLayout,
        /*[out,retval]*/ struct _Slide * * Slide ) = 0;
};

struct __declspec(uuid("9149346a-5a91-11cf-8700-00aa0060263b"))
_Slide : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetsectionIndex))
    int sectionIndex;
    __declspec(property(get=GetHasNotesPage))
    __missing_type__  HasNotesPage;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetHeadersFooters))
    HeadersFootersPtr HeadersFooters;
    __declspec(property(get=GetSlideShowTransition))
    SlideShowTransitionPtr SlideShowTransition;
    __declspec(property(get=GetColorScheme,put=PutColorScheme))
    ColorSchemePtr ColorScheme;
    __declspec(property(get=GetBackground))
    ShapeRangePtr Background;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetSlideID))
    long SlideID;
    __declspec(property(get=GetPrintSteps))
    int PrintSteps;
    __declspec(property(get=GetLayout,put=PutLayout))
    enum PpSlideLayout Layout;
    __declspec(property(get=GetTags))
    TagsPtr Tags;
    __declspec(property(get=GetSlideIndex))
    int SlideIndex;
    __declspec(property(get=GetSlideNumber))
    int SlideNumber;
    __declspec(property(get=GetNotesPage))
    SlideRangePtr NotesPage;
    __declspec(property(get=GetMaster))
    _MasterPtr Master;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetScripts))
    __missing_type__ Scripts;
    __declspec(property(get=GetComments))
    CommentsPtr Comments;
    __declspec(property(get=GetDesign,put=PutDesign))
    DesignPtr Design;
    __declspec(property(get=GetTimeLine))
    TimeLinePtr TimeLine;
    __declspec(property(get=GetSectionNumber))
    int SectionNumber;
    __declspec(property(get=GetCustomLayout,put=PutCustomLayout))
    CustomLayoutPtr CustomLayout;
    __declspec(property(get=GetThemeColorScheme))
    __missing_type__ ThemeColorScheme;
    __declspec(property(get=GetCustomerData))
    CustomerDataPtr CustomerData;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ShapesPtr GetShapes ( );
    HeadersFootersPtr GetHeadersFooters ( );
    SlideShowTransitionPtr GetSlideShowTransition ( );
    ColorSchemePtr GetColorScheme ( );
    void PutColorScheme (
        struct ColorScheme * ColorScheme );
    ShapeRangePtr GetBackground ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    long GetSlideID ( );
    int GetPrintSteps ( );
    HRESULT Select ( );
    HRESULT Cut ( );
    HRESULT Copy ( );
    enum PpSlideLayout GetLayout ( );
    void PutLayout (
        enum PpSlideLayout Layout );
    SlideRangePtr Duplicate ( );
    HRESULT Delete ( );
    TagsPtr GetTags ( );
    int GetSlideIndex ( );
    int GetSlideNumber ( );
    __missing_type__  GetDisplayMasterShapes ( );
    void PutDisplayMasterShapes (
        __missing_type__ DisplayMasterShapes );
    __missing_type__  GetFollowMasterBackground ( );
    void PutFollowMasterBackground (
        __missing_type__ FollowMasterBackground );
    SlideRangePtr GetNotesPage ( );
    _MasterPtr GetMaster ( );
    HyperlinksPtr GetHyperlinks ( );
    HRESULT Export (
        _bstr_t FileName,
        _bstr_t FilterName,
        int ScaleWidth,
        int ScaleHeight );
    __missing_type__ GetScripts ( );
    CommentsPtr GetComments ( );
    DesignPtr GetDesign ( );
    void PutDesign (
        struct Design * Design );
    HRESULT MoveTo (
        int toPos );
    TimeLinePtr GetTimeLine ( );
    HRESULT ApplyTemplate (
        _bstr_t FileName );
    int GetSectionNumber ( );
    CustomLayoutPtr GetCustomLayout ( );
    void PutCustomLayout (
        struct CustomLayout * CustomLayout );
    HRESULT ApplyTheme (
        _bstr_t themeName );
    __missing_type__ GetThemeColorScheme ( );
    HRESULT ApplyThemeColorScheme (
        _bstr_t themeColorSchemeName );
    __missing_type__  GetBackgroundStyle ( );
    void PutBackgroundStyle (
        __missing_type__ BackgroundStyle );
    CustomerDataPtr GetCustomerData ( );
    HRESULT PublishSlides (
        _bstr_t SlideLibraryUrl,
        VARIANT_BOOL Overwrite,
        VARIANT_BOOL UseSlideOrder );
    HRESULT MoveToSectionStart (
        int toSection );
    int GetsectionIndex ( );
    __missing_type__  GetHasNotesPage ( );
    HRESULT ApplyTemplate2 (
        _bstr_t FileName,
        _bstr_t VariantGUID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * Shapes ) = 0;
      virtual HRESULT __stdcall get_HeadersFooters (
        /*[out,retval]*/ struct HeadersFooters * * HeadersFooters ) = 0;
      virtual HRESULT __stdcall get_SlideShowTransition (
        /*[out,retval]*/ struct SlideShowTransition * * SlideShowTransition ) = 0;
      virtual HRESULT __stdcall get_ColorScheme (
        /*[out,retval]*/ struct ColorScheme * * ColorScheme ) = 0;
      virtual HRESULT __stdcall put_ColorScheme (
        /*[in]*/ struct ColorScheme * ColorScheme ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ struct ShapeRange * * Background ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_SlideID (
        /*[out,retval]*/ long * SlideID ) = 0;
      virtual HRESULT __stdcall get_PrintSteps (
        /*[out,retval]*/ int * PrintSteps ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall get_Layout (
        /*[out,retval]*/ enum PpSlideLayout * Layout ) = 0;
      virtual HRESULT __stdcall put_Layout (
        /*[in]*/ enum PpSlideLayout Layout ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct SlideRange * * Duplicate ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Tags (
        /*[out,retval]*/ struct Tags * * Tags ) = 0;
      virtual HRESULT __stdcall get_SlideIndex (
        /*[out,retval]*/ int * SlideIndex ) = 0;
      virtual HRESULT __stdcall get_SlideNumber (
        /*[out,retval]*/ int * SlideNumber ) = 0;
      virtual HRESULT __stdcall get_DisplayMasterShapes (
        /*[out,retval]*/ __missing_type__ * DisplayMasterShapes ) = 0;
      virtual HRESULT __stdcall put_DisplayMasterShapes (
        /*[in]*/ __missing_type__ DisplayMasterShapes ) = 0;
      virtual HRESULT __stdcall get_FollowMasterBackground (
        /*[out,retval]*/ __missing_type__ * FollowMasterBackground ) = 0;
      virtual HRESULT __stdcall put_FollowMasterBackground (
        /*[in]*/ __missing_type__ FollowMasterBackground ) = 0;
      virtual HRESULT __stdcall get_NotesPage (
        /*[out,retval]*/ struct SlideRange * * NotesPage ) = 0;
      virtual HRESULT __stdcall get_Master (
        /*[out,retval]*/ struct _Master * * Master ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * Hyperlinks ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR FileName,
        /*[in]*/ BSTR FilterName,
        /*[in]*/ int ScaleWidth,
        /*[in]*/ int ScaleHeight ) = 0;
      virtual HRESULT __stdcall get_Scripts (
        /*[out,retval]*/ __missing_type__ * * Scripts ) = 0;
      virtual HRESULT __stdcall get_Comments (
        /*[out,retval]*/ struct Comments * * Comments ) = 0;
      virtual HRESULT __stdcall get_Design (
        /*[out,retval]*/ struct Design * * Design ) = 0;
      virtual HRESULT __stdcall put_Design (
        /*[in]*/ struct Design * Design ) = 0;
      virtual HRESULT __stdcall raw_MoveTo (
        /*[in]*/ int toPos ) = 0;
      virtual HRESULT __stdcall get_TimeLine (
        /*[out,retval]*/ struct TimeLine * * TimeLine ) = 0;
      virtual HRESULT __stdcall raw_ApplyTemplate (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall get_SectionNumber (
        /*[out,retval]*/ int * SectionNumber ) = 0;
      virtual HRESULT __stdcall get_CustomLayout (
        /*[out,retval]*/ struct CustomLayout * * CustomLayout ) = 0;
      virtual HRESULT __stdcall put_CustomLayout (
        /*[in]*/ struct CustomLayout * CustomLayout ) = 0;
      virtual HRESULT __stdcall raw_ApplyTheme (
        /*[in]*/ BSTR themeName ) = 0;
      virtual HRESULT __stdcall get_ThemeColorScheme (
        /*[out,retval]*/ __missing_type__ * * ThemeColorScheme ) = 0;
      virtual HRESULT __stdcall raw_ApplyThemeColorScheme (
        /*[in]*/ BSTR themeColorSchemeName ) = 0;
      virtual HRESULT __stdcall get_BackgroundStyle (
        /*[out,retval]*/ __missing_type__ * BackgroundStyle ) = 0;
      virtual HRESULT __stdcall put_BackgroundStyle (
        /*[in]*/ __missing_type__ BackgroundStyle ) = 0;
      virtual HRESULT __stdcall get_CustomerData (
        /*[out,retval]*/ struct CustomerData * * CustomerData ) = 0;
      virtual HRESULT __stdcall raw_PublishSlides (
        /*[in]*/ BSTR SlideLibraryUrl,
        /*[in]*/ VARIANT_BOOL Overwrite,
        /*[in]*/ VARIANT_BOOL UseSlideOrder ) = 0;
      virtual HRESULT __stdcall raw_MoveToSectionStart (
        /*[in]*/ int toSection ) = 0;
      virtual HRESULT __stdcall get_sectionIndex (
        /*[out,retval]*/ int * sectionIndex ) = 0;
      virtual HRESULT __stdcall get_HasNotesPage (
        /*[out,retval]*/ __missing_type__ * HasNotesPage ) = 0;
      virtual HRESULT __stdcall raw_ApplyTemplate2 (
        /*[in]*/ BSTR FileName,
        /*[in]*/ BSTR VariantGUID ) = 0;
};

struct __declspec(uuid("9149346b-5a91-11cf-8700-00aa0060263b"))
SlideRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetsectionIndex))
    int sectionIndex;
    __declspec(property(get=GetHasNotesPage))
    __missing_type__  HasNotesPage;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetHeadersFooters))
    HeadersFootersPtr HeadersFooters;
    __declspec(property(get=GetSlideShowTransition))
    SlideShowTransitionPtr SlideShowTransition;
    __declspec(property(get=GetColorScheme,put=PutColorScheme))
    ColorSchemePtr ColorScheme;
    __declspec(property(get=GetBackground))
    ShapeRangePtr Background;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetSlideID))
    long SlideID;
    __declspec(property(get=GetPrintSteps))
    int PrintSteps;
    __declspec(property(get=GetLayout,put=PutLayout))
    enum PpSlideLayout Layout;
    __declspec(property(get=GetTags))
    TagsPtr Tags;
    __declspec(property(get=GetSlideIndex))
    int SlideIndex;
    __declspec(property(get=GetSlideNumber))
    int SlideNumber;
    __declspec(property(get=GetNotesPage))
    SlideRangePtr NotesPage;
    __declspec(property(get=GetMaster))
    _MasterPtr Master;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetScripts))
    __missing_type__ Scripts;
    __declspec(property(get=GetComments))
    CommentsPtr Comments;
    __declspec(property(get=GetDesign,put=PutDesign))
    DesignPtr Design;
    __declspec(property(get=GetTimeLine))
    TimeLinePtr TimeLine;
    __declspec(property(get=GetSectionNumber))
    int SectionNumber;
    __declspec(property(get=GetCustomLayout,put=PutCustomLayout))
    CustomLayoutPtr CustomLayout;
    __declspec(property(get=GetThemeColorScheme))
    __missing_type__ ThemeColorScheme;
    __declspec(property(get=GetCustomerData))
    CustomerDataPtr CustomerData;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ShapesPtr GetShapes ( );
    HeadersFootersPtr GetHeadersFooters ( );
    SlideShowTransitionPtr GetSlideShowTransition ( );
    ColorSchemePtr GetColorScheme ( );
    void PutColorScheme (
        struct ColorScheme * ColorScheme );
    ShapeRangePtr GetBackground ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    long GetSlideID ( );
    int GetPrintSteps ( );
    HRESULT Select ( );
    HRESULT Cut ( );
    HRESULT Copy ( );
    enum PpSlideLayout GetLayout ( );
    void PutLayout (
        enum PpSlideLayout Layout );
    SlideRangePtr Duplicate ( );
    HRESULT Delete ( );
    TagsPtr GetTags ( );
    int GetSlideIndex ( );
    int GetSlideNumber ( );
    __missing_type__  GetDisplayMasterShapes ( );
    void PutDisplayMasterShapes (
        __missing_type__ DisplayMasterShapes );
    __missing_type__  GetFollowMasterBackground ( );
    void PutFollowMasterBackground (
        __missing_type__ FollowMasterBackground );
    SlideRangePtr GetNotesPage ( );
    _MasterPtr GetMaster ( );
    HyperlinksPtr GetHyperlinks ( );
    HRESULT Export (
        _bstr_t FileName,
        _bstr_t FilterName,
        int ScaleWidth,
        int ScaleHeight );
    _SlidePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    _variant_t _Index (
        int Index );
    long GetCount ( );
    __missing_type__ GetScripts ( );
    CommentsPtr GetComments ( );
    DesignPtr GetDesign ( );
    void PutDesign (
        struct Design * Design );
    HRESULT MoveTo (
        int toPos );
    TimeLinePtr GetTimeLine ( );
    HRESULT ApplyTemplate (
        _bstr_t FileName );
    int GetSectionNumber ( );
    CustomLayoutPtr GetCustomLayout ( );
    void PutCustomLayout (
        struct CustomLayout * CustomLayout );
    HRESULT ApplyTheme (
        _bstr_t themeName );
    __missing_type__ GetThemeColorScheme ( );
    HRESULT ApplyThemeColorScheme (
        _bstr_t themeColorSchemeName );
    __missing_type__  GetBackgroundStyle ( );
    void PutBackgroundStyle (
        __missing_type__ BackgroundStyle );
    CustomerDataPtr GetCustomerData ( );
    HRESULT PublishSlides (
        _bstr_t SlideLibraryUrl,
        VARIANT_BOOL Overwrite,
        VARIANT_BOOL UseSlideOrder );
    HRESULT MoveToSectionStart (
        int toSection );
    int GetsectionIndex ( );
    __missing_type__  GetHasNotesPage ( );
    HRESULT ApplyTemplate2 (
        _bstr_t FileName,
        _bstr_t VariantGUID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * Shapes ) = 0;
      virtual HRESULT __stdcall get_HeadersFooters (
        /*[out,retval]*/ struct HeadersFooters * * HeadersFooters ) = 0;
      virtual HRESULT __stdcall get_SlideShowTransition (
        /*[out,retval]*/ struct SlideShowTransition * * SlideShowTransition ) = 0;
      virtual HRESULT __stdcall get_ColorScheme (
        /*[out,retval]*/ struct ColorScheme * * ColorScheme ) = 0;
      virtual HRESULT __stdcall put_ColorScheme (
        /*[in]*/ struct ColorScheme * ColorScheme ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ struct ShapeRange * * Background ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_SlideID (
        /*[out,retval]*/ long * SlideID ) = 0;
      virtual HRESULT __stdcall get_PrintSteps (
        /*[out,retval]*/ int * PrintSteps ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall get_Layout (
        /*[out,retval]*/ enum PpSlideLayout * Layout ) = 0;
      virtual HRESULT __stdcall put_Layout (
        /*[in]*/ enum PpSlideLayout Layout ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct SlideRange * * Duplicate ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Tags (
        /*[out,retval]*/ struct Tags * * Tags ) = 0;
      virtual HRESULT __stdcall get_SlideIndex (
        /*[out,retval]*/ int * SlideIndex ) = 0;
      virtual HRESULT __stdcall get_SlideNumber (
        /*[out,retval]*/ int * SlideNumber ) = 0;
      virtual HRESULT __stdcall get_DisplayMasterShapes (
        /*[out,retval]*/ __missing_type__ * DisplayMasterShapes ) = 0;
      virtual HRESULT __stdcall put_DisplayMasterShapes (
        /*[in]*/ __missing_type__ DisplayMasterShapes ) = 0;
      virtual HRESULT __stdcall get_FollowMasterBackground (
        /*[out,retval]*/ __missing_type__ * FollowMasterBackground ) = 0;
      virtual HRESULT __stdcall put_FollowMasterBackground (
        /*[in]*/ __missing_type__ FollowMasterBackground ) = 0;
      virtual HRESULT __stdcall get_NotesPage (
        /*[out,retval]*/ struct SlideRange * * NotesPage ) = 0;
      virtual HRESULT __stdcall get_Master (
        /*[out,retval]*/ struct _Master * * Master ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * Hyperlinks ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR FileName,
        /*[in]*/ BSTR FilterName,
        /*[in]*/ int ScaleWidth,
        /*[in]*/ int ScaleHeight ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct _Slide * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw__Index (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT * _Index ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Scripts (
        /*[out,retval]*/ __missing_type__ * * Scripts ) = 0;
      virtual HRESULT __stdcall get_Comments (
        /*[out,retval]*/ struct Comments * * Comments ) = 0;
      virtual HRESULT __stdcall get_Design (
        /*[out,retval]*/ struct Design * * Design ) = 0;
      virtual HRESULT __stdcall put_Design (
        /*[in]*/ struct Design * Design ) = 0;
      virtual HRESULT __stdcall raw_MoveTo (
        /*[in]*/ int toPos ) = 0;
      virtual HRESULT __stdcall get_TimeLine (
        /*[out,retval]*/ struct TimeLine * * TimeLine ) = 0;
      virtual HRESULT __stdcall raw_ApplyTemplate (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall get_SectionNumber (
        /*[out,retval]*/ int * SectionNumber ) = 0;
      virtual HRESULT __stdcall get_CustomLayout (
        /*[out,retval]*/ struct CustomLayout * * CustomLayout ) = 0;
      virtual HRESULT __stdcall put_CustomLayout (
        /*[in]*/ struct CustomLayout * CustomLayout ) = 0;
      virtual HRESULT __stdcall raw_ApplyTheme (
        /*[in]*/ BSTR themeName ) = 0;
      virtual HRESULT __stdcall get_ThemeColorScheme (
        /*[out,retval]*/ __missing_type__ * * ThemeColorScheme ) = 0;
      virtual HRESULT __stdcall raw_ApplyThemeColorScheme (
        /*[in]*/ BSTR themeColorSchemeName ) = 0;
      virtual HRESULT __stdcall get_BackgroundStyle (
        /*[out,retval]*/ __missing_type__ * BackgroundStyle ) = 0;
      virtual HRESULT __stdcall put_BackgroundStyle (
        /*[in]*/ __missing_type__ BackgroundStyle ) = 0;
      virtual HRESULT __stdcall get_CustomerData (
        /*[out,retval]*/ struct CustomerData * * CustomerData ) = 0;
      virtual HRESULT __stdcall raw_PublishSlides (
        /*[in]*/ BSTR SlideLibraryUrl,
        /*[in]*/ VARIANT_BOOL Overwrite,
        /*[in]*/ VARIANT_BOOL UseSlideOrder ) = 0;
      virtual HRESULT __stdcall raw_MoveToSectionStart (
        /*[in]*/ int toSection ) = 0;
      virtual HRESULT __stdcall get_sectionIndex (
        /*[out,retval]*/ int * sectionIndex ) = 0;
      virtual HRESULT __stdcall get_HasNotesPage (
        /*[out,retval]*/ __missing_type__ * HasNotesPage ) = 0;
      virtual HRESULT __stdcall raw_ApplyTemplate2 (
        /*[in]*/ BSTR FileName,
        /*[in]*/ BSTR VariantGUID ) = 0;
};

struct __declspec(uuid("9149346c-5a91-11cf-8700-00aa0060263b"))
_Master : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSlideShowTransition))
    SlideShowTransitionPtr SlideShowTransition;
    __declspec(property(get=GetCustomLayouts))
    CustomLayoutsPtr CustomLayouts;
    __declspec(property(get=GetTheme))
    __missing_type__ Theme;
    __declspec(property(get=GetCustomerData))
    CustomerDataPtr CustomerData;
    __declspec(property(get=GetGuides))
    GuidesPtr Guides;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetHeadersFooters))
    HeadersFootersPtr HeadersFooters;
    __declspec(property(get=GetColorScheme,put=PutColorScheme))
    ColorSchemePtr ColorScheme;
    __declspec(property(get=GetBackground))
    ShapeRangePtr Background;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetHeight))
    float Height;
    __declspec(property(get=GetWidth))
    float Width;
    __declspec(property(get=GetTextStyles))
    TextStylesPtr TextStyles;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetScripts))
    __missing_type__ Scripts;
    __declspec(property(get=GetDesign))
    DesignPtr Design;
    __declspec(property(get=GetTimeLine))
    TimeLinePtr TimeLine;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ShapesPtr GetShapes ( );
    HeadersFootersPtr GetHeadersFooters ( );
    ColorSchemePtr GetColorScheme ( );
    void PutColorScheme (
        struct ColorScheme * ColorScheme );
    ShapeRangePtr GetBackground ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    HRESULT Delete ( );
    float GetHeight ( );
    float GetWidth ( );
    TextStylesPtr GetTextStyles ( );
    HyperlinksPtr GetHyperlinks ( );
    __missing_type__ GetScripts ( );
    DesignPtr GetDesign ( );
    TimeLinePtr GetTimeLine ( );
    SlideShowTransitionPtr GetSlideShowTransition ( );
    CustomLayoutsPtr GetCustomLayouts ( );
    __missing_type__ GetTheme ( );
    HRESULT ApplyTheme (
        _bstr_t themeName );
    __missing_type__  GetBackgroundStyle ( );
    void PutBackgroundStyle (
        __missing_type__ BackgroundStyle );
    CustomerDataPtr GetCustomerData ( );
    GuidesPtr GetGuides ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * Shapes ) = 0;
      virtual HRESULT __stdcall get_HeadersFooters (
        /*[out,retval]*/ struct HeadersFooters * * HeadersFooters ) = 0;
      virtual HRESULT __stdcall get_ColorScheme (
        /*[out,retval]*/ struct ColorScheme * * ColorScheme ) = 0;
      virtual HRESULT __stdcall put_ColorScheme (
        /*[in]*/ struct ColorScheme * ColorScheme ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ struct ShapeRange * * Background ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall get_TextStyles (
        /*[out,retval]*/ struct TextStyles * * TextStyles ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * Hyperlinks ) = 0;
      virtual HRESULT __stdcall get_Scripts (
        /*[out,retval]*/ __missing_type__ * * Scripts ) = 0;
      virtual HRESULT __stdcall get_Design (
        /*[out,retval]*/ struct Design * * Design ) = 0;
      virtual HRESULT __stdcall get_TimeLine (
        /*[out,retval]*/ struct TimeLine * * TimeLine ) = 0;
      virtual HRESULT __stdcall get_SlideShowTransition (
        /*[out,retval]*/ struct SlideShowTransition * * SlideShowTransition ) = 0;
      virtual HRESULT __stdcall get_CustomLayouts (
        /*[out,retval]*/ struct CustomLayouts * * CustomLayouts ) = 0;
      virtual HRESULT __stdcall get_Theme (
        /*[out,retval]*/ __missing_type__ * * Theme ) = 0;
      virtual HRESULT __stdcall raw_ApplyTheme (
        /*[in]*/ BSTR themeName ) = 0;
      virtual HRESULT __stdcall get_BackgroundStyle (
        /*[out,retval]*/ __missing_type__ * BackgroundStyle ) = 0;
      virtual HRESULT __stdcall put_BackgroundStyle (
        /*[in]*/ __missing_type__ BackgroundStyle ) = 0;
      virtual HRESULT __stdcall get_CustomerData (
        /*[out,retval]*/ struct CustomerData * * CustomerData ) = 0;
      virtual HRESULT __stdcall get_Guides (
        /*[out,retval]*/ struct Guides * * Guides ) = 0;
};

struct __declspec(uuid("914934d7-5a91-11cf-8700-00aa0060263b"))
Design : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSlideMaster))
    _MasterPtr SlideMaster;
    __declspec(property(get=GetTitleMaster))
    _MasterPtr TitleMaster;
    __declspec(property(get=GetHasTitleMaster))
    __missing_type__  HasTitleMaster;
    __declspec(property(get=GetIndex))
    int Index;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _MasterPtr GetSlideMaster ( );
    _MasterPtr GetTitleMaster ( );
    __missing_type__  GetHasTitleMaster ( );
    _MasterPtr AddTitleMaster ( );
    int GetIndex ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    __missing_type__  GetPreserved ( );
    void PutPreserved (
        __missing_type__ Preserved );
    HRESULT MoveTo (
        int toPos );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_SlideMaster (
        /*[out,retval]*/ struct _Master * * SlideMaster ) = 0;
      virtual HRESULT __stdcall get_TitleMaster (
        /*[out,retval]*/ struct _Master * * TitleMaster ) = 0;
      virtual HRESULT __stdcall get_HasTitleMaster (
        /*[out,retval]*/ __missing_type__ * HasTitleMaster ) = 0;
      virtual HRESULT __stdcall raw_AddTitleMaster (
        /*[out,retval]*/ struct _Master * * TitleMaster ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ int * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Preserved (
        /*[out,retval]*/ __missing_type__ * Preserved ) = 0;
      virtual HRESULT __stdcall put_Preserved (
        /*[in]*/ __missing_type__ Preserved ) = 0;
      virtual HRESULT __stdcall raw_MoveTo (
        /*[in]*/ int toPos ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("914934d6-5a91-11cf-8700-00aa0060263b"))
Designs : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    DesignPtr Item (
        const _variant_t & Index );
    DesignPtr Add (
        _bstr_t designName,
        int Index );
    DesignPtr Load (
        _bstr_t TemplateName,
        int Index );
    DesignPtr Clone (
        struct Design * pOriginal,
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Design * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR designName,
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Design * * Add ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR TemplateName,
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Design * * Load ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[in]*/ struct Design * pOriginal,
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Design * * Clone ) = 0;
};

struct __declspec(uuid("91493475-5a91-11cf-8700-00aa0060263b"))
Shapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetHasTitle))
    __missing_type__  HasTitle;
    __declspec(property(get=GetTitle))
    ShapePtr Title;
    __declspec(property(get=GetPlaceholders))
    PlaceholdersPtr Placeholders;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapePtr AddCallout (
        __missing_type__ Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddConnector (
        __missing_type__ Type,
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddCurve (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddLabel (
        __missing_type__ Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddPicture (
        _bstr_t FileName,
        __missing_type__ LinkToFile,
        __missing_type__ SaveWithDocument,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddPolyline (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddShape (
        __missing_type__ Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddTextEffect (
        __missing_type__ PresetTextEffect,
        _bstr_t Text,
        _bstr_t FontName,
        float FontSize,
        __missing_type__ FontBold,
        __missing_type__ FontItalic,
        float Left,
        float Top );
    ShapePtr AddTextbox (
        __missing_type__ Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    FreeformBuilderPtr BuildFreeform (
        __missing_type__ EditingType,
        float X1,
        float Y1 );
    HRESULT SelectAll ( );
    ShapeRangePtr Range (
        const _variant_t & Index = vtMissing );
    __missing_type__  GetHasTitle ( );
    ShapePtr AddTitle ( );
    ShapePtr GetTitle ( );
    PlaceholdersPtr GetPlaceholders ( );
    ShapePtr AddOLEObject (
        float Left,
        float Top,
        float Width,
        float Height,
        _bstr_t ClassName,
        _bstr_t FileName,
        __missing_type__ DisplayAsIcon,
        _bstr_t IconFileName,
        int IconIndex,
        _bstr_t IconLabel,
        __missing_type__ Link );
    ShapePtr AddComment (
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddPlaceholder (
        enum PpPlaceholderType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddMediaObject (
        _bstr_t FileName,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapeRangePtr Paste ( );
    ShapePtr AddTable (
        int NumRows,
        int NumColumns,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapeRangePtr PasteSpecial (
        enum PpPasteDataType DataType,
        __missing_type__ DisplayAsIcon,
        _bstr_t IconFileName,
        int IconIndex,
        _bstr_t IconLabel,
        __missing_type__ Link );
    ShapePtr AddDiagram (
        __missing_type__ Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddCanvas (
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddChart (
        __missing_type__ Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddMediaObject2 (
        _bstr_t FileName,
        __missing_type__ LinkToFile,
        __missing_type__ SaveWithDocument,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddMediaObjectFromEmbedTag (
        _bstr_t EmbedTag,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddSmartArt (
        __missing_type__ * Layout,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddChart2 (
        int Style,
        __missing_type__ Type,
        float Left,
        float Top,
        float Width,
        float Height,
        VARIANT_BOOL NewLayout );
    ShapePtr AddPicture2 (
        _bstr_t FileName,
        __missing_type__ LinkToFile,
        __missing_type__ SaveWithDocument,
        float Left,
        float Top,
        float Width,
        float Height,
        __missing_type__ compress );
    ShapePtr AddInkShapeFromXML (
        _bstr_t InkXML,
        float Left,
        float Top,
        float Width,
        float Height );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw_AddCallout (
        /*[in]*/ __missing_type__ Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Callout ) = 0;
      virtual HRESULT __stdcall raw_AddConnector (
        /*[in]*/ __missing_type__ Type,
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY,
        /*[out,retval]*/ struct Shape * * Connector ) = 0;
      virtual HRESULT __stdcall raw_AddCurve (
        /*[in]*/ VARIANT SafeArrayOfPoints,
        /*[out,retval]*/ struct Shape * * Curve ) = 0;
      virtual HRESULT __stdcall raw_AddLabel (
        /*[in]*/ __missing_type__ Orientation,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Label ) = 0;
      virtual HRESULT __stdcall raw_AddLine (
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY,
        /*[out,retval]*/ struct Shape * * Line ) = 0;
      virtual HRESULT __stdcall raw_AddPicture (
        /*[in]*/ BSTR FileName,
        /*[in]*/ __missing_type__ LinkToFile,
        /*[in]*/ __missing_type__ SaveWithDocument,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Picture ) = 0;
      virtual HRESULT __stdcall raw_AddPolyline (
        /*[in]*/ VARIANT SafeArrayOfPoints,
        /*[out,retval]*/ struct Shape * * Polyline ) = 0;
      virtual HRESULT __stdcall raw_AddShape (
        /*[in]*/ __missing_type__ Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
      virtual HRESULT __stdcall raw_AddTextEffect (
        /*[in]*/ __missing_type__ PresetTextEffect,
        /*[in]*/ BSTR Text,
        /*[in]*/ BSTR FontName,
        /*[in]*/ float FontSize,
        /*[in]*/ __missing_type__ FontBold,
        /*[in]*/ __missing_type__ FontItalic,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[out,retval]*/ struct Shape * * TextEffect ) = 0;
      virtual HRESULT __stdcall raw_AddTextbox (
        /*[in]*/ __missing_type__ Orientation,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Textbox ) = 0;
      virtual HRESULT __stdcall raw_BuildFreeform (
        /*[in]*/ __missing_type__ EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[out,retval]*/ struct FreeformBuilder * * FreeformBuilder ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ShapeRange * * Range ) = 0;
      virtual HRESULT __stdcall get_HasTitle (
        /*[out,retval]*/ __missing_type__ * HasTitle ) = 0;
      virtual HRESULT __stdcall raw_AddTitle (
        /*[out,retval]*/ struct Shape * * Title ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ struct Shape * * Title ) = 0;
      virtual HRESULT __stdcall get_Placeholders (
        /*[out,retval]*/ struct Placeholders * * Placeholders ) = 0;
      virtual HRESULT __stdcall raw_AddOLEObject (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[in]*/ BSTR ClassName,
        /*[in]*/ BSTR FileName,
        /*[in]*/ __missing_type__ DisplayAsIcon,
        /*[in]*/ BSTR IconFileName,
        /*[in]*/ int IconIndex,
        /*[in]*/ BSTR IconLabel,
        /*[in]*/ __missing_type__ Link,
        /*[out,retval]*/ struct Shape * * OLEObject ) = 0;
      virtual HRESULT __stdcall raw_AddComment (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Comment ) = 0;
      virtual HRESULT __stdcall raw_AddPlaceholder (
        /*[in]*/ enum PpPlaceholderType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Placeholder ) = 0;
      virtual HRESULT __stdcall raw_AddMediaObject (
        /*[in]*/ BSTR FileName,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * MediaObject ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[out,retval]*/ struct ShapeRange * * Paste ) = 0;
      virtual HRESULT __stdcall raw_AddTable (
        /*[in]*/ int NumRows,
        /*[in]*/ int NumColumns,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Table ) = 0;
      virtual HRESULT __stdcall raw_PasteSpecial (
        /*[in]*/ enum PpPasteDataType DataType,
        /*[in]*/ __missing_type__ DisplayAsIcon,
        /*[in]*/ BSTR IconFileName,
        /*[in]*/ int IconIndex,
        /*[in]*/ BSTR IconLabel,
        /*[in]*/ __missing_type__ Link,
        /*[out,retval]*/ struct ShapeRange * * PasteSpecial ) = 0;
      virtual HRESULT __stdcall raw_AddDiagram (
        /*[in]*/ __missing_type__ Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Diagram ) = 0;
      virtual HRESULT __stdcall raw_AddCanvas (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
      virtual HRESULT __stdcall raw_AddChart (
        /*[in]*/ __missing_type__ Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Chart ) = 0;
      virtual HRESULT __stdcall raw_AddMediaObject2 (
        /*[in]*/ BSTR FileName,
        /*[in]*/ __missing_type__ LinkToFile,
        /*[in]*/ __missing_type__ SaveWithDocument,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * MediaObject2 ) = 0;
      virtual HRESULT __stdcall raw_AddMediaObjectFromEmbedTag (
        /*[in]*/ BSTR EmbedTag,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * MediaObjectFromEmbedTag ) = 0;
      virtual HRESULT __stdcall raw_AddSmartArt (
        /*[in]*/ __missing_type__ * Layout,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * SmartArt ) = 0;
      virtual HRESULT __stdcall raw_AddChart2 (
        /*[in]*/ int Style,
        /*[in]*/ __missing_type__ Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[in]*/ VARIANT_BOOL NewLayout,
        /*[out,retval]*/ struct Shape * * Chart ) = 0;
      virtual HRESULT __stdcall raw_AddPicture2 (
        /*[in]*/ BSTR FileName,
        /*[in]*/ __missing_type__ LinkToFile,
        /*[in]*/ __missing_type__ SaveWithDocument,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[in]*/ __missing_type__ compress,
        /*[out,retval]*/ struct Shape * * Picture ) = 0;
      virtual HRESULT __stdcall raw_AddInkShapeFromXML (
        /*[in]*/ BSTR InkXML,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
};

struct __declspec(uuid("92d41a55-f07e-4ca4-af6f-bef486aa4e6f"))
Chart : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetArea3DGroup))
    ChartGroupPtr Area3DGroup[];
    __declspec(property(get=GetBar3DGroup))
    ChartGroupPtr Bar3DGroup[];
    __declspec(property(get=GetColumn3DGroup))
    ChartGroupPtr Column3DGroup[];
    __declspec(property(get=GetLine3DGroup))
    ChartGroupPtr Line3DGroup[];
    __declspec(property(get=GetPie3DGroup))
    ChartGroupPtr Pie3DGroup[];
    __declspec(property(get=GetSurfaceGroup))
    ChartGroupPtr SurfaceGroup[];
    __declspec(property(get=GetDataTable))
    DataTablePtr DataTable;
    __declspec(property(get=GetBarShape,put=PutBarShape))
    enum XlBarShape BarShape;
    __declspec(property(get=GetShowDataLabelsOverMaximum,put=PutShowDataLabelsOverMaximum))
    VARIANT_BOOL ShowDataLabelsOverMaximum;
    __declspec(property(get=GetChartData))
    ChartDataPtr ChartData;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetAutoScaling,put=PutAutoScaling))
    VARIANT_BOOL AutoScaling[];
    __declspec(property(get=GetChartArea))
    ChartAreaPtr ChartArea[];
    __declspec(property(get=GetChartTitle))
    ChartTitlePtr ChartTitle[];
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCorners))
    CornersPtr Corners[];
    __declspec(property(get=GetChartStyle,put=PutChartStyle))
    _variant_t ChartStyle;
    __declspec(property(get=GetDepthPercent,put=PutDepthPercent))
    long DepthPercent[];
    __declspec(property(get=GetDisplayBlanksAs,put=PutDisplayBlanksAs))
    enum XlDisplayBlanksAs DisplayBlanksAs[];
    __declspec(property(get=GetElevation,put=PutElevation))
    long Elevation[];
    __declspec(property(get=GetFloor))
    FloorPtr Floor[];
    __declspec(property(get=GetGapDepth,put=PutGapDepth))
    long GapDepth[];
    __declspec(property(get=GetHasAxis,put=PutHasAxis))
    _variant_t HasAxis[][][];
    __declspec(property(get=GetHasLegend,put=PutHasLegend))
    VARIANT_BOOL HasLegend[];
    __declspec(property(get=GetHasTitle,put=PutHasTitle))
    VARIANT_BOOL HasTitle[];
    __declspec(property(get=GetHeightPercent,put=PutHeightPercent))
    long HeightPercent[];
    __declspec(property(get=GetHasPivotFields,put=PutHasPivotFields))
    VARIANT_BOOL HasPivotFields;
    __declspec(property(get=GetLegend))
    LegendPtr Legend[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPerspective,put=PutPerspective))
    long Perspective[];
    __declspec(property(get=GetPlotArea))
    PlotAreaPtr PlotArea[];
    __declspec(property(get=GetRightAngleAxes,put=PutRightAngleAxes))
    _variant_t RightAngleAxes[];
    __declspec(property(get=GetRotation,put=PutRotation))
    _variant_t Rotation[];
    __declspec(property(get=GetPlotVisibleOnly,put=PutPlotVisibleOnly))
    VARIANT_BOOL PlotVisibleOnly[];
    __declspec(property(get=GetChartColor,put=PutChartColor))
    _variant_t ChartColor;
    __declspec(property(get=GetSubtype,put=PutSubtype))
    long Subtype[];
    __declspec(property(get=GetType,put=PutType))
    long Type[];
    __declspec(property(get=GetWalls))
    WallsPtr Walls[];
    __declspec(property(get=GetBackWall))
    WallsPtr BackWall;
    __declspec(property(get=GetShowReportFilterFieldButtons,put=PutShowReportFilterFieldButtons))
    VARIANT_BOOL ShowReportFilterFieldButtons;
    __declspec(property(get=GetShowLegendFieldButtons,put=PutShowLegendFieldButtons))
    VARIANT_BOOL ShowLegendFieldButtons;
    __declspec(property(get=GetShowAxisFieldButtons,put=PutShowAxisFieldButtons))
    VARIANT_BOOL ShowAxisFieldButtons;
    __declspec(property(get=GetShowValueFieldButtons,put=PutShowValueFieldButtons))
    VARIANT_BOOL ShowValueFieldButtons;
    __declspec(property(get=GetShowAllFieldButtons,put=PutShowAllFieldButtons))
    VARIANT_BOOL ShowAllFieldButtons;
    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetHasDataTable,put=PutHasDataTable))
    VARIANT_BOOL HasDataTable;
    __declspec(property(get=GetCategoryLabelLevel,put=PutCategoryLabelLevel))
    enum XlCategoryLabelLevel CategoryLabelLevel;
    __declspec(property(get=GetSeriesNameLevel,put=PutSeriesNameLevel))
    enum XlSeriesNameLevel SeriesNameLevel;
    __declspec(property(get=GetHasHiddenContent))
    VARIANT_BOOL HasHiddenContent;
    __declspec(property(get=GetFormat))
    ChartFormatPtr Format;
    __declspec(property(get=GetSideWall))
    WallsPtr SideWall;
    __declspec(property(get=GetPlotBy,put=PutPlotBy))
    enum XlRowCol PlotBy;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        const _variant_t & ShowSeriesName = vtMissing,
        const _variant_t & ShowCategoryName = vtMissing,
        const _variant_t & ShowValue = vtMissing,
        const _variant_t & ShowPercentage = vtMissing,
        const _variant_t & ShowBubbleSize = vtMissing,
        const _variant_t & Separator = vtMissing );
    __missing_type__  GetChartType ( );
    void PutChartType (
        __missing_type__ RHS );
    VARIANT_BOOL GetHasDataTable ( );
    void PutHasDataTable (
        VARIANT_BOOL RHS );
    HRESULT ApplyCustomType (
        __missing_type__ ChartType,
        const _variant_t & TypeName = vtMissing );
    HRESULT GetChartElement (
        long X,
        long Y,
        long * ElementID,
        long * Arg1,
        long * Arg2 );
    HRESULT SetSourceData (
        _bstr_t Source,
        const _variant_t & PlotBy = vtMissing );
    enum XlRowCol GetPlotBy ( );
    void PutPlotBy (
        enum XlRowCol PlotBy );
    HRESULT AutoFormat (
        long Gallery,
        const _variant_t & Format = vtMissing );
    HRESULT SetBackgroundPicture (
        _bstr_t FileName );
    DataTablePtr GetDataTable ( );
    HRESULT Paste (
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    enum XlBarShape GetBarShape ( );
    void PutBarShape (
        enum XlBarShape RHS );
    HRESULT SetDefaultChart (
        const _variant_t & Name );
    HRESULT ApplyChartTemplate (
        _bstr_t FileName );
    HRESULT SaveChartTemplate (
        _bstr_t FileName );
    WallsPtr GetSideWall ( );
    WallsPtr GetBackWall ( );
    _variant_t GetChartStyle ( );
    void PutChartStyle (
        const _variant_t & RHS );
    HRESULT ClearToMatchStyle ( );
    VARIANT_BOOL GetHasPivotFields ( );
    void PutHasPivotFields (
        VARIANT_BOOL RHS );
    void PutShowDataLabelsOverMaximum (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowDataLabelsOverMaximum ( );
    HRESULT ApplyLayout (
        long Layout,
        const _variant_t & ChartType = vtMissing );
    HRESULT Refresh ( );
    ChartDataPtr GetChartData ( );
    ShapesPtr GetShapes ( );
    long GetCreator ( );
    ChartGroupPtr GetArea3DGroup (
        long lcid = 0 );
    IDispatchPtr AreaGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartGroupPtr GetBar3DGroup (
        long lcid = 0 );
    IDispatchPtr BarGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartGroupPtr GetColumn3DGroup (
        long lcid = 0 );
    IDispatchPtr ColumnGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartGroupPtr GetLine3DGroup (
        long lcid = 0 );
    IDispatchPtr LineGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartGroupPtr GetPie3DGroup (
        long lcid = 0 );
    IDispatchPtr PieGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DoughnutGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr RadarGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartGroupPtr GetSurfaceGroup (
        long lcid = 0 );
    IDispatchPtr XYGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _ApplicationPtr GetApplication ( );
    HRESULT _ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        long lcid = 0 );
    void PutAutoScaling (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAutoScaling (
        long lcid = 0 );
    IDispatchPtr Axes (
        const _variant_t & Type,
        enum XlAxisGroup AxisGroup,
        long lcid = 0 );
    ChartAreaPtr GetChartArea (
        long lcid = 0 );
    IDispatchPtr ChartGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartTitlePtr GetChartTitle (
        long lcid = 0 );
    HRESULT ChartWizard (
        const _variant_t & Source = vtMissing,
        const _variant_t & Gallery = vtMissing,
        const _variant_t & Format = vtMissing,
        const _variant_t & PlotBy = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & HasLegend = vtMissing,
        const _variant_t & Title = vtMissing,
        const _variant_t & CategoryTitle = vtMissing,
        const _variant_t & ValueTitle = vtMissing,
        const _variant_t & ExtraTitle = vtMissing,
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    HRESULT CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        enum XlPictureAppearance Size,
        long LocaleID = 0 );
    CornersPtr GetCorners (
        long lcid = 0 );
    HRESULT Delete (
        long lcid = 0 );
    long GetDepthPercent (
        long lcid = 0 );
    void PutDepthPercent (
        long lcid,
        long RHS );
    enum XlDisplayBlanksAs GetDisplayBlanksAs (
        long lcid = 0 );
    void PutDisplayBlanksAs (
        long lcid,
        enum XlDisplayBlanksAs RHS );
    long GetElevation (
        long lcid = 0 );
    void PutElevation (
        long lcid,
        long RHS );
    VARIANT_BOOL Export (
        _bstr_t FileName,
        const _variant_t & FilterName = vtMissing,
        const _variant_t & Interactive = vtMissing );
    FloorPtr GetFloor (
        long lcid = 0 );
    long GetGapDepth (
        long lcid = 0 );
    void PutGapDepth (
        long lcid,
        long RHS );
    _variant_t GetHasAxis (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing,
        long lcid = 0 );
    void PutHasAxis (
        const _variant_t & Index1,
        const _variant_t & Index2 = vtMissing,
        long lcid = 0,
        const _variant_t & RHS = vtMissing );
    VARIANT_BOOL GetHasLegend (
        long lcid = 0 );
    void PutHasLegend (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasTitle (
        long lcid = 0 );
    void PutHasTitle (
        long lcid,
        VARIANT_BOOL RHS );
    long GetHeightPercent (
        long lcid = 0 );
    void PutHeightPercent (
        long lcid,
        long RHS );
    LegendPtr GetLegend (
        long lcid = 0 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    long GetPerspective (
        long lcid = 0 );
    void PutPerspective (
        long lcid,
        long RHS );
    PlotAreaPtr GetPlotArea (
        long lcid = 0 );
    VARIANT_BOOL GetPlotVisibleOnly (
        long lcid = 0 );
    void PutPlotVisibleOnly (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t GetRightAngleAxes (
        long lcid = 0 );
    void PutRightAngleAxes (
        long lcid,
        const _variant_t & RHS );
    _variant_t GetRotation (
        long lcid = 0 );
    void PutRotation (
        long lcid,
        const _variant_t & RHS );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    IDispatchPtr SeriesCollection (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT SetElement (
        __missing_type__ Element );
    long GetSubtype (
        long lcid = 0 );
    void PutSubtype (
        long lcid,
        long RHS );
    long GetType (
        long lcid = 0 );
    void PutType (
        long lcid,
        long RHS );
    WallsPtr GetWalls (
        long lcid = 0 );
    ChartFormatPtr GetFormat ( );
    VARIANT_BOOL GetShowReportFilterFieldButtons ( );
    void PutShowReportFilterFieldButtons (
        VARIANT_BOOL res );
    VARIANT_BOOL GetShowLegendFieldButtons ( );
    void PutShowLegendFieldButtons (
        VARIANT_BOOL res );
    VARIANT_BOOL GetShowAxisFieldButtons ( );
    void PutShowAxisFieldButtons (
        VARIANT_BOOL res );
    VARIANT_BOOL GetShowValueFieldButtons ( );
    void PutShowValueFieldButtons (
        VARIANT_BOOL res );
    VARIANT_BOOL GetShowAllFieldButtons ( );
    void PutShowAllFieldButtons (
        VARIANT_BOOL res );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t AlternativeText );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t Title );
    IDispatchPtr FullSeriesCollection (
        const _variant_t & Index = vtMissing );
    enum XlCategoryLabelLevel GetCategoryLabelLevel ( );
    void PutCategoryLabelLevel (
        enum XlCategoryLabelLevel plevel );
    enum XlSeriesNameLevel GetSeriesNameLevel ( );
    void PutSeriesNameLevel (
        enum XlSeriesNameLevel plevel );
    VARIANT_BOOL GetHasHiddenContent ( );
    HRESULT DeleteHiddenContent ( );
    _variant_t GetChartColor ( );
    void PutChartColor (
        const _variant_t & pColor );
    HRESULT ClearToMatchColorStyle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyDataLabels (
        /*[in]*/ enum XlDataLabelsType Type,
        /*[in]*/ VARIANT LegendKey = vtMissing,
        /*[in]*/ VARIANT AutoText = vtMissing,
        /*[in]*/ VARIANT HasLeaderLines = vtMissing,
        /*[in]*/ VARIANT ShowSeriesName = vtMissing,
        /*[in]*/ VARIANT ShowCategoryName = vtMissing,
        /*[in]*/ VARIANT ShowValue = vtMissing,
        /*[in]*/ VARIANT ShowPercentage = vtMissing,
        /*[in]*/ VARIANT ShowBubbleSize = vtMissing,
        /*[in]*/ VARIANT Separator = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ChartType (
        /*[out,retval]*/ __missing_type__ * RHS ) = 0;
      virtual HRESULT __stdcall put_ChartType (
        /*[in]*/ __missing_type__ RHS ) = 0;
      virtual HRESULT __stdcall get_HasDataTable (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasDataTable (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyCustomType (
        /*[in]*/ __missing_type__ ChartType,
        /*[in]*/ VARIANT TypeName = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_GetChartElement (
        /*[in]*/ long X,
        /*[in]*/ long Y,
        /*[in,out]*/ long * ElementID,
        /*[in,out]*/ long * Arg1,
        /*[in,out]*/ long * Arg2 ) = 0;
      virtual HRESULT __stdcall raw_SetSourceData (
        /*[in]*/ BSTR Source,
        /*[in]*/ VARIANT PlotBy = vtMissing ) = 0;
      virtual HRESULT __stdcall get_PlotBy (
        /*[out,retval]*/ enum XlRowCol * PlotBy ) = 0;
      virtual HRESULT __stdcall put_PlotBy (
        /*[in]*/ enum XlRowCol PlotBy ) = 0;
      virtual HRESULT __stdcall raw_AutoFormat (
        /*[in]*/ long Gallery,
        /*[in]*/ VARIANT Format = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SetBackgroundPicture (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall get_DataTable (
        /*[out,retval]*/ struct DataTable * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ VARIANT Type = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_BarShape (
        /*[out,retval]*/ enum XlBarShape * RHS ) = 0;
      virtual HRESULT __stdcall put_BarShape (
        /*[in]*/ enum XlBarShape RHS ) = 0;
      virtual HRESULT __stdcall raw_SetDefaultChart (
        /*[in]*/ VARIANT Name ) = 0;
      virtual HRESULT __stdcall raw_ApplyChartTemplate (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_SaveChartTemplate (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall get_SideWall (
        /*[out,retval]*/ struct Walls * * RHS ) = 0;
      virtual HRESULT __stdcall get_BackWall (
        /*[out,retval]*/ struct Walls * * RHS ) = 0;
      virtual HRESULT __stdcall get_ChartStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ChartStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearToMatchStyle ( ) = 0;
      virtual HRESULT __stdcall get_HasPivotFields (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasPivotFields (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall put_ShowDataLabelsOverMaximum (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowDataLabelsOverMaximum (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyLayout (
        /*[in]*/ long Layout,
        /*[in]*/ VARIANT ChartType = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall get_ChartData (
        /*[out,retval]*/ struct ChartData * * ppchartdata ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * pval ) = 0;
      virtual HRESULT __stdcall get_Area3DGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AreaGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Bar3DGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BarGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Column3DGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ColumnGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Line3DGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_LineGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Pie3DGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PieGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DoughnutGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_RadarGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_SurfaceGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_XYGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall raw__ApplyDataLabels (
        /*[in]*/ enum XlDataLabelsType Type,
        /*[in]*/ VARIANT LegendKey = vtMissing,
        /*[in]*/ VARIANT AutoText = vtMissing,
        /*[in]*/ VARIANT HasLeaderLines = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall put_AutoScaling (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaling (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Axes (
        /*[in]*/ VARIANT Type,
        /*[in]*/ enum XlAxisGroup AxisGroup,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ChartArea (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartArea * * ChartArea ) = 0;
      virtual HRESULT __stdcall raw_ChartGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ChartTitle (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartTitle * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChartWizard (
        /*[in]*/ VARIANT Source = vtMissing,
        /*[in]*/ VARIANT Gallery = vtMissing,
        /*[in]*/ VARIANT Format = vtMissing,
        /*[in]*/ VARIANT PlotBy = vtMissing,
        /*[in]*/ VARIANT CategoryLabels = vtMissing,
        /*[in]*/ VARIANT SeriesLabels = vtMissing,
        /*[in]*/ VARIANT HasLegend = vtMissing,
        /*[in]*/ VARIANT Title = vtMissing,
        /*[in]*/ VARIANT CategoryTitle = vtMissing,
        /*[in]*/ VARIANT ValueTitle = vtMissing,
        /*[in]*/ VARIANT ExtraTitle = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[in]*/ enum XlPictureAppearance Size,
        /*[in,lcid]*/ long LocaleID = 0 ) = 0;
      virtual HRESULT __stdcall get_Corners (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Corners * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_DepthPercent (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DepthPercent (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayBlanksAs (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlDisplayBlanksAs * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayBlanksAs (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlDisplayBlanksAs RHS ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT FilterName,
        /*[in]*/ VARIANT Interactive,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Floor (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Floor * * RHS ) = 0;
      virtual HRESULT __stdcall get_GapDepth (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_GapDepth (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_HasAxis (
        /*[in]*/ VARIANT Index1,
        /*[in]*/ VARIANT Index2,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HasAxis (
        /*[in]*/ VARIANT Index1,
        /*[in]*/ VARIANT Index2 = vtMissing,
        /*[in,lcid]*/ long lcid = 0,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_HasLegend (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasLegend (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasTitle (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasTitle (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HeightPercent (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_HeightPercent (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Legend (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Legend * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Perspective (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Perspective (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_PlotArea (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct PlotArea * * RHS ) = 0;
      virtual HRESULT __stdcall get_PlotVisibleOnly (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PlotVisibleOnly (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RightAngleAxes (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_RightAngleAxes (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_SeriesCollection (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SetElement (
        /*[in]*/ __missing_type__ Element ) = 0;
      virtual HRESULT __stdcall get_Subtype (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Subtype (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Walls (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Walls * * RHS ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ struct ChartFormat * * ppChartFormat ) = 0;
      virtual HRESULT __stdcall get_ShowReportFilterFieldButtons (
        /*[out,retval]*/ VARIANT_BOOL * res ) = 0;
      virtual HRESULT __stdcall put_ShowReportFilterFieldButtons (
        /*[in]*/ VARIANT_BOOL res ) = 0;
      virtual HRESULT __stdcall get_ShowLegendFieldButtons (
        /*[out,retval]*/ VARIANT_BOOL * res ) = 0;
      virtual HRESULT __stdcall put_ShowLegendFieldButtons (
        /*[in]*/ VARIANT_BOOL res ) = 0;
      virtual HRESULT __stdcall get_ShowAxisFieldButtons (
        /*[out,retval]*/ VARIANT_BOOL * res ) = 0;
      virtual HRESULT __stdcall put_ShowAxisFieldButtons (
        /*[in]*/ VARIANT_BOOL res ) = 0;
      virtual HRESULT __stdcall get_ShowValueFieldButtons (
        /*[out,retval]*/ VARIANT_BOOL * res ) = 0;
      virtual HRESULT __stdcall put_ShowValueFieldButtons (
        /*[in]*/ VARIANT_BOOL res ) = 0;
      virtual HRESULT __stdcall get_ShowAllFieldButtons (
        /*[out,retval]*/ VARIANT_BOOL * res ) = 0;
      virtual HRESULT __stdcall put_ShowAllFieldButtons (
        /*[in]*/ VARIANT_BOOL res ) = 0;
      virtual HRESULT __stdcall get_AlternativeText (
        /*[out,retval]*/ BSTR * AlternativeText ) = 0;
      virtual HRESULT __stdcall put_AlternativeText (
        /*[in]*/ BSTR AlternativeText ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * Title ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR Title ) = 0;
      virtual HRESULT __stdcall raw_FullSeriesCollection (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * ppFullSeriesCollection ) = 0;
      virtual HRESULT __stdcall get_CategoryLabelLevel (
        /*[out,retval]*/ enum XlCategoryLabelLevel * plevel ) = 0;
      virtual HRESULT __stdcall put_CategoryLabelLevel (
        /*[in]*/ enum XlCategoryLabelLevel plevel ) = 0;
      virtual HRESULT __stdcall get_SeriesNameLevel (
        /*[out,retval]*/ enum XlSeriesNameLevel * plevel ) = 0;
      virtual HRESULT __stdcall put_SeriesNameLevel (
        /*[in]*/ enum XlSeriesNameLevel plevel ) = 0;
      virtual HRESULT __stdcall get_HasHiddenContent (
        /*[out,retval]*/ VARIANT_BOOL * res ) = 0;
      virtual HRESULT __stdcall raw_DeleteHiddenContent ( ) = 0;
      virtual HRESULT __stdcall get_ChartColor (
        /*[out,retval]*/ VARIANT * pColor ) = 0;
      virtual HRESULT __stdcall put_ChartColor (
        /*[in]*/ VARIANT pColor ) = 0;
      virtual HRESULT __stdcall raw_ClearToMatchColorStyle ( ) = 0;
};

struct __declspec(uuid("91493476-5a91-11cf-8700-00aa0060263b"))
Placeholders : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ShapePtr Item (
        int Index );
    ShapePtr FindByName (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Shape * * Item ) = 0;
      virtual HRESULT __stdcall raw_FindByName (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * FindByName ) = 0;
};

struct __declspec(uuid("91493478-5a91-11cf-8700-00aa0060263b"))
FreeformBuilder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AddNodes (
        __missing_type__ SegmentType,
        __missing_type__ EditingType,
        float X1,
        float Y1,
        float X2,
        float Y2,
        float X3,
        float Y3 );
    ShapePtr ConvertToShape ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_AddNodes (
        /*[in]*/ __missing_type__ SegmentType,
        /*[in]*/ __missing_type__ EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[in]*/ float X2,
        /*[in]*/ float Y2,
        /*[in]*/ float X3,
        /*[in]*/ float Y3 ) = 0;
      virtual HRESULT __stdcall raw_ConvertToShape (
        /*[out,retval]*/ struct Shape * * Freeform ) = 0;
};

struct __declspec(uuid("91493479-5a91-11cf-8700-00aa0060263b"))
Shape : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHorizontalFlip))
    __missing_type__  HorizontalFlip;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetType))
    __missing_type__  Type;
    __declspec(property(get=GetVerticalFlip))
    __missing_type__  VerticalFlip;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetZOrderPosition))
    int ZOrderPosition;
    __declspec(property(get=GetScript))
    __missing_type__ Script;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetOLEFormat))
    OLEFormatPtr OLEFormat;
    __declspec(property(get=GetLinkFormat))
    LinkFormatPtr LinkFormat;
    __declspec(property(get=GetPlaceholderFormat))
    PlaceholderFormatPtr PlaceholderFormat;
    __declspec(property(get=GetAnimationSettings))
    AnimationSettingsPtr AnimationSettings;
    __declspec(property(get=GetActionSettings))
    ActionSettingsPtr ActionSettings;
    __declspec(property(get=GetTags))
    TagsPtr Tags;
    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetHasDiagram))
    __missing_type__  HasDiagram;
    __declspec(property(get=GetDiagram))
    DiagramPtr Diagram;
    __declspec(property(get=GetHasDiagramNode))
    __missing_type__  HasDiagramNode;
    __declspec(property(get=GetMediaType))
    enum PpMediaType MediaType;
    __declspec(property(get=GetHasTextFrame))
    __missing_type__  HasTextFrame;
    __declspec(property(get=GetSoundFormat))
    SoundFormatPtr SoundFormat;
    __declspec(property(get=GetHasTable))
    __missing_type__  HasTable;
    __declspec(property(get=GetTable))
    TablePtr Table;
    __declspec(property(get=GetDiagramNode))
    DiagramNodePtr DiagramNode;
    __declspec(property(get=GetChild))
    __missing_type__  Child;
    __declspec(property(get=GetParentGroup))
    ShapePtr ParentGroup;
    __declspec(property(get=GetCanvasItems))
    CanvasShapesPtr CanvasItems;
    __declspec(property(get=GetId))
    int Id;
    __declspec(property(put=PutRTF))
    _bstr_t RTF;
    __declspec(property(get=GetCustomerData))
    CustomerDataPtr CustomerData;
    __declspec(property(get=GetTextFrame2))
    TextFrame2Ptr TextFrame2;
    __declspec(property(get=GetHasChart))
    __missing_type__  HasChart;
    __declspec(property(get=GetSoftEdge))
    __missing_type__ SoftEdge;
    __declspec(property(get=GetGlow))
    __missing_type__ Glow;
    __declspec(property(get=GetReflection))
    __missing_type__ Reflection;
    __declspec(property(get=GetChart))
    ChartPtr Chart;
    __declspec(property(get=GetHasSmartArt))
    __missing_type__  HasSmartArt;
    __declspec(property(get=GetSmartArt))
    __missing_type__ SmartArt;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetMediaFormat))
    MediaFormatPtr MediaFormat;
    __declspec(property(get=GetInkXML))
    _bstr_t InkXML;
    __declspec(property(get=GetHasInkXML))
    __missing_type__  HasInkXML;
    __declspec(property(get=GetHasSectionLink))
    __missing_type__  HasSectionLink;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    int ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    __missing_type__  Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Apply ( );
    HRESULT Delete ( );
    HRESULT Flip (
        __missing_type__ FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    HRESULT ScaleHeight (
        float Factor,
        __missing_type__ RelativeToOriginalSize,
        __missing_type__ fScale );
    HRESULT ScaleWidth (
        float Factor,
        __missing_type__ RelativeToOriginalSize,
        __missing_type__ fScale );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        __missing_type__ ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    __missing_type__  GetAutoShapeType ( );
    void PutAutoShapeType (
        __missing_type__ AutoShapeType );
    __missing_type__  GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        __missing_type__ BlackWhiteMode );
    CalloutFormatPtr GetCallout ( );
    int GetConnectionSiteCount ( );
    __missing_type__  GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float Height );
    __missing_type__  GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float Left );
    LineFormatPtr GetLine ( );
    __missing_type__  GetLockAspectRatio ( );
    void PutLockAspectRatio (
        __missing_type__ LockAspectRatio );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float Rotation );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    TextFramePtr GetTextFrame ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float Top );
    __missing_type__  GetType ( );
    __missing_type__  GetVerticalFlip ( );
    _variant_t GetVertices ( );
    __missing_type__  GetVisible ( );
    void PutVisible (
        __missing_type__ Visible );
    float GetWidth ( );
    void PutWidth (
        float Width );
    int GetZOrderPosition ( );
    OLEFormatPtr GetOLEFormat ( );
    LinkFormatPtr GetLinkFormat ( );
    PlaceholderFormatPtr GetPlaceholderFormat ( );
    AnimationSettingsPtr GetAnimationSettings ( );
    ActionSettingsPtr GetActionSettings ( );
    TagsPtr GetTags ( );
    HRESULT Cut ( );
    HRESULT Copy ( );
    HRESULT Select (
        __missing_type__ Replace );
    ShapeRangePtr Duplicate ( );
    enum PpMediaType GetMediaType ( );
    __missing_type__  GetHasTextFrame ( );
    SoundFormatPtr GetSoundFormat ( );
    __missing_type__ GetScript ( );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t AlternativeText );
    __missing_type__  GetHasTable ( );
    TablePtr GetTable ( );
    HRESULT Export (
        _bstr_t PathName,
        enum PpShapeFormat Filter,
        int ScaleWidth,
        int ScaleHeight,
        enum PpExportMode ExportMode );
    __missing_type__  GetHasDiagram ( );
    DiagramPtr GetDiagram ( );
    __missing_type__  GetHasDiagramNode ( );
    DiagramNodePtr GetDiagramNode ( );
    __missing_type__  GetChild ( );
    ShapePtr GetParentGroup ( );
    CanvasShapesPtr GetCanvasItems ( );
    int GetId ( );
    HRESULT CanvasCropLeft (
        float Increment );
    HRESULT CanvasCropTop (
        float Increment );
    HRESULT CanvasCropRight (
        float Increment );
    HRESULT CanvasCropBottom (
        float Increment );
    void PutRTF (
        _bstr_t _arg1 );
    CustomerDataPtr GetCustomerData ( );
    TextFrame2Ptr GetTextFrame2 ( );
    __missing_type__  GetHasChart ( );
    __missing_type__  GetShapeStyle ( );
    void PutShapeStyle (
        __missing_type__ ShapeStyle );
    __missing_type__  GetBackgroundStyle ( );
    void PutBackgroundStyle (
        __missing_type__ BackgroundStyle );
    __missing_type__ GetSoftEdge ( );
    __missing_type__ GetGlow ( );
    __missing_type__ GetReflection ( );
    ChartPtr GetChart ( );
    __missing_type__  GetHasSmartArt ( );
    __missing_type__ GetSmartArt ( );
    HRESULT ConvertTextToSmartArt (
        __missing_type__ * Layout );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t Title );
    MediaFormatPtr GetMediaFormat ( );
    HRESULT PickupAnimation ( );
    HRESULT ApplyAnimation ( );
    HRESULT UpgradeMedia ( );
    __missing_type__  GetIsNarration ( );
    void PutIsNarration (
        __missing_type__ IsNarration );
    _bstr_t GetInkXML ( );
    __missing_type__  GetHasInkXML ( );
    __missing_type__  GetHasSectionLink ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ __missing_type__ FlipCmd ) = 0;
      virtual HRESULT __stdcall raw_IncrementLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotation (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_PickUp ( ) = 0;
      virtual HRESULT __stdcall raw_RerouteConnections ( ) = 0;
      virtual HRESULT __stdcall raw_ScaleHeight (
        /*[in]*/ float Factor,
        /*[in]*/ __missing_type__ RelativeToOriginalSize,
        /*[in]*/ __missing_type__ fScale ) = 0;
      virtual HRESULT __stdcall raw_ScaleWidth (
        /*[in]*/ float Factor,
        /*[in]*/ __missing_type__ RelativeToOriginalSize,
        /*[in]*/ __missing_type__ fScale ) = 0;
      virtual HRESULT __stdcall raw_SetShapesDefaultProperties ( ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ struct ShapeRange * * Ungroup ) = 0;
      virtual HRESULT __stdcall raw_ZOrder (
        /*[in]*/ __missing_type__ ZOrderCmd ) = 0;
      virtual HRESULT __stdcall get_Adjustments (
        /*[out,retval]*/ struct Adjustments * * Adjustments ) = 0;
      virtual HRESULT __stdcall get_AutoShapeType (
        /*[out,retval]*/ __missing_type__ * AutoShapeType ) = 0;
      virtual HRESULT __stdcall put_AutoShapeType (
        /*[in]*/ __missing_type__ AutoShapeType ) = 0;
      virtual HRESULT __stdcall get_BlackWhiteMode (
        /*[out,retval]*/ __missing_type__ * BlackWhiteMode ) = 0;
      virtual HRESULT __stdcall put_BlackWhiteMode (
        /*[in]*/ __missing_type__ BlackWhiteMode ) = 0;
      virtual HRESULT __stdcall get_Callout (
        /*[out,retval]*/ struct CalloutFormat * * Callout ) = 0;
      virtual HRESULT __stdcall get_ConnectionSiteCount (
        /*[out,retval]*/ int * ConnectionSiteCount ) = 0;
      virtual HRESULT __stdcall get_Connector (
        /*[out,retval]*/ __missing_type__ * Connector ) = 0;
      virtual HRESULT __stdcall get_ConnectorFormat (
        /*[out,retval]*/ struct ConnectorFormat * * ConnectorFormat ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct FillFormat * * Fill ) = 0;
      virtual HRESULT __stdcall get_GroupItems (
        /*[out,retval]*/ struct GroupShapes * * GroupItems ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_HorizontalFlip (
        /*[out,retval]*/ __missing_type__ * HorizontalFlip ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct LineFormat * * Line ) = 0;
      virtual HRESULT __stdcall get_LockAspectRatio (
        /*[out,retval]*/ __missing_type__ * LockAspectRatio ) = 0;
      virtual HRESULT __stdcall put_LockAspectRatio (
        /*[in]*/ __missing_type__ LockAspectRatio ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Nodes (
        /*[out,retval]*/ struct ShapeNodes * * Nodes ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ float * Rotation ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ float Rotation ) = 0;
      virtual HRESULT __stdcall get_PictureFormat (
        /*[out,retval]*/ struct PictureFormat * * Picture ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ShadowFormat * * Shadow ) = 0;
      virtual HRESULT __stdcall get_TextEffect (
        /*[out,retval]*/ struct TextEffectFormat * * TextEffect ) = 0;
      virtual HRESULT __stdcall get_TextFrame (
        /*[out,retval]*/ struct TextFrame * * TextFrame ) = 0;
      virtual HRESULT __stdcall get_ThreeD (
        /*[out,retval]*/ struct ThreeDFormat * * ThreeD ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ __missing_type__ * Type ) = 0;
      virtual HRESULT __stdcall get_VerticalFlip (
        /*[out,retval]*/ __missing_type__ * VerticalFlip ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ VARIANT * Vertices ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ __missing_type__ * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ __missing_type__ Visible ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_ZOrderPosition (
        /*[out,retval]*/ int * ZOrderPosition ) = 0;
      virtual HRESULT __stdcall get_OLEFormat (
        /*[out,retval]*/ struct OLEFormat * * OLEFormat ) = 0;
      virtual HRESULT __stdcall get_LinkFormat (
        /*[out,retval]*/ struct LinkFormat * * LinkFormat ) = 0;
      virtual HRESULT __stdcall get_PlaceholderFormat (
        /*[out,retval]*/ struct PlaceholderFormat * * PlaceholderFormat ) = 0;
      virtual HRESULT __stdcall get_AnimationSettings (
        /*[out,retval]*/ struct AnimationSettings * * AnimationSettings ) = 0;
      virtual HRESULT __stdcall get_ActionSettings (
        /*[out,retval]*/ struct ActionSettings * * ActionSettings ) = 0;
      virtual HRESULT __stdcall get_Tags (
        /*[out,retval]*/ struct Tags * * Tags ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ __missing_type__ Replace ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct ShapeRange * * Duplicate ) = 0;
      virtual HRESULT __stdcall get_MediaType (
        /*[out,retval]*/ enum PpMediaType * MediaType ) = 0;
      virtual HRESULT __stdcall get_HasTextFrame (
        /*[out,retval]*/ __missing_type__ * HasTextFrame ) = 0;
      virtual HRESULT __stdcall get_SoundFormat (
        /*[out,retval]*/ struct SoundFormat * * SoundFormat ) = 0;
      virtual HRESULT __stdcall get_Script (
        /*[out,retval]*/ __missing_type__ * * Script ) = 0;
      virtual HRESULT __stdcall get_AlternativeText (
        /*[out,retval]*/ BSTR * AlternativeText ) = 0;
      virtual HRESULT __stdcall put_AlternativeText (
        /*[in]*/ BSTR AlternativeText ) = 0;
      virtual HRESULT __stdcall get_HasTable (
        /*[out,retval]*/ __missing_type__ * HasTable ) = 0;
      virtual HRESULT __stdcall get_Table (
        /*[out,retval]*/ struct Table * * Table ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR PathName,
        /*[in]*/ enum PpShapeFormat Filter,
        /*[in]*/ int ScaleWidth,
        /*[in]*/ int ScaleHeight,
        /*[in]*/ enum PpExportMode ExportMode ) = 0;
      virtual HRESULT __stdcall get_HasDiagram (
        /*[out,retval]*/ __missing_type__ * pHasDiagram ) = 0;
      virtual HRESULT __stdcall get_Diagram (
        /*[out,retval]*/ struct Diagram * * Diagram ) = 0;
      virtual HRESULT __stdcall get_HasDiagramNode (
        /*[out,retval]*/ __missing_type__ * pHasDiagram ) = 0;
      virtual HRESULT __stdcall get_DiagramNode (
        /*[out,retval]*/ struct DiagramNode * * DiagramNode ) = 0;
      virtual HRESULT __stdcall get_Child (
        /*[out,retval]*/ __missing_type__ * Child ) = 0;
      virtual HRESULT __stdcall get_ParentGroup (
        /*[out,retval]*/ struct Shape * * Parent ) = 0;
      virtual HRESULT __stdcall get_CanvasItems (
        /*[out,retval]*/ struct CanvasShapes * * CanvasShapes ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ int * pid ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropRight (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropBottom (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall put_RTF (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall get_CustomerData (
        /*[out,retval]*/ struct CustomerData * * CustomerData ) = 0;
      virtual HRESULT __stdcall get_TextFrame2 (
        /*[out,retval]*/ struct TextFrame2 * * Frame ) = 0;
      virtual HRESULT __stdcall get_HasChart (
        /*[out,retval]*/ __missing_type__ * pHasChart ) = 0;
      virtual HRESULT __stdcall get_ShapeStyle (
        /*[out,retval]*/ __missing_type__ * ShapeStyle ) = 0;
      virtual HRESULT __stdcall put_ShapeStyle (
        /*[in]*/ __missing_type__ ShapeStyle ) = 0;
      virtual HRESULT __stdcall get_BackgroundStyle (
        /*[out,retval]*/ __missing_type__ * BackgroundStyle ) = 0;
      virtual HRESULT __stdcall put_BackgroundStyle (
        /*[in]*/ __missing_type__ BackgroundStyle ) = 0;
      virtual HRESULT __stdcall get_SoftEdge (
        /*[out,retval]*/ __missing_type__ * * SoftEdge ) = 0;
      virtual HRESULT __stdcall get_Glow (
        /*[out,retval]*/ __missing_type__ * * Glow ) = 0;
      virtual HRESULT __stdcall get_Reflection (
        /*[out,retval]*/ __missing_type__ * * Reflection ) = 0;
      virtual HRESULT __stdcall get_Chart (
        /*[out,retval]*/ struct Chart * * Chart ) = 0;
      virtual HRESULT __stdcall get_HasSmartArt (
        /*[out,retval]*/ __missing_type__ * HasSmartArt ) = 0;
      virtual HRESULT __stdcall get_SmartArt (
        /*[out,retval]*/ __missing_type__ * * SmartArt ) = 0;
      virtual HRESULT __stdcall raw_ConvertTextToSmartArt (
        /*[in]*/ __missing_type__ * Layout ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * Title ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR Title ) = 0;
      virtual HRESULT __stdcall get_MediaFormat (
        /*[out,retval]*/ struct MediaFormat * * MediaFormat ) = 0;
      virtual HRESULT __stdcall raw_PickupAnimation ( ) = 0;
      virtual HRESULT __stdcall raw_ApplyAnimation ( ) = 0;
      virtual HRESULT __stdcall raw_UpgradeMedia ( ) = 0;
      virtual HRESULT __stdcall get_IsNarration (
        /*[out,retval]*/ __missing_type__ * IsNarration ) = 0;
      virtual HRESULT __stdcall put_IsNarration (
        /*[in]*/ __missing_type__ IsNarration ) = 0;
      virtual HRESULT __stdcall get_InkXML (
        /*[out,retval]*/ BSTR * InkXML ) = 0;
      virtual HRESULT __stdcall get_HasInkXML (
        /*[out,retval]*/ __missing_type__ * HasInkXML ) = 0;
      virtual HRESULT __stdcall get_HasSectionLink (
        /*[out,retval]*/ __missing_type__ * HasSectionLink ) = 0;
};

struct __declspec(uuid("91493481-5a91-11cf-8700-00aa0060263b"))
ConnectorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBeginConnected))
    __missing_type__  BeginConnected;
    __declspec(property(get=GetBeginConnectedShape))
    ShapePtr BeginConnectedShape;
    __declspec(property(get=GetBeginConnectionSite))
    int BeginConnectionSite;
    __declspec(property(get=GetEndConnected))
    __missing_type__  EndConnected;
    __declspec(property(get=GetEndConnectedShape))
    ShapePtr EndConnectedShape;
    __declspec(property(get=GetEndConnectionSite))
    int EndConnectionSite;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT BeginConnect (
        struct Shape * ConnectedShape,
        int ConnectionSite );
    HRESULT BeginDisconnect ( );
    HRESULT EndConnect (
        struct Shape * ConnectedShape,
        int ConnectionSite );
    HRESULT EndDisconnect ( );
    __missing_type__  GetBeginConnected ( );
    ShapePtr GetBeginConnectedShape ( );
    int GetBeginConnectionSite ( );
    __missing_type__  GetEndConnected ( );
    ShapePtr GetEndConnectedShape ( );
    int GetEndConnectionSite ( );
    __missing_type__  GetType ( );
    void PutType (
        __missing_type__ Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_BeginConnect (
        /*[in]*/ struct Shape * ConnectedShape,
        /*[in]*/ int ConnectionSite ) = 0;
      virtual HRESULT __stdcall raw_BeginDisconnect ( ) = 0;
      virtual HRESULT __stdcall raw_EndConnect (
        /*[in]*/ struct Shape * ConnectedShape,
        /*[in]*/ int ConnectionSite ) = 0;
      virtual HRESULT __stdcall raw_EndDisconnect ( ) = 0;
      virtual HRESULT __stdcall get_BeginConnected (
        /*[out,retval]*/ __missing_type__ * BeginConnected ) = 0;
      virtual HRESULT __stdcall get_BeginConnectedShape (
        /*[out,retval]*/ struct Shape * * BeginConnectedShape ) = 0;
      virtual HRESULT __stdcall get_BeginConnectionSite (
        /*[out,retval]*/ int * BeginConnectionSite ) = 0;
      virtual HRESULT __stdcall get_EndConnected (
        /*[out,retval]*/ __missing_type__ * EndConnected ) = 0;
      virtual HRESULT __stdcall get_EndConnectedShape (
        /*[out,retval]*/ struct Shape * * EndConnectedShape ) = 0;
      virtual HRESULT __stdcall get_EndConnectionSite (
        /*[out,retval]*/ int * EndConnectionSite ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ __missing_type__ * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ __missing_type__ Type ) = 0;
};

struct __declspec(uuid("9149349d-5a91-11cf-8700-00aa0060263b"))
_Presentation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHasRevisionInfo))
    enum PpRevisionInfo HasRevisionInfo;
    __declspec(property(get=GetPasswordEncryptionProvider))
    _bstr_t PasswordEncryptionProvider;
    __declspec(property(get=GetPasswordEncryptionAlgorithm))
    _bstr_t PasswordEncryptionAlgorithm;
    __declspec(property(get=GetPasswordEncryptionKeyLength))
    int PasswordEncryptionKeyLength;
    __declspec(property(get=GetPasswordEncryptionFileProperties))
    VARIANT_BOOL PasswordEncryptionFileProperties;
    __declspec(property(get=GetPassword,put=PutPassword))
    _bstr_t Password;
    __declspec(property(get=GetWritePassword,put=PutWritePassword))
    _bstr_t WritePassword;
    __declspec(property(get=GetPermission))
    __missing_type__ Permission;
    __declspec(property(get=GetSharedWorkspace))
    __missing_type__ SharedWorkspace;
    __declspec(property(get=GetSync))
    __missing_type__ Sync;
    __declspec(property(get=GetDocumentLibraryVersions))
    __missing_type__ DocumentLibraryVersions;
    __declspec(property(get=GetContentTypeProperties))
    __missing_type__ ContentTypeProperties;
    __declspec(property(get=GetSectionCount))
    int SectionCount;
    __declspec(property(get=GetHasSections))
    VARIANT_BOOL HasSections;
    __declspec(property(get=GetServerPolicy))
    __missing_type__ ServerPolicy;
    __declspec(property(get=GetDocumentInspectors))
    __missing_type__ DocumentInspectors;
    __declspec(property(get=GetHasVBProject))
    VARIANT_BOOL HasVBProject;
    __declspec(property(get=GetCustomXMLParts))
    __missing_type__ CustomXMLParts;
    __declspec(property(get=GetFinal,put=PutFinal))
    VARIANT_BOOL Final;
    __declspec(property(get=GetCustomerData))
    CustomerDataPtr CustomerData;
    __declspec(property(get=GetResearch))
    ResearchPtr Research;
    __declspec(property(get=GetEncryptionProvider,put=PutEncryptionProvider))
    _bstr_t EncryptionProvider;
    __declspec(property(get=GetSectionProperties))
    SectionPropertiesPtr SectionProperties;
    __declspec(property(get=GetCoauthoring))
    CoauthoringPtr Coauthoring;
    __declspec(property(get=GetInMergeMode))
    VARIANT_BOOL InMergeMode;
    __declspec(property(get=GetBroadcast))
    BroadcastPtr Broadcast;
    __declspec(property(get=GetHasNotesMaster))
    VARIANT_BOOL HasNotesMaster;
    __declspec(property(get=GetHasHandoutMaster))
    VARIANT_BOOL HasHandoutMaster;
    __declspec(property(get=GetCreateVideoStatus))
    enum PpMediaTaskStatus CreateVideoStatus;
    __declspec(property(get=GetChartDataPointTrack,put=PutChartDataPointTrack))
    VARIANT_BOOL ChartDataPointTrack;
    __declspec(property(get=GetGuides))
    GuidesPtr Guides;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSlideMaster))
    _MasterPtr SlideMaster;
    __declspec(property(get=GetTitleMaster))
    _MasterPtr TitleMaster;
    __declspec(property(get=GetHasTitleMaster))
    __missing_type__  HasTitleMaster;
    __declspec(property(get=GetTemplateName))
    _bstr_t TemplateName;
    __declspec(property(get=GetNotesMaster))
    _MasterPtr NotesMaster;
    __declspec(property(get=GetHandoutMaster))
    _MasterPtr HandoutMaster;
    __declspec(property(get=GetSlides))
    SlidesPtr Slides;
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetColorSchemes))
    ColorSchemesPtr ColorSchemes;
    __declspec(property(get=GetExtraColors))
    ExtraColorsPtr ExtraColors;
    __declspec(property(get=GetSlideShowSettings))
    SlideShowSettingsPtr SlideShowSettings;
    __declspec(property(get=GetFonts))
    FontsPtr Fonts;
    __declspec(property(get=GetWindows))
    DocumentWindowsPtr Windows;
    __declspec(property(get=GetTags))
    TagsPtr Tags;
    __declspec(property(get=GetDefaultShape))
    ShapePtr DefaultShape;
    __declspec(property(get=GetBuiltInDocumentProperties))
    IDispatchPtr BuiltInDocumentProperties;
    __declspec(property(get=GetCustomDocumentProperties))
    IDispatchPtr CustomDocumentProperties;
    __declspec(property(get=GetVBProject))
    _VBProjectPtr VBProject;
    __declspec(property(get=GetReadOnly))
    __missing_type__  ReadOnly;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetLayoutDirection,put=PutLayoutDirection))
    enum PpDirection LayoutDirection;
    __declspec(property(get=GetPrintOptions))
    PrintOptionsPtr PrintOptions;
    __declspec(property(get=GetContainer))
    IDispatchPtr Container;
    __declspec(property(get=GetFarEastLineBreakLevel,put=PutFarEastLineBreakLevel))
    enum PpFarEastLineBreakLevel FarEastLineBreakLevel;
    __declspec(property(get=GetNoLineBreakBefore,put=PutNoLineBreakBefore))
    _bstr_t NoLineBreakBefore;
    __declspec(property(get=GetNoLineBreakAfter,put=PutNoLineBreakAfter))
    _bstr_t NoLineBreakAfter;
    __declspec(property(get=GetSlideShowWindow))
    SlideShowWindowPtr SlideShowWindow;
    __declspec(property(get=GetCommandBars))
    __missing_type__ CommandBars;
    __declspec(property(get=GetPublishObjects))
    PublishObjectsPtr PublishObjects;
    __declspec(property(get=GetWebOptions))
    WebOptionsPtr WebOptions;
    __declspec(property(get=GetHTMLProject))
    __missing_type__ HTMLProject;
    __declspec(property(get=GetVBASigned))
    __missing_type__  VBASigned;
    __declspec(property(get=GetGridDistance,put=PutGridDistance))
    float GridDistance;
    __declspec(property(get=GetDesigns))
    DesignsPtr Designs;
    __declspec(property(get=GetSignatures))
    __missing_type__ Signatures;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _MasterPtr GetSlideMaster ( );
    _MasterPtr GetTitleMaster ( );
    __missing_type__  GetHasTitleMaster ( );
    _MasterPtr AddTitleMaster ( );
    HRESULT ApplyTemplate (
        _bstr_t FileName );
    _bstr_t GetTemplateName ( );
    _MasterPtr GetNotesMaster ( );
    _MasterPtr GetHandoutMaster ( );
    SlidesPtr GetSlides ( );
    PageSetupPtr GetPageSetup ( );
    ColorSchemesPtr GetColorSchemes ( );
    ExtraColorsPtr GetExtraColors ( );
    SlideShowSettingsPtr GetSlideShowSettings ( );
    FontsPtr GetFonts ( );
    DocumentWindowsPtr GetWindows ( );
    TagsPtr GetTags ( );
    ShapePtr GetDefaultShape ( );
    IDispatchPtr GetBuiltInDocumentProperties ( );
    IDispatchPtr GetCustomDocumentProperties ( );
    _VBProjectPtr GetVBProject ( );
    __missing_type__  GetReadOnly ( );
    _bstr_t GetFullName ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    __missing_type__  GetSaved ( );
    void PutSaved (
        __missing_type__ Saved );
    enum PpDirection GetLayoutDirection ( );
    void PutLayoutDirection (
        enum PpDirection LayoutDirection );
    DocumentWindowPtr NewWindow ( );
    HRESULT FollowHyperlink (
        _bstr_t Address,
        _bstr_t SubAddress,
        VARIANT_BOOL NewWindow,
        VARIANT_BOOL AddHistory,
        _bstr_t ExtraInfo,
        __missing_type__ Method,
        _bstr_t HeaderInfo );
    HRESULT AddToFavorites ( );
    HRESULT Unused ( );
    PrintOptionsPtr GetPrintOptions ( );
    HRESULT PrintOut (
        int From,
        int To,
        _bstr_t PrintToFile,
        int Copies,
        __missing_type__ Collate );
    HRESULT Save ( );
    HRESULT SaveAs (
        _bstr_t FileName,
        enum PpSaveAsFileType FileFormat,
        __missing_type__ EmbedTrueTypeFonts );
    HRESULT SaveCopyAs (
        _bstr_t FileName,
        enum PpSaveAsFileType FileFormat,
        __missing_type__ EmbedTrueTypeFonts );
    HRESULT Export (
        _bstr_t Path,
        _bstr_t FilterName,
        int ScaleWidth,
        int ScaleHeight );
    HRESULT Close ( );
    HRESULT SetUndoText (
        _bstr_t Text );
    IDispatchPtr GetContainer ( );
    __missing_type__  GetDisplayComments ( );
    void PutDisplayComments (
        __missing_type__ DisplayComments );
    enum PpFarEastLineBreakLevel GetFarEastLineBreakLevel ( );
    void PutFarEastLineBreakLevel (
        enum PpFarEastLineBreakLevel FarEastLineBreakLevel );
    _bstr_t GetNoLineBreakBefore ( );
    void PutNoLineBreakBefore (
        _bstr_t NoLineBreakBefore );
    _bstr_t GetNoLineBreakAfter ( );
    void PutNoLineBreakAfter (
        _bstr_t NoLineBreakAfter );
    HRESULT UpdateLinks ( );
    SlideShowWindowPtr GetSlideShowWindow ( );
    __missing_type__  GetFarEastLineBreakLanguage ( );
    void PutFarEastLineBreakLanguage (
        __missing_type__ FarEastLineBreakLanguage );
    HRESULT WebPagePreview ( );
    __missing_type__  GetDefaultLanguageID ( );
    void PutDefaultLanguageID (
        __missing_type__ DefaultLanguageID );
    __missing_type__ GetCommandBars ( );
    PublishObjectsPtr GetPublishObjects ( );
    WebOptionsPtr GetWebOptions ( );
    __missing_type__ GetHTMLProject ( );
    HRESULT ReloadAs (
        __missing_type__ cp );
    HRESULT MakeIntoTemplate (
        __missing_type__ IsDesignTemplate );
    __missing_type__  GetEnvelopeVisible ( );
    void PutEnvelopeVisible (
        __missing_type__ EnvelopeVisible );
    HRESULT sblt (
        _bstr_t s );
    __missing_type__  GetVBASigned ( );
    __missing_type__  GetSnapToGrid ( );
    void PutSnapToGrid (
        __missing_type__ SnapToGrid );
    float GetGridDistance ( );
    void PutGridDistance (
        float GridDistance );
    DesignsPtr GetDesigns ( );
    HRESULT Merge (
        _bstr_t Path );
    HRESULT CheckIn (
        VARIANT_BOOL SaveChanges,
        const _variant_t & Comments = vtMissing,
        const _variant_t & MakePublic = vtMissing );
    VARIANT_BOOL CanCheckIn ( );
    __missing_type__ GetSignatures ( );
    __missing_type__  GetRemovePersonalInformation ( );
    void PutRemovePersonalInformation (
        __missing_type__ RemovePersonalInformation );
    HRESULT SendForReview (
        _bstr_t Recipients,
        _bstr_t Subject,
        VARIANT_BOOL ShowMessage,
        const _variant_t & IncludeAttachment = vtMissing );
    HRESULT ReplyWithChanges (
        VARIANT_BOOL ShowMessage );
    HRESULT EndReview ( );
    enum PpRevisionInfo GetHasRevisionInfo ( );
    HRESULT AddBaseline (
        _bstr_t FileName );
    HRESULT RemoveBaseline ( );
    _bstr_t GetPasswordEncryptionProvider ( );
    _bstr_t GetPasswordEncryptionAlgorithm ( );
    int GetPasswordEncryptionKeyLength ( );
    VARIANT_BOOL GetPasswordEncryptionFileProperties ( );
    HRESULT SetPasswordEncryptionOptions (
        _bstr_t PasswordEncryptionProvider,
        _bstr_t PasswordEncryptionAlgorithm,
        int PasswordEncryptionKeyLength,
        VARIANT_BOOL PasswordEncryptionFileProperties );
    _bstr_t GetPassword ( );
    void PutPassword (
        _bstr_t Password );
    _bstr_t GetWritePassword ( );
    void PutWritePassword (
        _bstr_t WritePassword );
    __missing_type__ GetPermission ( );
    __missing_type__ GetSharedWorkspace ( );
    __missing_type__ GetSync ( );
    HRESULT SendFaxOverInternet (
        _bstr_t Recipients,
        _bstr_t Subject,
        VARIANT_BOOL ShowMessage );
    __missing_type__ GetDocumentLibraryVersions ( );
    __missing_type__ GetContentTypeProperties ( );
    int GetSectionCount ( );
    VARIANT_BOOL GetHasSections ( );
    HRESULT NewSectionAfter (
        int Index,
        VARIANT_BOOL AfterSlide,
        _bstr_t sectionTitle,
        int * newSectionIndex );
    HRESULT DeleteSection (
        int Index );
    HRESULT DisableSections ( );
    _bstr_t sectionTitle (
        int Index );
    HRESULT RemoveDocumentInformation (
        enum PpRemoveDocInfoType Type );
    HRESULT CheckInWithVersion (
        VARIANT_BOOL SaveChanges,
        const _variant_t & Comments = vtMissing,
        const _variant_t & MakePublic = vtMissing,
        const _variant_t & VersionType = vtMissing );
    HRESULT ExportAsFixedFormat (
        _bstr_t Path,
        enum PpFixedFormatType FixedFormatType,
        enum PpFixedFormatIntent Intent,
        __missing_type__ FrameSlides,
        enum PpPrintHandoutOrder HandoutOrder,
        enum PpPrintOutputType OutputType,
        __missing_type__ PrintHiddenSlides,
        struct PrintRange * PrintRange,
        enum PpPrintRangeType RangeType,
        _bstr_t SlideShowName,
        VARIANT_BOOL IncludeDocProperties,
        VARIANT_BOOL KeepIRMSettings,
        VARIANT_BOOL DocStructureTags,
        VARIANT_BOOL BitmapMissingFonts,
        VARIANT_BOOL UseISO19005_1,
        const _variant_t & ExternalExporter = vtMissing );
    __missing_type__ GetServerPolicy ( );
    __missing_type__ GetWorkflowTasks ( );
    __missing_type__ GetWorkflowTemplates ( );
    HRESULT LockServerFile ( );
    __missing_type__ GetDocumentInspectors ( );
    VARIANT_BOOL GetHasVBProject ( );
    __missing_type__ GetCustomXMLParts ( );
    VARIANT_BOOL GetFinal ( );
    void PutFinal (
        VARIANT_BOOL Final );
    HRESULT ApplyTheme (
        _bstr_t themeName );
    CustomerDataPtr GetCustomerData ( );
    ResearchPtr GetResearch ( );
    HRESULT PublishSlides (
        _bstr_t SlideLibraryUrl,
        VARIANT_BOOL Overwrite,
        VARIANT_BOOL UseSlideOrder );
    _bstr_t GetEncryptionProvider ( );
    void PutEncryptionProvider (
        _bstr_t EncryptionProvider );
    HRESULT Convert ( );
    SectionPropertiesPtr GetSectionProperties ( );
    CoauthoringPtr GetCoauthoring ( );
    HRESULT MergeWithBaseline (
        _bstr_t withPresentation,
        _bstr_t baselinePresentation );
    VARIANT_BOOL GetInMergeMode ( );
    HRESULT AcceptAll ( );
    HRESULT RejectAll ( );
    HRESULT EnsureAllMediaUpgraded ( );
    BroadcastPtr GetBroadcast ( );
    VARIANT_BOOL GetHasNotesMaster ( );
    VARIANT_BOOL GetHasHandoutMaster ( );
    HRESULT Convert2 (
        _bstr_t FileName );
    enum PpMediaTaskStatus GetCreateVideoStatus ( );
    HRESULT CreateVideo (
        _bstr_t FileName,
        VARIANT_BOOL UseTimingsAndNarrations,
        int DefaultSlideDuration,
        int VertResolution,
        int FramesPerSecond,
        int Quality );
    HRESULT ApplyTemplate2 (
        _bstr_t FileName,
        _bstr_t VariantGUID );
    VARIANT_BOOL GetChartDataPointTrack ( );
    void PutChartDataPointTrack (
        VARIANT_BOOL pfChartDataPointTrack );
    HRESULT ExportAsFixedFormat2 (
        _bstr_t Path,
        enum PpFixedFormatType FixedFormatType,
        enum PpFixedFormatIntent Intent,
        __missing_type__ FrameSlides,
        enum PpPrintHandoutOrder HandoutOrder,
        enum PpPrintOutputType OutputType,
        __missing_type__ PrintHiddenSlides,
        struct PrintRange * PrintRange,
        enum PpPrintRangeType RangeType,
        _bstr_t SlideShowName,
        VARIANT_BOOL IncludeDocProperties,
        VARIANT_BOOL KeepIRMSettings,
        VARIANT_BOOL DocStructureTags,
        VARIANT_BOOL BitmapMissingFonts,
        VARIANT_BOOL UseISO19005_1,
        VARIANT_BOOL IncludeMarkup,
        const _variant_t & ExternalExporter = vtMissing );
    GuidesPtr GetGuides ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_SlideMaster (
        /*[out,retval]*/ struct _Master * * SlideMaster ) = 0;
      virtual HRESULT __stdcall get_TitleMaster (
        /*[out,retval]*/ struct _Master * * TitleMaster ) = 0;
      virtual HRESULT __stdcall get_HasTitleMaster (
        /*[out,retval]*/ __missing_type__ * HasTitleMaster ) = 0;
      virtual HRESULT __stdcall raw_AddTitleMaster (
        /*[out,retval]*/ struct _Master * * TitleMaster ) = 0;
      virtual HRESULT __stdcall raw_ApplyTemplate (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall get_TemplateName (
        /*[out,retval]*/ BSTR * TemplateName ) = 0;
      virtual HRESULT __stdcall get_NotesMaster (
        /*[out,retval]*/ struct _Master * * NotesMaster ) = 0;
      virtual HRESULT __stdcall get_HandoutMaster (
        /*[out,retval]*/ struct _Master * * HandoutMaster ) = 0;
      virtual HRESULT __stdcall get_Slides (
        /*[out,retval]*/ struct Slides * * Slides ) = 0;
      virtual HRESULT __stdcall get_PageSetup (
        /*[out,retval]*/ struct PageSetup * * PageSetup ) = 0;
      virtual HRESULT __stdcall get_ColorSchemes (
        /*[out,retval]*/ struct ColorSchemes * * ColorSchemes ) = 0;
      virtual HRESULT __stdcall get_ExtraColors (
        /*[out,retval]*/ struct ExtraColors * * ExtraColors ) = 0;
      virtual HRESULT __stdcall get_SlideShowSettings (
        /*[out,retval]*/ struct SlideShowSettings * * SlideShowSettings ) = 0;
      virtual HRESULT __stdcall get_Fonts (
        /*[out,retval]*/ struct Fonts * * Fonts ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct DocumentWindows * * Windows ) = 0;
      virtual HRESULT __stdcall get_Tags (
        /*[out,retval]*/ struct Tags * * Tags ) = 0;
      virtual HRESULT __stdcall get_DefaultShape (
        /*[out,retval]*/ struct Shape * * DefaultShape ) = 0;
      virtual HRESULT __stdcall get_BuiltInDocumentProperties (
        /*[out,retval]*/ IDispatch * * BuiltInDocumentProperties ) = 0;
      virtual HRESULT __stdcall get_CustomDocumentProperties (
        /*[out,retval]*/ IDispatch * * CustomDocumentProperties ) = 0;
      virtual HRESULT __stdcall get_VBProject (
        /*[out,retval]*/ struct _VBProject * * VBProject ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ __missing_type__ * ReadOnly ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * FullName ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall get_Saved (
        /*[out,retval]*/ __missing_type__ * Saved ) = 0;
      virtual HRESULT __stdcall put_Saved (
        /*[in]*/ __missing_type__ Saved ) = 0;
      virtual HRESULT __stdcall get_LayoutDirection (
        /*[out,retval]*/ enum PpDirection * LayoutDirection ) = 0;
      virtual HRESULT __stdcall put_LayoutDirection (
        /*[in]*/ enum PpDirection LayoutDirection ) = 0;
      virtual HRESULT __stdcall raw_NewWindow (
        /*[out,retval]*/ struct DocumentWindow * * NewWindow ) = 0;
      virtual HRESULT __stdcall raw_FollowHyperlink (
        /*[in]*/ BSTR Address,
        /*[in]*/ BSTR SubAddress,
        /*[in]*/ VARIANT_BOOL NewWindow,
        /*[in]*/ VARIANT_BOOL AddHistory,
        /*[in]*/ BSTR ExtraInfo,
        /*[in]*/ __missing_type__ Method,
        /*[in]*/ BSTR HeaderInfo ) = 0;
      virtual HRESULT __stdcall raw_AddToFavorites ( ) = 0;
      virtual HRESULT __stdcall raw_Unused ( ) = 0;
      virtual HRESULT __stdcall get_PrintOptions (
        /*[out,retval]*/ struct PrintOptions * * PrintOptions ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ int From,
        /*[in]*/ int To,
        /*[in]*/ BSTR PrintToFile,
        /*[in]*/ int Copies,
        /*[in]*/ __missing_type__ Collate ) = 0;
      virtual HRESULT __stdcall raw_Save ( ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum PpSaveAsFileType FileFormat,
        /*[in]*/ __missing_type__ EmbedTrueTypeFonts ) = 0;
      virtual HRESULT __stdcall raw_SaveCopyAs (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum PpSaveAsFileType FileFormat,
        /*[in]*/ __missing_type__ EmbedTrueTypeFonts ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Path,
        /*[in]*/ BSTR FilterName,
        /*[in]*/ int ScaleWidth,
        /*[in]*/ int ScaleHeight ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_SetUndoText (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Container (
        /*[out,retval]*/ IDispatch * * Container ) = 0;
      virtual HRESULT __stdcall get_DisplayComments (
        /*[out,retval]*/ __missing_type__ * DisplayComments ) = 0;
      virtual HRESULT __stdcall put_DisplayComments (
        /*[in]*/ __missing_type__ DisplayComments ) = 0;
      virtual HRESULT __stdcall get_FarEastLineBreakLevel (
        /*[out,retval]*/ enum PpFarEastLineBreakLevel * FarEastLineBreakLevel ) = 0;
      virtual HRESULT __stdcall put_FarEastLineBreakLevel (
        /*[in]*/ enum PpFarEastLineBreakLevel FarEastLineBreakLevel ) = 0;
      virtual HRESULT __stdcall get_NoLineBreakBefore (
        /*[out,retval]*/ BSTR * NoLineBreakBefore ) = 0;
      virtual HRESULT __stdcall put_NoLineBreakBefore (
        /*[in]*/ BSTR NoLineBreakBefore ) = 0;
      virtual HRESULT __stdcall get_NoLineBreakAfter (
        /*[out,retval]*/ BSTR * NoLineBreakAfter ) = 0;
      virtual HRESULT __stdcall put_NoLineBreakAfter (
        /*[in]*/ BSTR NoLineBreakAfter ) = 0;
      virtual HRESULT __stdcall raw_UpdateLinks ( ) = 0;
      virtual HRESULT __stdcall get_SlideShowWindow (
        /*[out,retval]*/ struct SlideShowWindow * * SlideShowWindow ) = 0;
      virtual HRESULT __stdcall get_FarEastLineBreakLanguage (
        /*[out,retval]*/ __missing_type__ * FarEastLineBreakLanguage ) = 0;
      virtual HRESULT __stdcall put_FarEastLineBreakLanguage (
        /*[in]*/ __missing_type__ FarEastLineBreakLanguage ) = 0;
      virtual HRESULT __stdcall raw_WebPagePreview ( ) = 0;
      virtual HRESULT __stdcall get_DefaultLanguageID (
        /*[out,retval]*/ __missing_type__ * DefaultLanguageID ) = 0;
      virtual HRESULT __stdcall put_DefaultLanguageID (
        /*[in]*/ __missing_type__ DefaultLanguageID ) = 0;
      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ __missing_type__ * * CommandBars ) = 0;
      virtual HRESULT __stdcall get_PublishObjects (
        /*[out,retval]*/ struct PublishObjects * * PublishObjects ) = 0;
      virtual HRESULT __stdcall get_WebOptions (
        /*[out,retval]*/ struct WebOptions * * WebOptions ) = 0;
      virtual HRESULT __stdcall get_HTMLProject (
        /*[out,retval]*/ __missing_type__ * * HTMLProject ) = 0;
      virtual HRESULT __stdcall raw_ReloadAs (
        /*[in]*/ __missing_type__ cp ) = 0;
      virtual HRESULT __stdcall raw_MakeIntoTemplate (
        /*[in]*/ __missing_type__ IsDesignTemplate ) = 0;
      virtual HRESULT __stdcall get_EnvelopeVisible (
        /*[out,retval]*/ __missing_type__ * EnvelopeVisible ) = 0;
      virtual HRESULT __stdcall put_EnvelopeVisible (
        /*[in]*/ __missing_type__ EnvelopeVisible ) = 0;
      virtual HRESULT __stdcall raw_sblt (
        /*[in]*/ BSTR s ) = 0;
      virtual HRESULT __stdcall get_VBASigned (
        /*[out,retval]*/ __missing_type__ * VBASigned ) = 0;
      virtual HRESULT __stdcall get_SnapToGrid (
        /*[out,retval]*/ __missing_type__ * SnapToGrid ) = 0;
      virtual HRESULT __stdcall put_SnapToGrid (
        /*[in]*/ __missing_type__ SnapToGrid ) = 0;
      virtual HRESULT __stdcall get_GridDistance (
        /*[out,retval]*/ float * GridDistance ) = 0;
      virtual HRESULT __stdcall put_GridDistance (
        /*[in]*/ float GridDistance ) = 0;
      virtual HRESULT __stdcall get_Designs (
        /*[out,retval]*/ struct Designs * * Designs ) = 0;
      virtual HRESULT __stdcall raw_Merge (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_CheckIn (
        /*[in]*/ VARIANT_BOOL SaveChanges,
        /*[in]*/ VARIANT Comments = vtMissing,
        /*[in]*/ VARIANT MakePublic = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_CanCheckIn (
        /*[out,retval]*/ VARIANT_BOOL * CanCheckIn ) = 0;
      virtual HRESULT __stdcall get_Signatures (
        /*[out,retval]*/ __missing_type__ * * Signatures ) = 0;
      virtual HRESULT __stdcall get_RemovePersonalInformation (
        /*[out,retval]*/ __missing_type__ * RemovePersonalInformation ) = 0;
      virtual HRESULT __stdcall put_RemovePersonalInformation (
        /*[in]*/ __missing_type__ RemovePersonalInformation ) = 0;
      virtual HRESULT __stdcall raw_SendForReview (
        /*[in]*/ BSTR Recipients,
        /*[in]*/ BSTR Subject,
        /*[in]*/ VARIANT_BOOL ShowMessage,
        /*[in]*/ VARIANT IncludeAttachment = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ReplyWithChanges (
        /*[in]*/ VARIANT_BOOL ShowMessage ) = 0;
      virtual HRESULT __stdcall raw_EndReview ( ) = 0;
      virtual HRESULT __stdcall get_HasRevisionInfo (
        /*[out,retval]*/ enum PpRevisionInfo * HasRevisionInfo ) = 0;
      virtual HRESULT __stdcall raw_AddBaseline (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_RemoveBaseline ( ) = 0;
      virtual HRESULT __stdcall get_PasswordEncryptionProvider (
        /*[out,retval]*/ BSTR * PasswordEncryptionProvider ) = 0;
      virtual HRESULT __stdcall get_PasswordEncryptionAlgorithm (
        /*[out,retval]*/ BSTR * PasswordEncryptionAlgorithm ) = 0;
      virtual HRESULT __stdcall get_PasswordEncryptionKeyLength (
        /*[out,retval]*/ int * PasswordEncryptionKeyLength ) = 0;
      virtual HRESULT __stdcall get_PasswordEncryptionFileProperties (
        /*[out,retval]*/ VARIANT_BOOL * PasswordEncryptionFileProperties ) = 0;
      virtual HRESULT __stdcall raw_SetPasswordEncryptionOptions (
        /*[in]*/ BSTR PasswordEncryptionProvider,
        /*[in]*/ BSTR PasswordEncryptionAlgorithm,
        /*[in]*/ int PasswordEncryptionKeyLength,
        /*[in]*/ VARIANT_BOOL PasswordEncryptionFileProperties ) = 0;
      virtual HRESULT __stdcall get_Password (
        /*[out,retval]*/ BSTR * Password ) = 0;
      virtual HRESULT __stdcall put_Password (
        /*[in]*/ BSTR Password ) = 0;
      virtual HRESULT __stdcall get_WritePassword (
        /*[out,retval]*/ BSTR * WritePassword ) = 0;
      virtual HRESULT __stdcall put_WritePassword (
        /*[in]*/ BSTR WritePassword ) = 0;
      virtual HRESULT __stdcall get_Permission (
        /*[out,retval]*/ __missing_type__ * * Permission ) = 0;
      virtual HRESULT __stdcall get_SharedWorkspace (
        /*[out,retval]*/ __missing_type__ * * SharedWorkspace ) = 0;
      virtual HRESULT __stdcall get_Sync (
        /*[out,retval]*/ __missing_type__ * * Sync ) = 0;
      virtual HRESULT __stdcall raw_SendFaxOverInternet (
        /*[in]*/ BSTR Recipients,
        /*[in]*/ BSTR Subject,
        /*[in]*/ VARIANT_BOOL ShowMessage ) = 0;
      virtual HRESULT __stdcall get_DocumentLibraryVersions (
        /*[out,retval]*/ __missing_type__ * * DocumentLibraryVersions ) = 0;
      virtual HRESULT __stdcall get_ContentTypeProperties (
        /*[out,retval]*/ __missing_type__ * * ContentTypeProperties ) = 0;
      virtual HRESULT __stdcall get_SectionCount (
        /*[out,retval]*/ int * SectionCount ) = 0;
      virtual HRESULT __stdcall get_HasSections (
        /*[out,retval]*/ VARIANT_BOOL * HasSections ) = 0;
      virtual HRESULT __stdcall raw_NewSectionAfter (
        /*[in]*/ int Index,
        /*[in]*/ VARIANT_BOOL AfterSlide,
        /*[in]*/ BSTR sectionTitle,
        /*[out]*/ int * newSectionIndex ) = 0;
      virtual HRESULT __stdcall raw_DeleteSection (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall raw_DisableSections ( ) = 0;
      virtual HRESULT __stdcall raw_sectionTitle (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * sectionTitle ) = 0;
      virtual HRESULT __stdcall raw_RemoveDocumentInformation (
        /*[in]*/ enum PpRemoveDocInfoType Type ) = 0;
      virtual HRESULT __stdcall raw_CheckInWithVersion (
        /*[in]*/ VARIANT_BOOL SaveChanges,
        /*[in]*/ VARIANT Comments = vtMissing,
        /*[in]*/ VARIANT MakePublic = vtMissing,
        /*[in]*/ VARIANT VersionType = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ExportAsFixedFormat (
        /*[in]*/ BSTR Path,
        /*[in]*/ enum PpFixedFormatType FixedFormatType,
        /*[in]*/ enum PpFixedFormatIntent Intent,
        /*[in]*/ __missing_type__ FrameSlides,
        /*[in]*/ enum PpPrintHandoutOrder HandoutOrder,
        /*[in]*/ enum PpPrintOutputType OutputType,
        /*[in]*/ __missing_type__ PrintHiddenSlides,
        /*[in]*/ struct PrintRange * PrintRange,
        /*[in]*/ enum PpPrintRangeType RangeType,
        /*[in]*/ BSTR SlideShowName,
        /*[in]*/ VARIANT_BOOL IncludeDocProperties,
        /*[in]*/ VARIANT_BOOL KeepIRMSettings,
        /*[in]*/ VARIANT_BOOL DocStructureTags,
        /*[in]*/ VARIANT_BOOL BitmapMissingFonts,
        /*[in]*/ VARIANT_BOOL UseISO19005_1,
        /*[in]*/ VARIANT ExternalExporter = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ServerPolicy (
        /*[out,retval]*/ __missing_type__ * * ServerPolicy ) = 0;
      virtual HRESULT __stdcall raw_GetWorkflowTasks (
        /*[out,retval]*/ __missing_type__ * * GetWorkflowTasks ) = 0;
      virtual HRESULT __stdcall raw_GetWorkflowTemplates (
        /*[out,retval]*/ __missing_type__ * * GetWorkflowTemplates ) = 0;
      virtual HRESULT __stdcall raw_LockServerFile ( ) = 0;
      virtual HRESULT __stdcall get_DocumentInspectors (
        /*[out,retval]*/ __missing_type__ * * DocumentInspectors ) = 0;
      virtual HRESULT __stdcall get_HasVBProject (
        /*[out,retval]*/ VARIANT_BOOL * HasVBProject ) = 0;
      virtual HRESULT __stdcall get_CustomXMLParts (
        /*[out,retval]*/ __missing_type__ * * CustomXMLParts ) = 0;
      virtual HRESULT __stdcall get_Final (
        /*[out,retval]*/ VARIANT_BOOL * Final ) = 0;
      virtual HRESULT __stdcall put_Final (
        /*[in]*/ VARIANT_BOOL Final ) = 0;
      virtual HRESULT __stdcall raw_ApplyTheme (
        /*[in]*/ BSTR themeName ) = 0;
      virtual HRESULT __stdcall get_CustomerData (
        /*[out,retval]*/ struct CustomerData * * CustomerData ) = 0;
      virtual HRESULT __stdcall get_Research (
        /*[out,retval]*/ struct Research * * Research ) = 0;
      virtual HRESULT __stdcall raw_PublishSlides (
        /*[in]*/ BSTR SlideLibraryUrl,
        /*[in]*/ VARIANT_BOOL Overwrite,
        /*[in]*/ VARIANT_BOOL UseSlideOrder ) = 0;
      virtual HRESULT __stdcall get_EncryptionProvider (
        /*[out,retval]*/ BSTR * EncryptionProvider ) = 0;
      virtual HRESULT __stdcall put_EncryptionProvider (
        /*[in]*/ BSTR EncryptionProvider ) = 0;
      virtual HRESULT __stdcall raw_Convert ( ) = 0;
      virtual HRESULT __stdcall get_SectionProperties (
        /*[out,retval]*/ struct SectionProperties * * SectionProperties ) = 0;
      virtual HRESULT __stdcall get_Coauthoring (
        /*[out,retval]*/ struct Coauthoring * * Coauthoring ) = 0;
      virtual HRESULT __stdcall raw_MergeWithBaseline (
        /*[in]*/ BSTR withPresentation,
        /*[in]*/ BSTR baselinePresentation ) = 0;
      virtual HRESULT __stdcall get_InMergeMode (
        /*[out,retval]*/ VARIANT_BOOL * InMergeMode ) = 0;
      virtual HRESULT __stdcall raw_AcceptAll ( ) = 0;
      virtual HRESULT __stdcall raw_RejectAll ( ) = 0;
      virtual HRESULT __stdcall raw_EnsureAllMediaUpgraded ( ) = 0;
      virtual HRESULT __stdcall get_Broadcast (
        /*[out,retval]*/ struct Broadcast * * Broadcast ) = 0;
      virtual HRESULT __stdcall get_HasNotesMaster (
        /*[out,retval]*/ VARIANT_BOOL * HasNotesMaster ) = 0;
      virtual HRESULT __stdcall get_HasHandoutMaster (
        /*[out,retval]*/ VARIANT_BOOL * HasHandoutMaster ) = 0;
      virtual HRESULT __stdcall raw_Convert2 (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall get_CreateVideoStatus (
        /*[out,retval]*/ enum PpMediaTaskStatus * CreateVideoStatus ) = 0;
      virtual HRESULT __stdcall raw_CreateVideo (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT_BOOL UseTimingsAndNarrations,
        /*[in]*/ int DefaultSlideDuration,
        /*[in]*/ int VertResolution,
        /*[in]*/ int FramesPerSecond,
        /*[in]*/ int Quality ) = 0;
      virtual HRESULT __stdcall raw_ApplyTemplate2 (
        /*[in]*/ BSTR FileName,
        /*[in]*/ BSTR VariantGUID ) = 0;
      virtual HRESULT __stdcall get_ChartDataPointTrack (
        /*[out,retval]*/ VARIANT_BOOL * pfChartDataPointTrack ) = 0;
      virtual HRESULT __stdcall put_ChartDataPointTrack (
        /*[in]*/ VARIANT_BOOL pfChartDataPointTrack ) = 0;
      virtual HRESULT __stdcall raw_ExportAsFixedFormat2 (
        /*[in]*/ BSTR Path,
        /*[in]*/ enum PpFixedFormatType FixedFormatType,
        /*[in]*/ enum PpFixedFormatIntent Intent,
        /*[in]*/ __missing_type__ FrameSlides,
        /*[in]*/ enum PpPrintHandoutOrder HandoutOrder,
        /*[in]*/ enum PpPrintOutputType OutputType,
        /*[in]*/ __missing_type__ PrintHiddenSlides,
        /*[in]*/ struct PrintRange * PrintRange,
        /*[in]*/ enum PpPrintRangeType RangeType,
        /*[in]*/ BSTR SlideShowName,
        /*[in]*/ VARIANT_BOOL IncludeDocProperties,
        /*[in]*/ VARIANT_BOOL KeepIRMSettings,
        /*[in]*/ VARIANT_BOOL DocStructureTags,
        /*[in]*/ VARIANT_BOOL BitmapMissingFonts,
        /*[in]*/ VARIANT_BOOL UseISO19005_1,
        /*[in]*/ VARIANT_BOOL IncludeMarkup,
        /*[in]*/ VARIANT ExternalExporter = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Guides (
        /*[out,retval]*/ struct Guides * * Guides ) = 0;
};

struct __declspec(uuid("914934c9-5a91-11cf-8700-00aa0060263b"))
Cell : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetSelected))
    VARIANT_BOOL Selected;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ShapePtr GetShape ( );
    BordersPtr GetBorders ( );
    HRESULT Merge (
        struct Cell * MergeTo );
    HRESULT Split (
        int NumRows,
        int NumColumns );
    HRESULT Select ( );
    VARIANT_BOOL GetSelected ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * Borders ) = 0;
      virtual HRESULT __stdcall raw_Merge (
        /*[in]*/ struct Cell * MergeTo ) = 0;
      virtual HRESULT __stdcall raw_Split (
        /*[in]*/ int NumRows,
        /*[in]*/ int NumColumns ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[out,retval]*/ VARIANT_BOOL * Selected ) = 0;
};

struct __declspec(uuid("914934c8-5a91-11cf-8700-00aa0060263b"))
CellRange : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    CellPtr Item (
        int Index );
    BordersPtr GetBorders ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Cell * * Item ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * Borders ) = 0;
};

struct __declspec(uuid("914934c5-5a91-11cf-8700-00aa0060263b"))
Column : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCells))
    CellRangePtr Cells;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    CellRangePtr GetCells ( );
    HRESULT Select ( );
    HRESULT Delete ( );
    float GetWidth ( );
    void PutWidth (
        float Width );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Cells (
        /*[out,retval]*/ struct CellRange * * Cells ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
};

struct __declspec(uuid("914934c4-5a91-11cf-8700-00aa0060263b"))
Columns : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ColumnPtr Item (
        int Index );
    ColumnPtr Add (
        int BeforeColumn );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Column * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ int BeforeColumn,
        /*[out,retval]*/ struct Column * * Add ) = 0;
};

struct __declspec(uuid("914934c7-5a91-11cf-8700-00aa0060263b"))
Row : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCells))
    CellRangePtr Cells;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    CellRangePtr GetCells ( );
    HRESULT Select ( );
    HRESULT Delete ( );
    float GetHeight ( );
    void PutHeight (
        float Height );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Cells (
        /*[out,retval]*/ struct CellRange * * Cells ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
};

struct __declspec(uuid("914934c6-5a91-11cf-8700-00aa0060263b"))
Rows : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    RowPtr Item (
        int Index );
    RowPtr Add (
        int BeforeRow );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Row * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ int BeforeRow,
        /*[out,retval]*/ struct Row * * Add ) = 0;
};

struct __declspec(uuid("914934c3-5a91-11cf-8700-00aa0060263b"))
Table : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetColumns))
    ColumnsPtr Columns;
    __declspec(property(get=GetRows))
    RowsPtr Rows;
    __declspec(property(get=GetTableDirection,put=PutTableDirection))
    enum PpDirection TableDirection;
    __declspec(property(get=GetFirstRow,put=PutFirstRow))
    VARIANT_BOOL FirstRow;
    __declspec(property(get=GetLastRow,put=PutLastRow))
    VARIANT_BOOL LastRow;
    __declspec(property(get=GetFirstCol,put=PutFirstCol))
    VARIANT_BOOL FirstCol;
    __declspec(property(get=GetLastCol,put=PutLastCol))
    VARIANT_BOOL LastCol;
    __declspec(property(get=GetHorizBanding,put=PutHorizBanding))
    VARIANT_BOOL HorizBanding;
    __declspec(property(get=GetVertBanding,put=PutVertBanding))
    VARIANT_BOOL VertBanding;
    __declspec(property(get=GetStyle))
    TableStylePtr Style;
    __declspec(property(get=GetBackground))
    TableBackgroundPtr Background;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ColumnsPtr GetColumns ( );
    RowsPtr GetRows ( );
    CellPtr Cell (
        int Row,
        int Column );
    enum PpDirection GetTableDirection ( );
    void PutTableDirection (
        enum PpDirection TableDirection );
    HRESULT MergeBorders ( );
    VARIANT_BOOL GetFirstRow ( );
    void PutFirstRow (
        VARIANT_BOOL FirstRow );
    VARIANT_BOOL GetLastRow ( );
    void PutLastRow (
        VARIANT_BOOL LastRow );
    VARIANT_BOOL GetFirstCol ( );
    void PutFirstCol (
        VARIANT_BOOL FirstCol );
    VARIANT_BOOL GetLastCol ( );
    void PutLastCol (
        VARIANT_BOOL LastCol );
    VARIANT_BOOL GetHorizBanding ( );
    void PutHorizBanding (
        VARIANT_BOOL HorizBanding );
    VARIANT_BOOL GetVertBanding ( );
    void PutVertBanding (
        VARIANT_BOOL VertBanding );
    TableStylePtr GetStyle ( );
    TableBackgroundPtr GetBackground ( );
    HRESULT ScaleProportionally (
        float scale );
    HRESULT ApplyStyle (
        _bstr_t StyleID,
        VARIANT_BOOL SaveFormatting );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t AlternativeText );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t Title );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ struct Columns * * Columns ) = 0;
      virtual HRESULT __stdcall get_Rows (
        /*[out,retval]*/ struct Rows * * Rows ) = 0;
      virtual HRESULT __stdcall raw_Cell (
        /*[in]*/ int Row,
        /*[in]*/ int Column,
        /*[out,retval]*/ struct Cell * * Cell ) = 0;
      virtual HRESULT __stdcall get_TableDirection (
        /*[out,retval]*/ enum PpDirection * TableDirection ) = 0;
      virtual HRESULT __stdcall put_TableDirection (
        /*[in]*/ enum PpDirection TableDirection ) = 0;
      virtual HRESULT __stdcall raw_MergeBorders ( ) = 0;
      virtual HRESULT __stdcall get_FirstRow (
        /*[out,retval]*/ VARIANT_BOOL * FirstRow ) = 0;
      virtual HRESULT __stdcall put_FirstRow (
        /*[in]*/ VARIANT_BOOL FirstRow ) = 0;
      virtual HRESULT __stdcall get_LastRow (
        /*[out,retval]*/ VARIANT_BOOL * LastRow ) = 0;
      virtual HRESULT __stdcall put_LastRow (
        /*[in]*/ VARIANT_BOOL LastRow ) = 0;
      virtual HRESULT __stdcall get_FirstCol (
        /*[out,retval]*/ VARIANT_BOOL * FirstCol ) = 0;
      virtual HRESULT __stdcall put_FirstCol (
        /*[in]*/ VARIANT_BOOL FirstCol ) = 0;
      virtual HRESULT __stdcall get_LastCol (
        /*[out,retval]*/ VARIANT_BOOL * LastCol ) = 0;
      virtual HRESULT __stdcall put_LastCol (
        /*[in]*/ VARIANT_BOOL LastCol ) = 0;
      virtual HRESULT __stdcall get_HorizBanding (
        /*[out,retval]*/ VARIANT_BOOL * HorizBanding ) = 0;
      virtual HRESULT __stdcall put_HorizBanding (
        /*[in]*/ VARIANT_BOOL HorizBanding ) = 0;
      virtual HRESULT __stdcall get_VertBanding (
        /*[out,retval]*/ VARIANT_BOOL * VertBanding ) = 0;
      virtual HRESULT __stdcall put_VertBanding (
        /*[in]*/ VARIANT_BOOL VertBanding ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct TableStyle * * Style ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ struct TableBackground * * Background ) = 0;
      virtual HRESULT __stdcall raw_ScaleProportionally (
        /*[in]*/ float scale ) = 0;
      virtual HRESULT __stdcall raw_ApplyStyle (
        /*[in]*/ BSTR StyleID,
        /*[in]*/ VARIANT_BOOL SaveFormatting ) = 0;
      virtual HRESULT __stdcall get_AlternativeText (
        /*[out,retval]*/ BSTR * AlternativeText ) = 0;
      virtual HRESULT __stdcall put_AlternativeText (
        /*[in]*/ BSTR AlternativeText ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * Title ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR Title ) = 0;
};

struct __declspec(uuid("914934e0-5a91-11cf-8700-00aa0060263b"))
Timing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRestart,put=PutRestart))
    enum MsoAnimEffectRestart Restart;
    __declspec(property(get=GetBounceEndIntensity,put=PutBounceEndIntensity))
    float BounceEndIntensity;
    __declspec(property(get=GetTriggerBookmark,put=PutTriggerBookmark))
    _bstr_t TriggerBookmark;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDuration,put=PutDuration))
    float Duration;
    __declspec(property(get=GetTriggerType,put=PutTriggerType))
    enum MsoAnimTriggerType TriggerType;
    __declspec(property(get=GetTriggerDelayTime,put=PutTriggerDelayTime))
    float TriggerDelayTime;
    __declspec(property(get=GetTriggerShape,put=PutTriggerShape))
    ShapePtr TriggerShape;
    __declspec(property(get=GetRepeatCount,put=PutRepeatCount))
    int RepeatCount;
    __declspec(property(get=GetRepeatDuration,put=PutRepeatDuration))
    float RepeatDuration;
    __declspec(property(get=GetSpeed,put=PutSpeed))
    float Speed;
    __declspec(property(get=GetAccelerate,put=PutAccelerate))
    float Accelerate;
    __declspec(property(get=GetDecelerate,put=PutDecelerate))
    float Decelerate;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    float GetDuration ( );
    void PutDuration (
        float Duration );
    enum MsoAnimTriggerType GetTriggerType ( );
    void PutTriggerType (
        enum MsoAnimTriggerType TriggerType );
    float GetTriggerDelayTime ( );
    void PutTriggerDelayTime (
        float TriggerDelayTime );
    ShapePtr GetTriggerShape ( );
    void PutTriggerShape (
        struct Shape * TriggerShape );
    int GetRepeatCount ( );
    void PutRepeatCount (
        int RepeatCount );
    float GetRepeatDuration ( );
    void PutRepeatDuration (
        float RepeatDuration );
    float GetSpeed ( );
    void PutSpeed (
        float Speed );
    float GetAccelerate ( );
    void PutAccelerate (
        float Accelerate );
    float GetDecelerate ( );
    void PutDecelerate (
        float Decelerate );
    __missing_type__  GetAutoReverse ( );
    void PutAutoReverse (
        __missing_type__ AutoReverse );
    __missing_type__  GetSmoothStart ( );
    void PutSmoothStart (
        __missing_type__ SmoothStart );
    __missing_type__  GetSmoothEnd ( );
    void PutSmoothEnd (
        __missing_type__ SmoothEnd );
    __missing_type__  GetRewindAtEnd ( );
    void PutRewindAtEnd (
        __missing_type__ RewindAtEnd );
    enum MsoAnimEffectRestart GetRestart ( );
    void PutRestart (
        enum MsoAnimEffectRestart Restart );
    __missing_type__  GetBounceEnd ( );
    void PutBounceEnd (
        __missing_type__ BounceEnd );
    float GetBounceEndIntensity ( );
    void PutBounceEndIntensity (
        float BounceEndIntensity );
    _bstr_t GetTriggerBookmark ( );
    void PutTriggerBookmark (
        _bstr_t TriggerBookmark );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ float * Duration ) = 0;
      virtual HRESULT __stdcall put_Duration (
        /*[in]*/ float Duration ) = 0;
      virtual HRESULT __stdcall get_TriggerType (
        /*[out,retval]*/ enum MsoAnimTriggerType * TriggerType ) = 0;
      virtual HRESULT __stdcall put_TriggerType (
        /*[in]*/ enum MsoAnimTriggerType TriggerType ) = 0;
      virtual HRESULT __stdcall get_TriggerDelayTime (
        /*[out,retval]*/ float * TriggerDelayTime ) = 0;
      virtual HRESULT __stdcall put_TriggerDelayTime (
        /*[in]*/ float TriggerDelayTime ) = 0;
      virtual HRESULT __stdcall get_TriggerShape (
        /*[out,retval]*/ struct Shape * * TriggerShape ) = 0;
      virtual HRESULT __stdcall put_TriggerShape (
        /*[in]*/ struct Shape * TriggerShape ) = 0;
      virtual HRESULT __stdcall get_RepeatCount (
        /*[out,retval]*/ int * RepeatCount ) = 0;
      virtual HRESULT __stdcall put_RepeatCount (
        /*[in]*/ int RepeatCount ) = 0;
      virtual HRESULT __stdcall get_RepeatDuration (
        /*[out,retval]*/ float * RepeatDuration ) = 0;
      virtual HRESULT __stdcall put_RepeatDuration (
        /*[in]*/ float RepeatDuration ) = 0;
      virtual HRESULT __stdcall get_Speed (
        /*[out,retval]*/ float * Speed ) = 0;
      virtual HRESULT __stdcall put_Speed (
        /*[in]*/ float Speed ) = 0;
      virtual HRESULT __stdcall get_Accelerate (
        /*[out,retval]*/ float * Accelerate ) = 0;
      virtual HRESULT __stdcall put_Accelerate (
        /*[in]*/ float Accelerate ) = 0;
      virtual HRESULT __stdcall get_Decelerate (
        /*[out,retval]*/ float * Decelerate ) = 0;
      virtual HRESULT __stdcall put_Decelerate (
        /*[in]*/ float Decelerate ) = 0;
      virtual HRESULT __stdcall get_AutoReverse (
        /*[out,retval]*/ __missing_type__ * AutoReverse ) = 0;
      virtual HRESULT __stdcall put_AutoReverse (
        /*[in]*/ __missing_type__ AutoReverse ) = 0;
      virtual HRESULT __stdcall get_SmoothStart (
        /*[out,retval]*/ __missing_type__ * SmoothStart ) = 0;
      virtual HRESULT __stdcall put_SmoothStart (
        /*[in]*/ __missing_type__ SmoothStart ) = 0;
      virtual HRESULT __stdcall get_SmoothEnd (
        /*[out,retval]*/ __missing_type__ * SmoothEnd ) = 0;
      virtual HRESULT __stdcall put_SmoothEnd (
        /*[in]*/ __missing_type__ SmoothEnd ) = 0;
      virtual HRESULT __stdcall get_RewindAtEnd (
        /*[out,retval]*/ __missing_type__ * RewindAtEnd ) = 0;
      virtual HRESULT __stdcall put_RewindAtEnd (
        /*[in]*/ __missing_type__ RewindAtEnd ) = 0;
      virtual HRESULT __stdcall get_Restart (
        /*[out,retval]*/ enum MsoAnimEffectRestart * Restart ) = 0;
      virtual HRESULT __stdcall put_Restart (
        /*[in]*/ enum MsoAnimEffectRestart Restart ) = 0;
      virtual HRESULT __stdcall get_BounceEnd (
        /*[out,retval]*/ __missing_type__ * BounceEnd ) = 0;
      virtual HRESULT __stdcall put_BounceEnd (
        /*[in]*/ __missing_type__ BounceEnd ) = 0;
      virtual HRESULT __stdcall get_BounceEndIntensity (
        /*[out,retval]*/ float * BounceEndIntensity ) = 0;
      virtual HRESULT __stdcall put_BounceEndIntensity (
        /*[in]*/ float BounceEndIntensity ) = 0;
      virtual HRESULT __stdcall get_TriggerBookmark (
        /*[out,retval]*/ BSTR * TriggerBookmark ) = 0;
      virtual HRESULT __stdcall put_TriggerBookmark (
        /*[in]*/ BSTR TriggerBookmark ) = 0;
};

struct __declspec(uuid("914934e4-5a91-11cf-8700-00aa0060263b"))
AnimationBehavior : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAdditive,put=PutAdditive))
    enum MsoAnimAdditive Additive;
    __declspec(property(get=GetAccumulate,put=PutAccumulate))
    enum MsoAnimAccumulate Accumulate;
    __declspec(property(get=GetType,put=PutType))
    enum MsoAnimType Type;
    __declspec(property(get=GetMotionEffect))
    MotionEffectPtr MotionEffect;
    __declspec(property(get=GetColorEffect))
    ColorEffectPtr ColorEffect;
    __declspec(property(get=GetScaleEffect))
    ScaleEffectPtr ScaleEffect;
    __declspec(property(get=GetRotationEffect))
    RotationEffectPtr RotationEffect;
    __declspec(property(get=GetPropertyEffect))
    PropertyEffectPtr PropertyEffect;
    __declspec(property(get=GetTiming))
    TimingPtr Timing;
    __declspec(property(get=GetCommandEffect))
    CommandEffectPtr CommandEffect;
    __declspec(property(get=GetFilterEffect))
    FilterEffectPtr FilterEffect;
    __declspec(property(get=GetSetEffect))
    SetEffectPtr SetEffect;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum MsoAnimAdditive GetAdditive ( );
    void PutAdditive (
        enum MsoAnimAdditive Additive );
    enum MsoAnimAccumulate GetAccumulate ( );
    void PutAccumulate (
        enum MsoAnimAccumulate Accumulate );
    enum MsoAnimType GetType ( );
    void PutType (
        enum MsoAnimType Type );
    MotionEffectPtr GetMotionEffect ( );
    ColorEffectPtr GetColorEffect ( );
    ScaleEffectPtr GetScaleEffect ( );
    RotationEffectPtr GetRotationEffect ( );
    PropertyEffectPtr GetPropertyEffect ( );
    TimingPtr GetTiming ( );
    HRESULT Delete ( );
    CommandEffectPtr GetCommandEffect ( );
    FilterEffectPtr GetFilterEffect ( );
    SetEffectPtr GetSetEffect ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Additive (
        /*[out,retval]*/ enum MsoAnimAdditive * Additive ) = 0;
      virtual HRESULT __stdcall put_Additive (
        /*[in]*/ enum MsoAnimAdditive Additive ) = 0;
      virtual HRESULT __stdcall get_Accumulate (
        /*[out,retval]*/ enum MsoAnimAccumulate * Accumulate ) = 0;
      virtual HRESULT __stdcall put_Accumulate (
        /*[in]*/ enum MsoAnimAccumulate Accumulate ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum MsoAnimType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum MsoAnimType Type ) = 0;
      virtual HRESULT __stdcall get_MotionEffect (
        /*[out,retval]*/ struct MotionEffect * * MotionEffect ) = 0;
      virtual HRESULT __stdcall get_ColorEffect (
        /*[out,retval]*/ struct ColorEffect * * ColorEffect ) = 0;
      virtual HRESULT __stdcall get_ScaleEffect (
        /*[out,retval]*/ struct ScaleEffect * * ScaleEffect ) = 0;
      virtual HRESULT __stdcall get_RotationEffect (
        /*[out,retval]*/ struct RotationEffect * * RotationEffect ) = 0;
      virtual HRESULT __stdcall get_PropertyEffect (
        /*[out,retval]*/ struct PropertyEffect * * PropertyEffect ) = 0;
      virtual HRESULT __stdcall get_Timing (
        /*[out,retval]*/ struct Timing * * Timing ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_CommandEffect (
        /*[out,retval]*/ struct CommandEffect * * CommandEffect ) = 0;
      virtual HRESULT __stdcall get_FilterEffect (
        /*[out,retval]*/ struct FilterEffect * * FilterEffect ) = 0;
      virtual HRESULT __stdcall get_SetEffect (
        /*[out,retval]*/ struct SetEffect * * SetEffect ) = 0;
};

struct __declspec(uuid("914934e3-5a91-11cf-8700-00aa0060263b"))
AnimationBehaviors : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    AnimationBehaviorPtr Item (
        int Index );
    AnimationBehaviorPtr Add (
        enum MsoAnimType Type,
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct AnimationBehavior * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum MsoAnimType Type,
        /*[in]*/ int Index,
        /*[out,retval]*/ struct AnimationBehavior * * Add ) = 0;
};

struct __declspec(uuid("914934df-5a91-11cf-8700-00aa0060263b"))
Effect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBehaviors))
    AnimationBehaviorsPtr Behaviors;
    __declspec(property(get=GetEffectInformation))
    EffectInformationPtr EffectInformation;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShape,put=PutShape))
    ShapePtr Shape;
    __declspec(property(get=GetIndex))
    int Index;
    __declspec(property(get=GetTiming))
    TimingPtr Timing;
    __declspec(property(get=GetEffectType,put=PutEffectType))
    enum MsoAnimEffect EffectType;
    __declspec(property(get=GetEffectParameters))
    EffectParametersPtr EffectParameters;
    __declspec(property(get=GetTextRangeStart))
    int TextRangeStart;
    __declspec(property(get=GetTextRangeLength))
    int TextRangeLength;
    __declspec(property(get=GetParagraph,put=PutParagraph))
    int Paragraph;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ShapePtr GetShape ( );
    void PutShape (
        struct Shape * Shape );
    HRESULT MoveTo (
        int toPos );
    HRESULT MoveBefore (
        struct Effect * Effect );
    HRESULT MoveAfter (
        struct Effect * Effect );
    HRESULT Delete ( );
    int GetIndex ( );
    TimingPtr GetTiming ( );
    enum MsoAnimEffect GetEffectType ( );
    void PutEffectType (
        enum MsoAnimEffect EffectType );
    EffectParametersPtr GetEffectParameters ( );
    int GetTextRangeStart ( );
    int GetTextRangeLength ( );
    int GetParagraph ( );
    void PutParagraph (
        int Paragraph );
    _bstr_t GetDisplayName ( );
    __missing_type__  GetExit ( );
    void PutExit (
        __missing_type__ Exit );
    AnimationBehaviorsPtr GetBehaviors ( );
    EffectInformationPtr GetEffectInformation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
      virtual HRESULT __stdcall put_Shape (
        /*[in]*/ struct Shape * Shape ) = 0;
      virtual HRESULT __stdcall raw_MoveTo (
        /*[in]*/ int toPos ) = 0;
      virtual HRESULT __stdcall raw_MoveBefore (
        /*[in]*/ struct Effect * Effect ) = 0;
      virtual HRESULT __stdcall raw_MoveAfter (
        /*[in]*/ struct Effect * Effect ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ int * Index ) = 0;
      virtual HRESULT __stdcall get_Timing (
        /*[out,retval]*/ struct Timing * * Timing ) = 0;
      virtual HRESULT __stdcall get_EffectType (
        /*[out,retval]*/ enum MsoAnimEffect * EffectType ) = 0;
      virtual HRESULT __stdcall put_EffectType (
        /*[in]*/ enum MsoAnimEffect EffectType ) = 0;
      virtual HRESULT __stdcall get_EffectParameters (
        /*[out,retval]*/ struct EffectParameters * * EffectParameters ) = 0;
      virtual HRESULT __stdcall get_TextRangeStart (
        /*[out,retval]*/ int * TextRangeStart ) = 0;
      virtual HRESULT __stdcall get_TextRangeLength (
        /*[out,retval]*/ int * TextRangeLength ) = 0;
      virtual HRESULT __stdcall get_Paragraph (
        /*[out,retval]*/ int * Paragraph ) = 0;
      virtual HRESULT __stdcall put_Paragraph (
        /*[in]*/ int Paragraph ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * DisplayName ) = 0;
      virtual HRESULT __stdcall get_Exit (
        /*[out,retval]*/ __missing_type__ * Exit ) = 0;
      virtual HRESULT __stdcall put_Exit (
        /*[in]*/ __missing_type__ Exit ) = 0;
      virtual HRESULT __stdcall get_Behaviors (
        /*[out,retval]*/ struct AnimationBehaviors * * Behaviors ) = 0;
      virtual HRESULT __stdcall get_EffectInformation (
        /*[out,retval]*/ struct EffectInformation * * EffectInformation ) = 0;
};

struct __declspec(uuid("914934c2-5a91-11cf-8700-00aa0060263b"))
EApplication : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT WindowSelectionChange (
        struct Selection * Sel );
    HRESULT WindowBeforeRightClick (
        struct Selection * Sel,
        VARIANT_BOOL * Cancel );
    HRESULT WindowBeforeDoubleClick (
        struct Selection * Sel,
        VARIANT_BOOL * Cancel );
    HRESULT PresentationClose (
        struct _Presentation * Pres );
    HRESULT PresentationSave (
        struct _Presentation * Pres );
    HRESULT PresentationOpen (
        struct _Presentation * Pres );
    HRESULT NewPresentation (
        struct _Presentation * Pres );
    HRESULT PresentationNewSlide (
        struct _Slide * Sld );
    HRESULT WindowActivate (
        struct _Presentation * Pres,
        struct DocumentWindow * Wn );
    HRESULT WindowDeactivate (
        struct _Presentation * Pres,
        struct DocumentWindow * Wn );
    HRESULT SlideShowBegin (
        struct SlideShowWindow * Wn );
    HRESULT SlideShowNextBuild (
        struct SlideShowWindow * Wn );
    HRESULT SlideShowNextSlide (
        struct SlideShowWindow * Wn );
    HRESULT SlideShowEnd (
        struct _Presentation * Pres );
    HRESULT PresentationPrint (
        struct _Presentation * Pres );
    HRESULT SlideSelectionChanged (
        struct SlideRange * SldRange );
    HRESULT ColorSchemeChanged (
        struct SlideRange * SldRange );
    HRESULT PresentationBeforeSave (
        struct _Presentation * Pres,
        VARIANT_BOOL * Cancel );
    HRESULT SlideShowNextClick (
        struct SlideShowWindow * Wn,
        struct Effect * nEffect );
    HRESULT AfterNewPresentation (
        struct _Presentation * Pres );
    HRESULT AfterPresentationOpen (
        struct _Presentation * Pres );
    HRESULT PresentationSync (
        struct _Presentation * Pres,
        __missing_type__ SyncEventType );
    HRESULT SlideShowOnNext (
        struct SlideShowWindow * Wn );
    HRESULT SlideShowOnPrevious (
        struct SlideShowWindow * Wn );
    HRESULT PresentationBeforeClose (
        struct _Presentation * Pres,
        VARIANT_BOOL * Cancel );
    HRESULT ProtectedViewWindowOpen (
        struct ProtectedViewWindow * ProtViewWindow );
    HRESULT ProtectedViewWindowBeforeEdit (
        struct ProtectedViewWindow * ProtViewWindow,
        VARIANT_BOOL * Cancel );
    HRESULT ProtectedViewWindowBeforeClose (
        struct ProtectedViewWindow * ProtViewWindow,
        enum PpProtectedViewCloseReason ProtectedViewCloseReason,
        VARIANT_BOOL * Cancel );
    HRESULT ProtectedViewWindowActivate (
        struct ProtectedViewWindow * ProtViewWindow );
    HRESULT ProtectedViewWindowDeactivate (
        struct ProtectedViewWindow * ProtViewWindow );
    HRESULT PresentationCloseFinal (
        struct _Presentation * Pres );
    HRESULT AfterDragDropOnSlide (
        struct _Slide * Sld,
        float X,
        float Y );
    HRESULT AfterShapeSizeChange (
        struct Shape * shp );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_WindowSelectionChange (
        /*[in]*/ struct Selection * Sel ) = 0;
      virtual HRESULT __stdcall raw_WindowBeforeRightClick (
        /*[in]*/ struct Selection * Sel,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_WindowBeforeDoubleClick (
        /*[in]*/ struct Selection * Sel,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_PresentationClose (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_PresentationSave (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_PresentationOpen (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_NewPresentation (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_PresentationNewSlide (
        /*[in]*/ struct _Slide * Sld ) = 0;
      virtual HRESULT __stdcall raw_WindowActivate (
        /*[in]*/ struct _Presentation * Pres,
        /*[in]*/ struct DocumentWindow * Wn ) = 0;
      virtual HRESULT __stdcall raw_WindowDeactivate (
        /*[in]*/ struct _Presentation * Pres,
        /*[in]*/ struct DocumentWindow * Wn ) = 0;
      virtual HRESULT __stdcall raw_SlideShowBegin (
        /*[in]*/ struct SlideShowWindow * Wn ) = 0;
      virtual HRESULT __stdcall raw_SlideShowNextBuild (
        /*[in]*/ struct SlideShowWindow * Wn ) = 0;
      virtual HRESULT __stdcall raw_SlideShowNextSlide (
        /*[in]*/ struct SlideShowWindow * Wn ) = 0;
      virtual HRESULT __stdcall raw_SlideShowEnd (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_PresentationPrint (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_SlideSelectionChanged (
        /*[in]*/ struct SlideRange * SldRange ) = 0;
      virtual HRESULT __stdcall raw_ColorSchemeChanged (
        /*[in]*/ struct SlideRange * SldRange ) = 0;
      virtual HRESULT __stdcall raw_PresentationBeforeSave (
        /*[in]*/ struct _Presentation * Pres,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_SlideShowNextClick (
        /*[in]*/ struct SlideShowWindow * Wn,
        /*[in]*/ struct Effect * nEffect ) = 0;
      virtual HRESULT __stdcall raw_AfterNewPresentation (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_AfterPresentationOpen (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_PresentationSync (
        /*[in]*/ struct _Presentation * Pres,
        /*[in]*/ __missing_type__ SyncEventType ) = 0;
      virtual HRESULT __stdcall raw_SlideShowOnNext (
        /*[in]*/ struct SlideShowWindow * Wn ) = 0;
      virtual HRESULT __stdcall raw_SlideShowOnPrevious (
        /*[in]*/ struct SlideShowWindow * Wn ) = 0;
      virtual HRESULT __stdcall raw_PresentationBeforeClose (
        /*[in]*/ struct _Presentation * Pres,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_ProtectedViewWindowOpen (
        /*[in]*/ struct ProtectedViewWindow * ProtViewWindow ) = 0;
      virtual HRESULT __stdcall raw_ProtectedViewWindowBeforeEdit (
        /*[in]*/ struct ProtectedViewWindow * ProtViewWindow,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_ProtectedViewWindowBeforeClose (
        /*[in]*/ struct ProtectedViewWindow * ProtViewWindow,
        /*[in]*/ enum PpProtectedViewCloseReason ProtectedViewCloseReason,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_ProtectedViewWindowActivate (
        /*[in]*/ struct ProtectedViewWindow * ProtViewWindow ) = 0;
      virtual HRESULT __stdcall raw_ProtectedViewWindowDeactivate (
        /*[in]*/ struct ProtectedViewWindow * ProtViewWindow ) = 0;
      virtual HRESULT __stdcall raw_PresentationCloseFinal (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_AfterDragDropOnSlide (
        /*[in]*/ struct _Slide * Sld,
        /*[in]*/ float X,
        /*[in]*/ float Y ) = 0;
      virtual HRESULT __stdcall raw_AfterShapeSizeChange (
        /*[in]*/ struct Shape * shp ) = 0;
};

struct __declspec(uuid("914934de-5a91-11cf-8700-00aa0060263b"))
Sequence : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    EffectPtr Item (
        int Index );
    EffectPtr AddEffect (
        struct Shape * Shape,
        enum MsoAnimEffect effectId,
        enum MsoAnimateByLevel Level,
        enum MsoAnimTriggerType trigger,
        int Index );
    EffectPtr Clone (
        struct Effect * Effect,
        int Index );
    EffectPtr FindFirstAnimationFor (
        struct Shape * Shape );
    EffectPtr FindFirstAnimationForClick (
        int click );
    EffectPtr ConvertToBuildLevel (
        struct Effect * Effect,
        enum MsoAnimateByLevel Level );
    EffectPtr ConvertToAfterEffect (
        struct Effect * Effect,
        enum MsoAnimAfterEffect After,
        __missing_type__ DimColor,
        enum PpColorSchemeIndex DimSchemeColor );
    EffectPtr ConvertToAnimateBackground (
        struct Effect * Effect,
        __missing_type__ AnimateBackground );
    EffectPtr ConvertToAnimateInReverse (
        struct Effect * Effect,
        __missing_type__ animateInReverse );
    EffectPtr ConvertToTextUnitEffect (
        struct Effect * Effect,
        enum MsoAnimTextUnitEffect unitEffect );
    EffectPtr AddTriggerEffect (
        struct Shape * pShape,
        enum MsoAnimEffect effectId,
        enum MsoAnimTriggerType trigger,
        struct Shape * pTriggerShape,
        _bstr_t bookmark,
        enum MsoAnimateByLevel Level );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Effect * * Item ) = 0;
      virtual HRESULT __stdcall raw_AddEffect (
        /*[in]*/ struct Shape * Shape,
        /*[in]*/ enum MsoAnimEffect effectId,
        /*[in]*/ enum MsoAnimateByLevel Level,
        /*[in]*/ enum MsoAnimTriggerType trigger,
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Effect * * Effect ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[in]*/ struct Effect * Effect,
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Effect * * Clone ) = 0;
      virtual HRESULT __stdcall raw_FindFirstAnimationFor (
        /*[in]*/ struct Shape * Shape,
        /*[out,retval]*/ struct Effect * * FindFirstAnimationFor ) = 0;
      virtual HRESULT __stdcall raw_FindFirstAnimationForClick (
        /*[in]*/ int click,
        /*[out,retval]*/ struct Effect * * FindFirstAnimationForClick ) = 0;
      virtual HRESULT __stdcall raw_ConvertToBuildLevel (
        /*[in]*/ struct Effect * Effect,
        /*[in]*/ enum MsoAnimateByLevel Level,
        /*[out,retval]*/ struct Effect * * ConvertToBuildLevel ) = 0;
      virtual HRESULT __stdcall raw_ConvertToAfterEffect (
        /*[in]*/ struct Effect * Effect,
        /*[in]*/ enum MsoAnimAfterEffect After,
        /*[in]*/ __missing_type__ DimColor,
        /*[in]*/ enum PpColorSchemeIndex DimSchemeColor,
        /*[out,retval]*/ struct Effect * * ConvertToAfterEffect ) = 0;
      virtual HRESULT __stdcall raw_ConvertToAnimateBackground (
        /*[in]*/ struct Effect * Effect,
        /*[in]*/ __missing_type__ AnimateBackground,
        /*[out,retval]*/ struct Effect * * ConvertToAnimateBackground ) = 0;
      virtual HRESULT __stdcall raw_ConvertToAnimateInReverse (
        /*[in]*/ struct Effect * Effect,
        /*[in]*/ __missing_type__ animateInReverse,
        /*[out,retval]*/ struct Effect * * ConvertToAnimateInReverse ) = 0;
      virtual HRESULT __stdcall raw_ConvertToTextUnitEffect (
        /*[in]*/ struct Effect * Effect,
        /*[in]*/ enum MsoAnimTextUnitEffect unitEffect,
        /*[out,retval]*/ struct Effect * * ConvertToTextUnitEffect ) = 0;
      virtual HRESULT __stdcall raw_AddTriggerEffect (
        /*[in]*/ struct Shape * pShape,
        /*[in]*/ enum MsoAnimEffect effectId,
        /*[in]*/ enum MsoAnimTriggerType trigger,
        /*[in]*/ struct Shape * pTriggerShape,
        /*[in]*/ BSTR bookmark,
        /*[in]*/ enum MsoAnimateByLevel Level,
        /*[out,retval]*/ struct Effect * * TriggerEffect ) = 0;
};

struct __declspec(uuid("914934dd-5a91-11cf-8700-00aa0060263b"))
Sequences : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    SequencePtr Item (
        int Index );
    SequencePtr Add (
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Sequence * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Sequence * * Add ) = 0;
};

struct __declspec(uuid("914934dc-5a91-11cf-8700-00aa0060263b"))
TimeLine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMainSequence))
    SequencePtr MainSequence;
    __declspec(property(get=GetInteractiveSequences))
    SequencesPtr InteractiveSequences;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    SequencePtr GetMainSequence ( );
    SequencesPtr GetInteractiveSequences ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_MainSequence (
        /*[out,retval]*/ struct Sequence * * MainSequence ) = 0;
      virtual HRESULT __stdcall get_InteractiveSequences (
        /*[out,retval]*/ struct Sequences * * InteractiveSequences ) = 0;
};

struct __declspec(uuid("ba72e553-4ff5-48f4-8215-5505f990966f"))
ResampleMediaTask : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getprofile))
    enum PpResampleMediaProfile profile;
    __declspec(property(get=GetIsLinked))
    VARIANT_BOOL IsLinked;
    __declspec(property(get=GetIsEmbedded))
    VARIANT_BOOL IsEmbedded;
    __declspec(property(get=GetAudioSamplingRate))
    long AudioSamplingRate;
    __declspec(property(get=GetVideoFrameRate))
    long VideoFrameRate;
    __declspec(property(get=GetSampleHeight))
    long SampleHeight;
    __declspec(property(get=GetSampleWidth))
    long SampleWidth;
    __declspec(property(get=GetContainerType))
    _bstr_t ContainerType;
    __declspec(property(get=GetVideoCompressionType))
    _bstr_t VideoCompressionType;
    __declspec(property(get=GetAudioCompressionType))
    _bstr_t AudioCompressionType;
    __declspec(property(get=GetShape))
    ShapePtr Shape;

    //
    // Wrapper methods for error-handling
    //

    enum PpResampleMediaProfile Getprofile ( );
    VARIANT_BOOL GetIsLinked ( );
    VARIANT_BOOL GetIsEmbedded ( );
    long GetAudioSamplingRate ( );
    long GetVideoFrameRate ( );
    long GetSampleHeight ( );
    long GetSampleWidth ( );
    _bstr_t GetContainerType ( );
    _bstr_t GetVideoCompressionType ( );
    _bstr_t GetAudioCompressionType ( );
    ShapePtr GetShape ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_profile (
        /*[out,retval]*/ enum PpResampleMediaProfile * profile ) = 0;
      virtual HRESULT __stdcall get_IsLinked (
        /*[out,retval]*/ VARIANT_BOOL * IsLinked ) = 0;
      virtual HRESULT __stdcall get_IsEmbedded (
        /*[out,retval]*/ VARIANT_BOOL * IsEmbedded ) = 0;
      virtual HRESULT __stdcall get_AudioSamplingRate (
        /*[out,retval]*/ long * AudioSamplingRate ) = 0;
      virtual HRESULT __stdcall get_VideoFrameRate (
        /*[out,retval]*/ long * VideoFrameRate ) = 0;
      virtual HRESULT __stdcall get_SampleHeight (
        /*[out,retval]*/ long * SampleHeight ) = 0;
      virtual HRESULT __stdcall get_SampleWidth (
        /*[out,retval]*/ long * SampleWidth ) = 0;
      virtual HRESULT __stdcall get_ContainerType (
        /*[out,retval]*/ BSTR * ContainerType ) = 0;
      virtual HRESULT __stdcall get_VideoCompressionType (
        /*[out,retval]*/ BSTR * VideoCompressionType ) = 0;
      virtual HRESULT __stdcall get_AudioCompressionType (
        /*[out,retval]*/ BSTR * AudioCompressionType ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
};

struct __declspec(uuid("ba72e554-4ff5-48f4-8215-5505f990966f"))
ResampleMediaTasks : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetPercentComplete))
    long PercentComplete;

    //
    // Wrapper methods for error-handling
    //

    ResampleMediaTaskPtr Item (
        int Index );
    HRESULT Pause ( );
    HRESULT Cancel ( );
    HRESULT Resume ( );
    long GetPercentComplete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct ResampleMediaTask * * Item ) = 0;
      virtual HRESULT __stdcall raw_Pause ( ) = 0;
      virtual HRESULT __stdcall raw_Cancel ( ) = 0;
      virtual HRESULT __stdcall raw_Resume ( ) = 0;
      virtual HRESULT __stdcall get_PercentComplete (
        /*[out,retval]*/ long * PercentComplete ) = 0;
};

struct __declspec(uuid("9149347a-5a91-11cf-8700-00aa0060263b"))
ShapeRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHorizontalFlip))
    __missing_type__  HorizontalFlip;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetType))
    __missing_type__  Type;
    __declspec(property(get=GetVerticalFlip))
    __missing_type__  VerticalFlip;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetZOrderPosition))
    int ZOrderPosition;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetOLEFormat))
    OLEFormatPtr OLEFormat;
    __declspec(property(get=GetLinkFormat))
    LinkFormatPtr LinkFormat;
    __declspec(property(get=GetPlaceholderFormat))
    PlaceholderFormatPtr PlaceholderFormat;
    __declspec(property(get=GetAnimationSettings))
    AnimationSettingsPtr AnimationSettings;
    __declspec(property(get=GetActionSettings))
    ActionSettingsPtr ActionSettings;
    __declspec(property(get=GetTags))
    TagsPtr Tags;
    __declspec(property(get=GetScript))
    __missing_type__ Script;
    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetHasDiagram))
    __missing_type__  HasDiagram;
    __declspec(property(get=GetDiagram))
    DiagramPtr Diagram;
    __declspec(property(get=GetMediaType))
    enum PpMediaType MediaType;
    __declspec(property(get=GetHasTextFrame))
    __missing_type__  HasTextFrame;
    __declspec(property(get=GetSoundFormat))
    SoundFormatPtr SoundFormat;
    __declspec(property(get=GetHasDiagramNode))
    __missing_type__  HasDiagramNode;
    __declspec(property(get=GetDiagramNode))
    DiagramNodePtr DiagramNode;
    __declspec(property(get=GetChild))
    __missing_type__  Child;
    __declspec(property(get=GetParentGroup))
    ShapePtr ParentGroup;
    __declspec(property(get=GetCanvasItems))
    CanvasShapesPtr CanvasItems;
    __declspec(property(get=GetHasTable))
    __missing_type__  HasTable;
    __declspec(property(get=GetTable))
    TablePtr Table;
    __declspec(property(get=GetId))
    int Id;
    __declspec(property(put=PutRTF))
    _bstr_t RTF;
    __declspec(property(get=GetCustomerData))
    CustomerDataPtr CustomerData;
    __declspec(property(get=GetTextFrame2))
    TextFrame2Ptr TextFrame2;
    __declspec(property(get=GetHasChart))
    __missing_type__  HasChart;
    __declspec(property(get=GetSoftEdge))
    __missing_type__ SoftEdge;
    __declspec(property(get=GetGlow))
    __missing_type__ Glow;
    __declspec(property(get=GetReflection))
    __missing_type__ Reflection;
    __declspec(property(get=GetChart))
    ChartPtr Chart;
    __declspec(property(get=GetHasSmartArt))
    __missing_type__  HasSmartArt;
    __declspec(property(get=GetSmartArt))
    __missing_type__ SmartArt;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetMediaFormat))
    MediaFormatPtr MediaFormat;
    __declspec(property(get=GetInkXML))
    _bstr_t InkXML;
    __declspec(property(get=GetHasInkXML))
    __missing_type__  HasInkXML;
    __declspec(property(get=GetHasSectionLink))
    __missing_type__  HasSectionLink;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    int ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    __missing_type__  Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Apply ( );
    HRESULT Delete ( );
    HRESULT Flip (
        __missing_type__ FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    HRESULT ScaleHeight (
        float Factor,
        __missing_type__ RelativeToOriginalSize,
        __missing_type__ fScale );
    HRESULT ScaleWidth (
        float Factor,
        __missing_type__ RelativeToOriginalSize,
        __missing_type__ fScale );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        __missing_type__ ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    __missing_type__  GetAutoShapeType ( );
    void PutAutoShapeType (
        __missing_type__ AutoShapeType );
    __missing_type__  GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        __missing_type__ BlackWhiteMode );
    CalloutFormatPtr GetCallout ( );
    int GetConnectionSiteCount ( );
    __missing_type__  GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float Height );
    __missing_type__  GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float Left );
    LineFormatPtr GetLine ( );
    __missing_type__  GetLockAspectRatio ( );
    void PutLockAspectRatio (
        __missing_type__ LockAspectRatio );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float Rotation );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    TextFramePtr GetTextFrame ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float Top );
    __missing_type__  GetType ( );
    __missing_type__  GetVerticalFlip ( );
    _variant_t GetVertices ( );
    __missing_type__  GetVisible ( );
    void PutVisible (
        __missing_type__ Visible );
    float GetWidth ( );
    void PutWidth (
        float Width );
    int GetZOrderPosition ( );
    OLEFormatPtr GetOLEFormat ( );
    LinkFormatPtr GetLinkFormat ( );
    PlaceholderFormatPtr GetPlaceholderFormat ( );
    AnimationSettingsPtr GetAnimationSettings ( );
    ActionSettingsPtr GetActionSettings ( );
    TagsPtr GetTags ( );
    HRESULT Cut ( );
    HRESULT Copy ( );
    HRESULT Select (
        __missing_type__ Replace );
    ShapeRangePtr Duplicate ( );
    enum PpMediaType GetMediaType ( );
    __missing_type__  GetHasTextFrame ( );
    SoundFormatPtr GetSoundFormat ( );
    ShapePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    _variant_t _Index (
        int Index );
    long GetCount ( );
    ShapePtr Group ( );
    ShapePtr Regroup ( );
    HRESULT Align (
        __missing_type__ AlignCmd,
        __missing_type__ RelativeTo );
    HRESULT Distribute (
        __missing_type__ DistributeCmd,
        __missing_type__ RelativeTo );
    HRESULT GetPolygonalRepresentation (
        unsigned long maxPointsInBuffer,
        float * pPoints,
        unsigned long * numPointsInPolygon,
        __missing_type__ * IsOpen );
    __missing_type__ GetScript ( );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t AlternativeText );
    __missing_type__  GetHasTable ( );
    TablePtr GetTable ( );
    HRESULT Export (
        _bstr_t PathName,
        enum PpShapeFormat Filter,
        int ScaleWidth,
        int ScaleHeight,
        enum PpExportMode ExportMode );
    __missing_type__  GetHasDiagram ( );
    DiagramPtr GetDiagram ( );
    __missing_type__  GetHasDiagramNode ( );
    DiagramNodePtr GetDiagramNode ( );
    __missing_type__  GetChild ( );
    ShapePtr GetParentGroup ( );
    CanvasShapesPtr GetCanvasItems ( );
    int GetId ( );
    HRESULT CanvasCropLeft (
        float Increment );
    HRESULT CanvasCropTop (
        float Increment );
    HRESULT CanvasCropRight (
        float Increment );
    HRESULT CanvasCropBottom (
        float Increment );
    void PutRTF (
        _bstr_t _arg1 );
    CustomerDataPtr GetCustomerData ( );
    TextFrame2Ptr GetTextFrame2 ( );
    __missing_type__  GetHasChart ( );
    __missing_type__  GetShapeStyle ( );
    void PutShapeStyle (
        __missing_type__ ShapeStyle );
    __missing_type__  GetBackgroundStyle ( );
    void PutBackgroundStyle (
        __missing_type__ BackgroundStyle );
    __missing_type__ GetSoftEdge ( );
    __missing_type__ GetGlow ( );
    __missing_type__ GetReflection ( );
    ChartPtr GetChart ( );
    __missing_type__  GetHasSmartArt ( );
    __missing_type__ GetSmartArt ( );
    HRESULT ConvertTextToSmartArt (
        __missing_type__ * Layout );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t Title );
    MediaFormatPtr GetMediaFormat ( );
    HRESULT PickupAnimation ( );
    HRESULT ApplyAnimation ( );
    HRESULT UpgradeMedia ( );
    HRESULT MergeShapes (
        __missing_type__ MergeCmd,
        struct Shape * PrimaryShape );
    __missing_type__  GetIsNarration ( );
    void PutIsNarration (
        __missing_type__ IsNarration );
    _bstr_t GetInkXML ( );
    __missing_type__  GetHasInkXML ( );
    __missing_type__  GetHasSectionLink ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ __missing_type__ FlipCmd ) = 0;
      virtual HRESULT __stdcall raw_IncrementLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotation (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_PickUp ( ) = 0;
      virtual HRESULT __stdcall raw_RerouteConnections ( ) = 0;
      virtual HRESULT __stdcall raw_ScaleHeight (
        /*[in]*/ float Factor,
        /*[in]*/ __missing_type__ RelativeToOriginalSize,
        /*[in]*/ __missing_type__ fScale ) = 0;
      virtual HRESULT __stdcall raw_ScaleWidth (
        /*[in]*/ float Factor,
        /*[in]*/ __missing_type__ RelativeToOriginalSize,
        /*[in]*/ __missing_type__ fScale ) = 0;
      virtual HRESULT __stdcall raw_SetShapesDefaultProperties ( ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ struct ShapeRange * * Ungroup ) = 0;
      virtual HRESULT __stdcall raw_ZOrder (
        /*[in]*/ __missing_type__ ZOrderCmd ) = 0;
      virtual HRESULT __stdcall get_Adjustments (
        /*[out,retval]*/ struct Adjustments * * Adjustments ) = 0;
      virtual HRESULT __stdcall get_AutoShapeType (
        /*[out,retval]*/ __missing_type__ * AutoShapeType ) = 0;
      virtual HRESULT __stdcall put_AutoShapeType (
        /*[in]*/ __missing_type__ AutoShapeType ) = 0;
      virtual HRESULT __stdcall get_BlackWhiteMode (
        /*[out,retval]*/ __missing_type__ * BlackWhiteMode ) = 0;
      virtual HRESULT __stdcall put_BlackWhiteMode (
        /*[in]*/ __missing_type__ BlackWhiteMode ) = 0;
      virtual HRESULT __stdcall get_Callout (
        /*[out,retval]*/ struct CalloutFormat * * Callout ) = 0;
      virtual HRESULT __stdcall get_ConnectionSiteCount (
        /*[out,retval]*/ int * ConnectionSiteCount ) = 0;
      virtual HRESULT __stdcall get_Connector (
        /*[out,retval]*/ __missing_type__ * Connector ) = 0;
      virtual HRESULT __stdcall get_ConnectorFormat (
        /*[out,retval]*/ struct ConnectorFormat * * ConnectorFormat ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct FillFormat * * Fill ) = 0;
      virtual HRESULT __stdcall get_GroupItems (
        /*[out,retval]*/ struct GroupShapes * * GroupItems ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_HorizontalFlip (
        /*[out,retval]*/ __missing_type__ * HorizontalFlip ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct LineFormat * * Line ) = 0;
      virtual HRESULT __stdcall get_LockAspectRatio (
        /*[out,retval]*/ __missing_type__ * LockAspectRatio ) = 0;
      virtual HRESULT __stdcall put_LockAspectRatio (
        /*[in]*/ __missing_type__ LockAspectRatio ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Nodes (
        /*[out,retval]*/ struct ShapeNodes * * Nodes ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ float * Rotation ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ float Rotation ) = 0;
      virtual HRESULT __stdcall get_PictureFormat (
        /*[out,retval]*/ struct PictureFormat * * Picture ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ShadowFormat * * Shadow ) = 0;
      virtual HRESULT __stdcall get_TextEffect (
        /*[out,retval]*/ struct TextEffectFormat * * TextEffect ) = 0;
      virtual HRESULT __stdcall get_TextFrame (
        /*[out,retval]*/ struct TextFrame * * TextFrame ) = 0;
      virtual HRESULT __stdcall get_ThreeD (
        /*[out,retval]*/ struct ThreeDFormat * * ThreeD ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ __missing_type__ * Type ) = 0;
      virtual HRESULT __stdcall get_VerticalFlip (
        /*[out,retval]*/ __missing_type__ * VerticalFlip ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ VARIANT * Vertices ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ __missing_type__ * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ __missing_type__ Visible ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_ZOrderPosition (
        /*[out,retval]*/ int * ZOrderPosition ) = 0;
      virtual HRESULT __stdcall get_OLEFormat (
        /*[out,retval]*/ struct OLEFormat * * OLEFormat ) = 0;
      virtual HRESULT __stdcall get_LinkFormat (
        /*[out,retval]*/ struct LinkFormat * * LinkFormat ) = 0;
      virtual HRESULT __stdcall get_PlaceholderFormat (
        /*[out,retval]*/ struct PlaceholderFormat * * PlaceholderFormat ) = 0;
      virtual HRESULT __stdcall get_AnimationSettings (
        /*[out,retval]*/ struct AnimationSettings * * AnimationSettings ) = 0;
      virtual HRESULT __stdcall get_ActionSettings (
        /*[out,retval]*/ struct ActionSettings * * ActionSettings ) = 0;
      virtual HRESULT __stdcall get_Tags (
        /*[out,retval]*/ struct Tags * * Tags ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ __missing_type__ Replace ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct ShapeRange * * Duplicate ) = 0;
      virtual HRESULT __stdcall get_MediaType (
        /*[out,retval]*/ enum PpMediaType * MediaType ) = 0;
      virtual HRESULT __stdcall get_HasTextFrame (
        /*[out,retval]*/ __missing_type__ * HasTextFrame ) = 0;
      virtual HRESULT __stdcall get_SoundFormat (
        /*[out,retval]*/ struct SoundFormat * * SoundFormat ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw__Index (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT * _Index ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct Shape * * Group ) = 0;
      virtual HRESULT __stdcall raw_Regroup (
        /*[out,retval]*/ struct Shape * * Regroup ) = 0;
      virtual HRESULT __stdcall raw_Align (
        /*[in]*/ __missing_type__ AlignCmd,
        /*[in]*/ __missing_type__ RelativeTo ) = 0;
      virtual HRESULT __stdcall raw_Distribute (
        /*[in]*/ __missing_type__ DistributeCmd,
        /*[in]*/ __missing_type__ RelativeTo ) = 0;
      virtual HRESULT __stdcall raw_GetPolygonalRepresentation (
        /*[in]*/ unsigned long maxPointsInBuffer,
        /*[in]*/ float * pPoints,
        /*[out]*/ unsigned long * numPointsInPolygon,
        /*[out]*/ __missing_type__ * IsOpen ) = 0;
      virtual HRESULT __stdcall get_Script (
        /*[out,retval]*/ __missing_type__ * * Script ) = 0;
      virtual HRESULT __stdcall get_AlternativeText (
        /*[out,retval]*/ BSTR * AlternativeText ) = 0;
      virtual HRESULT __stdcall put_AlternativeText (
        /*[in]*/ BSTR AlternativeText ) = 0;
      virtual HRESULT __stdcall get_HasTable (
        /*[out,retval]*/ __missing_type__ * HasTable ) = 0;
      virtual HRESULT __stdcall get_Table (
        /*[out,retval]*/ struct Table * * Table ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR PathName,
        /*[in]*/ enum PpShapeFormat Filter,
        /*[in]*/ int ScaleWidth,
        /*[in]*/ int ScaleHeight,
        /*[in]*/ enum PpExportMode ExportMode ) = 0;
      virtual HRESULT __stdcall get_HasDiagram (
        /*[out,retval]*/ __missing_type__ * pHasDiagram ) = 0;
      virtual HRESULT __stdcall get_Diagram (
        /*[out,retval]*/ struct Diagram * * Diagram ) = 0;
      virtual HRESULT __stdcall get_HasDiagramNode (
        /*[out,retval]*/ __missing_type__ * pHasDiagram ) = 0;
      virtual HRESULT __stdcall get_DiagramNode (
        /*[out,retval]*/ struct DiagramNode * * DiagramNode ) = 0;
      virtual HRESULT __stdcall get_Child (
        /*[out,retval]*/ __missing_type__ * Child ) = 0;
      virtual HRESULT __stdcall get_ParentGroup (
        /*[out,retval]*/ struct Shape * * Parent ) = 0;
      virtual HRESULT __stdcall get_CanvasItems (
        /*[out,retval]*/ struct CanvasShapes * * CanvasShapes ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ int * pid ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropRight (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropBottom (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall put_RTF (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall get_CustomerData (
        /*[out,retval]*/ struct CustomerData * * CustomerData ) = 0;
      virtual HRESULT __stdcall get_TextFrame2 (
        /*[out,retval]*/ struct TextFrame2 * * Frame ) = 0;
      virtual HRESULT __stdcall get_HasChart (
        /*[out,retval]*/ __missing_type__ * pHasChart ) = 0;
      virtual HRESULT __stdcall get_ShapeStyle (
        /*[out,retval]*/ __missing_type__ * ShapeStyle ) = 0;
      virtual HRESULT __stdcall put_ShapeStyle (
        /*[in]*/ __missing_type__ ShapeStyle ) = 0;
      virtual HRESULT __stdcall get_BackgroundStyle (
        /*[out,retval]*/ __missing_type__ * BackgroundStyle ) = 0;
      virtual HRESULT __stdcall put_BackgroundStyle (
        /*[in]*/ __missing_type__ BackgroundStyle ) = 0;
      virtual HRESULT __stdcall get_SoftEdge (
        /*[out,retval]*/ __missing_type__ * * SoftEdge ) = 0;
      virtual HRESULT __stdcall get_Glow (
        /*[out,retval]*/ __missing_type__ * * Glow ) = 0;
      virtual HRESULT __stdcall get_Reflection (
        /*[out,retval]*/ __missing_type__ * * Reflection ) = 0;
      virtual HRESULT __stdcall get_Chart (
        /*[out,retval]*/ struct Chart * * Chart ) = 0;
      virtual HRESULT __stdcall get_HasSmartArt (
        /*[out,retval]*/ __missing_type__ * HasSmartArt ) = 0;
      virtual HRESULT __stdcall get_SmartArt (
        /*[out,retval]*/ __missing_type__ * * SmartArt ) = 0;
      virtual HRESULT __stdcall raw_ConvertTextToSmartArt (
        /*[in]*/ __missing_type__ * Layout ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * Title ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR Title ) = 0;
      virtual HRESULT __stdcall get_MediaFormat (
        /*[out,retval]*/ struct MediaFormat * * MediaFormat ) = 0;
      virtual HRESULT __stdcall raw_PickupAnimation ( ) = 0;
      virtual HRESULT __stdcall raw_ApplyAnimation ( ) = 0;
      virtual HRESULT __stdcall raw_UpgradeMedia ( ) = 0;
      virtual HRESULT __stdcall raw_MergeShapes (
        /*[in]*/ __missing_type__ MergeCmd,
        /*[in]*/ struct Shape * PrimaryShape ) = 0;
      virtual HRESULT __stdcall get_IsNarration (
        /*[out,retval]*/ __missing_type__ * IsNarration ) = 0;
      virtual HRESULT __stdcall put_IsNarration (
        /*[in]*/ __missing_type__ IsNarration ) = 0;
      virtual HRESULT __stdcall get_InkXML (
        /*[out,retval]*/ BSTR * InkXML ) = 0;
      virtual HRESULT __stdcall get_HasInkXML (
        /*[out,retval]*/ __missing_type__ * HasInkXML ) = 0;
      virtual HRESULT __stdcall get_HasSectionLink (
        /*[out,retval]*/ __missing_type__ * HasSectionLink ) = 0;
};

struct __declspec(uuid("9149347b-5a91-11cf-8700-00aa0060263b"))
GroupShapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapeRangePtr Range (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pnShapes ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppienum ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ShapeRange * * Range ) = 0;
};

struct __declspec(uuid("914934ec-5a91-11cf-8700-00aa0060263b"))
CanvasShapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetBackground))
    ShapePtr Background;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapePtr AddCallout (
        __missing_type__ Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddConnector (
        __missing_type__ Type,
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddCurve (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddLabel (
        __missing_type__ Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddPicture (
        _bstr_t FileName,
        __missing_type__ LinkToFile,
        __missing_type__ SaveWithDocument,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddPolyline (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddShape (
        __missing_type__ Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddTextEffect (
        __missing_type__ PresetTextEffect,
        _bstr_t Text,
        _bstr_t FontName,
        float FontSize,
        __missing_type__ FontBold,
        __missing_type__ FontItalic,
        float Left,
        float Top );
    ShapePtr AddTextbox (
        __missing_type__ Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    FreeformBuilderPtr BuildFreeform (
        __missing_type__ EditingType,
        float X1,
        float Y1 );
    ShapeRangePtr Range (
        const _variant_t & Index );
    HRESULT SelectAll ( );
    ShapePtr GetBackground ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw_AddCallout (
        /*[in]*/ __missing_type__ Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Callout ) = 0;
      virtual HRESULT __stdcall raw_AddConnector (
        /*[in]*/ __missing_type__ Type,
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY,
        /*[out,retval]*/ struct Shape * * Connector ) = 0;
      virtual HRESULT __stdcall raw_AddCurve (
        /*[in]*/ VARIANT SafeArrayOfPoints,
        /*[out,retval]*/ struct Shape * * Curve ) = 0;
      virtual HRESULT __stdcall raw_AddLabel (
        /*[in]*/ __missing_type__ Orientation,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Label ) = 0;
      virtual HRESULT __stdcall raw_AddLine (
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY,
        /*[out,retval]*/ struct Shape * * Line ) = 0;
      virtual HRESULT __stdcall raw_AddPicture (
        /*[in]*/ BSTR FileName,
        /*[in]*/ __missing_type__ LinkToFile,
        /*[in]*/ __missing_type__ SaveWithDocument,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Picture ) = 0;
      virtual HRESULT __stdcall raw_AddPolyline (
        /*[in]*/ VARIANT SafeArrayOfPoints,
        /*[out,retval]*/ struct Shape * * Polyline ) = 0;
      virtual HRESULT __stdcall raw_AddShape (
        /*[in]*/ __missing_type__ Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
      virtual HRESULT __stdcall raw_AddTextEffect (
        /*[in]*/ __missing_type__ PresetTextEffect,
        /*[in]*/ BSTR Text,
        /*[in]*/ BSTR FontName,
        /*[in]*/ float FontSize,
        /*[in]*/ __missing_type__ FontBold,
        /*[in]*/ __missing_type__ FontItalic,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[out,retval]*/ struct Shape * * TextEffect ) = 0;
      virtual HRESULT __stdcall raw_AddTextbox (
        /*[in]*/ __missing_type__ Orientation,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Textbox ) = 0;
      virtual HRESULT __stdcall raw_BuildFreeform (
        /*[in]*/ __missing_type__ EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[out,retval]*/ struct FreeformBuilder * * FreeformBuilder ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ShapeRange * * Range ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ struct Shape * * Background ) = 0;
};

struct __declspec(uuid("914934f3-5a91-11cf-8700-00aa0060263b"))
CustomLayout : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    int Index;
    __declspec(property(get=GetThemeColorScheme))
    __missing_type__ ThemeColorScheme;
    __declspec(property(get=GetCustomerData))
    CustomerDataPtr CustomerData;
    __declspec(property(get=GetGuides))
    GuidesPtr Guides;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetHeadersFooters))
    HeadersFootersPtr HeadersFooters;
    __declspec(property(get=GetBackground))
    ShapeRangePtr Background;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetHeight))
    float Height;
    __declspec(property(get=GetWidth))
    float Width;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetDesign))
    DesignPtr Design;
    __declspec(property(get=GetTimeLine))
    TimeLinePtr TimeLine;
    __declspec(property(get=GetSlideShowTransition))
    SlideShowTransitionPtr SlideShowTransition;
    __declspec(property(get=GetMatchingName,put=PutMatchingName))
    _bstr_t MatchingName;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ShapesPtr GetShapes ( );
    HeadersFootersPtr GetHeadersFooters ( );
    ShapeRangePtr GetBackground ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    HRESULT Delete ( );
    float GetHeight ( );
    float GetWidth ( );
    HyperlinksPtr GetHyperlinks ( );
    DesignPtr GetDesign ( );
    TimeLinePtr GetTimeLine ( );
    SlideShowTransitionPtr GetSlideShowTransition ( );
    _bstr_t GetMatchingName ( );
    void PutMatchingName (
        _bstr_t MatchingName );
    __missing_type__  GetPreserved ( );
    void PutPreserved (
        __missing_type__ Preserved );
    int GetIndex ( );
    HRESULT Select ( );
    HRESULT Cut ( );
    HRESULT Copy ( );
    CustomLayoutPtr Duplicate ( );
    HRESULT MoveTo (
        int toPos );
    __missing_type__  GetDisplayMasterShapes ( );
    void PutDisplayMasterShapes (
        __missing_type__ DisplayMasterShapes );
    __missing_type__  GetFollowMasterBackground ( );
    void PutFollowMasterBackground (
        __missing_type__ FollowMasterBackground );
    __missing_type__ GetThemeColorScheme ( );
    CustomerDataPtr GetCustomerData ( );
    GuidesPtr GetGuides ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * Shapes ) = 0;
      virtual HRESULT __stdcall get_HeadersFooters (
        /*[out,retval]*/ struct HeadersFooters * * HeadersFooters ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ struct ShapeRange * * Background ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * Hyperlinks ) = 0;
      virtual HRESULT __stdcall get_Design (
        /*[out,retval]*/ struct Design * * Design ) = 0;
      virtual HRESULT __stdcall get_TimeLine (
        /*[out,retval]*/ struct TimeLine * * TimeLine ) = 0;
      virtual HRESULT __stdcall get_SlideShowTransition (
        /*[out,retval]*/ struct SlideShowTransition * * SlideShowTransition ) = 0;
      virtual HRESULT __stdcall get_MatchingName (
        /*[out,retval]*/ BSTR * MatchingName ) = 0;
      virtual HRESULT __stdcall put_MatchingName (
        /*[in]*/ BSTR MatchingName ) = 0;
      virtual HRESULT __stdcall get_Preserved (
        /*[out,retval]*/ __missing_type__ * Preserved ) = 0;
      virtual HRESULT __stdcall put_Preserved (
        /*[in]*/ __missing_type__ Preserved ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ int * Index ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct CustomLayout * * Duplicate ) = 0;
      virtual HRESULT __stdcall raw_MoveTo (
        /*[in]*/ int toPos ) = 0;
      virtual HRESULT __stdcall get_DisplayMasterShapes (
        /*[out,retval]*/ __missing_type__ * DisplayMasterShapes ) = 0;
      virtual HRESULT __stdcall put_DisplayMasterShapes (
        /*[in]*/ __missing_type__ DisplayMasterShapes ) = 0;
      virtual HRESULT __stdcall get_FollowMasterBackground (
        /*[out,retval]*/ __missing_type__ * FollowMasterBackground ) = 0;
      virtual HRESULT __stdcall put_FollowMasterBackground (
        /*[in]*/ __missing_type__ FollowMasterBackground ) = 0;
      virtual HRESULT __stdcall get_ThemeColorScheme (
        /*[out,retval]*/ __missing_type__ * * ThemeColorScheme ) = 0;
      virtual HRESULT __stdcall get_CustomerData (
        /*[out,retval]*/ struct CustomerData * * CustomerData ) = 0;
      virtual HRESULT __stdcall get_Guides (
        /*[out,retval]*/ struct Guides * * Guides ) = 0;
};

struct __declspec(uuid("914934f2-5a91-11cf-8700-00aa0060263b"))
CustomLayouts : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    CustomLayoutPtr Item (
        const _variant_t & Index );
    CustomLayoutPtr Add (
        int Index );
    CustomLayoutPtr Paste (
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CustomLayout * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct CustomLayout * * Add ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct CustomLayout * * Paste ) = 0;
};

struct __declspec(uuid("914934d4-5a91-11cf-8700-00aa0060263b"))
Comments : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    CommentPtr Item (
        int Index );
    CommentPtr Add (
        float Left,
        float Top,
        _bstr_t Author,
        _bstr_t AuthorInitials,
        _bstr_t Text );
    CommentPtr Add2 (
        float Left,
        float Top,
        _bstr_t Author,
        _bstr_t AuthorInitials,
        _bstr_t Text,
        _bstr_t ProviderID,
        _bstr_t UserID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Comment * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ BSTR Author,
        /*[in]*/ BSTR AuthorInitials,
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ struct Comment * * Add ) = 0;
      virtual HRESULT __stdcall raw_Add2 (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ BSTR Author,
        /*[in]*/ BSTR AuthorInitials,
        /*[in]*/ BSTR Text,
        /*[in]*/ BSTR ProviderID,
        /*[in]*/ BSTR UserID,
        /*[out,retval]*/ struct Comment * * Add ) = 0;
};

struct __declspec(uuid("914934d5-5a91-11cf-8700-00aa0060263b"))
Comment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAuthor))
    _bstr_t Author;
    __declspec(property(get=GetAuthorInitials))
    _bstr_t AuthorInitials;
    __declspec(property(get=GetText))
    _bstr_t Text;
    __declspec(property(get=GetDateTime))
    DATE DateTime;
    __declspec(property(get=GetAuthorIndex))
    int AuthorIndex;
    __declspec(property(get=GetLeft))
    float Left;
    __declspec(property(get=GetTop))
    float Top;
    __declspec(property(get=GetProviderID))
    _bstr_t ProviderID;
    __declspec(property(get=GetUserID))
    _bstr_t UserID;
    __declspec(property(get=GetTimeZoneBias))
    int TimeZoneBias;
    __declspec(property(get=GetReplies))
    CommentsPtr Replies;
    __declspec(property(get=GetCollapsed))
    VARIANT_BOOL Collapsed;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetAuthor ( );
    _bstr_t GetAuthorInitials ( );
    _bstr_t GetText ( );
    DATE GetDateTime ( );
    int GetAuthorIndex ( );
    float GetLeft ( );
    float GetTop ( );
    HRESULT Delete ( );
    _bstr_t GetProviderID ( );
    _bstr_t GetUserID ( );
    int GetTimeZoneBias ( );
    CommentsPtr GetReplies ( );
    VARIANT_BOOL GetCollapsed ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Author (
        /*[out,retval]*/ BSTR * Author ) = 0;
      virtual HRESULT __stdcall get_AuthorInitials (
        /*[out,retval]*/ BSTR * AuthorInitials ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall get_DateTime (
        /*[out,retval]*/ DATE * DateTime ) = 0;
      virtual HRESULT __stdcall get_AuthorIndex (
        /*[out,retval]*/ int * AuthorIndex ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_ProviderID (
        /*[out,retval]*/ BSTR * ProviderID ) = 0;
      virtual HRESULT __stdcall get_UserID (
        /*[out,retval]*/ BSTR * UserID ) = 0;
      virtual HRESULT __stdcall get_TimeZoneBias (
        /*[out,retval]*/ int * TimeZoneBias ) = 0;
      virtual HRESULT __stdcall get_Replies (
        /*[out,retval]*/ struct Comments * * Comments ) = 0;
      virtual HRESULT __stdcall get_Collapsed (
        /*[out,retval]*/ VARIANT_BOOL * Comments ) = 0;
};

struct __declspec(uuid("914934d8-5a91-11cf-8700-00aa0060263b"))
DiagramNode : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetChildren))
    DiagramNodeChildrenPtr Children;
    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetRoot))
    DiagramNodePtr Root;
    __declspec(property(get=GetDiagram))
    DiagramPtr Diagram;
    __declspec(property(get=GetTextShape))
    ShapePtr TextShape;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    DiagramNodePtr AddNode (
        __missing_type__ Pos,
        __missing_type__ NodeType );
    HRESULT Delete ( );
    HRESULT MoveNode (
        struct DiagramNode * TargetNode,
        __missing_type__ Pos );
    HRESULT ReplaceNode (
        struct DiagramNode * TargetNode );
    HRESULT SwapNode (
        struct DiagramNode * TargetNode,
        VARIANT_BOOL SwapChildren );
    DiagramNodePtr CloneNode (
        VARIANT_BOOL CopyChildren,
        struct DiagramNode * TargetNode,
        __missing_type__ Pos );
    HRESULT TransferChildren (
        struct DiagramNode * ReceivingNode );
    DiagramNodePtr NextNode ( );
    DiagramNodePtr PrevNode ( );
    IDispatchPtr GetParent ( );
    DiagramNodeChildrenPtr GetChildren ( );
    ShapePtr GetShape ( );
    DiagramNodePtr GetRoot ( );
    DiagramPtr GetDiagram ( );
    __missing_type__  GetLayout ( );
    void PutLayout (
        __missing_type__ Type );
    ShapePtr GetTextShape ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall raw_AddNode (
        /*[in]*/ __missing_type__ Pos,
        /*[in]*/ __missing_type__ NodeType,
        /*[out,retval]*/ struct DiagramNode * * NewNode ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_MoveNode (
        /*[in]*/ struct DiagramNode * TargetNode,
        /*[in]*/ __missing_type__ Pos ) = 0;
      virtual HRESULT __stdcall raw_ReplaceNode (
        /*[in]*/ struct DiagramNode * TargetNode ) = 0;
      virtual HRESULT __stdcall raw_SwapNode (
        /*[in]*/ struct DiagramNode * TargetNode,
        /*[in]*/ VARIANT_BOOL SwapChildren ) = 0;
      virtual HRESULT __stdcall raw_CloneNode (
        /*[in]*/ VARIANT_BOOL CopyChildren,
        /*[in]*/ struct DiagramNode * TargetNode,
        /*[in]*/ __missing_type__ Pos,
        /*[out,retval]*/ struct DiagramNode * * Node ) = 0;
      virtual HRESULT __stdcall raw_TransferChildren (
        /*[in]*/ struct DiagramNode * ReceivingNode ) = 0;
      virtual HRESULT __stdcall raw_NextNode (
        /*[out,retval]*/ struct DiagramNode * * NextNode ) = 0;
      virtual HRESULT __stdcall raw_PrevNode (
        /*[out,retval]*/ struct DiagramNode * * PrevNode ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct DiagramNodeChildren * * Children ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct DiagramNode * * Root ) = 0;
      virtual HRESULT __stdcall get_Diagram (
        /*[out,retval]*/ struct Diagram * * Diagram ) = 0;
      virtual HRESULT __stdcall get_Layout (
        /*[out,retval]*/ __missing_type__ * Type ) = 0;
      virtual HRESULT __stdcall put_Layout (
        /*[in]*/ __missing_type__ Type ) = 0;
      virtual HRESULT __stdcall get_TextShape (
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
};

struct __declspec(uuid("914934d9-5a91-11cf-8700-00aa0060263b"))
DiagramNodeChildren : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetFirstChild))
    DiagramNodePtr FirstChild;
    __declspec(property(get=GetLastChild))
    DiagramNodePtr LastChild;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IUnknownPtr Get_NewEnum ( );
    DiagramNodePtr Item (
        const _variant_t & Index );
    DiagramNodePtr AddNode (
        const _variant_t & Index,
        __missing_type__ NodeType );
    HRESULT SelectAll ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );
    DiagramNodePtr GetFirstChild ( );
    DiagramNodePtr GetLastChild ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppunkEnum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct DiagramNode * * Node ) = 0;
      virtual HRESULT __stdcall raw_AddNode (
        /*[in]*/ VARIANT Index,
        /*[in]*/ __missing_type__ NodeType,
        /*[out,retval]*/ struct DiagramNode * * NewNode ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * iDiagramNodes ) = 0;
      virtual HRESULT __stdcall get_FirstChild (
        /*[out,retval]*/ struct DiagramNode * * First ) = 0;
      virtual HRESULT __stdcall get_LastChild (
        /*[out,retval]*/ struct DiagramNode * * Last ) = 0;
};

struct __declspec(uuid("914934da-5a91-11cf-8700-00aa0060263b"))
DiagramNodes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IUnknownPtr Get_NewEnum ( );
    DiagramNodePtr Item (
        const _variant_t & Index );
    HRESULT SelectAll ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppunkEnum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct DiagramNode * * ppdn ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * iDiagramNodes ) = 0;
};

struct __declspec(uuid("914934db-5a91-11cf-8700-00aa0060263b"))
Diagram : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetNodes))
    DiagramNodesPtr Nodes;
    __declspec(property(get=GetType))
    __missing_type__  Type;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    DiagramNodesPtr GetNodes ( );
    __missing_type__  GetType ( );
    __missing_type__  GetAutoLayout ( );
    void PutAutoLayout (
        __missing_type__ AutoLayout );
    __missing_type__  GetReverse ( );
    void PutReverse (
        __missing_type__ Reverse );
    __missing_type__  GetAutoFormat ( );
    void PutAutoFormat (
        __missing_type__ AutoFormat );
    HRESULT Convert (
        __missing_type__ Type );
    HRESULT FitText ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Nodes (
        /*[out,retval]*/ struct DiagramNodes * * Nodes ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ __missing_type__ * Type ) = 0;
      virtual HRESULT __stdcall get_AutoLayout (
        /*[out,retval]*/ __missing_type__ * AutoLayout ) = 0;
      virtual HRESULT __stdcall put_AutoLayout (
        /*[in]*/ __missing_type__ AutoLayout ) = 0;
      virtual HRESULT __stdcall get_Reverse (
        /*[out,retval]*/ __missing_type__ * Reverse ) = 0;
      virtual HRESULT __stdcall put_Reverse (
        /*[in]*/ __missing_type__ Reverse ) = 0;
      virtual HRESULT __stdcall get_AutoFormat (
        /*[out,retval]*/ __missing_type__ * AutoFormat ) = 0;
      virtual HRESULT __stdcall put_AutoFormat (
        /*[in]*/ __missing_type__ AutoFormat ) = 0;
      virtual HRESULT __stdcall raw_Convert (
        /*[in]*/ __missing_type__ Type ) = 0;
      virtual HRESULT __stdcall raw_FitText ( ) = 0;
};

struct __declspec(uuid("92d41a50-f07e-4ca4-af6f-bef486aa4e6f"))
FileConverters : Collection
{
    //
    // Wrapper methods for error-handling
    //

    FileConverterPtr Item (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct FileConverter * * Item ) = 0;
};

struct __declspec(uuid("92d41a51-f07e-4ca4-af6f-bef486aa4e6f"))
FileConverter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCanOpen))
    VARIANT_BOOL CanOpen;
    __declspec(property(get=GetCanSave))
    VARIANT_BOOL CanSave;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetCreator))
    FileConvertersPtr Creator;
    __declspec(property(get=GetExtensions))
    _bstr_t Extensions;
    __declspec(property(get=GetFormatName))
    _bstr_t FormatName;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    FileConvertersPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetOpenFormat))
    long OpenFormat;
    __declspec(property(get=GetSaveFormat))
    long SaveFormat;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    VARIANT_BOOL GetCanOpen ( );
    VARIANT_BOOL GetCanSave ( );
    _bstr_t GetClassName ( );
    FileConvertersPtr GetCreator ( );
    _bstr_t GetExtensions ( );
    _bstr_t GetFormatName ( );
    _bstr_t GetName ( );
    FileConvertersPtr GetParent ( );
    _bstr_t GetPath ( );
    long GetOpenFormat ( );
    long GetSaveFormat ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_CanOpen (
        /*[out,retval]*/ VARIANT_BOOL * CanOpen ) = 0;
      virtual HRESULT __stdcall get_CanSave (
        /*[out,retval]*/ VARIANT_BOOL * CanSave ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * ClassName ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ struct FileConverters * * Creator ) = 0;
      virtual HRESULT __stdcall get_Extensions (
        /*[out,retval]*/ BSTR * Extensions ) = 0;
      virtual HRESULT __stdcall get_FormatName (
        /*[out,retval]*/ BSTR * FormatName ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct FileConverters * * Parent ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall get_OpenFormat (
        /*[out,retval]*/ long * OpenFormat ) = 0;
      virtual HRESULT __stdcall get_SaveFormat (
        /*[out,retval]*/ long * SaveFormat ) = 0;
};

//
// Function implementation mapping
//

#pragma start_map_region("c:\users\ccao.o390-ccao\desktop\test\test\release\msppt.tli")
__declspec(implementation_key(1)) IUnknownPtr Collection::Get_NewEnum ( );
__declspec(implementation_key(2)) _variant_t Collection::_Index ( int Index );
__declspec(implementation_key(3)) long Collection::GetCount ( );
__declspec(implementation_key(4)) IDispatchPtr ColorFormat::GetApplication ( );
__declspec(implementation_key(5)) long ColorFormat::GetCreator ( );
__declspec(implementation_key(6)) IDispatchPtr ColorFormat::GetParent ( );
__declspec(implementation_key(7)) __missing_type__  ColorFormat::GetRGB ( );
__declspec(implementation_key(8)) void ColorFormat::PutRGB ( __missing_type__ RGB );
__declspec(implementation_key(9)) __missing_type__  ColorFormat::GetType ( );
__declspec(implementation_key(10)) enum PpColorSchemeIndex ColorFormat::GetSchemeColor ( );
__declspec(implementation_key(11)) void ColorFormat::PutSchemeColor ( enum PpColorSchemeIndex SchemeColor );
__declspec(implementation_key(12)) float ColorFormat::GetTintAndShade ( );
__declspec(implementation_key(13)) void ColorFormat::PutTintAndShade ( float pValue );
__declspec(implementation_key(14)) __missing_type__  ColorFormat::GetObjectThemeColor ( );
__declspec(implementation_key(15)) void ColorFormat::PutObjectThemeColor ( __missing_type__ ObjectThemeColor );
__declspec(implementation_key(16)) float ColorFormat::GetBrightness ( );
__declspec(implementation_key(17)) void ColorFormat::PutBrightness ( float Brightness );
__declspec(implementation_key(18)) _ApplicationPtr NamedSlideShow::GetApplication ( );
__declspec(implementation_key(19)) IDispatchPtr NamedSlideShow::GetParent ( );
__declspec(implementation_key(20)) _bstr_t NamedSlideShow::GetName ( );
__declspec(implementation_key(21)) HRESULT NamedSlideShow::Delete ( );
__declspec(implementation_key(22)) _variant_t NamedSlideShow::GetSlideIDs ( );
__declspec(implementation_key(23)) long NamedSlideShow::GetCount ( );
__declspec(implementation_key(24)) _ApplicationPtr NamedSlideShows::GetApplication ( );
__declspec(implementation_key(25)) IDispatchPtr NamedSlideShows::GetParent ( );
__declspec(implementation_key(26)) NamedSlideShowPtr NamedSlideShows::Item ( const _variant_t & Index );
__declspec(implementation_key(27)) NamedSlideShowPtr NamedSlideShows::Add ( _bstr_t Name, const _variant_t & safeArrayOfSlideIDs );
__declspec(implementation_key(28)) _ApplicationPtr PrintRange::GetApplication ( );
__declspec(implementation_key(29)) IDispatchPtr PrintRange::GetParent ( );
__declspec(implementation_key(30)) int PrintRange::GetStart ( );
__declspec(implementation_key(31)) int PrintRange::GetEnd ( );
__declspec(implementation_key(32)) HRESULT PrintRange::Delete ( );
__declspec(implementation_key(33)) PrintRangePtr PrintRanges::Add ( int Start, int End );
__declspec(implementation_key(34)) _ApplicationPtr PrintRanges::GetApplication ( );
__declspec(implementation_key(35)) HRESULT PrintRanges::ClearAll ( );
__declspec(implementation_key(36)) PrintRangePtr PrintRanges::Item ( int Index );
__declspec(implementation_key(37)) IDispatchPtr PrintRanges::GetParent ( );
__declspec(implementation_key(38)) _ApplicationPtr PrintOptions::GetApplication ( );
__declspec(implementation_key(39)) enum PpPrintColorType PrintOptions::GetPrintColorType ( );
__declspec(implementation_key(40)) void PrintOptions::PutPrintColorType ( enum PpPrintColorType PrintColorType );
__declspec(implementation_key(41)) __missing_type__  PrintOptions::GetCollate ( );
__declspec(implementation_key(42)) void PrintOptions::PutCollate ( __missing_type__ Collate );
__declspec(implementation_key(43)) __missing_type__  PrintOptions::GetFitToPage ( );
__declspec(implementation_key(44)) void PrintOptions::PutFitToPage ( __missing_type__ FitToPage );
__declspec(implementation_key(45)) __missing_type__  PrintOptions::GetFrameSlides ( );
__declspec(implementation_key(46)) void PrintOptions::PutFrameSlides ( __missing_type__ FrameSlides );
__declspec(implementation_key(47)) int PrintOptions::GetNumberOfCopies ( );
__declspec(implementation_key(48)) void PrintOptions::PutNumberOfCopies ( int NumberOfCopies );
__declspec(implementation_key(49)) enum PpPrintOutputType PrintOptions::GetOutputType ( );
__declspec(implementation_key(50)) void PrintOptions::PutOutputType ( enum PpPrintOutputType OutputType );
__declspec(implementation_key(51)) IDispatchPtr PrintOptions::GetParent ( );
__declspec(implementation_key(52)) __missing_type__  PrintOptions::GetPrintHiddenSlides ( );
__declspec(implementation_key(53)) void PrintOptions::PutPrintHiddenSlides ( __missing_type__ PrintHiddenSlides );
__declspec(implementation_key(54)) __missing_type__  PrintOptions::GetPrintInBackground ( );
__declspec(implementation_key(55)) void PrintOptions::PutPrintInBackground ( __missing_type__ PrintInBackground );
__declspec(implementation_key(56)) enum PpPrintRangeType PrintOptions::GetRangeType ( );
__declspec(implementation_key(57)) void PrintOptions::PutRangeType ( enum PpPrintRangeType RangeType );
__declspec(implementation_key(58)) PrintRangesPtr PrintOptions::GetRanges ( );
__declspec(implementation_key(59)) __missing_type__  PrintOptions::GetPrintFontsAsGraphics ( );
__declspec(implementation_key(60)) void PrintOptions::PutPrintFontsAsGraphics ( __missing_type__ PrintFontsAsGraphics );
__declspec(implementation_key(61)) _bstr_t PrintOptions::GetSlideShowName ( );
__declspec(implementation_key(62)) void PrintOptions::PutSlideShowName ( _bstr_t SlideShowName );
__declspec(implementation_key(63)) _bstr_t PrintOptions::GetActivePrinter ( );
__declspec(implementation_key(64)) void PrintOptions::PutActivePrinter ( _bstr_t ActivePrinter );
__declspec(implementation_key(65)) enum PpPrintHandoutOrder PrintOptions::GetHandoutOrder ( );
__declspec(implementation_key(66)) void PrintOptions::PutHandoutOrder ( enum PpPrintHandoutOrder HandoutOrder );
__declspec(implementation_key(67)) __missing_type__  PrintOptions::GetPrintComments ( );
__declspec(implementation_key(68)) void PrintOptions::PutPrintComments ( __missing_type__ PrintComments );
__declspec(implementation_key(69)) int PrintOptions::GetsectionIndex ( );
__declspec(implementation_key(70)) void PrintOptions::PutsectionIndex ( int sectionIndex );
__declspec(implementation_key(71)) __missing_type__  PrintOptions::GetHighQuality ( );
__declspec(implementation_key(72)) void PrintOptions::PutHighQuality ( __missing_type__ HighQuality );
__declspec(implementation_key(73)) _ApplicationPtr AddIn::GetApplication ( );
__declspec(implementation_key(74)) IDispatchPtr AddIn::GetParent ( );
__declspec(implementation_key(75)) _bstr_t AddIn::GetFullName ( );
__declspec(implementation_key(76)) _bstr_t AddIn::GetName ( );
__declspec(implementation_key(77)) _bstr_t AddIn::GetPath ( );
__declspec(implementation_key(78)) __missing_type__  AddIn::GetRegistered ( );
__declspec(implementation_key(79)) void AddIn::PutRegistered ( __missing_type__ Registered );
__declspec(implementation_key(80)) __missing_type__  AddIn::GetAutoLoad ( );
__declspec(implementation_key(81)) void AddIn::PutAutoLoad ( __missing_type__ AutoLoad );
__declspec(implementation_key(82)) __missing_type__  AddIn::GetLoaded ( );
__declspec(implementation_key(83)) void AddIn::PutLoaded ( __missing_type__ Loaded );
__declspec(implementation_key(84)) __missing_type__  AddIn::GetDisplayAlerts ( );
__declspec(implementation_key(85)) void AddIn::PutDisplayAlerts ( __missing_type__ DisplayAlerts );
__declspec(implementation_key(86)) __missing_type__  AddIn::GetRegisteredInHKLM ( );
__declspec(implementation_key(87)) _ApplicationPtr AddIns::GetApplication ( );
__declspec(implementation_key(88)) IDispatchPtr AddIns::GetParent ( );
__declspec(implementation_key(89)) AddInPtr AddIns::Item ( VARIANT * Index );
__declspec(implementation_key(90)) AddInPtr AddIns::Add ( _bstr_t FileName );
__declspec(implementation_key(91)) HRESULT AddIns::Remove ( VARIANT * Index );
__declspec(implementation_key(92)) _ApplicationPtr Presentations::GetApplication ( );
__declspec(implementation_key(93)) IDispatchPtr Presentations::GetParent ( );
__declspec(implementation_key(94)) _PresentationPtr Presentations::Item ( const _variant_t & Index );
__declspec(implementation_key(95)) _PresentationPtr Presentations::Add ( __missing_type__ WithWindow );
__declspec(implementation_key(96)) _PresentationPtr Presentations::OpenOld ( _bstr_t FileName, __missing_type__ ReadOnly, __missing_type__ Untitled, __missing_type__ WithWindow );
__declspec(implementation_key(97)) _PresentationPtr Presentations::Open ( _bstr_t FileName, __missing_type__ ReadOnly, __missing_type__ Untitled, __missing_type__ WithWindow );
__declspec(implementation_key(98)) HRESULT Presentations::CheckOut ( _bstr_t FileName );
__declspec(implementation_key(99)) VARIANT_BOOL Presentations::CanCheckOut ( _bstr_t FileName );
__declspec(implementation_key(100)) _PresentationPtr Presentations::Open2007 ( _bstr_t FileName, __missing_type__ ReadOnly, __missing_type__ Untitled, __missing_type__ WithWindow, __missing_type__ OpenAndRepair );
__declspec(implementation_key(101)) _ApplicationPtr Hyperlink::GetApplication ( );
__declspec(implementation_key(102)) IDispatchPtr Hyperlink::GetParent ( );
__declspec(implementation_key(103)) __missing_type__  Hyperlink::GetType ( );
__declspec(implementation_key(104)) _bstr_t Hyperlink::GetAddress ( );
__declspec(implementation_key(105)) void Hyperlink::PutAddress ( _bstr_t Address );
__declspec(implementation_key(106)) _bstr_t Hyperlink::GetSubAddress ( );
__declspec(implementation_key(107)) void Hyperlink::PutSubAddress ( _bstr_t SubAddress );
__declspec(implementation_key(108)) HRESULT Hyperlink::AddToFavorites ( );
__declspec(implementation_key(109)) _bstr_t Hyperlink::GetEmailSubject ( );
__declspec(implementation_key(110)) void Hyperlink::PutEmailSubject ( _bstr_t EmailSubject );
__declspec(implementation_key(111)) _bstr_t Hyperlink::GetScreenTip ( );
__declspec(implementation_key(112)) void Hyperlink::PutScreenTip ( _bstr_t ScreenTip );
__declspec(implementation_key(113)) _bstr_t Hyperlink::GetTextToDisplay ( );
__declspec(implementation_key(114)) void Hyperlink::PutTextToDisplay ( _bstr_t TextToDisplay );
__declspec(implementation_key(115)) __missing_type__  Hyperlink::GetShowAndReturn ( );
__declspec(implementation_key(116)) void Hyperlink::PutShowAndReturn ( __missing_type__ ShowAndReturn );
__declspec(implementation_key(117)) HRESULT Hyperlink::Follow ( );
__declspec(implementation_key(118)) HRESULT Hyperlink::CreateNewDocument ( _bstr_t FileName, __missing_type__ EditNow, __missing_type__ Overwrite );
__declspec(implementation_key(119)) HRESULT Hyperlink::Delete ( );
__declspec(implementation_key(120)) _ApplicationPtr Hyperlinks::GetApplication ( );
__declspec(implementation_key(121)) IDispatchPtr Hyperlinks::GetParent ( );
__declspec(implementation_key(122)) HyperlinkPtr Hyperlinks::Item ( int Index );
__declspec(implementation_key(123)) _ApplicationPtr PageSetup::GetApplication ( );
__declspec(implementation_key(124)) IDispatchPtr PageSetup::GetParent ( );
__declspec(implementation_key(125)) int PageSetup::GetFirstSlideNumber ( );
__declspec(implementation_key(126)) void PageSetup::PutFirstSlideNumber ( int FirstSlideNumber );
__declspec(implementation_key(127)) float PageSetup::GetSlideHeight ( );
__declspec(implementation_key(128)) void PageSetup::PutSlideHeight ( float SlideHeight );
__declspec(implementation_key(129)) float PageSetup::GetSlideWidth ( );
__declspec(implementation_key(130)) void PageSetup::PutSlideWidth ( float SlideWidth );
__declspec(implementation_key(131)) enum PpSlideSizeType PageSetup::GetSlideSize ( );
__declspec(implementation_key(132)) void PageSetup::PutSlideSize ( enum PpSlideSizeType SlideSize );
__declspec(implementation_key(133)) __missing_type__  PageSetup::GetNotesOrientation ( );
__declspec(implementation_key(134)) void PageSetup::PutNotesOrientation ( __missing_type__ NotesOrientation );
__declspec(implementation_key(135)) __missing_type__  PageSetup::GetSlideOrientation ( );
__declspec(implementation_key(136)) void PageSetup::PutSlideOrientation ( __missing_type__ SlideOrientation );
__declspec(implementation_key(137)) _ApplicationPtr ExtraColors::GetApplication ( );
__declspec(implementation_key(138)) IDispatchPtr ExtraColors::GetParent ( );
__declspec(implementation_key(139)) __missing_type__  ExtraColors::Item ( int Index );
__declspec(implementation_key(140)) HRESULT ExtraColors::Add ( __missing_type__ Type );
__declspec(implementation_key(141)) HRESULT ExtraColors::Clear ( );
__declspec(implementation_key(142)) _ApplicationPtr RGBColor::GetApplication ( );
__declspec(implementation_key(143)) IDispatchPtr RGBColor::GetParent ( );
__declspec(implementation_key(144)) __missing_type__  RGBColor::GetRGB ( );
__declspec(implementation_key(145)) void RGBColor::PutRGB ( __missing_type__ RGB );
__declspec(implementation_key(146)) _ApplicationPtr ColorScheme::GetApplication ( );
__declspec(implementation_key(147)) IDispatchPtr ColorScheme::GetParent ( );
__declspec(implementation_key(148)) RGBColorPtr ColorScheme::Colors ( enum PpColorSchemeIndex SchemeColor );
__declspec(implementation_key(149)) HRESULT ColorScheme::Delete ( );
__declspec(implementation_key(150)) _ApplicationPtr ColorSchemes::GetApplication ( );
__declspec(implementation_key(151)) IDispatchPtr ColorSchemes::GetParent ( );
__declspec(implementation_key(152)) ColorSchemePtr ColorSchemes::Item ( int Index );
__declspec(implementation_key(153)) ColorSchemePtr ColorSchemes::Add ( struct ColorScheme * Scheme );
__declspec(implementation_key(154)) _ApplicationPtr SoundEffect::GetApplication ( );
__declspec(implementation_key(155)) IDispatchPtr SoundEffect::GetParent ( );
__declspec(implementation_key(156)) _bstr_t SoundEffect::GetName ( );
__declspec(implementation_key(157)) void SoundEffect::PutName ( _bstr_t Name );
__declspec(implementation_key(158)) enum PpSoundEffectType SoundEffect::GetType ( );
__declspec(implementation_key(159)) void SoundEffect::PutType ( enum PpSoundEffectType Type );
__declspec(implementation_key(160)) HRESULT SoundEffect::ImportFromFile ( _bstr_t FileName );
__declspec(implementation_key(161)) HRESULT SoundEffect::Play ( );
__declspec(implementation_key(162)) _ApplicationPtr SlideShowTransition::GetApplication ( );
__declspec(implementation_key(163)) IDispatchPtr SlideShowTransition::GetParent ( );
__declspec(implementation_key(164)) __missing_type__  SlideShowTransition::GetAdvanceOnClick ( );
__declspec(implementation_key(165)) void SlideShowTransition::PutAdvanceOnClick ( __missing_type__ AdvanceOnClick );
__declspec(implementation_key(166)) __missing_type__  SlideShowTransition::GetAdvanceOnTime ( );
__declspec(implementation_key(167)) void SlideShowTransition::PutAdvanceOnTime ( __missing_type__ AdvanceOnTime );
__declspec(implementation_key(168)) float SlideShowTransition::GetAdvanceTime ( );
__declspec(implementation_key(169)) void SlideShowTransition::PutAdvanceTime ( float AdvanceTime );
__declspec(implementation_key(170)) enum PpEntryEffect SlideShowTransition::GetEntryEffect ( );
__declspec(implementation_key(171)) void SlideShowTransition::PutEntryEffect ( enum PpEntryEffect EntryEffect );
__declspec(implementation_key(172)) __missing_type__  SlideShowTransition::GetHidden ( );
__declspec(implementation_key(173)) void SlideShowTransition::PutHidden ( __missing_type__ Hidden );
__declspec(implementation_key(174)) __missing_type__  SlideShowTransition::GetLoopSoundUntilNext ( );
__declspec(implementation_key(175)) void SlideShowTransition::PutLoopSoundUntilNext ( __missing_type__ LoopSoundUntilNext );
__declspec(implementation_key(176)) SoundEffectPtr SlideShowTransition::GetSoundEffect ( );
__declspec(implementation_key(177)) enum PpTransitionSpeed SlideShowTransition::GetSpeed ( );
__declspec(implementation_key(178)) void SlideShowTransition::PutSpeed ( enum PpTransitionSpeed Speed );
__declspec(implementation_key(179)) float SlideShowTransition::GetDuration ( );
__declspec(implementation_key(180)) void SlideShowTransition::PutDuration ( float Duration );
__declspec(implementation_key(181)) HRESULT SoundFormat::Play ( );
__declspec(implementation_key(182)) HRESULT SoundFormat::Import ( _bstr_t FileName );
__declspec(implementation_key(183)) enum PpSoundFormatType SoundFormat::Export ( _bstr_t FileName );
__declspec(implementation_key(184)) enum PpSoundFormatType SoundFormat::GetType ( );
__declspec(implementation_key(185)) _bstr_t SoundFormat::GetSourceFullName ( );
__declspec(implementation_key(186)) _ApplicationPtr PlaceholderFormat::GetApplication ( );
__declspec(implementation_key(187)) IDispatchPtr PlaceholderFormat::GetParent ( );
__declspec(implementation_key(188)) enum PpPlaceholderType PlaceholderFormat::GetType ( );
__declspec(implementation_key(189)) _bstr_t PlaceholderFormat::GetName ( );
__declspec(implementation_key(190)) void PlaceholderFormat::PutName ( _bstr_t Name );
__declspec(implementation_key(191)) __missing_type__  PlaceholderFormat::GetContainedType ( );
__declspec(implementation_key(192)) IDispatchPtr Adjustments::GetApplication ( );
__declspec(implementation_key(193)) long Adjustments::GetCreator ( );
__declspec(implementation_key(194)) IDispatchPtr Adjustments::GetParent ( );
__declspec(implementation_key(195)) int Adjustments::GetCount ( );
__declspec(implementation_key(196)) float Adjustments::GetItem ( int Index );
__declspec(implementation_key(197)) void Adjustments::PutItem ( int Index, float Val );
__declspec(implementation_key(198)) IDispatchPtr PictureFormat::GetApplication ( );
__declspec(implementation_key(199)) long PictureFormat::GetCreator ( );
__declspec(implementation_key(200)) IDispatchPtr PictureFormat::GetParent ( );
__declspec(implementation_key(201)) HRESULT PictureFormat::IncrementBrightness ( float Increment );
__declspec(implementation_key(202)) HRESULT PictureFormat::IncrementContrast ( float Increment );
__declspec(implementation_key(203)) float PictureFormat::GetBrightness ( );
__declspec(implementation_key(204)) void PictureFormat::PutBrightness ( float Brightness );
__declspec(implementation_key(205)) __missing_type__  PictureFormat::GetColorType ( );
__declspec(implementation_key(206)) void PictureFormat::PutColorType ( __missing_type__ ColorType );
__declspec(implementation_key(207)) float PictureFormat::GetContrast ( );
__declspec(implementation_key(208)) void PictureFormat::PutContrast ( float Contrast );
__declspec(implementation_key(209)) float PictureFormat::GetCropBottom ( );
__declspec(implementation_key(210)) void PictureFormat::PutCropBottom ( float CropBottom );
__declspec(implementation_key(211)) float PictureFormat::GetCropLeft ( );
__declspec(implementation_key(212)) void PictureFormat::PutCropLeft ( float CropLeft );
__declspec(implementation_key(213)) float PictureFormat::GetCropRight ( );
__declspec(implementation_key(214)) void PictureFormat::PutCropRight ( float CropRight );
__declspec(implementation_key(215)) float PictureFormat::GetCropTop ( );
__declspec(implementation_key(216)) void PictureFormat::PutCropTop ( float CropTop );
__declspec(implementation_key(217)) __missing_type__  PictureFormat::GetTransparencyColor ( );
__declspec(implementation_key(218)) void PictureFormat::PutTransparencyColor ( __missing_type__ TransparencyColor );
__declspec(implementation_key(219)) __missing_type__  PictureFormat::GetTransparentBackground ( );
__declspec(implementation_key(220)) void PictureFormat::PutTransparentBackground ( __missing_type__ TransparentBackground );
__declspec(implementation_key(221)) __missing_type__ PictureFormat::GetCrop ( );
__declspec(implementation_key(222)) IDispatchPtr FillFormat::GetApplication ( );
__declspec(implementation_key(223)) long FillFormat::GetCreator ( );
__declspec(implementation_key(224)) IDispatchPtr FillFormat::GetParent ( );
__declspec(implementation_key(225)) HRESULT FillFormat::Background ( );
__declspec(implementation_key(226)) HRESULT FillFormat::OneColorGradient ( __missing_type__ Style, int Variant, float Degree );
__declspec(implementation_key(227)) HRESULT FillFormat::Patterned ( __missing_type__ Pattern );
__declspec(implementation_key(228)) HRESULT FillFormat::PresetGradient ( __missing_type__ Style, int Variant, __missing_type__ PresetGradientType );
__declspec(implementation_key(229)) HRESULT FillFormat::PresetTextured ( __missing_type__ PresetTexture );
__declspec(implementation_key(230)) HRESULT FillFormat::Solid ( );
__declspec(implementation_key(231)) HRESULT FillFormat::TwoColorGradient ( __missing_type__ Style, int Variant );
__declspec(implementation_key(232)) HRESULT FillFormat::UserPicture ( _bstr_t PictureFile );
__declspec(implementation_key(233)) HRESULT FillFormat::UserTextured ( _bstr_t TextureFile );
__declspec(implementation_key(234)) ColorFormatPtr FillFormat::GetBackColor ( );
__declspec(implementation_key(235)) void FillFormat::PutBackColor ( struct ColorFormat * BackColor );
__declspec(implementation_key(236)) ColorFormatPtr FillFormat::GetForeColor ( );
__declspec(implementation_key(237)) void FillFormat::PutForeColor ( struct ColorFormat * ForeColor );
__declspec(implementation_key(238)) __missing_type__  FillFormat::GetGradientColorType ( );
__declspec(implementation_key(239)) float FillFormat::GetGradientDegree ( );
__declspec(implementation_key(240)) __missing_type__  FillFormat::GetGradientStyle ( );
__declspec(implementation_key(241)) int FillFormat::GetGradientVariant ( );
__declspec(implementation_key(242)) __missing_type__  FillFormat::GetPattern ( );
__declspec(implementation_key(243)) __missing_type__  FillFormat::GetPresetGradientType ( );
__declspec(implementation_key(244)) __missing_type__  FillFormat::GetPresetTexture ( );
__declspec(implementation_key(245)) _bstr_t FillFormat::GetTextureName ( );
__declspec(implementation_key(246)) __missing_type__  FillFormat::GetTextureType ( );
__declspec(implementation_key(247)) float FillFormat::GetTransparency ( );
__declspec(implementation_key(248)) void FillFormat::PutTransparency ( float Transparency );
__declspec(implementation_key(249)) __missing_type__  FillFormat::GetType ( );
__declspec(implementation_key(250)) __missing_type__  FillFormat::GetVisible ( );
__declspec(implementation_key(251)) void FillFormat::PutVisible ( __missing_type__ Visible );
__declspec(implementation_key(252)) __missing_type__ FillFormat::GetGradientStops ( );
__declspec(implementation_key(253)) float FillFormat::GetTextureOffsetX ( );
__declspec(implementation_key(254)) void FillFormat::PutTextureOffsetX ( float TextureOffsetX );
__declspec(implementation_key(255)) float FillFormat::GetTextureOffsetY ( );
__declspec(implementation_key(256)) void FillFormat::PutTextureOffsetY ( float TextureOffsetY );
__declspec(implementation_key(257)) __missing_type__  FillFormat::GetTextureAlignment ( );
__declspec(implementation_key(258)) void FillFormat::PutTextureAlignment ( __missing_type__ TextureAlignment );
__declspec(implementation_key(259)) float FillFormat::GetTextureHorizontalScale ( );
__declspec(implementation_key(260)) void FillFormat::PutTextureHorizontalScale ( float HorizontalScale );
__declspec(implementation_key(261)) float FillFormat::GetTextureVerticalScale ( );
__declspec(implementation_key(262)) void FillFormat::PutTextureVerticalScale ( float VerticalScale );
__declspec(implementation_key(263)) __missing_type__  FillFormat::GetTextureTile ( );
__declspec(implementation_key(264)) void FillFormat::PutTextureTile ( __missing_type__ TextureTile );
__declspec(implementation_key(265)) __missing_type__  FillFormat::GetRotateWithObject ( );
__declspec(implementation_key(266)) void FillFormat::PutRotateWithObject ( __missing_type__ RotateWithObject );
__declspec(implementation_key(267)) __missing_type__ FillFormat::GetPictureEffects ( );
__declspec(implementation_key(268)) float FillFormat::GetGradientAngle ( );
__declspec(implementation_key(269)) void FillFormat::PutGradientAngle ( float GradientAngle );
__declspec(implementation_key(270)) IDispatchPtr LineFormat::GetApplication ( );
__declspec(implementation_key(271)) long LineFormat::GetCreator ( );
__declspec(implementation_key(272)) IDispatchPtr LineFormat::GetParent ( );
__declspec(implementation_key(273)) ColorFormatPtr LineFormat::GetBackColor ( );
__declspec(implementation_key(274)) void LineFormat::PutBackColor ( struct ColorFormat * BackColor );
__declspec(implementation_key(275)) __missing_type__  LineFormat::GetBeginArrowheadLength ( );
__declspec(implementation_key(276)) void LineFormat::PutBeginArrowheadLength ( __missing_type__ BeginArrowheadLength );
__declspec(implementation_key(277)) __missing_type__  LineFormat::GetBeginArrowheadStyle ( );
__declspec(implementation_key(278)) void LineFormat::PutBeginArrowheadStyle ( __missing_type__ BeginArrowheadStyle );
__declspec(implementation_key(279)) __missing_type__  LineFormat::GetBeginArrowheadWidth ( );
__declspec(implementation_key(280)) void LineFormat::PutBeginArrowheadWidth ( __missing_type__ BeginArrowheadWidth );
__declspec(implementation_key(281)) __missing_type__  LineFormat::GetDashStyle ( );
__declspec(implementation_key(282)) void LineFormat::PutDashStyle ( __missing_type__ DashStyle );
__declspec(implementation_key(283)) __missing_type__  LineFormat::GetEndArrowheadLength ( );
__declspec(implementation_key(284)) void LineFormat::PutEndArrowheadLength ( __missing_type__ EndArrowheadLength );
__declspec(implementation_key(285)) __missing_type__  LineFormat::GetEndArrowheadStyle ( );
__declspec(implementation_key(286)) void LineFormat::PutEndArrowheadStyle ( __missing_type__ EndArrowheadStyle );
__declspec(implementation_key(287)) __missing_type__  LineFormat::GetEndArrowheadWidth ( );
__declspec(implementation_key(288)) void LineFormat::PutEndArrowheadWidth ( __missing_type__ EndArrowheadWidth );
__declspec(implementation_key(289)) ColorFormatPtr LineFormat::GetForeColor ( );
__declspec(implementation_key(290)) void LineFormat::PutForeColor ( struct ColorFormat * ForeColor );
__declspec(implementation_key(291)) __missing_type__  LineFormat::GetPattern ( );
__declspec(implementation_key(292)) void LineFormat::PutPattern ( __missing_type__ Pattern );
__declspec(implementation_key(293)) __missing_type__  LineFormat::GetStyle ( );
__declspec(implementation_key(294)) void LineFormat::PutStyle ( __missing_type__ Style );
__declspec(implementation_key(295)) float LineFormat::GetTransparency ( );
__declspec(implementation_key(296)) void LineFormat::PutTransparency ( float Transparency );
__declspec(implementation_key(297)) __missing_type__  LineFormat::GetVisible ( );
__declspec(implementation_key(298)) void LineFormat::PutVisible ( __missing_type__ Visible );
__declspec(implementation_key(299)) float LineFormat::GetWeight ( );
__declspec(implementation_key(300)) void LineFormat::PutWeight ( float Weight );
__declspec(implementation_key(301)) __missing_type__  LineFormat::GetInsetPen ( );
__declspec(implementation_key(302)) void LineFormat::PutInsetPen ( __missing_type__ InsetPen );
__declspec(implementation_key(303)) IDispatchPtr ShadowFormat::GetApplication ( );
__declspec(implementation_key(304)) long ShadowFormat::GetCreator ( );
__declspec(implementation_key(305)) IDispatchPtr ShadowFormat::GetParent ( );
__declspec(implementation_key(306)) HRESULT ShadowFormat::IncrementOffsetX ( float Increment );
__declspec(implementation_key(307)) HRESULT ShadowFormat::IncrementOffsetY ( float Increment );
__declspec(implementation_key(308)) ColorFormatPtr ShadowFormat::GetForeColor ( );
__declspec(implementation_key(309)) void ShadowFormat::PutForeColor ( struct ColorFormat * ForeColor );
__declspec(implementation_key(310)) __missing_type__  ShadowFormat::GetObscured ( );
__declspec(implementation_key(311)) void ShadowFormat::PutObscured ( __missing_type__ Obscured );
__declspec(implementation_key(312)) float ShadowFormat::GetOffsetX ( );
__declspec(implementation_key(313)) void ShadowFormat::PutOffsetX ( float OffsetX );
__declspec(implementation_key(314)) float ShadowFormat::GetOffsetY ( );
__declspec(implementation_key(315)) void ShadowFormat::PutOffsetY ( float OffsetY );
__declspec(implementation_key(316)) float ShadowFormat::GetTransparency ( );
__declspec(implementation_key(317)) void ShadowFormat::PutTransparency ( float Transparency );
__declspec(implementation_key(318)) __missing_type__  ShadowFormat::GetType ( );
__declspec(implementation_key(319)) void ShadowFormat::PutType ( __missing_type__ Type );
__declspec(implementation_key(320)) __missing_type__  ShadowFormat::GetVisible ( );
__declspec(implementation_key(321)) void ShadowFormat::PutVisible ( __missing_type__ Visible );
__declspec(implementation_key(322)) __missing_type__  ShadowFormat::GetStyle ( );
__declspec(implementation_key(323)) void ShadowFormat::PutStyle ( __missing_type__ ShadowStyle );
__declspec(implementation_key(324)) float ShadowFormat::GetBlur ( );
__declspec(implementation_key(325)) void ShadowFormat::PutBlur ( float Blur );
__declspec(implementation_key(326)) float ShadowFormat::GetSize ( );
__declspec(implementation_key(327)) void ShadowFormat::PutSize ( float Size );
__declspec(implementation_key(328)) __missing_type__  ShadowFormat::GetRotateWithShape ( );
__declspec(implementation_key(329)) void ShadowFormat::PutRotateWithShape ( __missing_type__ RotateWithShape );
__declspec(implementation_key(330)) IDispatchPtr TextEffectFormat::GetApplication ( );
__declspec(implementation_key(331)) long TextEffectFormat::GetCreator ( );
__declspec(implementation_key(332)) IDispatchPtr TextEffectFormat::GetParent ( );
__declspec(implementation_key(333)) HRESULT TextEffectFormat::ToggleVerticalText ( );
__declspec(implementation_key(334)) __missing_type__  TextEffectFormat::GetAlignment ( );
__declspec(implementation_key(335)) void TextEffectFormat::PutAlignment ( __missing_type__ Alignment );
__declspec(implementation_key(336)) __missing_type__  TextEffectFormat::GetFontBold ( );
__declspec(implementation_key(337)) void TextEffectFormat::PutFontBold ( __missing_type__ FontBold );
__declspec(implementation_key(338)) __missing_type__  TextEffectFormat::GetFontItalic ( );
__declspec(implementation_key(339)) void TextEffectFormat::PutFontItalic ( __missing_type__ FontItalic );
__declspec(implementation_key(340)) _bstr_t TextEffectFormat::GetFontName ( );
__declspec(implementation_key(341)) void TextEffectFormat::PutFontName ( _bstr_t FontName );
__declspec(implementation_key(342)) float TextEffectFormat::GetFontSize ( );
__declspec(implementation_key(343)) void TextEffectFormat::PutFontSize ( float FontSize );
__declspec(implementation_key(344)) __missing_type__  TextEffectFormat::GetKernedPairs ( );
__declspec(implementation_key(345)) void TextEffectFormat::PutKernedPairs ( __missing_type__ KernedPairs );
__declspec(implementation_key(346)) __missing_type__  TextEffectFormat::GetNormalizedHeight ( );
__declspec(implementation_key(347)) void TextEffectFormat::PutNormalizedHeight ( __missing_type__ NormalizedHeight );
__declspec(implementation_key(348)) __missing_type__  TextEffectFormat::GetPresetShape ( );
__declspec(implementation_key(349)) void TextEffectFormat::PutPresetShape ( __missing_type__ PresetShape );
__declspec(implementation_key(350)) __missing_type__  TextEffectFormat::GetPresetTextEffect ( );
__declspec(implementation_key(351)) void TextEffectFormat::PutPresetTextEffect ( __missing_type__ Preset );
__declspec(implementation_key(352)) __missing_type__  TextEffectFormat::GetRotatedChars ( );
__declspec(implementation_key(353)) void TextEffectFormat::PutRotatedChars ( __missing_type__ RotatedChars );
__declspec(implementation_key(354)) _bstr_t TextEffectFormat::GetText ( );
__declspec(implementation_key(355)) void TextEffectFormat::PutText ( _bstr_t Text );
__declspec(implementation_key(356)) float TextEffectFormat::GetTracking ( );
__declspec(implementation_key(357)) void TextEffectFormat::PutTracking ( float Tracking );
__declspec(implementation_key(358)) IDispatchPtr ThreeDFormat::GetApplication ( );
__declspec(implementation_key(359)) long ThreeDFormat::GetCreator ( );
__declspec(implementation_key(360)) IDispatchPtr ThreeDFormat::GetParent ( );
__declspec(implementation_key(361)) HRESULT ThreeDFormat::IncrementRotationX ( float Increment );
__declspec(implementation_key(362)) HRESULT ThreeDFormat::IncrementRotationY ( float Increment );
__declspec(implementation_key(363)) HRESULT ThreeDFormat::ResetRotation ( );
__declspec(implementation_key(364)) HRESULT ThreeDFormat::SetThreeDFormat ( __missing_type__ PresetThreeDFormat );
__declspec(implementation_key(365)) HRESULT ThreeDFormat::SetExtrusionDirection ( __missing_type__ PresetExtrusionDirection );
__declspec(implementation_key(366)) float ThreeDFormat::GetDepth ( );
__declspec(implementation_key(367)) void ThreeDFormat::PutDepth ( float Depth );
__declspec(implementation_key(368)) ColorFormatPtr ThreeDFormat::GetExtrusionColor ( );
__declspec(implementation_key(369)) __missing_type__  ThreeDFormat::GetExtrusionColorType ( );
__declspec(implementation_key(370)) void ThreeDFormat::PutExtrusionColorType ( __missing_type__ ExtrusionColorType );
__declspec(implementation_key(371)) __missing_type__  ThreeDFormat::GetPerspective ( );
__declspec(implementation_key(372)) void ThreeDFormat::PutPerspective ( __missing_type__ Perspective );
__declspec(implementation_key(373)) __missing_type__  ThreeDFormat::GetPresetExtrusionDirection ( );
__declspec(implementation_key(374)) __missing_type__  ThreeDFormat::GetPresetLightingDirection ( );
__declspec(implementation_key(375)) void ThreeDFormat::PutPresetLightingDirection ( __missing_type__ PresetLightingDirection );
__declspec(implementation_key(376)) __missing_type__  ThreeDFormat::GetPresetLightingSoftness ( );
__declspec(implementation_key(377)) void ThreeDFormat::PutPresetLightingSoftness ( __missing_type__ PresetLightingSoftness );
__declspec(implementation_key(378)) __missing_type__  ThreeDFormat::GetPresetMaterial ( );
__declspec(implementation_key(379)) void ThreeDFormat::PutPresetMaterial ( __missing_type__ PresetMaterial );
__declspec(implementation_key(380)) __missing_type__  ThreeDFormat::GetPresetThreeDFormat ( );
__declspec(implementation_key(381)) float ThreeDFormat::GetRotationX ( );
__declspec(implementation_key(382)) void ThreeDFormat::PutRotationX ( float RotationX );
__declspec(implementation_key(383)) float ThreeDFormat::GetRotationY ( );
__declspec(implementation_key(384)) void ThreeDFormat::PutRotationY ( float RotationY );
__declspec(implementation_key(385)) __missing_type__  ThreeDFormat::GetVisible ( );
__declspec(implementation_key(386)) void ThreeDFormat::PutVisible ( __missing_type__ Visible );
__declspec(implementation_key(387)) HRESULT ThreeDFormat::SetPresetCamera ( __missing_type__ PresetCamera );
__declspec(implementation_key(388)) HRESULT ThreeDFormat::IncrementRotationZ ( float Increment );
__declspec(implementation_key(389)) HRESULT ThreeDFormat::IncrementRotationHorizontal ( float Increment );
__declspec(implementation_key(390)) HRESULT ThreeDFormat::IncrementRotationVertical ( float Increment );
__declspec(implementation_key(391)) __missing_type__  ThreeDFormat::GetPresetLighting ( );
__declspec(implementation_key(392)) void ThreeDFormat::PutPresetLighting ( __missing_type__ PresetLightRigType );
__declspec(implementation_key(393)) float ThreeDFormat::GetZ ( );
__declspec(implementation_key(394)) void ThreeDFormat::PutZ ( float Z );
__declspec(implementation_key(395)) __missing_type__  ThreeDFormat::GetBevelTopType ( );
__declspec(implementation_key(396)) void ThreeDFormat::PutBevelTopType ( __missing_type__ BevelTopType );
__declspec(implementation_key(397)) float ThreeDFormat::GetBevelTopInset ( );
__declspec(implementation_key(398)) void ThreeDFormat::PutBevelTopInset ( float BevelTopInset );
__declspec(implementation_key(399)) float ThreeDFormat::GetBevelTopDepth ( );
__declspec(implementation_key(400)) void ThreeDFormat::PutBevelTopDepth ( float BevelTopDepth );
__declspec(implementation_key(401)) __missing_type__  ThreeDFormat::GetBevelBottomType ( );
__declspec(implementation_key(402)) void ThreeDFormat::PutBevelBottomType ( __missing_type__ BevelBottomType );
__declspec(implementation_key(403)) float ThreeDFormat::GetBevelBottomInset ( );
__declspec(implementation_key(404)) void ThreeDFormat::PutBevelBottomInset ( float BevelBottomInset );
__declspec(implementation_key(405)) float ThreeDFormat::GetBevelBottomDepth ( );
__declspec(implementation_key(406)) void ThreeDFormat::PutBevelBottomDepth ( float BevelBottomDepth );
__declspec(implementation_key(407)) __missing_type__  ThreeDFormat::GetPresetCamera ( );
__declspec(implementation_key(408)) float ThreeDFormat::GetRotationZ ( );
__declspec(implementation_key(409)) void ThreeDFormat::PutRotationZ ( float RotationZ );
__declspec(implementation_key(410)) float ThreeDFormat::GetContourWidth ( );
__declspec(implementation_key(411)) void ThreeDFormat::PutContourWidth ( float Width );
__declspec(implementation_key(412)) ColorFormatPtr ThreeDFormat::GetContourColor ( );
__declspec(implementation_key(413)) float ThreeDFormat::GetFieldOfView ( );
__declspec(implementation_key(414)) void ThreeDFormat::PutFieldOfView ( float FOV );
__declspec(implementation_key(415)) __missing_type__  ThreeDFormat::GetProjectText ( );
__declspec(implementation_key(416)) void ThreeDFormat::PutProjectText ( __missing_type__ ProjectText );
__declspec(implementation_key(417)) float ThreeDFormat::GetLightAngle ( );
__declspec(implementation_key(418)) void ThreeDFormat::PutLightAngle ( float LightAngle );
__declspec(implementation_key(419)) IDispatchPtr CalloutFormat::GetApplication ( );
__declspec(implementation_key(420)) long CalloutFormat::GetCreator ( );
__declspec(implementation_key(421)) IDispatchPtr CalloutFormat::GetParent ( );
__declspec(implementation_key(422)) HRESULT CalloutFormat::AutomaticLength ( );
__declspec(implementation_key(423)) HRESULT CalloutFormat::CustomDrop ( float Drop );
__declspec(implementation_key(424)) HRESULT CalloutFormat::CustomLength ( float Length );
__declspec(implementation_key(425)) HRESULT CalloutFormat::PresetDrop ( __missing_type__ DropType );
__declspec(implementation_key(426)) __missing_type__  CalloutFormat::GetAccent ( );
__declspec(implementation_key(427)) void CalloutFormat::PutAccent ( __missing_type__ Accent );
__declspec(implementation_key(428)) __missing_type__  CalloutFormat::GetAngle ( );
__declspec(implementation_key(429)) void CalloutFormat::PutAngle ( __missing_type__ Angle );
__declspec(implementation_key(430)) __missing_type__  CalloutFormat::GetAutoAttach ( );
__declspec(implementation_key(431)) void CalloutFormat::PutAutoAttach ( __missing_type__ AutoAttach );
__declspec(implementation_key(432)) __missing_type__  CalloutFormat::GetAutoLength ( );
__declspec(implementation_key(433)) __missing_type__  CalloutFormat::GetBorder ( );
__declspec(implementation_key(434)) void CalloutFormat::PutBorder ( __missing_type__ Border );
__declspec(implementation_key(435)) float CalloutFormat::GetDrop ( );
__declspec(implementation_key(436)) __missing_type__  CalloutFormat::GetDropType ( );
__declspec(implementation_key(437)) float CalloutFormat::GetGap ( );
__declspec(implementation_key(438)) void CalloutFormat::PutGap ( float Gap );
__declspec(implementation_key(439)) float CalloutFormat::GetLength ( );
__declspec(implementation_key(440)) __missing_type__  CalloutFormat::GetType ( );
__declspec(implementation_key(441)) void CalloutFormat::PutType ( __missing_type__ Type );
__declspec(implementation_key(442)) IDispatchPtr ShapeNode::GetApplication ( );
__declspec(implementation_key(443)) long ShapeNode::GetCreator ( );
__declspec(implementation_key(444)) IDispatchPtr ShapeNode::GetParent ( );
__declspec(implementation_key(445)) __missing_type__  ShapeNode::GetEditingType ( );
__declspec(implementation_key(446)) _variant_t ShapeNode::GetPoints ( );
__declspec(implementation_key(447)) __missing_type__  ShapeNode::GetSegmentType ( );
__declspec(implementation_key(448)) IDispatchPtr ShapeNodes::GetApplication ( );
__declspec(implementation_key(449)) long ShapeNodes::GetCreator ( );
__declspec(implementation_key(450)) IDispatchPtr ShapeNodes::GetParent ( );
__declspec(implementation_key(451)) int ShapeNodes::GetCount ( );
__declspec(implementation_key(452)) ShapeNodePtr ShapeNodes::Item ( const _variant_t & Index );
__declspec(implementation_key(453)) IUnknownPtr ShapeNodes::Get_NewEnum ( );
__declspec(implementation_key(454)) HRESULT ShapeNodes::Delete ( int Index );
__declspec(implementation_key(455)) HRESULT ShapeNodes::Insert ( int Index, __missing_type__ SegmentType, __missing_type__ EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 );
__declspec(implementation_key(456)) HRESULT ShapeNodes::SetEditingType ( int Index, __missing_type__ EditingType );
__declspec(implementation_key(457)) HRESULT ShapeNodes::SetPosition ( int Index, float X1, float Y1 );
__declspec(implementation_key(458)) HRESULT ShapeNodes::SetSegmentType ( int Index, __missing_type__ SegmentType );
__declspec(implementation_key(459)) _ApplicationPtr LinkFormat::GetApplication ( );
__declspec(implementation_key(460)) IDispatchPtr LinkFormat::GetParent ( );
__declspec(implementation_key(461)) _bstr_t LinkFormat::GetSourceFullName ( );
__declspec(implementation_key(462)) void LinkFormat::PutSourceFullName ( _bstr_t SourceFullName );
__declspec(implementation_key(463)) enum PpUpdateOption LinkFormat::GetAutoUpdate ( );
__declspec(implementation_key(464)) void LinkFormat::PutAutoUpdate ( enum PpUpdateOption AutoUpdate );
__declspec(implementation_key(465)) HRESULT LinkFormat::Update ( );
__declspec(implementation_key(466)) HRESULT LinkFormat::BreakLink ( );
__declspec(implementation_key(467)) _ApplicationPtr ObjectVerbs::GetApplication ( );
__declspec(implementation_key(468)) IDispatchPtr ObjectVerbs::GetParent ( );
__declspec(implementation_key(469)) _bstr_t ObjectVerbs::Item ( int Index );
__declspec(implementation_key(470)) _ApplicationPtr OLEFormat::GetApplication ( );
__declspec(implementation_key(471)) IDispatchPtr OLEFormat::GetParent ( );
__declspec(implementation_key(472)) ObjectVerbsPtr OLEFormat::GetObjectVerbs ( );
__declspec(implementation_key(473)) IDispatchPtr OLEFormat::GetObject ( );
__declspec(implementation_key(474)) _bstr_t OLEFormat::GetProgID ( );
__declspec(implementation_key(475)) enum PpFollowColors OLEFormat::GetFollowColors ( );
__declspec(implementation_key(476)) void OLEFormat::PutFollowColors ( enum PpFollowColors FollowColors );
__declspec(implementation_key(477)) HRESULT OLEFormat::DoVerb ( int Index );
__declspec(implementation_key(478)) HRESULT OLEFormat::Activate ( );
__declspec(implementation_key(479)) _ApplicationPtr ActionSetting::GetApplication ( );
__declspec(implementation_key(480)) IDispatchPtr ActionSetting::GetParent ( );
__declspec(implementation_key(481)) enum PpActionType ActionSetting::GetAction ( );
__declspec(implementation_key(482)) void ActionSetting::PutAction ( enum PpActionType Action );
__declspec(implementation_key(483)) _bstr_t ActionSetting::GetActionVerb ( );
__declspec(implementation_key(484)) void ActionSetting::PutActionVerb ( _bstr_t ActionVerb );
__declspec(implementation_key(485)) __missing_type__  ActionSetting::GetAnimateAction ( );
__declspec(implementation_key(486)) void ActionSetting::PutAnimateAction ( __missing_type__ AnimateAction );
__declspec(implementation_key(487)) _bstr_t ActionSetting::GetRun ( );
__declspec(implementation_key(488)) void ActionSetting::PutRun ( _bstr_t Run );
__declspec(implementation_key(489)) _bstr_t ActionSetting::GetSlideShowName ( );
__declspec(implementation_key(490)) void ActionSetting::PutSlideShowName ( _bstr_t SlideShowName );
__declspec(implementation_key(491)) HyperlinkPtr ActionSetting::GetHyperlink ( );
__declspec(implementation_key(492)) SoundEffectPtr ActionSetting::GetSoundEffect ( );
__declspec(implementation_key(493)) __missing_type__  ActionSetting::GetShowAndReturn ( );
__declspec(implementation_key(494)) void ActionSetting::PutShowAndReturn ( __missing_type__ ShowAndReturn );
__declspec(implementation_key(495)) _ApplicationPtr ActionSettings::GetApplication ( );
__declspec(implementation_key(496)) IDispatchPtr ActionSettings::GetParent ( );
__declspec(implementation_key(497)) ActionSettingPtr ActionSettings::Item ( enum PpMouseActivation Index );
__declspec(implementation_key(498)) _ApplicationPtr PlaySettings::GetApplication ( );
__declspec(implementation_key(499)) IDispatchPtr PlaySettings::GetParent ( );
__declspec(implementation_key(500)) _bstr_t PlaySettings::GetActionVerb ( );
__declspec(implementation_key(501)) void PlaySettings::PutActionVerb ( _bstr_t ActionVerb );
__declspec(implementation_key(502)) __missing_type__  PlaySettings::GetHideWhileNotPlaying ( );
__declspec(implementation_key(503)) void PlaySettings::PutHideWhileNotPlaying ( __missing_type__ HideWhileNotPlaying );
__declspec(implementation_key(504)) __missing_type__  PlaySettings::GetLoopUntilStopped ( );
__declspec(implementation_key(505)) void PlaySettings::PutLoopUntilStopped ( __missing_type__ LoopUntilStopped );
__declspec(implementation_key(506)) __missing_type__  PlaySettings::GetPlayOnEntry ( );
__declspec(implementation_key(507)) void PlaySettings::PutPlayOnEntry ( __missing_type__ PlayOnEntry );
__declspec(implementation_key(508)) __missing_type__  PlaySettings::GetRewindMovie ( );
__declspec(implementation_key(509)) void PlaySettings::PutRewindMovie ( __missing_type__ RewindMovie );
__declspec(implementation_key(510)) __missing_type__  PlaySettings::GetPauseAnimation ( );
__declspec(implementation_key(511)) void PlaySettings::PutPauseAnimation ( __missing_type__ PauseAnimation );
__declspec(implementation_key(512)) int PlaySettings::GetStopAfterSlides ( );
__declspec(implementation_key(513)) void PlaySettings::PutStopAfterSlides ( int StopAfterSlides );
__declspec(implementation_key(514)) _ApplicationPtr AnimationSettings::GetApplication ( );
__declspec(implementation_key(515)) IDispatchPtr AnimationSettings::GetParent ( );
__declspec(implementation_key(516)) ColorFormatPtr AnimationSettings::GetDimColor ( );
__declspec(implementation_key(517)) SoundEffectPtr AnimationSettings::GetSoundEffect ( );
__declspec(implementation_key(518)) enum PpEntryEffect AnimationSettings::GetEntryEffect ( );
__declspec(implementation_key(519)) void AnimationSettings::PutEntryEffect ( enum PpEntryEffect EntryEffect );
__declspec(implementation_key(520)) enum PpAfterEffect AnimationSettings::GetAfterEffect ( );
__declspec(implementation_key(521)) void AnimationSettings::PutAfterEffect ( enum PpAfterEffect AfterEffect );
__declspec(implementation_key(522)) int AnimationSettings::GetAnimationOrder ( );
__declspec(implementation_key(523)) void AnimationSettings::PutAnimationOrder ( int AnimationOrder );
__declspec(implementation_key(524)) enum PpAdvanceMode AnimationSettings::GetAdvanceMode ( );
__declspec(implementation_key(525)) void AnimationSettings::PutAdvanceMode ( enum PpAdvanceMode AdvanceMode );
__declspec(implementation_key(526)) float AnimationSettings::GetAdvanceTime ( );
__declspec(implementation_key(527)) void AnimationSettings::PutAdvanceTime ( float AdvanceTime );
__declspec(implementation_key(528)) PlaySettingsPtr AnimationSettings::GetPlaySettings ( );
__declspec(implementation_key(529)) enum PpTextLevelEffect AnimationSettings::GetTextLevelEffect ( );
__declspec(implementation_key(530)) void AnimationSettings::PutTextLevelEffect ( enum PpTextLevelEffect TextLevelEffect );
__declspec(implementation_key(531)) enum PpTextUnitEffect AnimationSettings::GetTextUnitEffect ( );
__declspec(implementation_key(532)) void AnimationSettings::PutTextUnitEffect ( enum PpTextUnitEffect TextUnitEffect );
__declspec(implementation_key(533)) __missing_type__  AnimationSettings::GetAnimate ( );
__declspec(implementation_key(534)) void AnimationSettings::PutAnimate ( __missing_type__ Animate );
__declspec(implementation_key(535)) __missing_type__  AnimationSettings::GetAnimateBackground ( );
__declspec(implementation_key(536)) void AnimationSettings::PutAnimateBackground ( __missing_type__ AnimateBackground );
__declspec(implementation_key(537)) __missing_type__  AnimationSettings::GetAnimateTextInReverse ( );
__declspec(implementation_key(538)) void AnimationSettings::PutAnimateTextInReverse ( __missing_type__ AnimateTextInReverse );
__declspec(implementation_key(539)) enum PpChartUnitEffect AnimationSettings::GetChartUnitEffect ( );
__declspec(implementation_key(540)) void AnimationSettings::PutChartUnitEffect ( enum PpChartUnitEffect ChartUnitEffect );
__declspec(implementation_key(541)) _ApplicationPtr RulerLevel::GetApplication ( );
__declspec(implementation_key(542)) IDispatchPtr RulerLevel::GetParent ( );
__declspec(implementation_key(543)) float RulerLevel::GetFirstMargin ( );
__declspec(implementation_key(544)) void RulerLevel::PutFirstMargin ( float FirstMargin );
__declspec(implementation_key(545)) float RulerLevel::GetLeftMargin ( );
__declspec(implementation_key(546)) void RulerLevel::PutLeftMargin ( float LeftMargin );
__declspec(implementation_key(547)) _ApplicationPtr RulerLevels::GetApplication ( );
__declspec(implementation_key(548)) IDispatchPtr RulerLevels::GetParent ( );
__declspec(implementation_key(549)) RulerLevelPtr RulerLevels::Item ( int Index );
__declspec(implementation_key(550)) _ApplicationPtr TabStop::GetApplication ( );
__declspec(implementation_key(551)) IDispatchPtr TabStop::GetParent ( );
__declspec(implementation_key(552)) enum PpTabStopType TabStop::GetType ( );
__declspec(implementation_key(553)) void TabStop::PutType ( enum PpTabStopType Type );
__declspec(implementation_key(554)) float TabStop::GetPosition ( );
__declspec(implementation_key(555)) void TabStop::PutPosition ( float Position );
__declspec(implementation_key(556)) HRESULT TabStop::Clear ( );
__declspec(implementation_key(557)) _ApplicationPtr TabStops::GetApplication ( );
__declspec(implementation_key(558)) IDispatchPtr TabStops::GetParent ( );
__declspec(implementation_key(559)) TabStopPtr TabStops::Item ( int Index );
__declspec(implementation_key(560)) float TabStops::GetDefaultSpacing ( );
__declspec(implementation_key(561)) void TabStops::PutDefaultSpacing ( float DefaultSpacing );
__declspec(implementation_key(562)) TabStopPtr TabStops::Add ( enum PpTabStopType Type, float Position );
__declspec(implementation_key(563)) _ApplicationPtr Ruler::GetApplication ( );
__declspec(implementation_key(564)) IDispatchPtr Ruler::GetParent ( );
__declspec(implementation_key(565)) TabStopsPtr Ruler::GetTabStops ( );
__declspec(implementation_key(566)) RulerLevelsPtr Ruler::GetLevels ( );
__declspec(implementation_key(567)) _ApplicationPtr Font::GetApplication ( );
__declspec(implementation_key(568)) IDispatchPtr Font::GetParent ( );
__declspec(implementation_key(569)) ColorFormatPtr Font::GetColor ( );
__declspec(implementation_key(570)) __missing_type__  Font::GetBold ( );
__declspec(implementation_key(571)) void Font::PutBold ( __missing_type__ Bold );
__declspec(implementation_key(572)) __missing_type__  Font::GetItalic ( );
__declspec(implementation_key(573)) void Font::PutItalic ( __missing_type__ Italic );
__declspec(implementation_key(574)) __missing_type__  Font::GetShadow ( );
__declspec(implementation_key(575)) void Font::PutShadow ( __missing_type__ Shadow );
__declspec(implementation_key(576)) __missing_type__  Font::GetEmboss ( );
__declspec(implementation_key(577)) void Font::PutEmboss ( __missing_type__ Emboss );
__declspec(implementation_key(578)) __missing_type__  Font::GetUnderline ( );
__declspec(implementation_key(579)) void Font::PutUnderline ( __missing_type__ Underline );
__declspec(implementation_key(580)) __missing_type__  Font::GetSubscript ( );
__declspec(implementation_key(581)) void Font::PutSubscript ( __missing_type__ Subscript );
__declspec(implementation_key(582)) __missing_type__  Font::GetSuperscript ( );
__declspec(implementation_key(583)) void Font::PutSuperscript ( __missing_type__ Superscript );
__declspec(implementation_key(584)) float Font::GetBaselineOffset ( );
__declspec(implementation_key(585)) void Font::PutBaselineOffset ( float BaselineOffset );
__declspec(implementation_key(586)) __missing_type__  Font::GetEmbedded ( );
__declspec(implementation_key(587)) __missing_type__  Font::GetEmbeddable ( );
__declspec(implementation_key(588)) float Font::GetSize ( );
__declspec(implementation_key(589)) void Font::PutSize ( float Size );
__declspec(implementation_key(590)) _bstr_t Font::GetName ( );
__declspec(implementation_key(591)) void Font::PutName ( _bstr_t Name );
__declspec(implementation_key(592)) _bstr_t Font::GetNameFarEast ( );
__declspec(implementation_key(593)) void Font::PutNameFarEast ( _bstr_t NameFarEast );
__declspec(implementation_key(594)) _bstr_t Font::GetNameAscii ( );
__declspec(implementation_key(595)) void Font::PutNameAscii ( _bstr_t NameAscii );
__declspec(implementation_key(596)) __missing_type__  Font::GetAutoRotateNumbers ( );
__declspec(implementation_key(597)) void Font::PutAutoRotateNumbers ( __missing_type__ AutoRotateNumbers );
__declspec(implementation_key(598)) _bstr_t Font::GetNameOther ( );
__declspec(implementation_key(599)) void Font::PutNameOther ( _bstr_t NameOther );
__declspec(implementation_key(600)) _bstr_t Font::GetNameComplexScript ( );
__declspec(implementation_key(601)) void Font::PutNameComplexScript ( _bstr_t NameComplexScript );
__declspec(implementation_key(602)) _ApplicationPtr Fonts::GetApplication ( );
__declspec(implementation_key(603)) IDispatchPtr Fonts::GetParent ( );
__declspec(implementation_key(604)) FontPtr Fonts::Item ( const _variant_t & Index );
__declspec(implementation_key(605)) HRESULT Fonts::Replace ( _bstr_t Original, _bstr_t Replacement );
__declspec(implementation_key(606)) _ApplicationPtr HeaderFooter::GetApplication ( );
__declspec(implementation_key(607)) IDispatchPtr HeaderFooter::GetParent ( );
__declspec(implementation_key(608)) __missing_type__  HeaderFooter::GetVisible ( );
__declspec(implementation_key(609)) void HeaderFooter::PutVisible ( __missing_type__ Visible );
__declspec(implementation_key(610)) _bstr_t HeaderFooter::GetText ( );
__declspec(implementation_key(611)) void HeaderFooter::PutText ( _bstr_t Text );
__declspec(implementation_key(612)) __missing_type__  HeaderFooter::GetUseFormat ( );
__declspec(implementation_key(613)) void HeaderFooter::PutUseFormat ( __missing_type__ UseFormat );
__declspec(implementation_key(614)) enum PpDateTimeFormat HeaderFooter::GetFormat ( );
__declspec(implementation_key(615)) void HeaderFooter::PutFormat ( enum PpDateTimeFormat Format );
__declspec(implementation_key(616)) _ApplicationPtr HeadersFooters::GetApplication ( );
__declspec(implementation_key(617)) IDispatchPtr HeadersFooters::GetParent ( );
__declspec(implementation_key(618)) HeaderFooterPtr HeadersFooters::GetDateAndTime ( );
__declspec(implementation_key(619)) HeaderFooterPtr HeadersFooters::GetSlideNumber ( );
__declspec(implementation_key(620)) HeaderFooterPtr HeadersFooters::GetHeader ( );
__declspec(implementation_key(621)) HeaderFooterPtr HeadersFooters::GetFooter ( );
__declspec(implementation_key(622)) __missing_type__  HeadersFooters::GetDisplayOnTitleSlide ( );
__declspec(implementation_key(623)) void HeadersFooters::PutDisplayOnTitleSlide ( __missing_type__ DisplayOnTitleSlide );
__declspec(implementation_key(624)) HRESULT HeadersFooters::Clear ( );
__declspec(implementation_key(625)) _ApplicationPtr Tags::GetApplication ( );
__declspec(implementation_key(626)) IDispatchPtr Tags::GetParent ( );
__declspec(implementation_key(627)) _bstr_t Tags::Item ( _bstr_t Name );
__declspec(implementation_key(628)) HRESULT Tags::Add ( _bstr_t Name, _bstr_t Value );
__declspec(implementation_key(629)) HRESULT Tags::Delete ( _bstr_t Name );
__declspec(implementation_key(630)) HRESULT Tags::AddBinary ( _bstr_t Name, _bstr_t FilePath );
__declspec(implementation_key(631)) long Tags::BinaryValue ( _bstr_t Name );
__declspec(implementation_key(632)) _bstr_t Tags::Name ( int Index );
__declspec(implementation_key(633)) _bstr_t Tags::Value ( int Index );
__declspec(implementation_key(634)) HRESULT MouseTracker::OnTrack ( float X, float Y );
__declspec(implementation_key(635)) HRESULT MouseTracker::EndTrack ( float X, float Y );
__declspec(implementation_key(636)) HRESULT MouseDownHandler::OnMouseDown ( IUnknown * activeWin );
__declspec(implementation_key(637)) VARIANT_BOOL OCXExtender::GetVisible ( );
__declspec(implementation_key(638)) void OCXExtender::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(639)) float OCXExtender::GetLeft ( );
__declspec(implementation_key(640)) void OCXExtender::PutLeft ( float Left );
__declspec(implementation_key(641)) float OCXExtender::GetTop ( );
__declspec(implementation_key(642)) void OCXExtender::PutTop ( float Top );
__declspec(implementation_key(643)) float OCXExtender::GetHeight ( );
__declspec(implementation_key(644)) void OCXExtender::PutHeight ( float Height );
__declspec(implementation_key(645)) float OCXExtender::GetWidth ( );
__declspec(implementation_key(646)) void OCXExtender::PutWidth ( float Width );
__declspec(implementation_key(647)) int OCXExtender::GetZOrderPosition ( );
__declspec(implementation_key(648)) _bstr_t OCXExtender::GetName ( );
__declspec(implementation_key(649)) void OCXExtender::PutName ( _bstr_t Name );
__declspec(implementation_key(650)) _bstr_t OCXExtender::GetAltHTML ( );
__declspec(implementation_key(651)) void OCXExtender::PutAltHTML ( _bstr_t AltHTML );
__declspec(implementation_key(652)) HRESULT OCXExtenderEvents::GotFocus ( );
__declspec(implementation_key(653)) HRESULT OCXExtenderEvents::LostFocus ( );
__declspec(implementation_key(654)) _ApplicationPtr BulletFormat::GetApplication ( );
__declspec(implementation_key(655)) IDispatchPtr BulletFormat::GetParent ( );
__declspec(implementation_key(656)) __missing_type__  BulletFormat::GetVisible ( );
__declspec(implementation_key(657)) void BulletFormat::PutVisible ( __missing_type__ Visible );
__declspec(implementation_key(658)) int BulletFormat::GetCharacter ( );
__declspec(implementation_key(659)) void BulletFormat::PutCharacter ( int Character );
__declspec(implementation_key(660)) float BulletFormat::GetRelativeSize ( );
__declspec(implementation_key(661)) void BulletFormat::PutRelativeSize ( float RelativeSize );
__declspec(implementation_key(662)) __missing_type__  BulletFormat::GetUseTextColor ( );
__declspec(implementation_key(663)) void BulletFormat::PutUseTextColor ( __missing_type__ UseTextColor );
__declspec(implementation_key(664)) __missing_type__  BulletFormat::GetUseTextFont ( );
__declspec(implementation_key(665)) void BulletFormat::PutUseTextFont ( __missing_type__ UseTextFont );
__declspec(implementation_key(666)) FontPtr BulletFormat::GetFont ( );
__declspec(implementation_key(667)) enum PpBulletType BulletFormat::GetType ( );
__declspec(implementation_key(668)) void BulletFormat::PutType ( enum PpBulletType Type );
__declspec(implementation_key(669)) enum PpNumberedBulletStyle BulletFormat::GetStyle ( );
__declspec(implementation_key(670)) void BulletFormat::PutStyle ( enum PpNumberedBulletStyle Style );
__declspec(implementation_key(671)) int BulletFormat::GetStartValue ( );
__declspec(implementation_key(672)) void BulletFormat::PutStartValue ( int StartValue );
__declspec(implementation_key(673)) HRESULT BulletFormat::Picture ( _bstr_t Picture );
__declspec(implementation_key(674)) int BulletFormat::GetNumber ( );
__declspec(implementation_key(675)) _ApplicationPtr ParagraphFormat::GetApplication ( );
__declspec(implementation_key(676)) IDispatchPtr ParagraphFormat::GetParent ( );
__declspec(implementation_key(677)) enum PpParagraphAlignment ParagraphFormat::GetAlignment ( );
__declspec(implementation_key(678)) void ParagraphFormat::PutAlignment ( enum PpParagraphAlignment Alignment );
__declspec(implementation_key(679)) BulletFormatPtr ParagraphFormat::GetBullet ( );
__declspec(implementation_key(680)) __missing_type__  ParagraphFormat::GetLineRuleBefore ( );
__declspec(implementation_key(681)) void ParagraphFormat::PutLineRuleBefore ( __missing_type__ LineRuleBefore );
__declspec(implementation_key(682)) __missing_type__  ParagraphFormat::GetLineRuleAfter ( );
__declspec(implementation_key(683)) void ParagraphFormat::PutLineRuleAfter ( __missing_type__ LineRuleAfter );
__declspec(implementation_key(684)) __missing_type__  ParagraphFormat::GetLineRuleWithin ( );
__declspec(implementation_key(685)) void ParagraphFormat::PutLineRuleWithin ( __missing_type__ LineRuleWithin );
__declspec(implementation_key(686)) float ParagraphFormat::GetSpaceBefore ( );
__declspec(implementation_key(687)) void ParagraphFormat::PutSpaceBefore ( float SpaceBefore );
__declspec(implementation_key(688)) float ParagraphFormat::GetSpaceAfter ( );
__declspec(implementation_key(689)) void ParagraphFormat::PutSpaceAfter ( float SpaceAfter );
__declspec(implementation_key(690)) float ParagraphFormat::GetSpaceWithin ( );
__declspec(implementation_key(691)) void ParagraphFormat::PutSpaceWithin ( float SpaceWithin );
__declspec(implementation_key(692)) enum PpBaselineAlignment ParagraphFormat::GetBaseLineAlignment ( );
__declspec(implementation_key(693)) void ParagraphFormat::PutBaseLineAlignment ( enum PpBaselineAlignment BaseLineAlignment );
__declspec(implementation_key(694)) __missing_type__  ParagraphFormat::GetFarEastLineBreakControl ( );
__declspec(implementation_key(695)) void ParagraphFormat::PutFarEastLineBreakControl ( __missing_type__ FarEastLineBreakControl );
__declspec(implementation_key(696)) __missing_type__  ParagraphFormat::GetWordWrap ( );
__declspec(implementation_key(697)) void ParagraphFormat::PutWordWrap ( __missing_type__ WordWrap );
__declspec(implementation_key(698)) __missing_type__  ParagraphFormat::GetHangingPunctuation ( );
__declspec(implementation_key(699)) void ParagraphFormat::PutHangingPunctuation ( __missing_type__ HangingPunctuation );
__declspec(implementation_key(700)) enum PpDirection ParagraphFormat::GetTextDirection ( );
__declspec(implementation_key(701)) void ParagraphFormat::PutTextDirection ( enum PpDirection TextDirection );
__declspec(implementation_key(702)) _ApplicationPtr TextStyleLevel::GetApplication ( );
__declspec(implementation_key(703)) IDispatchPtr TextStyleLevel::GetParent ( );
__declspec(implementation_key(704)) ParagraphFormatPtr TextStyleLevel::GetParagraphFormat ( );
__declspec(implementation_key(705)) FontPtr TextStyleLevel::GetFont ( );
__declspec(implementation_key(706)) _ApplicationPtr TextStyleLevels::GetApplication ( );
__declspec(implementation_key(707)) IDispatchPtr TextStyleLevels::GetParent ( );
__declspec(implementation_key(708)) TextStyleLevelPtr TextStyleLevels::Item ( int Level );
__declspec(implementation_key(709)) _ApplicationPtr Borders::GetApplication ( );
__declspec(implementation_key(710)) IDispatchPtr Borders::GetParent ( );
__declspec(implementation_key(711)) LineFormatPtr Borders::Item ( enum PpBorderType BorderType );
__declspec(implementation_key(712)) IDispatchPtr Pane::GetParent ( );
__declspec(implementation_key(713)) HRESULT Pane::Activate ( );
__declspec(implementation_key(714)) __missing_type__  Pane::GetActive ( );
__declspec(implementation_key(715)) _ApplicationPtr Pane::GetApplication ( );
__declspec(implementation_key(716)) enum PpViewType Pane::GetViewType ( );
__declspec(implementation_key(717)) _ApplicationPtr Panes::GetApplication ( );
__declspec(implementation_key(718)) PanePtr Panes::Item ( int Index );
__declspec(implementation_key(719)) IDispatchPtr Panes::GetParent ( );
__declspec(implementation_key(720)) __missing_type__  DefaultWebOptions::GetIncludeNavigation ( );
__declspec(implementation_key(721)) void DefaultWebOptions::PutIncludeNavigation ( __missing_type__ IncludeNavigation );
__declspec(implementation_key(722)) enum PpFrameColors DefaultWebOptions::GetFrameColors ( );
__declspec(implementation_key(723)) void DefaultWebOptions::PutFrameColors ( enum PpFrameColors FrameColors );
__declspec(implementation_key(724)) __missing_type__  DefaultWebOptions::GetResizeGraphics ( );
__declspec(implementation_key(725)) void DefaultWebOptions::PutResizeGraphics ( __missing_type__ ResizeGraphics );
__declspec(implementation_key(726)) __missing_type__  DefaultWebOptions::GetShowSlideAnimation ( );
__declspec(implementation_key(727)) void DefaultWebOptions::PutShowSlideAnimation ( __missing_type__ ShowSlideAnimation );
__declspec(implementation_key(728)) __missing_type__  DefaultWebOptions::GetOrganizeInFolder ( );
__declspec(implementation_key(729)) void DefaultWebOptions::PutOrganizeInFolder ( __missing_type__ OrganizeInFolder );
__declspec(implementation_key(730)) __missing_type__  DefaultWebOptions::GetUseLongFileNames ( );
__declspec(implementation_key(731)) void DefaultWebOptions::PutUseLongFileNames ( __missing_type__ UseLongFileNames );
__declspec(implementation_key(732)) __missing_type__  DefaultWebOptions::GetRelyOnVML ( );
__declspec(implementation_key(733)) void DefaultWebOptions::PutRelyOnVML ( __missing_type__ RelyOnVML );
__declspec(implementation_key(734)) __missing_type__  DefaultWebOptions::GetAllowPNG ( );
__declspec(implementation_key(735)) void DefaultWebOptions::PutAllowPNG ( __missing_type__ AllowPNG );
__declspec(implementation_key(736)) __missing_type__  DefaultWebOptions::GetScreenSize ( );
__declspec(implementation_key(737)) void DefaultWebOptions::PutScreenSize ( __missing_type__ ScreenSize );
__declspec(implementation_key(738)) __missing_type__  DefaultWebOptions::GetEncoding ( );
__declspec(implementation_key(739)) void DefaultWebOptions::PutEncoding ( __missing_type__ Encoding );
__declspec(implementation_key(740)) __missing_type__  DefaultWebOptions::GetUpdateLinksOnSave ( );
__declspec(implementation_key(741)) void DefaultWebOptions::PutUpdateLinksOnSave ( __missing_type__ UpdateLinksOnSave );
__declspec(implementation_key(742)) __missing_type__  DefaultWebOptions::GetCheckIfOfficeIsHTMLEditor ( );
__declspec(implementation_key(743)) void DefaultWebOptions::PutCheckIfOfficeIsHTMLEditor ( __missing_type__ CheckIfOfficeIsHTMLEditor );
__declspec(implementation_key(744)) __missing_type__  DefaultWebOptions::GetAlwaysSaveInDefaultEncoding ( );
__declspec(implementation_key(745)) void DefaultWebOptions::PutAlwaysSaveInDefaultEncoding ( __missing_type__ AlwaysSaveInDefaultEncoding );
__declspec(implementation_key(746)) __missing_type__ DefaultWebOptions::GetFonts ( );
__declspec(implementation_key(747)) _bstr_t DefaultWebOptions::GetFolderSuffix ( );
__declspec(implementation_key(748)) __missing_type__  DefaultWebOptions::GetTargetBrowser ( );
__declspec(implementation_key(749)) void DefaultWebOptions::PutTargetBrowser ( __missing_type__ TargetBrowser );
__declspec(implementation_key(750)) __missing_type__  DefaultWebOptions::GetSaveNewWebPagesAsWebArchives ( );
__declspec(implementation_key(751)) void DefaultWebOptions::PutSaveNewWebPagesAsWebArchives ( __missing_type__ SaveNewWebPagesAsWebArchives );
__declspec(implementation_key(752)) enum PpHTMLVersion DefaultWebOptions::GetHTMLVersion ( );
__declspec(implementation_key(753)) void DefaultWebOptions::PutHTMLVersion ( enum PpHTMLVersion HTMLVersion );
__declspec(implementation_key(754)) __missing_type__  WebOptions::GetIncludeNavigation ( );
__declspec(implementation_key(755)) void WebOptions::PutIncludeNavigation ( __missing_type__ IncludeNavigation );
__declspec(implementation_key(756)) enum PpFrameColors WebOptions::GetFrameColors ( );
__declspec(implementation_key(757)) void WebOptions::PutFrameColors ( enum PpFrameColors FrameColors );
__declspec(implementation_key(758)) __missing_type__  WebOptions::GetResizeGraphics ( );
__declspec(implementation_key(759)) void WebOptions::PutResizeGraphics ( __missing_type__ ResizeGraphics );
__declspec(implementation_key(760)) __missing_type__  WebOptions::GetShowSlideAnimation ( );
__declspec(implementation_key(761)) void WebOptions::PutShowSlideAnimation ( __missing_type__ ShowSlideAnimation );
__declspec(implementation_key(762)) __missing_type__  WebOptions::GetOrganizeInFolder ( );
__declspec(implementation_key(763)) void WebOptions::PutOrganizeInFolder ( __missing_type__ OrganizeInFolder );
__declspec(implementation_key(764)) __missing_type__  WebOptions::GetUseLongFileNames ( );
__declspec(implementation_key(765)) void WebOptions::PutUseLongFileNames ( __missing_type__ UseLongFileNames );
__declspec(implementation_key(766)) __missing_type__  WebOptions::GetRelyOnVML ( );
__declspec(implementation_key(767)) void WebOptions::PutRelyOnVML ( __missing_type__ RelyOnVML );
__declspec(implementation_key(768)) __missing_type__  WebOptions::GetAllowPNG ( );
__declspec(implementation_key(769)) void WebOptions::PutAllowPNG ( __missing_type__ AllowPNG );
__declspec(implementation_key(770)) __missing_type__  WebOptions::GetScreenSize ( );
__declspec(implementation_key(771)) void WebOptions::PutScreenSize ( __missing_type__ ScreenSize );
__declspec(implementation_key(772)) __missing_type__  WebOptions::GetEncoding ( );
__declspec(implementation_key(773)) void WebOptions::PutEncoding ( __missing_type__ Encoding );
__declspec(implementation_key(774)) _bstr_t WebOptions::GetFolderSuffix ( );
__declspec(implementation_key(775)) HRESULT WebOptions::UseDefaultFolderSuffix ( );
__declspec(implementation_key(776)) __missing_type__  WebOptions::GetTargetBrowser ( );
__declspec(implementation_key(777)) void WebOptions::PutTargetBrowser ( __missing_type__ TargetBrowser );
__declspec(implementation_key(778)) enum PpHTMLVersion WebOptions::GetHTMLVersion ( );
__declspec(implementation_key(779)) void WebOptions::PutHTMLVersion ( enum PpHTMLVersion HTMLVersion );
__declspec(implementation_key(780)) _ApplicationPtr PublishObject::GetApplication ( );
__declspec(implementation_key(781)) IDispatchPtr PublishObject::GetParent ( );
__declspec(implementation_key(782)) enum PpHTMLVersion PublishObject::GetHTMLVersion ( );
__declspec(implementation_key(783)) void PublishObject::PutHTMLVersion ( enum PpHTMLVersion HTMLVersion );
__declspec(implementation_key(784)) enum PpPublishSourceType PublishObject::GetSourceType ( );
__declspec(implementation_key(785)) void PublishObject::PutSourceType ( enum PpPublishSourceType SourceType );
__declspec(implementation_key(786)) int PublishObject::GetRangeStart ( );
__declspec(implementation_key(787)) void PublishObject::PutRangeStart ( int RangeStart );
__declspec(implementation_key(788)) int PublishObject::GetRangeEnd ( );
__declspec(implementation_key(789)) void PublishObject::PutRangeEnd ( int RangeEnd );
__declspec(implementation_key(790)) _bstr_t PublishObject::GetSlideShowName ( );
__declspec(implementation_key(791)) void PublishObject::PutSlideShowName ( _bstr_t SlideShowName );
__declspec(implementation_key(792)) __missing_type__  PublishObject::GetSpeakerNotes ( );
__declspec(implementation_key(793)) void PublishObject::PutSpeakerNotes ( __missing_type__ SpeakerNotes );
__declspec(implementation_key(794)) _bstr_t PublishObject::GetFileName ( );
__declspec(implementation_key(795)) void PublishObject::PutFileName ( _bstr_t FileName );
__declspec(implementation_key(796)) HRESULT PublishObject::Publish ( );
__declspec(implementation_key(797)) _ApplicationPtr PublishObjects::GetApplication ( );
__declspec(implementation_key(798)) IDispatchPtr PublishObjects::GetParent ( );
__declspec(implementation_key(799)) PublishObjectPtr PublishObjects::Item ( int Index );
__declspec(implementation_key(800)) _ApplicationPtr TextRange::GetApplication ( );
__declspec(implementation_key(801)) IDispatchPtr TextRange::GetParent ( );
__declspec(implementation_key(802)) ActionSettingsPtr TextRange::GetActionSettings ( );
__declspec(implementation_key(803)) long TextRange::GetStart ( );
__declspec(implementation_key(804)) long TextRange::GetLength ( );
__declspec(implementation_key(805)) float TextRange::GetBoundLeft ( );
__declspec(implementation_key(806)) float TextRange::GetBoundTop ( );
__declspec(implementation_key(807)) float TextRange::GetBoundWidth ( );
__declspec(implementation_key(808)) float TextRange::GetBoundHeight ( );
__declspec(implementation_key(809)) TextRangePtr TextRange::Paragraphs ( int Start, int Length );
__declspec(implementation_key(810)) TextRangePtr TextRange::Sentences ( int Start, int Length );
__declspec(implementation_key(811)) TextRangePtr TextRange::Words ( int Start, int Length );
__declspec(implementation_key(812)) TextRangePtr TextRange::Characters ( int Start, int Length );
__declspec(implementation_key(813)) TextRangePtr TextRange::Lines ( int Start, int Length );
__declspec(implementation_key(814)) TextRangePtr TextRange::Runs ( int Start, int Length );
__declspec(implementation_key(815)) TextRangePtr TextRange::TrimText ( );
__declspec(implementation_key(816)) _bstr_t TextRange::GetText ( );
__declspec(implementation_key(817)) void TextRange::PutText ( _bstr_t Text );
__declspec(implementation_key(818)) TextRangePtr TextRange::InsertAfter ( _bstr_t NewText );
__declspec(implementation_key(819)) TextRangePtr TextRange::InsertBefore ( _bstr_t NewText );
__declspec(implementation_key(820)) TextRangePtr TextRange::InsertDateTime ( enum PpDateTimeFormat DateTimeFormat, __missing_type__ InsertAsField );
__declspec(implementation_key(821)) TextRangePtr TextRange::InsertSlideNumber ( );
__declspec(implementation_key(822)) TextRangePtr TextRange::InsertSymbol ( _bstr_t FontName, int CharNumber, __missing_type__ Unicode );
__declspec(implementation_key(823)) FontPtr TextRange::GetFont ( );
__declspec(implementation_key(824)) ParagraphFormatPtr TextRange::GetParagraphFormat ( );
__declspec(implementation_key(825)) int TextRange::GetIndentLevel ( );
__declspec(implementation_key(826)) void TextRange::PutIndentLevel ( int IndentLevel );
__declspec(implementation_key(827)) HRESULT TextRange::Select ( );
__declspec(implementation_key(828)) HRESULT TextRange::Cut ( );
__declspec(implementation_key(829)) HRESULT TextRange::Copy ( );
__declspec(implementation_key(830)) HRESULT TextRange::Delete ( );
__declspec(implementation_key(831)) TextRangePtr TextRange::Paste ( );
__declspec(implementation_key(832)) HRESULT TextRange::ChangeCase ( enum PpChangeCase Type );
__declspec(implementation_key(833)) HRESULT TextRange::AddPeriods ( );
__declspec(implementation_key(834)) HRESULT TextRange::RemovePeriods ( );
__declspec(implementation_key(835)) TextRangePtr TextRange::Find ( _bstr_t FindWhat, int After, __missing_type__ MatchCase, __missing_type__ WholeWords );
__declspec(implementation_key(836)) TextRangePtr TextRange::Replace ( _bstr_t FindWhat, _bstr_t ReplaceWhat, int After, __missing_type__ MatchCase, __missing_type__ WholeWords );
__declspec(implementation_key(837)) HRESULT TextRange::RotatedBounds ( float * X1, float * Y1, float * X2, float * Y2, float * X3, float * Y3, float * x4, float * y4 );
__declspec(implementation_key(838)) __missing_type__  TextRange::GetLanguageID ( );
__declspec(implementation_key(839)) void TextRange::PutLanguageID ( __missing_type__ LanguageID );
__declspec(implementation_key(840)) HRESULT TextRange::RtlRun ( );
__declspec(implementation_key(841)) HRESULT TextRange::LtrRun ( );
__declspec(implementation_key(842)) TextRangePtr TextRange::PasteSpecial ( enum PpPasteDataType DataType, __missing_type__ DisplayAsIcon, _bstr_t IconFileName, int IconIndex, _bstr_t IconLabel, __missing_type__ Link );
__declspec(implementation_key(843)) IDispatchPtr TextFrame::GetApplication ( );
__declspec(implementation_key(844)) long TextFrame::GetCreator ( );
__declspec(implementation_key(845)) IDispatchPtr TextFrame::GetParent ( );
__declspec(implementation_key(846)) float TextFrame::GetMarginBottom ( );
__declspec(implementation_key(847)) void TextFrame::PutMarginBottom ( float MarginBottom );
__declspec(implementation_key(848)) float TextFrame::GetMarginLeft ( );
__declspec(implementation_key(849)) void TextFrame::PutMarginLeft ( float MarginLeft );
__declspec(implementation_key(850)) float TextFrame::GetMarginRight ( );
__declspec(implementation_key(851)) void TextFrame::PutMarginRight ( float MarginRight );
__declspec(implementation_key(852)) float TextFrame::GetMarginTop ( );
__declspec(implementation_key(853)) void TextFrame::PutMarginTop ( float MarginTop );
__declspec(implementation_key(854)) __missing_type__  TextFrame::GetOrientation ( );
__declspec(implementation_key(855)) void TextFrame::PutOrientation ( __missing_type__ Orientation );
__declspec(implementation_key(856)) __missing_type__  TextFrame::GetHasText ( );
__declspec(implementation_key(857)) TextRangePtr TextFrame::GetTextRange ( );
__declspec(implementation_key(858)) RulerPtr TextFrame::GetRuler ( );
__declspec(implementation_key(859)) __missing_type__  TextFrame::GetHorizontalAnchor ( );
__declspec(implementation_key(860)) void TextFrame::PutHorizontalAnchor ( __missing_type__ HorizontalAnchor );
__declspec(implementation_key(861)) __missing_type__  TextFrame::GetVerticalAnchor ( );
__declspec(implementation_key(862)) void TextFrame::PutVerticalAnchor ( __missing_type__ VerticalAnchor );
__declspec(implementation_key(863)) enum PpAutoSize TextFrame::GetAutoSize ( );
__declspec(implementation_key(864)) void TextFrame::PutAutoSize ( enum PpAutoSize AutoSize );
__declspec(implementation_key(865)) __missing_type__  TextFrame::GetWordWrap ( );
__declspec(implementation_key(866)) void TextFrame::PutWordWrap ( __missing_type__ WordWrap );
__declspec(implementation_key(867)) HRESULT TextFrame::DeleteText ( );
__declspec(implementation_key(868)) _ApplicationPtr TextStyle::GetApplication ( );
__declspec(implementation_key(869)) IDispatchPtr TextStyle::GetParent ( );
__declspec(implementation_key(870)) RulerPtr TextStyle::GetRuler ( );
__declspec(implementation_key(871)) TextFramePtr TextStyle::GetTextFrame ( );
__declspec(implementation_key(872)) TextStyleLevelsPtr TextStyle::GetLevels ( );
__declspec(implementation_key(873)) _ApplicationPtr TextStyles::GetApplication ( );
__declspec(implementation_key(874)) IDispatchPtr TextStyles::GetParent ( );
__declspec(implementation_key(875)) TextStylePtr TextStyles::Item ( enum PpTextStyleType Type );
__declspec(implementation_key(876)) HRESULT _PowerRex::OnAsfEncoderEvent ( const _variant_t & erorCode, const _variant_t & bstrErrorDesc );
__declspec(implementation_key(877)) _ApplicationPtr EffectParameters::GetApplication ( );
__declspec(implementation_key(878)) IDispatchPtr EffectParameters::GetParent ( );
__declspec(implementation_key(879)) enum MsoAnimDirection EffectParameters::GetDirection ( );
__declspec(implementation_key(880)) void EffectParameters::PutDirection ( enum MsoAnimDirection Direction );
__declspec(implementation_key(881)) float EffectParameters::GetAmount ( );
__declspec(implementation_key(882)) void EffectParameters::PutAmount ( float Amount );
__declspec(implementation_key(883)) float EffectParameters::GetSize ( );
__declspec(implementation_key(884)) void EffectParameters::PutSize ( float Size );
__declspec(implementation_key(885)) ColorFormatPtr EffectParameters::GetColor2 ( );
__declspec(implementation_key(886)) __missing_type__  EffectParameters::GetRelative ( );
__declspec(implementation_key(887)) void EffectParameters::PutRelative ( __missing_type__ Relative );
__declspec(implementation_key(888)) _bstr_t EffectParameters::GetFontName ( );
__declspec(implementation_key(889)) void EffectParameters::PutFontName ( _bstr_t FontName );
__declspec(implementation_key(890)) _ApplicationPtr EffectInformation::GetApplication ( );
__declspec(implementation_key(891)) IDispatchPtr EffectInformation::GetParent ( );
__declspec(implementation_key(892)) enum MsoAnimAfterEffect EffectInformation::GetAfterEffect ( );
__declspec(implementation_key(893)) __missing_type__  EffectInformation::GetAnimateBackground ( );
__declspec(implementation_key(894)) __missing_type__  EffectInformation::GetAnimateTextInReverse ( );
__declspec(implementation_key(895)) enum MsoAnimateByLevel EffectInformation::GetBuildByLevelEffect ( );
__declspec(implementation_key(896)) ColorFormatPtr EffectInformation::GetDim ( );
__declspec(implementation_key(897)) PlaySettingsPtr EffectInformation::GetPlaySettings ( );
__declspec(implementation_key(898)) SoundEffectPtr EffectInformation::GetSoundEffect ( );
__declspec(implementation_key(899)) enum MsoAnimTextUnitEffect EffectInformation::GetTextUnitEffect ( );
__declspec(implementation_key(900)) _ApplicationPtr MotionEffect::GetApplication ( );
__declspec(implementation_key(901)) IDispatchPtr MotionEffect::GetParent ( );
__declspec(implementation_key(902)) float MotionEffect::GetByX ( );
__declspec(implementation_key(903)) void MotionEffect::PutByX ( float ByX );
__declspec(implementation_key(904)) float MotionEffect::GetByY ( );
__declspec(implementation_key(905)) void MotionEffect::PutByY ( float ByY );
__declspec(implementation_key(906)) float MotionEffect::GetFromX ( );
__declspec(implementation_key(907)) void MotionEffect::PutFromX ( float FromX );
__declspec(implementation_key(908)) float MotionEffect::GetFromY ( );
__declspec(implementation_key(909)) void MotionEffect::PutFromY ( float FromY );
__declspec(implementation_key(910)) float MotionEffect::GetToX ( );
__declspec(implementation_key(911)) void MotionEffect::PutToX ( float ToX );
__declspec(implementation_key(912)) float MotionEffect::GetToY ( );
__declspec(implementation_key(913)) void MotionEffect::PutToY ( float ToY );
__declspec(implementation_key(914)) _bstr_t MotionEffect::GetPath ( );
__declspec(implementation_key(915)) void MotionEffect::PutPath ( _bstr_t Path );
__declspec(implementation_key(916)) _ApplicationPtr ColorEffect::GetApplication ( );
__declspec(implementation_key(917)) IDispatchPtr ColorEffect::GetParent ( );
__declspec(implementation_key(918)) ColorFormatPtr ColorEffect::GetBy ( );
__declspec(implementation_key(919)) ColorFormatPtr ColorEffect::GetFrom ( );
__declspec(implementation_key(920)) ColorFormatPtr ColorEffect::GetTo ( );
__declspec(implementation_key(921)) _ApplicationPtr ScaleEffect::GetApplication ( );
__declspec(implementation_key(922)) IDispatchPtr ScaleEffect::GetParent ( );
__declspec(implementation_key(923)) float ScaleEffect::GetByX ( );
__declspec(implementation_key(924)) void ScaleEffect::PutByX ( float ByX );
__declspec(implementation_key(925)) float ScaleEffect::GetByY ( );
__declspec(implementation_key(926)) void ScaleEffect::PutByY ( float ByY );
__declspec(implementation_key(927)) float ScaleEffect::GetFromX ( );
__declspec(implementation_key(928)) void ScaleEffect::PutFromX ( float FromX );
__declspec(implementation_key(929)) float ScaleEffect::GetFromY ( );
__declspec(implementation_key(930)) void ScaleEffect::PutFromY ( float FromY );
__declspec(implementation_key(931)) float ScaleEffect::GetToX ( );
__declspec(implementation_key(932)) void ScaleEffect::PutToX ( float ToX );
__declspec(implementation_key(933)) float ScaleEffect::GetToY ( );
__declspec(implementation_key(934)) void ScaleEffect::PutToY ( float ToY );
__declspec(implementation_key(935)) _ApplicationPtr RotationEffect::GetApplication ( );
__declspec(implementation_key(936)) IDispatchPtr RotationEffect::GetParent ( );
__declspec(implementation_key(937)) float RotationEffect::GetBy ( );
__declspec(implementation_key(938)) void RotationEffect::PutBy ( float By );
__declspec(implementation_key(939)) float RotationEffect::GetFrom ( );
__declspec(implementation_key(940)) void RotationEffect::PutFrom ( float From );
__declspec(implementation_key(941)) float RotationEffect::GetTo ( );
__declspec(implementation_key(942)) void RotationEffect::PutTo ( float To );
__declspec(implementation_key(943)) _ApplicationPtr AnimationPoint::GetApplication ( );
__declspec(implementation_key(944)) IDispatchPtr AnimationPoint::GetParent ( );
__declspec(implementation_key(945)) HRESULT AnimationPoint::Delete ( );
__declspec(implementation_key(946)) float AnimationPoint::GetTime ( );
__declspec(implementation_key(947)) void AnimationPoint::PutTime ( float Time );
__declspec(implementation_key(948)) _variant_t AnimationPoint::GetValue ( );
__declspec(implementation_key(949)) void AnimationPoint::PutValue ( const _variant_t & Value );
__declspec(implementation_key(950)) _bstr_t AnimationPoint::GetFormula ( );
__declspec(implementation_key(951)) void AnimationPoint::PutFormula ( _bstr_t Formula );
__declspec(implementation_key(952)) _ApplicationPtr AnimationPoints::GetApplication ( );
__declspec(implementation_key(953)) IDispatchPtr AnimationPoints::GetParent ( );
__declspec(implementation_key(954)) AnimationPointPtr AnimationPoints::Item ( int Index );
__declspec(implementation_key(955)) AnimationPointPtr AnimationPoints::Add ( int Index );
__declspec(implementation_key(956)) __missing_type__  AnimationPoints::GetSmooth ( );
__declspec(implementation_key(957)) void AnimationPoints::PutSmooth ( __missing_type__ Smooth );
__declspec(implementation_key(958)) _ApplicationPtr PropertyEffect::GetApplication ( );
__declspec(implementation_key(959)) IDispatchPtr PropertyEffect::GetParent ( );
__declspec(implementation_key(960)) enum MsoAnimProperty PropertyEffect::GetProperty ( );
__declspec(implementation_key(961)) void PropertyEffect::PutProperty ( enum MsoAnimProperty Property );
__declspec(implementation_key(962)) AnimationPointsPtr PropertyEffect::GetPoints ( );
__declspec(implementation_key(963)) _variant_t PropertyEffect::GetFrom ( );
__declspec(implementation_key(964)) void PropertyEffect::PutFrom ( const _variant_t & From );
__declspec(implementation_key(965)) _variant_t PropertyEffect::GetTo ( );
__declspec(implementation_key(966)) void PropertyEffect::PutTo ( const _variant_t & To );
__declspec(implementation_key(967)) VARIANT_BOOL AutoCorrect::GetDisplayAutoCorrectOptions ( );
__declspec(implementation_key(968)) void AutoCorrect::PutDisplayAutoCorrectOptions ( VARIANT_BOOL DisplayAutoCorrectOptions );
__declspec(implementation_key(969)) VARIANT_BOOL AutoCorrect::GetDisplayAutoLayoutOptions ( );
__declspec(implementation_key(970)) void AutoCorrect::PutDisplayAutoLayoutOptions ( VARIANT_BOOL DisplayAutoLayoutOptions );
__declspec(implementation_key(971)) __missing_type__  Options::GetDisplayPasteOptions ( );
__declspec(implementation_key(972)) void Options::PutDisplayPasteOptions ( __missing_type__ DisplayPasteOptions );
__declspec(implementation_key(973)) __missing_type__  Options::GetDoNotPromptForConvert ( );
__declspec(implementation_key(974)) void Options::PutDoNotPromptForConvert ( __missing_type__ DoNotPromptForConvert );
__declspec(implementation_key(975)) VARIANT_BOOL Options::GetShowCoauthoringMergeChanges ( );
__declspec(implementation_key(976)) void Options::PutShowCoauthoringMergeChanges ( VARIANT_BOOL ShowCoauthoringMergeChanges );
__declspec(implementation_key(977)) _ApplicationPtr CommandEffect::GetApplication ( );
__declspec(implementation_key(978)) IDispatchPtr CommandEffect::GetParent ( );
__declspec(implementation_key(979)) enum MsoAnimCommandType CommandEffect::GetType ( );
__declspec(implementation_key(980)) void CommandEffect::PutType ( enum MsoAnimCommandType Type );
__declspec(implementation_key(981)) _bstr_t CommandEffect::GetCommand ( );
__declspec(implementation_key(982)) void CommandEffect::PutCommand ( _bstr_t Command );
__declspec(implementation_key(983)) _bstr_t CommandEffect::Getbookmark ( );
__declspec(implementation_key(984)) void CommandEffect::Putbookmark ( _bstr_t bookmark );
__declspec(implementation_key(985)) _ApplicationPtr FilterEffect::GetApplication ( );
__declspec(implementation_key(986)) IDispatchPtr FilterEffect::GetParent ( );
__declspec(implementation_key(987)) enum MsoAnimFilterEffectType FilterEffect::GetType ( );
__declspec(implementation_key(988)) void FilterEffect::PutType ( enum MsoAnimFilterEffectType Type );
__declspec(implementation_key(989)) enum MsoAnimFilterEffectSubtype FilterEffect::GetSubtype ( );
__declspec(implementation_key(990)) void FilterEffect::PutSubtype ( enum MsoAnimFilterEffectSubtype Subtype );
__declspec(implementation_key(991)) __missing_type__  FilterEffect::GetReveal ( );
__declspec(implementation_key(992)) void FilterEffect::PutReveal ( __missing_type__ Reveal );
__declspec(implementation_key(993)) _ApplicationPtr SetEffect::GetApplication ( );
__declspec(implementation_key(994)) IDispatchPtr SetEffect::GetParent ( );
__declspec(implementation_key(995)) enum MsoAnimProperty SetEffect::GetProperty ( );
__declspec(implementation_key(996)) void SetEffect::PutProperty ( enum MsoAnimProperty Property );
__declspec(implementation_key(997)) _variant_t SetEffect::GetTo ( );
__declspec(implementation_key(998)) void SetEffect::PutTo ( const _variant_t & To );
__declspec(implementation_key(999)) _bstr_t TableStyle::GetName ( );
__declspec(implementation_key(1000)) _bstr_t TableStyle::GetId ( );
__declspec(implementation_key(1001)) _ApplicationPtr CustomerData::GetApplication ( );
__declspec(implementation_key(1002)) IDispatchPtr CustomerData::GetParent ( );
__declspec(implementation_key(1003)) __missing_type__ CustomerData::Item ( _bstr_t Id );
__declspec(implementation_key(1004)) __missing_type__ CustomerData::Add ( );
__declspec(implementation_key(1005)) HRESULT CustomerData::Delete ( _bstr_t Id );
__declspec(implementation_key(1006)) _ApplicationPtr Research::GetApplication ( );
__declspec(implementation_key(1007)) IDispatchPtr Research::GetParent ( );
__declspec(implementation_key(1008)) HRESULT Research::Query ( _bstr_t ServiceID, VARIANT * QueryString, VARIANT * QueryLanguage, VARIANT_BOOL UseSelection, VARIANT_BOOL LaunchQuery );
__declspec(implementation_key(1009)) HRESULT Research::SetLanguagePair ( VARIANT * Language1, VARIANT * Language2 );
__declspec(implementation_key(1010)) VARIANT_BOOL Research::IsResearchService ( _bstr_t ServiceID );
__declspec(implementation_key(1011)) FillFormatPtr TableBackground::GetFill ( );
__declspec(implementation_key(1012)) PictureFormatPtr TableBackground::GetPicture ( );
__declspec(implementation_key(1013)) __missing_type__ TableBackground::GetReflection ( );
__declspec(implementation_key(1014)) ShadowFormatPtr TableBackground::GetShadow ( );
__declspec(implementation_key(1015)) IDispatchPtr TextFrame2::GetApplication ( );
__declspec(implementation_key(1016)) long TextFrame2::GetCreator ( );
__declspec(implementation_key(1017)) IDispatchPtr TextFrame2::GetParent ( );
__declspec(implementation_key(1018)) float TextFrame2::GetMarginBottom ( );
__declspec(implementation_key(1019)) void TextFrame2::PutMarginBottom ( float MarginBottom );
__declspec(implementation_key(1020)) float TextFrame2::GetMarginLeft ( );
__declspec(implementation_key(1021)) void TextFrame2::PutMarginLeft ( float MarginLeft );
__declspec(implementation_key(1022)) float TextFrame2::GetMarginRight ( );
__declspec(implementation_key(1023)) void TextFrame2::PutMarginRight ( float MarginRight );
__declspec(implementation_key(1024)) float TextFrame2::GetMarginTop ( );
__declspec(implementation_key(1025)) void TextFrame2::PutMarginTop ( float MarginTop );
__declspec(implementation_key(1026)) __missing_type__  TextFrame2::GetOrientation ( );
__declspec(implementation_key(1027)) void TextFrame2::PutOrientation ( __missing_type__ Orientation );
__declspec(implementation_key(1028)) __missing_type__  TextFrame2::GetHorizontalAnchor ( );
__declspec(implementation_key(1029)) void TextFrame2::PutHorizontalAnchor ( __missing_type__ HorizontalAnchor );
__declspec(implementation_key(1030)) __missing_type__  TextFrame2::GetVerticalAnchor ( );
__declspec(implementation_key(1031)) void TextFrame2::PutVerticalAnchor ( __missing_type__ VerticalAnchor );
__declspec(implementation_key(1032)) __missing_type__  TextFrame2::GetPathFormat ( );
__declspec(implementation_key(1033)) void TextFrame2::PutPathFormat ( __missing_type__ PathFormat );
__declspec(implementation_key(1034)) __missing_type__  TextFrame2::GetWarpFormat ( );
__declspec(implementation_key(1035)) void TextFrame2::PutWarpFormat ( __missing_type__ WarpFormat );
__declspec(implementation_key(1036)) __missing_type__  TextFrame2::GetWordArtFormat ( );
__declspec(implementation_key(1037)) void TextFrame2::PutWordArtFormat ( __missing_type__ WordArtFormat );
__declspec(implementation_key(1038)) __missing_type__  TextFrame2::GetWordWrap ( );
__declspec(implementation_key(1039)) void TextFrame2::PutWordWrap ( __missing_type__ WordWrap );
__declspec(implementation_key(1040)) __missing_type__  TextFrame2::GetAutoSize ( );
__declspec(implementation_key(1041)) void TextFrame2::PutAutoSize ( __missing_type__ AutoSize );
__declspec(implementation_key(1042)) ThreeDFormatPtr TextFrame2::GetThreeD ( );
__declspec(implementation_key(1043)) __missing_type__  TextFrame2::GetHasText ( );
__declspec(implementation_key(1044)) __missing_type__ TextFrame2::GetTextRange ( );
__declspec(implementation_key(1045)) __missing_type__ TextFrame2::GetColumn ( );
__declspec(implementation_key(1046)) __missing_type__ TextFrame2::GetRuler ( );
__declspec(implementation_key(1047)) HRESULT TextFrame2::DeleteText ( );
__declspec(implementation_key(1048)) __missing_type__  TextFrame2::GetNoTextRotation ( );
__declspec(implementation_key(1049)) void TextFrame2::PutNoTextRotation ( __missing_type__ NoTextRotation );
__declspec(implementation_key(1050)) void ChartBorder::PutColor ( const _variant_t & RHS );
__declspec(implementation_key(1051)) _variant_t ChartBorder::GetColor ( );
__declspec(implementation_key(1052)) void ChartBorder::PutColorIndex ( const _variant_t & RHS );
__declspec(implementation_key(1053)) _variant_t ChartBorder::GetColorIndex ( );
__declspec(implementation_key(1054)) void ChartBorder::PutLineStyle ( const _variant_t & RHS );
__declspec(implementation_key(1055)) _variant_t ChartBorder::GetLineStyle ( );
__declspec(implementation_key(1056)) void ChartBorder::PutWeight ( const _variant_t & RHS );
__declspec(implementation_key(1057)) _variant_t ChartBorder::GetWeight ( );
__declspec(implementation_key(1058)) long ChartBorder::GetCreator ( );
__declspec(implementation_key(1059)) IDispatchPtr ChartBorder::GetParent ( );
__declspec(implementation_key(1060)) _ApplicationPtr ChartBorder::GetApplication ( );
__declspec(implementation_key(1061)) IDispatchPtr ChartColorFormat::GetParent ( );
__declspec(implementation_key(1062)) long ChartColorFormat::GetSchemeColor ( );
__declspec(implementation_key(1063)) void ChartColorFormat::PutSchemeColor ( long RHS );
__declspec(implementation_key(1064)) long ChartColorFormat::Get_Default ( );
__declspec(implementation_key(1065)) long ChartColorFormat::GetType ( );
__declspec(implementation_key(1066)) long ChartColorFormat::GetCreator ( );
__declspec(implementation_key(1067)) _ApplicationPtr ChartColorFormat::GetApplication ( );
__declspec(implementation_key(1068)) long ChartColorFormat::GetRGB ( );
__declspec(implementation_key(1069)) IDispatchPtr ChartData::GetWorkbook ( );
__declspec(implementation_key(1070)) HRESULT ChartData::Activate ( );
__declspec(implementation_key(1071)) VARIANT_BOOL ChartData::GetIsLinked ( );
__declspec(implementation_key(1072)) HRESULT ChartData::BreakLink ( );
__declspec(implementation_key(1073)) HRESULT ChartData::ActivateChartDataWindow ( );
__declspec(implementation_key(1074)) HRESULT ChartFillFormat::Solid ( );
__declspec(implementation_key(1075)) HRESULT ChartFillFormat::UserTextured ( _bstr_t TextureFile );
__declspec(implementation_key(1076)) ChartColorFormatPtr ChartFillFormat::GetBackColor ( );
__declspec(implementation_key(1077)) ChartColorFormatPtr ChartFillFormat::GetForeColor ( );
__declspec(implementation_key(1078)) float ChartFillFormat::GetGradientDegree ( );
__declspec(implementation_key(1079)) _bstr_t ChartFillFormat::GetTextureName ( );
__declspec(implementation_key(1080)) long ChartFillFormat::GetCreator ( );
__declspec(implementation_key(1081)) IDispatchPtr ChartFillFormat::GetParent ( );
__declspec(implementation_key(1082)) _ApplicationPtr ChartFillFormat::GetApplication ( );
__declspec(implementation_key(1083)) HRESULT ChartFillFormat::OneColorGradient ( __missing_type__ Style, long Variant, float Degree );
__declspec(implementation_key(1084)) __missing_type__  ChartFillFormat::GetGradientColorType ( );
__declspec(implementation_key(1085)) __missing_type__  ChartFillFormat::GetGradientStyle ( );
__declspec(implementation_key(1086)) long ChartFillFormat::GetGradientVariant ( );
__declspec(implementation_key(1087)) __missing_type__  ChartFillFormat::GetPattern ( );
__declspec(implementation_key(1088)) HRESULT ChartFillFormat::Patterned ( __missing_type__ Pattern );
__declspec(implementation_key(1089)) HRESULT ChartFillFormat::PresetGradient ( __missing_type__ Style, long Variant, __missing_type__ PresetGradientType );
__declspec(implementation_key(1090)) __missing_type__  ChartFillFormat::GetPresetGradientType ( );
__declspec(implementation_key(1091)) __missing_type__  ChartFillFormat::GetPresetTexture ( );
__declspec(implementation_key(1092)) HRESULT ChartFillFormat::PresetTextured ( __missing_type__ PresetTexture );
__declspec(implementation_key(1093)) __missing_type__  ChartFillFormat::GetTextureType ( );
__declspec(implementation_key(1094)) HRESULT ChartFillFormat::TwoColorGradient ( __missing_type__ Style, long Variant );
__declspec(implementation_key(1095)) __missing_type__  ChartFillFormat::GetType ( );
__declspec(implementation_key(1096)) HRESULT ChartFillFormat::UserPicture ( const _variant_t & PictureFile, const _variant_t & PictureFormat, const _variant_t & PictureStackUnit, const _variant_t & PicturePlacement );
__declspec(implementation_key(1097)) __missing_type__  ChartFillFormat::GetVisible ( );
__declspec(implementation_key(1098)) void ChartFillFormat::PutVisible ( __missing_type__ RHS );
__declspec(implementation_key(1099)) FillFormatPtr ChartFormat::GetFill ( );
__declspec(implementation_key(1100)) __missing_type__ ChartFormat::GetGlow ( );
__declspec(implementation_key(1101)) LineFormatPtr ChartFormat::GetLine ( );
__declspec(implementation_key(1102)) IDispatchPtr ChartFormat::GetParent ( );
__declspec(implementation_key(1103)) PictureFormatPtr ChartFormat::GetPictureFormat ( );
__declspec(implementation_key(1104)) ShadowFormatPtr ChartFormat::GetShadow ( );
__declspec(implementation_key(1105)) __missing_type__ ChartFormat::GetSoftEdge ( );
__declspec(implementation_key(1106)) TextFrame2Ptr ChartFormat::GetTextFrame2 ( );
__declspec(implementation_key(1107)) ThreeDFormatPtr ChartFormat::GetThreeD ( );
__declspec(implementation_key(1108)) long ChartFormat::GetCreator ( );
__declspec(implementation_key(1109)) _ApplicationPtr ChartFormat::GetApplication ( );
__declspec(implementation_key(1110)) AdjustmentsPtr ChartFormat::GetAdjustments ( );
__declspec(implementation_key(1111)) __missing_type__  ChartFormat::GetAutoShapeType ( );
__declspec(implementation_key(1112)) void ChartFormat::PutAutoShapeType ( __missing_type__ AutoShapeType );
__declspec(implementation_key(1113)) IDispatchPtr Corners::GetParent ( );
__declspec(implementation_key(1114)) _bstr_t Corners::GetName ( );
__declspec(implementation_key(1115)) _variant_t Corners::Select ( );
__declspec(implementation_key(1116)) long Corners::GetCreator ( );
__declspec(implementation_key(1117)) _ApplicationPtr Corners::GetApplication ( );
__declspec(implementation_key(1118)) _bstr_t DropLines::GetName ( );
__declspec(implementation_key(1119)) IDispatchPtr DropLines::GetParent ( );
__declspec(implementation_key(1120)) ChartBorderPtr DropLines::GetBorder ( );
__declspec(implementation_key(1121)) ChartFormatPtr DropLines::GetFormat ( );
__declspec(implementation_key(1122)) long DropLines::GetCreator ( );
__declspec(implementation_key(1123)) _ApplicationPtr DropLines::GetApplication ( );
__declspec(implementation_key(1124)) _variant_t DropLines::Delete ( );
__declspec(implementation_key(1125)) _variant_t DropLines::Select ( );
__declspec(implementation_key(1126)) IDispatchPtr ErrorBars::GetParent ( );
__declspec(implementation_key(1127)) _bstr_t ErrorBars::GetName ( );
__declspec(implementation_key(1128)) _variant_t ErrorBars::Select ( );
__declspec(implementation_key(1129)) ChartBorderPtr ErrorBars::GetBorder ( );
__declspec(implementation_key(1130)) _variant_t ErrorBars::Delete ( );
__declspec(implementation_key(1131)) _variant_t ErrorBars::ClearFormats ( );
__declspec(implementation_key(1132)) enum XlEndStyleCap ErrorBars::GetEndStyle ( );
__declspec(implementation_key(1133)) void ErrorBars::PutEndStyle ( enum XlEndStyleCap RHS );
__declspec(implementation_key(1134)) ChartFormatPtr ErrorBars::GetFormat ( );
__declspec(implementation_key(1135)) long ErrorBars::GetCreator ( );
__declspec(implementation_key(1136)) _ApplicationPtr ErrorBars::GetApplication ( );
__declspec(implementation_key(1137)) void ChartFont::PutBackground ( const _variant_t & RHS );
__declspec(implementation_key(1138)) _variant_t ChartFont::GetBackground ( );
__declspec(implementation_key(1139)) void ChartFont::PutBold ( const _variant_t & RHS );
__declspec(implementation_key(1140)) _variant_t ChartFont::GetBold ( );
__declspec(implementation_key(1141)) void ChartFont::PutColor ( const _variant_t & RHS );
__declspec(implementation_key(1142)) _variant_t ChartFont::GetColor ( );
__declspec(implementation_key(1143)) void ChartFont::PutColorIndex ( const _variant_t & RHS );
__declspec(implementation_key(1144)) _variant_t ChartFont::GetColorIndex ( );
__declspec(implementation_key(1145)) void ChartFont::PutFontStyle ( const _variant_t & RHS );
__declspec(implementation_key(1146)) _variant_t ChartFont::GetFontStyle ( );
__declspec(implementation_key(1147)) void ChartFont::PutItalic ( const _variant_t & RHS );
__declspec(implementation_key(1148)) _variant_t ChartFont::GetItalic ( );
__declspec(implementation_key(1149)) void ChartFont::PutName ( const _variant_t & RHS );
__declspec(implementation_key(1150)) _variant_t ChartFont::GetName ( );
__declspec(implementation_key(1151)) void ChartFont::PutOutlineFont ( const _variant_t & RHS );
__declspec(implementation_key(1152)) _variant_t ChartFont::GetOutlineFont ( );
__declspec(implementation_key(1153)) void ChartFont::PutShadow ( const _variant_t & RHS );
__declspec(implementation_key(1154)) _variant_t ChartFont::GetShadow ( );
__declspec(implementation_key(1155)) void ChartFont::PutSize ( const _variant_t & RHS );
__declspec(implementation_key(1156)) _variant_t ChartFont::GetSize ( );
__declspec(implementation_key(1157)) void ChartFont::PutStrikethrough ( const _variant_t & RHS );
__declspec(implementation_key(1158)) _variant_t ChartFont::GetStrikethrough ( );
__declspec(implementation_key(1159)) void ChartFont::PutSubscript ( const _variant_t & RHS );
__declspec(implementation_key(1160)) _variant_t ChartFont::GetSubscript ( );
__declspec(implementation_key(1161)) void ChartFont::PutSuperscript ( const _variant_t & RHS );
__declspec(implementation_key(1162)) _variant_t ChartFont::GetSuperscript ( );
__declspec(implementation_key(1163)) void ChartFont::PutUnderline ( const _variant_t & RHS );
__declspec(implementation_key(1164)) _variant_t ChartFont::GetUnderline ( );
__declspec(implementation_key(1165)) long ChartFont::GetCreator ( );
__declspec(implementation_key(1166)) IDispatchPtr ChartFont::GetParent ( );
__declspec(implementation_key(1167)) _ApplicationPtr ChartFont::GetApplication ( );
__declspec(implementation_key(1168)) IDispatchPtr ChartCharacters::GetParent ( );
__declspec(implementation_key(1169)) _bstr_t ChartCharacters::GetCaption ( );
__declspec(implementation_key(1170)) void ChartCharacters::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(1171)) long ChartCharacters::GetCount ( );
__declspec(implementation_key(1172)) _variant_t ChartCharacters::Delete ( );
__declspec(implementation_key(1173)) ChartFontPtr ChartCharacters::GetFont ( );
__declspec(implementation_key(1174)) _variant_t ChartCharacters::Insert ( _bstr_t String );
__declspec(implementation_key(1175)) _bstr_t ChartCharacters::GetText ( );
__declspec(implementation_key(1176)) void ChartCharacters::PutText ( _bstr_t RHS );
__declspec(implementation_key(1177)) _bstr_t ChartCharacters::GetPhoneticCharacters ( );
__declspec(implementation_key(1178)) void ChartCharacters::PutPhoneticCharacters ( _bstr_t RHS );
__declspec(implementation_key(1179)) long ChartCharacters::GetCreator ( );
__declspec(implementation_key(1180)) _ApplicationPtr ChartCharacters::GetApplication ( );
__declspec(implementation_key(1181)) void DataTable::PutShowLegendKey ( VARIANT_BOOL RHS );
__declspec(implementation_key(1182)) VARIANT_BOOL DataTable::GetShowLegendKey ( );
__declspec(implementation_key(1183)) void DataTable::PutHasBorderHorizontal ( VARIANT_BOOL RHS );
__declspec(implementation_key(1184)) VARIANT_BOOL DataTable::GetHasBorderHorizontal ( );
__declspec(implementation_key(1185)) void DataTable::PutHasBorderVertical ( VARIANT_BOOL RHS );
__declspec(implementation_key(1186)) VARIANT_BOOL DataTable::GetHasBorderVertical ( );
__declspec(implementation_key(1187)) void DataTable::PutHasBorderOutline ( VARIANT_BOOL RHS );
__declspec(implementation_key(1188)) VARIANT_BOOL DataTable::GetHasBorderOutline ( );
__declspec(implementation_key(1189)) ChartBorderPtr DataTable::GetBorder ( );
__declspec(implementation_key(1190)) ChartFontPtr DataTable::GetFont ( );
__declspec(implementation_key(1191)) HRESULT DataTable::Select ( );
__declspec(implementation_key(1192)) HRESULT DataTable::Delete ( );
__declspec(implementation_key(1193)) IDispatchPtr DataTable::GetParent ( );
__declspec(implementation_key(1194)) _variant_t DataTable::GetAutoScaleFont ( );
__declspec(implementation_key(1195)) void DataTable::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(1196)) ChartFormatPtr DataTable::GetFormat ( );
__declspec(implementation_key(1197)) long DataTable::GetCreator ( );
__declspec(implementation_key(1198)) _ApplicationPtr DataTable::GetApplication ( );
__declspec(implementation_key(1199)) _bstr_t Gridlines::GetName ( );
__declspec(implementation_key(1200)) _variant_t Gridlines::Select ( );
__declspec(implementation_key(1201)) IDispatchPtr Gridlines::GetParent ( );
__declspec(implementation_key(1202)) ChartBorderPtr Gridlines::GetBorder ( );
__declspec(implementation_key(1203)) _variant_t Gridlines::Delete ( );
__declspec(implementation_key(1204)) ChartFormatPtr Gridlines::GetFormat ( );
__declspec(implementation_key(1205)) long Gridlines::GetCreator ( );
__declspec(implementation_key(1206)) _ApplicationPtr Gridlines::GetApplication ( );
__declspec(implementation_key(1207)) IDispatchPtr HiLoLines::GetParent ( );
__declspec(implementation_key(1208)) _bstr_t HiLoLines::GetName ( );
__declspec(implementation_key(1209)) ChartBorderPtr HiLoLines::GetBorder ( );
__declspec(implementation_key(1210)) ChartFormatPtr HiLoLines::GetFormat ( );
__declspec(implementation_key(1211)) long HiLoLines::GetCreator ( );
__declspec(implementation_key(1212)) _ApplicationPtr HiLoLines::GetApplication ( );
__declspec(implementation_key(1213)) _variant_t HiLoLines::Delete ( );
__declspec(implementation_key(1214)) _variant_t HiLoLines::Select ( );
__declspec(implementation_key(1215)) void Interior::PutColor ( const _variant_t & RHS );
__declspec(implementation_key(1216)) _variant_t Interior::GetColor ( );
__declspec(implementation_key(1217)) void Interior::PutColorIndex ( const _variant_t & RHS );
__declspec(implementation_key(1218)) _variant_t Interior::GetColorIndex ( );
__declspec(implementation_key(1219)) void Interior::PutInvertIfNegative ( const _variant_t & RHS );
__declspec(implementation_key(1220)) _variant_t Interior::GetInvertIfNegative ( );
__declspec(implementation_key(1221)) void Interior::PutPattern ( const _variant_t & RHS );
__declspec(implementation_key(1222)) _variant_t Interior::GetPattern ( );
__declspec(implementation_key(1223)) void Interior::PutPatternColor ( const _variant_t & RHS );
__declspec(implementation_key(1224)) _variant_t Interior::GetPatternColor ( );
__declspec(implementation_key(1225)) void Interior::PutPatternColorIndex ( const _variant_t & RHS );
__declspec(implementation_key(1226)) _variant_t Interior::GetPatternColorIndex ( );
__declspec(implementation_key(1227)) long Interior::GetCreator ( );
__declspec(implementation_key(1228)) IDispatchPtr Interior::GetParent ( );
__declspec(implementation_key(1229)) _ApplicationPtr Interior::GetApplication ( );
__declspec(implementation_key(1230)) void AxisTitle::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(1231)) _bstr_t AxisTitle::GetCaption ( );
__declspec(implementation_key(1232)) ChartCharactersPtr AxisTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(1233)) ChartFontPtr AxisTitle::GetFont ( );
__declspec(implementation_key(1234)) void AxisTitle::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(1235)) _variant_t AxisTitle::GetHorizontalAlignment ( );
__declspec(implementation_key(1236)) double AxisTitle::GetLeft ( );
__declspec(implementation_key(1237)) void AxisTitle::PutLeft ( double RHS );
__declspec(implementation_key(1238)) void AxisTitle::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(1239)) _variant_t AxisTitle::GetOrientation ( );
__declspec(implementation_key(1240)) VARIANT_BOOL AxisTitle::GetShadow ( );
__declspec(implementation_key(1241)) void AxisTitle::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(1242)) void AxisTitle::PutText ( _bstr_t RHS );
__declspec(implementation_key(1243)) _bstr_t AxisTitle::GetText ( );
__declspec(implementation_key(1244)) double AxisTitle::GetTop ( );
__declspec(implementation_key(1245)) void AxisTitle::PutTop ( double RHS );
__declspec(implementation_key(1246)) void AxisTitle::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(1247)) _variant_t AxisTitle::GetVerticalAlignment ( );
__declspec(implementation_key(1248)) void AxisTitle::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(1249)) _variant_t AxisTitle::GetAutoScaleFont ( );
__declspec(implementation_key(1250)) InteriorPtr AxisTitle::GetInterior ( );
__declspec(implementation_key(1251)) ChartFillFormatPtr AxisTitle::GetFill ( );
__declspec(implementation_key(1252)) _variant_t AxisTitle::Delete ( );
__declspec(implementation_key(1253)) ChartBorderPtr AxisTitle::GetBorder ( );
__declspec(implementation_key(1254)) _bstr_t AxisTitle::GetName ( );
__declspec(implementation_key(1255)) IDispatchPtr AxisTitle::GetParent ( );
__declspec(implementation_key(1256)) _variant_t AxisTitle::Select ( );
__declspec(implementation_key(1257)) VARIANT_BOOL AxisTitle::GetIncludeInLayout ( );
__declspec(implementation_key(1258)) void AxisTitle::PutIncludeInLayout ( VARIANT_BOOL RHS );
__declspec(implementation_key(1259)) enum XlChartElementPosition AxisTitle::GetPosition ( );
__declspec(implementation_key(1260)) void AxisTitle::PutPosition ( enum XlChartElementPosition RHS );
__declspec(implementation_key(1261)) ChartFormatPtr AxisTitle::GetFormat ( );
__declspec(implementation_key(1262)) long AxisTitle::GetCreator ( );
__declspec(implementation_key(1263)) _ApplicationPtr AxisTitle::GetApplication ( );
__declspec(implementation_key(1264)) long AxisTitle::GetReadingOrder ( );
__declspec(implementation_key(1265)) void AxisTitle::PutReadingOrder ( long RHS );
__declspec(implementation_key(1266)) double AxisTitle::GetHeight ( );
__declspec(implementation_key(1267)) double AxisTitle::GetWidth ( );
__declspec(implementation_key(1268)) void AxisTitle::PutFormula ( _bstr_t pbstr );
__declspec(implementation_key(1269)) _bstr_t AxisTitle::GetFormula ( );
__declspec(implementation_key(1270)) void AxisTitle::PutFormulaR1C1 ( _bstr_t pbstr );
__declspec(implementation_key(1271)) _bstr_t AxisTitle::GetFormulaR1C1 ( );
__declspec(implementation_key(1272)) void AxisTitle::PutFormulaLocal ( _bstr_t pbstr );
__declspec(implementation_key(1273)) _bstr_t AxisTitle::GetFormulaLocal ( );
__declspec(implementation_key(1274)) void AxisTitle::PutFormulaR1C1Local ( _bstr_t pbstr );
__declspec(implementation_key(1275)) _bstr_t AxisTitle::GetFormulaR1C1Local ( );
__declspec(implementation_key(1276)) _bstr_t ChartArea::GetName ( );
__declspec(implementation_key(1277)) _variant_t ChartArea::Select ( );
__declspec(implementation_key(1278)) IDispatchPtr ChartArea::GetParent ( );
__declspec(implementation_key(1279)) ChartBorderPtr ChartArea::GetBorder ( );
__declspec(implementation_key(1280)) _variant_t ChartArea::Clear ( );
__declspec(implementation_key(1281)) _variant_t ChartArea::ClearContents ( );
__declspec(implementation_key(1282)) _variant_t ChartArea::Copy ( );
__declspec(implementation_key(1283)) ChartFontPtr ChartArea::GetFont ( );
__declspec(implementation_key(1284)) VARIANT_BOOL ChartArea::GetShadow ( );
__declspec(implementation_key(1285)) void ChartArea::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(1286)) _variant_t ChartArea::ClearFormats ( );
__declspec(implementation_key(1287)) double ChartArea::GetHeight ( );
__declspec(implementation_key(1288)) void ChartArea::PutHeight ( double RHS );
__declspec(implementation_key(1289)) InteriorPtr ChartArea::GetInterior ( );
__declspec(implementation_key(1290)) ChartFillFormatPtr ChartArea::GetFill ( );
__declspec(implementation_key(1291)) double ChartArea::GetLeft ( );
__declspec(implementation_key(1292)) void ChartArea::PutLeft ( double RHS );
__declspec(implementation_key(1293)) double ChartArea::GetTop ( );
__declspec(implementation_key(1294)) void ChartArea::PutTop ( double RHS );
__declspec(implementation_key(1295)) double ChartArea::GetWidth ( );
__declspec(implementation_key(1296)) void ChartArea::PutWidth ( double RHS );
__declspec(implementation_key(1297)) _variant_t ChartArea::GetAutoScaleFont ( );
__declspec(implementation_key(1298)) void ChartArea::PutAutoScaleFont ( const _variant_t & pvar );
__declspec(implementation_key(1299)) ChartFormatPtr ChartArea::GetFormat ( );
__declspec(implementation_key(1300)) long ChartArea::GetCreator ( );
__declspec(implementation_key(1301)) _ApplicationPtr ChartArea::GetApplication ( );
__declspec(implementation_key(1302)) void ChartTitle::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(1303)) _bstr_t ChartTitle::GetCaption ( );
__declspec(implementation_key(1304)) ChartCharactersPtr ChartTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(1305)) ChartFontPtr ChartTitle::GetFont ( );
__declspec(implementation_key(1306)) void ChartTitle::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(1307)) _variant_t ChartTitle::GetHorizontalAlignment ( );
__declspec(implementation_key(1308)) double ChartTitle::GetLeft ( );
__declspec(implementation_key(1309)) void ChartTitle::PutLeft ( double RHS );
__declspec(implementation_key(1310)) void ChartTitle::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(1311)) _variant_t ChartTitle::GetOrientation ( );
__declspec(implementation_key(1312)) VARIANT_BOOL ChartTitle::GetShadow ( );
__declspec(implementation_key(1313)) void ChartTitle::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(1314)) void ChartTitle::PutText ( _bstr_t RHS );
__declspec(implementation_key(1315)) _bstr_t ChartTitle::GetText ( );
__declspec(implementation_key(1316)) double ChartTitle::GetTop ( );
__declspec(implementation_key(1317)) void ChartTitle::PutTop ( double RHS );
__declspec(implementation_key(1318)) void ChartTitle::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(1319)) _variant_t ChartTitle::GetVerticalAlignment ( );
__declspec(implementation_key(1320)) void ChartTitle::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(1321)) _variant_t ChartTitle::GetAutoScaleFont ( );
__declspec(implementation_key(1322)) InteriorPtr ChartTitle::GetInterior ( );
__declspec(implementation_key(1323)) ChartFillFormatPtr ChartTitle::GetFill ( );
__declspec(implementation_key(1324)) _variant_t ChartTitle::Delete ( );
__declspec(implementation_key(1325)) ChartBorderPtr ChartTitle::GetBorder ( );
__declspec(implementation_key(1326)) _bstr_t ChartTitle::GetName ( );
__declspec(implementation_key(1327)) IDispatchPtr ChartTitle::GetParent ( );
__declspec(implementation_key(1328)) _variant_t ChartTitle::Select ( );
__declspec(implementation_key(1329)) VARIANT_BOOL ChartTitle::GetIncludeInLayout ( );
__declspec(implementation_key(1330)) void ChartTitle::PutIncludeInLayout ( VARIANT_BOOL RHS );
__declspec(implementation_key(1331)) enum XlChartElementPosition ChartTitle::GetPosition ( );
__declspec(implementation_key(1332)) void ChartTitle::PutPosition ( enum XlChartElementPosition RHS );
__declspec(implementation_key(1333)) ChartFormatPtr ChartTitle::GetFormat ( );
__declspec(implementation_key(1334)) long ChartTitle::GetCreator ( );
__declspec(implementation_key(1335)) _ApplicationPtr ChartTitle::GetApplication ( );
__declspec(implementation_key(1336)) long ChartTitle::GetReadingOrder ( );
__declspec(implementation_key(1337)) void ChartTitle::PutReadingOrder ( long RHS );
__declspec(implementation_key(1338)) double ChartTitle::GetHeight ( );
__declspec(implementation_key(1339)) double ChartTitle::GetWidth ( );
__declspec(implementation_key(1340)) void ChartTitle::PutFormula ( _bstr_t pbstr );
__declspec(implementation_key(1341)) _bstr_t ChartTitle::GetFormula ( );
__declspec(implementation_key(1342)) void ChartTitle::PutFormulaR1C1 ( _bstr_t pbstr );
__declspec(implementation_key(1343)) _bstr_t ChartTitle::GetFormulaR1C1 ( );
__declspec(implementation_key(1344)) void ChartTitle::PutFormulaLocal ( _bstr_t pbstr );
__declspec(implementation_key(1345)) _bstr_t ChartTitle::GetFormulaLocal ( );
__declspec(implementation_key(1346)) void ChartTitle::PutFormulaR1C1Local ( _bstr_t pbstr );
__declspec(implementation_key(1347)) _bstr_t ChartTitle::GetFormulaR1C1Local ( );
__declspec(implementation_key(1348)) IDispatchPtr DataLabel::GetParent ( );
__declspec(implementation_key(1349)) _bstr_t DataLabel::GetName ( );
__declspec(implementation_key(1350)) _variant_t DataLabel::Select ( );
__declspec(implementation_key(1351)) ChartBorderPtr DataLabel::GetBorder ( );
__declspec(implementation_key(1352)) _variant_t DataLabel::Delete ( );
__declspec(implementation_key(1353)) InteriorPtr DataLabel::GetInterior ( );
__declspec(implementation_key(1354)) ChartFillFormatPtr DataLabel::GetFill ( );
__declspec(implementation_key(1355)) _bstr_t DataLabel::GetCaption ( );
__declspec(implementation_key(1356)) void DataLabel::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(1357)) ChartCharactersPtr DataLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(1358)) ChartFontPtr DataLabel::GetFont ( );
__declspec(implementation_key(1359)) _variant_t DataLabel::GetHorizontalAlignment ( );
__declspec(implementation_key(1360)) void DataLabel::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(1361)) double DataLabel::GetLeft ( );
__declspec(implementation_key(1362)) void DataLabel::PutLeft ( double RHS );
__declspec(implementation_key(1363)) _variant_t DataLabel::GetOrientation ( );
__declspec(implementation_key(1364)) void DataLabel::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(1365)) VARIANT_BOOL DataLabel::GetShadow ( );
__declspec(implementation_key(1366)) void DataLabel::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(1367)) _bstr_t DataLabel::GetText ( );
__declspec(implementation_key(1368)) void DataLabel::PutText ( _bstr_t RHS );
__declspec(implementation_key(1369)) double DataLabel::GetTop ( );
__declspec(implementation_key(1370)) void DataLabel::PutTop ( double RHS );
__declspec(implementation_key(1371)) _variant_t DataLabel::GetVerticalAlignment ( );
__declspec(implementation_key(1372)) void DataLabel::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(1373)) long DataLabel::GetReadingOrder ( );
__declspec(implementation_key(1374)) void DataLabel::PutReadingOrder ( long RHS );
__declspec(implementation_key(1375)) _variant_t DataLabel::GetAutoScaleFont ( );
__declspec(implementation_key(1376)) void DataLabel::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(1377)) VARIANT_BOOL DataLabel::GetAutoText ( );
__declspec(implementation_key(1378)) void DataLabel::PutAutoText ( VARIANT_BOOL RHS );
__declspec(implementation_key(1379)) _bstr_t DataLabel::GetNumberFormat ( );
__declspec(implementation_key(1380)) void DataLabel::PutNumberFormat ( _bstr_t RHS );
__declspec(implementation_key(1381)) VARIANT_BOOL DataLabel::GetNumberFormatLinked ( );
__declspec(implementation_key(1382)) void DataLabel::PutNumberFormatLinked ( VARIANT_BOOL RHS );
__declspec(implementation_key(1383)) _variant_t DataLabel::GetNumberFormatLocal ( );
__declspec(implementation_key(1384)) void DataLabel::PutNumberFormatLocal ( const _variant_t & RHS );
__declspec(implementation_key(1385)) VARIANT_BOOL DataLabel::GetShowLegendKey ( );
__declspec(implementation_key(1386)) void DataLabel::PutShowLegendKey ( VARIANT_BOOL RHS );
__declspec(implementation_key(1387)) _variant_t DataLabel::GetType ( );
__declspec(implementation_key(1388)) void DataLabel::PutType ( const _variant_t & RHS );
__declspec(implementation_key(1389)) enum XlDataLabelPosition DataLabel::GetPosition ( );
__declspec(implementation_key(1390)) void DataLabel::PutPosition ( enum XlDataLabelPosition RHS );
__declspec(implementation_key(1391)) VARIANT_BOOL DataLabel::GetShowSeriesName ( );
__declspec(implementation_key(1392)) void DataLabel::PutShowSeriesName ( VARIANT_BOOL RHS );
__declspec(implementation_key(1393)) VARIANT_BOOL DataLabel::GetShowCategoryName ( );
__declspec(implementation_key(1394)) void DataLabel::PutShowCategoryName ( VARIANT_BOOL RHS );
__declspec(implementation_key(1395)) VARIANT_BOOL DataLabel::GetShowValue ( );
__declspec(implementation_key(1396)) void DataLabel::PutShowValue ( VARIANT_BOOL RHS );
__declspec(implementation_key(1397)) VARIANT_BOOL DataLabel::GetShowPercentage ( );
__declspec(implementation_key(1398)) void DataLabel::PutShowPercentage ( VARIANT_BOOL RHS );
__declspec(implementation_key(1399)) VARIANT_BOOL DataLabel::GetShowBubbleSize ( );
__declspec(implementation_key(1400)) void DataLabel::PutShowBubbleSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(1401)) _variant_t DataLabel::GetSeparator ( );
__declspec(implementation_key(1402)) void DataLabel::PutSeparator ( const _variant_t & RHS );
__declspec(implementation_key(1403)) ChartFormatPtr DataLabel::GetFormat ( );
__declspec(implementation_key(1404)) long DataLabel::GetCreator ( );
__declspec(implementation_key(1405)) _ApplicationPtr DataLabel::GetApplication ( );
__declspec(implementation_key(1406)) double DataLabel::Get_Height ( );
__declspec(implementation_key(1407)) double DataLabel::Get_Width ( );
__declspec(implementation_key(1408)) void DataLabel::PutFormula ( _bstr_t pbstr );
__declspec(implementation_key(1409)) _bstr_t DataLabel::GetFormula ( );
__declspec(implementation_key(1410)) void DataLabel::PutFormulaR1C1 ( _bstr_t pbstr );
__declspec(implementation_key(1411)) _bstr_t DataLabel::GetFormulaR1C1 ( );
__declspec(implementation_key(1412)) void DataLabel::PutFormulaLocal ( _bstr_t pbstr );
__declspec(implementation_key(1413)) _bstr_t DataLabel::GetFormulaLocal ( );
__declspec(implementation_key(1414)) void DataLabel::PutFormulaR1C1Local ( _bstr_t pbstr );
__declspec(implementation_key(1415)) _bstr_t DataLabel::GetFormulaR1C1Local ( );
__declspec(implementation_key(1416)) VARIANT_BOOL DataLabel::GetShowRange ( );
__declspec(implementation_key(1417)) void DataLabel::PutShowRange ( VARIANT_BOOL RHS );
__declspec(implementation_key(1418)) double DataLabel::GetHeight ( );
__declspec(implementation_key(1419)) void DataLabel::PutHeight ( double Height );
__declspec(implementation_key(1420)) double DataLabel::GetWidth ( );
__declspec(implementation_key(1421)) void DataLabel::PutWidth ( double Width );
__declspec(implementation_key(1422)) IDispatchPtr DataLabels::GetParent ( );
__declspec(implementation_key(1423)) _bstr_t DataLabels::GetName ( );
__declspec(implementation_key(1424)) _variant_t DataLabels::Select ( );
__declspec(implementation_key(1425)) ChartBorderPtr DataLabels::GetBorder ( );
__declspec(implementation_key(1426)) _variant_t DataLabels::Delete ( );
__declspec(implementation_key(1427)) InteriorPtr DataLabels::GetInterior ( );
__declspec(implementation_key(1428)) ChartFillFormatPtr DataLabels::GetFill ( );
__declspec(implementation_key(1429)) ChartFontPtr DataLabels::GetFont ( );
__declspec(implementation_key(1430)) _variant_t DataLabels::GetHorizontalAlignment ( );
__declspec(implementation_key(1431)) void DataLabels::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(1432)) _variant_t DataLabels::GetOrientation ( );
__declspec(implementation_key(1433)) void DataLabels::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(1434)) VARIANT_BOOL DataLabels::GetShadow ( );
__declspec(implementation_key(1435)) void DataLabels::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(1436)) _variant_t DataLabels::GetVerticalAlignment ( );
__declspec(implementation_key(1437)) void DataLabels::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(1438)) long DataLabels::GetReadingOrder ( );
__declspec(implementation_key(1439)) void DataLabels::PutReadingOrder ( long RHS );
__declspec(implementation_key(1440)) _variant_t DataLabels::GetAutoScaleFont ( );
__declspec(implementation_key(1441)) void DataLabels::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(1442)) VARIANT_BOOL DataLabels::GetAutoText ( );
__declspec(implementation_key(1443)) void DataLabels::PutAutoText ( VARIANT_BOOL RHS );
__declspec(implementation_key(1444)) _bstr_t DataLabels::GetNumberFormat ( );
__declspec(implementation_key(1445)) void DataLabels::PutNumberFormat ( _bstr_t RHS );
__declspec(implementation_key(1446)) VARIANT_BOOL DataLabels::GetNumberFormatLinked ( );
__declspec(implementation_key(1447)) void DataLabels::PutNumberFormatLinked ( VARIANT_BOOL RHS );
__declspec(implementation_key(1448)) _variant_t DataLabels::GetNumberFormatLocal ( );
__declspec(implementation_key(1449)) void DataLabels::PutNumberFormatLocal ( const _variant_t & RHS );
__declspec(implementation_key(1450)) VARIANT_BOOL DataLabels::GetShowLegendKey ( );
__declspec(implementation_key(1451)) void DataLabels::PutShowLegendKey ( VARIANT_BOOL RHS );
__declspec(implementation_key(1452)) _variant_t DataLabels::GetType ( );
__declspec(implementation_key(1453)) void DataLabels::PutType ( const _variant_t & RHS );
__declspec(implementation_key(1454)) enum XlDataLabelPosition DataLabels::GetPosition ( );
__declspec(implementation_key(1455)) void DataLabels::PutPosition ( enum XlDataLabelPosition RHS );
__declspec(implementation_key(1456)) VARIANT_BOOL DataLabels::GetShowSeriesName ( );
__declspec(implementation_key(1457)) void DataLabels::PutShowSeriesName ( VARIANT_BOOL RHS );
__declspec(implementation_key(1458)) VARIANT_BOOL DataLabels::GetShowCategoryName ( );
__declspec(implementation_key(1459)) void DataLabels::PutShowCategoryName ( VARIANT_BOOL RHS );
__declspec(implementation_key(1460)) VARIANT_BOOL DataLabels::GetShowValue ( );
__declspec(implementation_key(1461)) void DataLabels::PutShowValue ( VARIANT_BOOL RHS );
__declspec(implementation_key(1462)) VARIANT_BOOL DataLabels::GetShowPercentage ( );
__declspec(implementation_key(1463)) void DataLabels::PutShowPercentage ( VARIANT_BOOL RHS );
__declspec(implementation_key(1464)) VARIANT_BOOL DataLabels::GetShowBubbleSize ( );
__declspec(implementation_key(1465)) void DataLabels::PutShowBubbleSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(1466)) _variant_t DataLabels::GetSeparator ( );
__declspec(implementation_key(1467)) void DataLabels::PutSeparator ( const _variant_t & RHS );
__declspec(implementation_key(1468)) long DataLabels::GetCount ( );
__declspec(implementation_key(1469)) DataLabelPtr DataLabels::Item ( const _variant_t & Index );
__declspec(implementation_key(1470)) IUnknownPtr DataLabels::_NewEnum ( );
__declspec(implementation_key(1471)) ChartFormatPtr DataLabels::GetFormat ( );
__declspec(implementation_key(1472)) long DataLabels::GetCreator ( );
__declspec(implementation_key(1473)) _ApplicationPtr DataLabels::GetApplication ( );
__declspec(implementation_key(1474)) DataLabelPtr DataLabels::_Default ( const _variant_t & Index );
__declspec(implementation_key(1475)) HRESULT DataLabels::Propagate ( const _variant_t & Index );
__declspec(implementation_key(1476)) VARIANT_BOOL DataLabels::GetShowRange ( );
__declspec(implementation_key(1477)) void DataLabels::PutShowRange ( VARIANT_BOOL RHS );
__declspec(implementation_key(1478)) void DisplayUnitLabel::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(1479)) _bstr_t DisplayUnitLabel::GetCaption ( );
__declspec(implementation_key(1480)) ChartCharactersPtr DisplayUnitLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(1481)) ChartFontPtr DisplayUnitLabel::GetFont ( );
__declspec(implementation_key(1482)) void DisplayUnitLabel::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(1483)) _variant_t DisplayUnitLabel::GetHorizontalAlignment ( );
__declspec(implementation_key(1484)) double DisplayUnitLabel::GetLeft ( );
__declspec(implementation_key(1485)) void DisplayUnitLabel::PutLeft ( double RHS );
__declspec(implementation_key(1486)) void DisplayUnitLabel::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(1487)) _variant_t DisplayUnitLabel::GetOrientation ( );
__declspec(implementation_key(1488)) VARIANT_BOOL DisplayUnitLabel::GetShadow ( );
__declspec(implementation_key(1489)) void DisplayUnitLabel::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(1490)) void DisplayUnitLabel::PutText ( _bstr_t RHS );
__declspec(implementation_key(1491)) _bstr_t DisplayUnitLabel::GetText ( );
__declspec(implementation_key(1492)) double DisplayUnitLabel::GetTop ( );
__declspec(implementation_key(1493)) void DisplayUnitLabel::PutTop ( double RHS );
__declspec(implementation_key(1494)) void DisplayUnitLabel::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(1495)) _variant_t DisplayUnitLabel::GetVerticalAlignment ( );
__declspec(implementation_key(1496)) void DisplayUnitLabel::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(1497)) _variant_t DisplayUnitLabel::GetAutoScaleFont ( );
__declspec(implementation_key(1498)) InteriorPtr DisplayUnitLabel::GetInterior ( );
__declspec(implementation_key(1499)) ChartFillFormatPtr DisplayUnitLabel::GetFill ( );
__declspec(implementation_key(1500)) _variant_t DisplayUnitLabel::Delete ( );
__declspec(implementation_key(1501)) ChartBorderPtr DisplayUnitLabel::GetBorder ( );
__declspec(implementation_key(1502)) _bstr_t DisplayUnitLabel::GetName ( );
__declspec(implementation_key(1503)) IDispatchPtr DisplayUnitLabel::GetParent ( );
__declspec(implementation_key(1504)) _variant_t DisplayUnitLabel::Select ( );
__declspec(implementation_key(1505)) enum XlChartElementPosition DisplayUnitLabel::GetPosition ( );
__declspec(implementation_key(1506)) void DisplayUnitLabel::PutPosition ( enum XlChartElementPosition RHS );
__declspec(implementation_key(1507)) ChartFormatPtr DisplayUnitLabel::GetFormat ( );
__declspec(implementation_key(1508)) long DisplayUnitLabel::GetCreator ( );
__declspec(implementation_key(1509)) _ApplicationPtr DisplayUnitLabel::GetApplication ( );
__declspec(implementation_key(1510)) long DisplayUnitLabel::GetReadingOrder ( );
__declspec(implementation_key(1511)) void DisplayUnitLabel::PutReadingOrder ( long RHS );
__declspec(implementation_key(1512)) double DisplayUnitLabel::GetHeight ( );
__declspec(implementation_key(1513)) double DisplayUnitLabel::GetWidth ( );
__declspec(implementation_key(1514)) void DisplayUnitLabel::PutFormula ( _bstr_t pbstr );
__declspec(implementation_key(1515)) _bstr_t DisplayUnitLabel::GetFormula ( );
__declspec(implementation_key(1516)) void DisplayUnitLabel::PutFormulaR1C1 ( _bstr_t pbstr );
__declspec(implementation_key(1517)) _bstr_t DisplayUnitLabel::GetFormulaR1C1 ( );
__declspec(implementation_key(1518)) void DisplayUnitLabel::PutFormulaLocal ( _bstr_t pbstr );
__declspec(implementation_key(1519)) _bstr_t DisplayUnitLabel::GetFormulaLocal ( );
__declspec(implementation_key(1520)) void DisplayUnitLabel::PutFormulaR1C1Local ( _bstr_t pbstr );
__declspec(implementation_key(1521)) _bstr_t DisplayUnitLabel::GetFormulaR1C1Local ( );
__declspec(implementation_key(1522)) _bstr_t DownBars::GetName ( );
__declspec(implementation_key(1523)) _variant_t DownBars::Select ( );
__declspec(implementation_key(1524)) IDispatchPtr DownBars::GetParent ( );
__declspec(implementation_key(1525)) ChartBorderPtr DownBars::GetBorder ( );
__declspec(implementation_key(1526)) _variant_t DownBars::Delete ( );
__declspec(implementation_key(1527)) InteriorPtr DownBars::GetInterior ( );
__declspec(implementation_key(1528)) ChartFillFormatPtr DownBars::GetFill ( );
__declspec(implementation_key(1529)) ChartFormatPtr DownBars::GetFormat ( );
__declspec(implementation_key(1530)) long DownBars::GetCreator ( );
__declspec(implementation_key(1531)) _ApplicationPtr DownBars::GetApplication ( );
__declspec(implementation_key(1532)) _bstr_t Floor::GetName ( );
__declspec(implementation_key(1533)) _variant_t Floor::Select ( );
__declspec(implementation_key(1534)) IDispatchPtr Floor::GetParent ( );
__declspec(implementation_key(1535)) ChartBorderPtr Floor::GetBorder ( );
__declspec(implementation_key(1536)) _variant_t Floor::ClearFormats ( );
__declspec(implementation_key(1537)) InteriorPtr Floor::GetInterior ( );
__declspec(implementation_key(1538)) ChartFillFormatPtr Floor::GetFill ( );
__declspec(implementation_key(1539)) _variant_t Floor::GetPictureType ( );
__declspec(implementation_key(1540)) void Floor::PutPictureType ( const _variant_t & RHS );
__declspec(implementation_key(1541)) HRESULT Floor::Paste ( );
__declspec(implementation_key(1542)) long Floor::GetThickness ( );
__declspec(implementation_key(1543)) void Floor::PutThickness ( long RHS );
__declspec(implementation_key(1544)) ChartFormatPtr Floor::GetFormat ( );
__declspec(implementation_key(1545)) long Floor::GetCreator ( );
__declspec(implementation_key(1546)) _ApplicationPtr Floor::GetApplication ( );
__declspec(implementation_key(1547)) HRESULT LeaderLines::Select ( );
__declspec(implementation_key(1548)) ChartBorderPtr LeaderLines::GetBorder ( );
__declspec(implementation_key(1549)) HRESULT LeaderLines::Delete ( );
__declspec(implementation_key(1550)) ChartFormatPtr LeaderLines::GetFormat ( );
__declspec(implementation_key(1551)) long LeaderLines::GetCreator ( );
__declspec(implementation_key(1552)) IDispatchPtr LeaderLines::GetParent ( );
__declspec(implementation_key(1553)) _ApplicationPtr LeaderLines::GetApplication ( );
__declspec(implementation_key(1554)) IDispatchPtr Legend::GetParent ( );
__declspec(implementation_key(1555)) _bstr_t Legend::GetName ( );
__declspec(implementation_key(1556)) _variant_t Legend::Select ( );
__declspec(implementation_key(1557)) ChartBorderPtr Legend::GetBorder ( );
__declspec(implementation_key(1558)) _variant_t Legend::Delete ( );
__declspec(implementation_key(1559)) ChartFontPtr Legend::GetFont ( );
__declspec(implementation_key(1560)) IDispatchPtr Legend::LegendEntries ( const _variant_t & Index );
__declspec(implementation_key(1561)) enum XlLegendPosition Legend::GetPosition ( );
__declspec(implementation_key(1562)) void Legend::PutPosition ( enum XlLegendPosition RHS );
__declspec(implementation_key(1563)) VARIANT_BOOL Legend::GetShadow ( );
__declspec(implementation_key(1564)) void Legend::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(1565)) _variant_t Legend::Clear ( );
__declspec(implementation_key(1566)) double Legend::GetHeight ( );
__declspec(implementation_key(1567)) void Legend::PutHeight ( double RHS );
__declspec(implementation_key(1568)) InteriorPtr Legend::GetInterior ( );
__declspec(implementation_key(1569)) ChartFillFormatPtr Legend::GetFill ( );
__declspec(implementation_key(1570)) double Legend::GetLeft ( );
__declspec(implementation_key(1571)) void Legend::PutLeft ( double RHS );
__declspec(implementation_key(1572)) double Legend::GetTop ( );
__declspec(implementation_key(1573)) void Legend::PutTop ( double RHS );
__declspec(implementation_key(1574)) double Legend::GetWidth ( );
__declspec(implementation_key(1575)) void Legend::PutWidth ( double RHS );
__declspec(implementation_key(1576)) _variant_t Legend::GetAutoScaleFont ( );
__declspec(implementation_key(1577)) void Legend::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(1578)) VARIANT_BOOL Legend::GetIncludeInLayout ( );
__declspec(implementation_key(1579)) void Legend::PutIncludeInLayout ( VARIANT_BOOL RHS );
__declspec(implementation_key(1580)) ChartFormatPtr Legend::GetFormat ( );
__declspec(implementation_key(1581)) long Legend::GetCreator ( );
__declspec(implementation_key(1582)) _ApplicationPtr Legend::GetApplication ( );
__declspec(implementation_key(1583)) IDispatchPtr LegendKey::GetParent ( );
__declspec(implementation_key(1584)) ChartBorderPtr LegendKey::GetBorder ( );
__declspec(implementation_key(1585)) _variant_t LegendKey::ClearFormats ( );
__declspec(implementation_key(1586)) _variant_t LegendKey::Delete ( );
__declspec(implementation_key(1587)) InteriorPtr LegendKey::GetInterior ( );
__declspec(implementation_key(1588)) ChartFillFormatPtr LegendKey::GetFill ( );
__declspec(implementation_key(1589)) VARIANT_BOOL LegendKey::GetInvertIfNegative ( );
__declspec(implementation_key(1590)) void LegendKey::PutInvertIfNegative ( VARIANT_BOOL RHS );
__declspec(implementation_key(1591)) long LegendKey::GetMarkerBackgroundColor ( );
__declspec(implementation_key(1592)) void LegendKey::PutMarkerBackgroundColor ( long RHS );
__declspec(implementation_key(1593)) enum XlColorIndex LegendKey::GetMarkerBackgroundColorIndex ( );
__declspec(implementation_key(1594)) void LegendKey::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(1595)) long LegendKey::GetMarkerForegroundColor ( );
__declspec(implementation_key(1596)) void LegendKey::PutMarkerForegroundColor ( long RHS );
__declspec(implementation_key(1597)) enum XlColorIndex LegendKey::GetMarkerForegroundColorIndex ( );
__declspec(implementation_key(1598)) void LegendKey::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(1599)) long LegendKey::GetMarkerSize ( );
__declspec(implementation_key(1600)) void LegendKey::PutMarkerSize ( long RHS );
__declspec(implementation_key(1601)) enum XlMarkerStyle LegendKey::GetMarkerStyle ( );
__declspec(implementation_key(1602)) void LegendKey::PutMarkerStyle ( enum XlMarkerStyle RHS );
__declspec(implementation_key(1603)) long LegendKey::GetPictureType ( );
__declspec(implementation_key(1604)) void LegendKey::PutPictureType ( long RHS );
__declspec(implementation_key(1605)) _variant_t LegendKey::Select ( );
__declspec(implementation_key(1606)) VARIANT_BOOL LegendKey::GetSmooth ( );
__declspec(implementation_key(1607)) void LegendKey::PutSmooth ( VARIANT_BOOL RHS );
__declspec(implementation_key(1608)) double LegendKey::GetLeft ( );
__declspec(implementation_key(1609)) double LegendKey::GetTop ( );
__declspec(implementation_key(1610)) double LegendKey::GetWidth ( );
__declspec(implementation_key(1611)) double LegendKey::GetHeight ( );
__declspec(implementation_key(1612)) VARIANT_BOOL LegendKey::GetShadow ( );
__declspec(implementation_key(1613)) void LegendKey::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(1614)) ChartFormatPtr LegendKey::GetFormat ( );
__declspec(implementation_key(1615)) long LegendKey::GetCreator ( );
__declspec(implementation_key(1616)) double LegendKey::GetPictureUnit2 ( );
__declspec(implementation_key(1617)) void LegendKey::PutPictureUnit2 ( double RHS );
__declspec(implementation_key(1618)) _ApplicationPtr LegendKey::GetApplication ( );
__declspec(implementation_key(1619)) long LegendKey::GetPictureUnit ( );
__declspec(implementation_key(1620)) void LegendKey::PutPictureUnit ( long RHS );
__declspec(implementation_key(1621)) IDispatchPtr LegendEntry::GetParent ( );
__declspec(implementation_key(1622)) _variant_t LegendEntry::Delete ( );
__declspec(implementation_key(1623)) ChartFontPtr LegendEntry::GetFont ( );
__declspec(implementation_key(1624)) long LegendEntry::GetIndex ( );
__declspec(implementation_key(1625)) LegendKeyPtr LegendEntry::GetLegendKey ( );
__declspec(implementation_key(1626)) _variant_t LegendEntry::Select ( );
__declspec(implementation_key(1627)) _variant_t LegendEntry::GetAutoScaleFont ( );
__declspec(implementation_key(1628)) void LegendEntry::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(1629)) double LegendEntry::GetLeft ( );
__declspec(implementation_key(1630)) double LegendEntry::GetTop ( );
__declspec(implementation_key(1631)) double LegendEntry::GetWidth ( );
__declspec(implementation_key(1632)) double LegendEntry::GetHeight ( );
__declspec(implementation_key(1633)) ChartFormatPtr LegendEntry::GetFormat ( );
__declspec(implementation_key(1634)) long LegendEntry::GetCreator ( );
__declspec(implementation_key(1635)) _ApplicationPtr LegendEntry::GetApplication ( );
__declspec(implementation_key(1636)) IDispatchPtr LegendEntries::GetParent ( );
__declspec(implementation_key(1637)) long LegendEntries::GetCount ( );
__declspec(implementation_key(1638)) LegendEntryPtr LegendEntries::Item ( const _variant_t & Index );
__declspec(implementation_key(1639)) IUnknownPtr LegendEntries::_NewEnum ( );
__declspec(implementation_key(1640)) long LegendEntries::GetCreator ( );
__declspec(implementation_key(1641)) _ApplicationPtr LegendEntries::GetApplication ( );
__declspec(implementation_key(1642)) LegendEntryPtr LegendEntries::_Default ( const _variant_t & Index );
__declspec(implementation_key(1643)) _bstr_t PlotArea::GetName ( );
__declspec(implementation_key(1644)) _variant_t PlotArea::Select ( );
__declspec(implementation_key(1645)) IDispatchPtr PlotArea::GetParent ( );
__declspec(implementation_key(1646)) ChartBorderPtr PlotArea::GetBorder ( );
__declspec(implementation_key(1647)) _variant_t PlotArea::ClearFormats ( );
__declspec(implementation_key(1648)) double PlotArea::GetHeight ( );
__declspec(implementation_key(1649)) void PlotArea::PutHeight ( double RHS );
__declspec(implementation_key(1650)) InteriorPtr PlotArea::GetInterior ( );
__declspec(implementation_key(1651)) ChartFillFormatPtr PlotArea::GetFill ( );
__declspec(implementation_key(1652)) double PlotArea::GetLeft ( );
__declspec(implementation_key(1653)) void PlotArea::PutLeft ( double RHS );
__declspec(implementation_key(1654)) double PlotArea::GetTop ( );
__declspec(implementation_key(1655)) void PlotArea::PutTop ( double RHS );
__declspec(implementation_key(1656)) double PlotArea::GetWidth ( );
__declspec(implementation_key(1657)) void PlotArea::PutWidth ( double RHS );
__declspec(implementation_key(1658)) double PlotArea::GetInsideLeft ( );
__declspec(implementation_key(1659)) void PlotArea::PutInsideLeft ( double RHS );
__declspec(implementation_key(1660)) double PlotArea::GetInsideTop ( );
__declspec(implementation_key(1661)) void PlotArea::PutInsideTop ( double RHS );
__declspec(implementation_key(1662)) double PlotArea::GetInsideWidth ( );
__declspec(implementation_key(1663)) void PlotArea::PutInsideWidth ( double RHS );
__declspec(implementation_key(1664)) double PlotArea::GetInsideHeight ( );
__declspec(implementation_key(1665)) void PlotArea::PutInsideHeight ( double RHS );
__declspec(implementation_key(1666)) enum XlChartElementPosition PlotArea::GetPosition ( );
__declspec(implementation_key(1667)) void PlotArea::PutPosition ( enum XlChartElementPosition RHS );
__declspec(implementation_key(1668)) ChartFormatPtr PlotArea::GetFormat ( );
__declspec(implementation_key(1669)) long PlotArea::GetCreator ( );
__declspec(implementation_key(1670)) _ApplicationPtr PlotArea::GetApplication ( );
__declspec(implementation_key(1671)) _bstr_t SeriesLines::GetName ( );
__declspec(implementation_key(1672)) _variant_t SeriesLines::Select ( );
__declspec(implementation_key(1673)) IDispatchPtr SeriesLines::GetParent ( );
__declspec(implementation_key(1674)) ChartBorderPtr SeriesLines::GetBorder ( );
__declspec(implementation_key(1675)) _variant_t SeriesLines::Delete ( );
__declspec(implementation_key(1676)) ChartFormatPtr SeriesLines::GetFormat ( );
__declspec(implementation_key(1677)) long SeriesLines::GetCreator ( );
__declspec(implementation_key(1678)) _ApplicationPtr SeriesLines::GetApplication ( );
__declspec(implementation_key(1679)) IDispatchPtr TickLabels::GetParent ( );
__declspec(implementation_key(1680)) _variant_t TickLabels::Delete ( );
__declspec(implementation_key(1681)) ChartFontPtr TickLabels::GetFont ( );
__declspec(implementation_key(1682)) _bstr_t TickLabels::GetName ( );
__declspec(implementation_key(1683)) _bstr_t TickLabels::GetNumberFormat ( );
__declspec(implementation_key(1684)) void TickLabels::PutNumberFormat ( _bstr_t RHS );
__declspec(implementation_key(1685)) VARIANT_BOOL TickLabels::GetNumberFormatLinked ( );
__declspec(implementation_key(1686)) void TickLabels::PutNumberFormatLinked ( VARIANT_BOOL RHS );
__declspec(implementation_key(1687)) _variant_t TickLabels::GetNumberFormatLocal ( );
__declspec(implementation_key(1688)) void TickLabels::PutNumberFormatLocal ( const _variant_t & RHS );
__declspec(implementation_key(1689)) enum XlTickLabelOrientation TickLabels::GetOrientation ( );
__declspec(implementation_key(1690)) void TickLabels::PutOrientation ( enum XlTickLabelOrientation RHS );
__declspec(implementation_key(1691)) _variant_t TickLabels::Select ( );
__declspec(implementation_key(1692)) _variant_t TickLabels::GetAutoScaleFont ( );
__declspec(implementation_key(1693)) void TickLabels::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(1694)) int TickLabels::GetDepth ( );
__declspec(implementation_key(1695)) int TickLabels::GetOffset ( );
__declspec(implementation_key(1696)) void TickLabels::PutOffset ( int RHS );
__declspec(implementation_key(1697)) VARIANT_BOOL TickLabels::GetMultiLevel ( );
__declspec(implementation_key(1698)) void TickLabels::PutMultiLevel ( VARIANT_BOOL RHS );
__declspec(implementation_key(1699)) ChartFormatPtr TickLabels::GetFormat ( );
__declspec(implementation_key(1700)) long TickLabels::GetCreator ( );
__declspec(implementation_key(1701)) _ApplicationPtr TickLabels::GetApplication ( );
__declspec(implementation_key(1702)) long TickLabels::GetAlignment ( );
__declspec(implementation_key(1703)) void TickLabels::PutAlignment ( long RHS );
__declspec(implementation_key(1704)) long TickLabels::GetReadingOrder ( );
__declspec(implementation_key(1705)) void TickLabels::PutReadingOrder ( long RHS );
__declspec(implementation_key(1706)) VARIANT_BOOL Axis::GetAxisBetweenCategories ( );
__declspec(implementation_key(1707)) void Axis::PutAxisBetweenCategories ( VARIANT_BOOL RHS );
__declspec(implementation_key(1708)) enum XlAxisGroup Axis::GetAxisGroup ( );
__declspec(implementation_key(1709)) AxisTitlePtr Axis::GetAxisTitle ( );
__declspec(implementation_key(1710)) _variant_t Axis::GetCategoryNames ( );
__declspec(implementation_key(1711)) void Axis::PutCategoryNames ( const _variant_t & RHS );
__declspec(implementation_key(1712)) enum XlAxisCrosses Axis::GetCrosses ( );
__declspec(implementation_key(1713)) void Axis::PutCrosses ( enum XlAxisCrosses RHS );
__declspec(implementation_key(1714)) double Axis::GetCrossesAt ( );
__declspec(implementation_key(1715)) void Axis::PutCrossesAt ( double RHS );
__declspec(implementation_key(1716)) _variant_t Axis::Delete ( );
__declspec(implementation_key(1717)) VARIANT_BOOL Axis::GetHasMajorGridlines ( );
__declspec(implementation_key(1718)) void Axis::PutHasMajorGridlines ( VARIANT_BOOL RHS );
__declspec(implementation_key(1719)) VARIANT_BOOL Axis::GetHasMinorGridlines ( );
__declspec(implementation_key(1720)) void Axis::PutHasMinorGridlines ( VARIANT_BOOL RHS );
__declspec(implementation_key(1721)) VARIANT_BOOL Axis::GetHasTitle ( );
__declspec(implementation_key(1722)) void Axis::PutHasTitle ( VARIANT_BOOL RHS );
__declspec(implementation_key(1723)) GridlinesPtr Axis::GetMajorGridlines ( );
__declspec(implementation_key(1724)) enum XlTickMark Axis::GetMajorTickMark ( );
__declspec(implementation_key(1725)) void Axis::PutMajorTickMark ( enum XlTickMark RHS );
__declspec(implementation_key(1726)) double Axis::GetMajorUnit ( );
__declspec(implementation_key(1727)) void Axis::PutMajorUnit ( double RHS );
__declspec(implementation_key(1728)) double Axis::GetLogBase ( );
__declspec(implementation_key(1729)) void Axis::PutLogBase ( double RHS );
__declspec(implementation_key(1730)) VARIANT_BOOL Axis::GetTickLabelSpacingIsAuto ( );
__declspec(implementation_key(1731)) void Axis::PutTickLabelSpacingIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(1732)) VARIANT_BOOL Axis::GetMajorUnitIsAuto ( );
__declspec(implementation_key(1733)) void Axis::PutMajorUnitIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(1734)) double Axis::GetMaximumScale ( );
__declspec(implementation_key(1735)) void Axis::PutMaximumScale ( double RHS );
__declspec(implementation_key(1736)) VARIANT_BOOL Axis::GetMaximumScaleIsAuto ( );
__declspec(implementation_key(1737)) void Axis::PutMaximumScaleIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(1738)) double Axis::GetMinimumScale ( );
__declspec(implementation_key(1739)) void Axis::PutMinimumScale ( double RHS );
__declspec(implementation_key(1740)) VARIANT_BOOL Axis::GetMinimumScaleIsAuto ( );
__declspec(implementation_key(1741)) void Axis::PutMinimumScaleIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(1742)) GridlinesPtr Axis::GetMinorGridlines ( );
__declspec(implementation_key(1743)) enum XlTickMark Axis::GetMinorTickMark ( );
__declspec(implementation_key(1744)) void Axis::PutMinorTickMark ( enum XlTickMark RHS );
__declspec(implementation_key(1745)) double Axis::GetMinorUnit ( );
__declspec(implementation_key(1746)) void Axis::PutMinorUnit ( double RHS );
__declspec(implementation_key(1747)) VARIANT_BOOL Axis::GetMinorUnitIsAuto ( );
__declspec(implementation_key(1748)) void Axis::PutMinorUnitIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(1749)) VARIANT_BOOL Axis::GetReversePlotOrder ( );
__declspec(implementation_key(1750)) void Axis::PutReversePlotOrder ( VARIANT_BOOL RHS );
__declspec(implementation_key(1751)) enum XlScaleType Axis::GetScaleType ( );
__declspec(implementation_key(1752)) void Axis::PutScaleType ( enum XlScaleType RHS );
__declspec(implementation_key(1753)) _variant_t Axis::Select ( );
__declspec(implementation_key(1754)) enum XlTickLabelPosition Axis::GetTickLabelPosition ( );
__declspec(implementation_key(1755)) void Axis::PutTickLabelPosition ( enum XlTickLabelPosition RHS );
__declspec(implementation_key(1756)) TickLabelsPtr Axis::GetTickLabels ( );
__declspec(implementation_key(1757)) long Axis::GetTickLabelSpacing ( );
__declspec(implementation_key(1758)) void Axis::PutTickLabelSpacing ( long RHS );
__declspec(implementation_key(1759)) long Axis::GetTickMarkSpacing ( );
__declspec(implementation_key(1760)) void Axis::PutTickMarkSpacing ( long RHS );
__declspec(implementation_key(1761)) enum XlAxisType Axis::GetType ( );
__declspec(implementation_key(1762)) void Axis::PutType ( enum XlAxisType RHS );
__declspec(implementation_key(1763)) enum XlTimeUnit Axis::GetBaseUnit ( );
__declspec(implementation_key(1764)) void Axis::PutBaseUnit ( enum XlTimeUnit RHS );
__declspec(implementation_key(1765)) VARIANT_BOOL Axis::GetBaseUnitIsAuto ( );
__declspec(implementation_key(1766)) void Axis::PutBaseUnitIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(1767)) enum XlTimeUnit Axis::GetMajorUnitScale ( );
__declspec(implementation_key(1768)) void Axis::PutMajorUnitScale ( enum XlTimeUnit RHS );
__declspec(implementation_key(1769)) enum XlTimeUnit Axis::GetMinorUnitScale ( );
__declspec(implementation_key(1770)) void Axis::PutMinorUnitScale ( enum XlTimeUnit RHS );
__declspec(implementation_key(1771)) enum XlCategoryType Axis::GetCategoryType ( );
__declspec(implementation_key(1772)) void Axis::PutCategoryType ( enum XlCategoryType RHS );
__declspec(implementation_key(1773)) double Axis::GetLeft ( );
__declspec(implementation_key(1774)) double Axis::GetTop ( );
__declspec(implementation_key(1775)) double Axis::GetWidth ( );
__declspec(implementation_key(1776)) double Axis::GetHeight ( );
__declspec(implementation_key(1777)) enum XlDisplayUnit Axis::GetDisplayUnit ( );
__declspec(implementation_key(1778)) void Axis::PutDisplayUnit ( enum XlDisplayUnit RHS );
__declspec(implementation_key(1779)) double Axis::GetDisplayUnitCustom ( );
__declspec(implementation_key(1780)) void Axis::PutDisplayUnitCustom ( double RHS );
__declspec(implementation_key(1781)) VARIANT_BOOL Axis::GetHasDisplayUnitLabel ( );
__declspec(implementation_key(1782)) void Axis::PutHasDisplayUnitLabel ( VARIANT_BOOL RHS );
__declspec(implementation_key(1783)) DisplayUnitLabelPtr Axis::GetDisplayUnitLabel ( );
__declspec(implementation_key(1784)) ChartBorderPtr Axis::GetBorder ( );
__declspec(implementation_key(1785)) ChartFormatPtr Axis::GetFormat ( );
__declspec(implementation_key(1786)) long Axis::GetCreator ( );
__declspec(implementation_key(1787)) IDispatchPtr Axis::GetParent ( );
__declspec(implementation_key(1788)) _ApplicationPtr Axis::GetApplication ( );
__declspec(implementation_key(1789)) long Axes::GetCount ( );
__declspec(implementation_key(1790)) long Axes::GetCreator ( );
__declspec(implementation_key(1791)) IDispatchPtr Axes::GetParent ( );
__declspec(implementation_key(1792)) _ApplicationPtr Axes::GetApplication ( );
__declspec(implementation_key(1793)) AxisPtr Axes::Item ( enum XlAxisType Type, enum XlAxisGroup AxisGroup );
__declspec(implementation_key(1794)) IUnknownPtr Axes::_NewEnum ( );
__declspec(implementation_key(1795)) AxisPtr Axes::_Default ( enum XlAxisType Type, enum XlAxisGroup AxisGroup );
__declspec(implementation_key(1796)) IDispatchPtr Trendline::GetParent ( );
__declspec(implementation_key(1797)) ChartBorderPtr Trendline::GetBorder ( );
__declspec(implementation_key(1798)) _variant_t Trendline::ClearFormats ( );
__declspec(implementation_key(1799)) DataLabelPtr Trendline::GetDataLabel ( );
__declspec(implementation_key(1800)) _variant_t Trendline::Delete ( );
__declspec(implementation_key(1801)) VARIANT_BOOL Trendline::GetDisplayEquation ( );
__declspec(implementation_key(1802)) void Trendline::PutDisplayEquation ( VARIANT_BOOL RHS );
__declspec(implementation_key(1803)) VARIANT_BOOL Trendline::GetDisplayRSquared ( );
__declspec(implementation_key(1804)) void Trendline::PutDisplayRSquared ( VARIANT_BOOL RHS );
__declspec(implementation_key(1805)) long Trendline::GetIndex ( );
__declspec(implementation_key(1806)) double Trendline::GetIntercept ( );
__declspec(implementation_key(1807)) void Trendline::PutIntercept ( double RHS );
__declspec(implementation_key(1808)) VARIANT_BOOL Trendline::GetInterceptIsAuto ( );
__declspec(implementation_key(1809)) void Trendline::PutInterceptIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(1810)) _bstr_t Trendline::GetName ( );
__declspec(implementation_key(1811)) void Trendline::PutName ( _bstr_t RHS );
__declspec(implementation_key(1812)) VARIANT_BOOL Trendline::GetNameIsAuto ( );
__declspec(implementation_key(1813)) void Trendline::PutNameIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(1814)) long Trendline::GetOrder ( );
__declspec(implementation_key(1815)) void Trendline::PutOrder ( long RHS );
__declspec(implementation_key(1816)) long Trendline::GetPeriod ( );
__declspec(implementation_key(1817)) void Trendline::PutPeriod ( long RHS );
__declspec(implementation_key(1818)) _variant_t Trendline::Select ( );
__declspec(implementation_key(1819)) enum XlTrendlineType Trendline::GetType ( );
__declspec(implementation_key(1820)) void Trendline::PutType ( enum XlTrendlineType RHS );
__declspec(implementation_key(1821)) ChartFormatPtr Trendline::GetFormat ( );
__declspec(implementation_key(1822)) long Trendline::GetCreator ( );
__declspec(implementation_key(1823)) double Trendline::GetBackward2 ( );
__declspec(implementation_key(1824)) void Trendline::PutBackward2 ( double RHS );
__declspec(implementation_key(1825)) double Trendline::GetForward2 ( );
__declspec(implementation_key(1826)) void Trendline::PutForward2 ( double RHS );
__declspec(implementation_key(1827)) _ApplicationPtr Trendline::GetApplication ( );
__declspec(implementation_key(1828)) long Trendline::GetBackward ( );
__declspec(implementation_key(1829)) void Trendline::PutBackward ( long RHS );
__declspec(implementation_key(1830)) long Trendline::GetForward ( );
__declspec(implementation_key(1831)) void Trendline::PutForward ( long RHS );
__declspec(implementation_key(1832)) IDispatchPtr Trendlines::GetParent ( );
__declspec(implementation_key(1833)) TrendlinePtr Trendlines::Add ( enum XlTrendlineType Type, const _variant_t & Order, const _variant_t & Period, const _variant_t & Forward, const _variant_t & Backward, const _variant_t & Intercept, const _variant_t & DisplayEquation, const _variant_t & DisplayRSquared, const _variant_t & Name );
__declspec(implementation_key(1834)) long Trendlines::GetCount ( );
__declspec(implementation_key(1835)) TrendlinePtr Trendlines::Item ( const _variant_t & Index );
__declspec(implementation_key(1836)) IUnknownPtr Trendlines::_NewEnum ( );
__declspec(implementation_key(1837)) long Trendlines::GetCreator ( );
__declspec(implementation_key(1838)) _ApplicationPtr Trendlines::GetApplication ( );
__declspec(implementation_key(1839)) TrendlinePtr Trendlines::_Default ( const _variant_t & Index );
__declspec(implementation_key(1840)) _bstr_t UpBars::GetName ( );
__declspec(implementation_key(1841)) _variant_t UpBars::Select ( );
__declspec(implementation_key(1842)) IDispatchPtr UpBars::GetParent ( );
__declspec(implementation_key(1843)) ChartBorderPtr UpBars::GetBorder ( );
__declspec(implementation_key(1844)) _variant_t UpBars::Delete ( );
__declspec(implementation_key(1845)) InteriorPtr UpBars::GetInterior ( );
__declspec(implementation_key(1846)) ChartFillFormatPtr UpBars::GetFill ( );
__declspec(implementation_key(1847)) ChartFormatPtr UpBars::GetFormat ( );
__declspec(implementation_key(1848)) long UpBars::GetCreator ( );
__declspec(implementation_key(1849)) _ApplicationPtr UpBars::GetApplication ( );
__declspec(implementation_key(1850)) _bstr_t Walls::GetName ( );
__declspec(implementation_key(1851)) _variant_t Walls::Select ( );
__declspec(implementation_key(1852)) IDispatchPtr Walls::GetParent ( );
__declspec(implementation_key(1853)) ChartBorderPtr Walls::GetBorder ( );
__declspec(implementation_key(1854)) _variant_t Walls::ClearFormats ( );
__declspec(implementation_key(1855)) InteriorPtr Walls::GetInterior ( );
__declspec(implementation_key(1856)) ChartFillFormatPtr Walls::GetFill ( );
__declspec(implementation_key(1857)) _variant_t Walls::GetPictureType ( );
__declspec(implementation_key(1858)) void Walls::PutPictureType ( const _variant_t & pvar );
__declspec(implementation_key(1859)) HRESULT Walls::Paste ( );
__declspec(implementation_key(1860)) _variant_t Walls::GetPictureUnit ( );
__declspec(implementation_key(1861)) void Walls::PutPictureUnit ( const _variant_t & pvar );
__declspec(implementation_key(1862)) long Walls::GetThickness ( );
__declspec(implementation_key(1863)) void Walls::PutThickness ( long RHS );
__declspec(implementation_key(1864)) ChartFormatPtr Walls::GetFormat ( );
__declspec(implementation_key(1865)) long Walls::GetCreator ( );
__declspec(implementation_key(1866)) _ApplicationPtr Walls::GetApplication ( );
__declspec(implementation_key(1867)) _ApplicationPtr SectionProperties::GetApplication ( );
__declspec(implementation_key(1868)) IDispatchPtr SectionProperties::GetParent ( );
__declspec(implementation_key(1869)) long SectionProperties::GetCount ( );
__declspec(implementation_key(1870)) _bstr_t SectionProperties::Name ( int sectionIndex );
__declspec(implementation_key(1871)) HRESULT SectionProperties::Rename ( int sectionIndex, _bstr_t sectionName );
__declspec(implementation_key(1872)) long SectionProperties::SlidesCount ( int sectionIndex );
__declspec(implementation_key(1873)) int SectionProperties::FirstSlide ( int sectionIndex );
__declspec(implementation_key(1874)) int SectionProperties::AddBeforeSlide ( int SlideIndex, _bstr_t sectionName );
__declspec(implementation_key(1875)) int SectionProperties::AddSection ( int sectionIndex, const _variant_t & sectionName );
__declspec(implementation_key(1876)) HRESULT SectionProperties::Move ( int sectionIndex, int toPos );
__declspec(implementation_key(1877)) HRESULT SectionProperties::Delete ( int sectionIndex, VARIANT_BOOL deleteSlides );
__declspec(implementation_key(1878)) _bstr_t SectionProperties::SectionID ( int sectionIndex );
__declspec(implementation_key(1879)) _ApplicationPtr Player::GetApplication ( );
__declspec(implementation_key(1880)) IDispatchPtr Player::GetParent ( );
__declspec(implementation_key(1881)) HRESULT Player::Play ( );
__declspec(implementation_key(1882)) HRESULT Player::Pause ( );
__declspec(implementation_key(1883)) HRESULT Player::Stop ( );
__declspec(implementation_key(1884)) HRESULT Player::GoToNextBookmark ( );
__declspec(implementation_key(1885)) HRESULT Player::GoToPreviousBookmark ( );
__declspec(implementation_key(1886)) long Player::GetCurrentPosition ( );
__declspec(implementation_key(1887)) void Player::PutCurrentPosition ( long CurrentPosition );
__declspec(implementation_key(1888)) enum PpPlayerState Player::GetState ( );
__declspec(implementation_key(1889)) _ApplicationPtr View::GetApplication ( );
__declspec(implementation_key(1890)) IDispatchPtr View::GetParent ( );
__declspec(implementation_key(1891)) enum PpViewType View::GetType ( );
__declspec(implementation_key(1892)) int View::GetZoom ( );
__declspec(implementation_key(1893)) void View::PutZoom ( int Zoom );
__declspec(implementation_key(1894)) HRESULT View::Paste ( );
__declspec(implementation_key(1895)) IDispatchPtr View::GetSlide ( );
__declspec(implementation_key(1896)) void View::PutSlide ( IDispatch * Slide );
__declspec(implementation_key(1897)) HRESULT View::GotoSlide ( int Index );
__declspec(implementation_key(1898)) __missing_type__  View::GetDisplaySlideMiniature ( );
__declspec(implementation_key(1899)) void View::PutDisplaySlideMiniature ( __missing_type__ DisplaySlideMiniature );
__declspec(implementation_key(1900)) __missing_type__  View::GetZoomToFit ( );
__declspec(implementation_key(1901)) void View::PutZoomToFit ( __missing_type__ ZoomToFit );
__declspec(implementation_key(1902)) HRESULT View::PasteSpecial ( enum PpPasteDataType DataType, __missing_type__ DisplayAsIcon, _bstr_t IconFileName, int IconIndex, _bstr_t IconLabel, __missing_type__ Link );
__declspec(implementation_key(1903)) PrintOptionsPtr View::GetPrintOptions ( );
__declspec(implementation_key(1904)) HRESULT View::PrintOut ( int From, int To, _bstr_t PrintToFile, int Copies, __missing_type__ Collate );
__declspec(implementation_key(1905)) PlayerPtr View::Player ( const _variant_t & ShapeId );
__declspec(implementation_key(1906)) __missing_type__  View::GetMediaControlsVisible ( );
__declspec(implementation_key(1907)) float View::GetMediaControlsLeft ( );
__declspec(implementation_key(1908)) float View::GetMediaControlsTop ( );
__declspec(implementation_key(1909)) float View::GetMediaControlsWidth ( );
__declspec(implementation_key(1910)) float View::GetMediaControlsHeight ( );
__declspec(implementation_key(1911)) _ApplicationPtr SlideShowView::GetApplication ( );
__declspec(implementation_key(1912)) IDispatchPtr SlideShowView::GetParent ( );
__declspec(implementation_key(1913)) int SlideShowView::GetZoom ( );
__declspec(implementation_key(1914)) _SlidePtr SlideShowView::GetSlide ( );
__declspec(implementation_key(1915)) enum PpSlideShowPointerType SlideShowView::GetPointerType ( );
__declspec(implementation_key(1916)) void SlideShowView::PutPointerType ( enum PpSlideShowPointerType PointerType );
__declspec(implementation_key(1917)) enum PpSlideShowState SlideShowView::GetState ( );
__declspec(implementation_key(1918)) void SlideShowView::PutState ( enum PpSlideShowState State );
__declspec(implementation_key(1919)) __missing_type__  SlideShowView::GetAcceleratorsEnabled ( );
__declspec(implementation_key(1920)) void SlideShowView::PutAcceleratorsEnabled ( __missing_type__ AcceleratorsEnabled );
__declspec(implementation_key(1921)) float SlideShowView::GetPresentationElapsedTime ( );
__declspec(implementation_key(1922)) float SlideShowView::GetSlideElapsedTime ( );
__declspec(implementation_key(1923)) void SlideShowView::PutSlideElapsedTime ( float SlideElapsedTime );
__declspec(implementation_key(1924)) _SlidePtr SlideShowView::GetLastSlideViewed ( );
__declspec(implementation_key(1925)) enum PpSlideShowAdvanceMode SlideShowView::GetAdvanceMode ( );
__declspec(implementation_key(1926)) ColorFormatPtr SlideShowView::GetPointerColor ( );
__declspec(implementation_key(1927)) __missing_type__  SlideShowView::GetIsNamedShow ( );
__declspec(implementation_key(1928)) _bstr_t SlideShowView::GetSlideShowName ( );
__declspec(implementation_key(1929)) HRESULT SlideShowView::DrawLine ( float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(1930)) HRESULT SlideShowView::EraseDrawing ( );
__declspec(implementation_key(1931)) HRESULT SlideShowView::First ( );
__declspec(implementation_key(1932)) HRESULT SlideShowView::Last ( );
__declspec(implementation_key(1933)) HRESULT SlideShowView::Next ( );
__declspec(implementation_key(1934)) HRESULT SlideShowView::Previous ( );
__declspec(implementation_key(1935)) HRESULT SlideShowView::GotoSlide ( int Index, __missing_type__ ResetSlide );
__declspec(implementation_key(1936)) HRESULT SlideShowView::GotoNamedShow ( _bstr_t SlideShowName );
__declspec(implementation_key(1937)) HRESULT SlideShowView::EndNamedShow ( );
__declspec(implementation_key(1938)) HRESULT SlideShowView::ResetSlideTime ( );
__declspec(implementation_key(1939)) HRESULT SlideShowView::Exit ( );
__declspec(implementation_key(1940)) HRESULT SlideShowView::InstallTracker ( struct MouseTracker * pTracker, __missing_type__ Presenter );
__declspec(implementation_key(1941)) int SlideShowView::GetCurrentShowPosition ( );
__declspec(implementation_key(1942)) HRESULT SlideShowView::GotoClick ( int Index );
__declspec(implementation_key(1943)) int SlideShowView::GetClickIndex ( );
__declspec(implementation_key(1944)) int SlideShowView::GetClickCount ( );
__declspec(implementation_key(1945)) VARIANT_BOOL SlideShowView::FirstAnimationIsAutomatic ( );
__declspec(implementation_key(1946)) PlayerPtr SlideShowView::Player ( const _variant_t & ShapeId );
__declspec(implementation_key(1947)) __missing_type__  SlideShowView::GetMediaControlsVisible ( );
__declspec(implementation_key(1948)) float SlideShowView::GetMediaControlsLeft ( );
__declspec(implementation_key(1949)) float SlideShowView::GetMediaControlsTop ( );
__declspec(implementation_key(1950)) float SlideShowView::GetMediaControlsWidth ( );
__declspec(implementation_key(1951)) float SlideShowView::GetMediaControlsHeight ( );
__declspec(implementation_key(1952)) VARIANT_BOOL SlideShowView::GetLaserPointerEnabled ( );
__declspec(implementation_key(1953)) void SlideShowView::PutLaserPointerEnabled ( VARIANT_BOOL LaserPointerEnabled );
__declspec(implementation_key(1954)) int MediaBookmark::GetIndex ( );
__declspec(implementation_key(1955)) _bstr_t MediaBookmark::GetName ( );
__declspec(implementation_key(1956)) long MediaBookmark::GetPosition ( );
__declspec(implementation_key(1957)) HRESULT MediaBookmark::Delete ( );
__declspec(implementation_key(1958)) MediaBookmarkPtr MediaBookmarks::Item ( int Index );
__declspec(implementation_key(1959)) MediaBookmarkPtr MediaBookmarks::Add ( long Position, _bstr_t Name );
__declspec(implementation_key(1960)) _ApplicationPtr MediaFormat::GetApplication ( );
__declspec(implementation_key(1961)) IDispatchPtr MediaFormat::GetParent ( );
__declspec(implementation_key(1962)) float MediaFormat::GetVolume ( );
__declspec(implementation_key(1963)) void MediaFormat::PutVolume ( float Volume );
__declspec(implementation_key(1964)) VARIANT_BOOL MediaFormat::GetMuted ( );
__declspec(implementation_key(1965)) void MediaFormat::PutMuted ( VARIANT_BOOL Muted );
__declspec(implementation_key(1966)) long MediaFormat::GetLength ( );
__declspec(implementation_key(1967)) long MediaFormat::GetStartPoint ( );
__declspec(implementation_key(1968)) void MediaFormat::PutStartPoint ( long StartPoint );
__declspec(implementation_key(1969)) long MediaFormat::GetEndPoint ( );
__declspec(implementation_key(1970)) void MediaFormat::PutEndPoint ( long EndPoint );
__declspec(implementation_key(1971)) long MediaFormat::GetFadeInDuration ( );
__declspec(implementation_key(1972)) void MediaFormat::PutFadeInDuration ( long FadeInDuration );
__declspec(implementation_key(1973)) long MediaFormat::GetFadeOutDuration ( );
__declspec(implementation_key(1974)) void MediaFormat::PutFadeOutDuration ( long FadeOutDuration );
__declspec(implementation_key(1975)) MediaBookmarksPtr MediaFormat::GetMediaBookmarks ( );
__declspec(implementation_key(1976)) HRESULT MediaFormat::SetDisplayPicture ( long Position );
__declspec(implementation_key(1977)) HRESULT MediaFormat::SetDisplayPictureFromFile ( _bstr_t FilePath );
__declspec(implementation_key(1978)) HRESULT MediaFormat::Resample ( VARIANT_BOOL Trim, int SampleHeight, int SampleWidth, long VideoFrameRate, long AudioSamplingRate, long VideoBitRate );
__declspec(implementation_key(1979)) HRESULT MediaFormat::ResampleFromProfile ( enum PpResampleMediaProfile profile );
__declspec(implementation_key(1980)) enum PpMediaTaskStatus MediaFormat::GetResamplingStatus ( );
__declspec(implementation_key(1981)) VARIANT_BOOL MediaFormat::GetIsLinked ( );
__declspec(implementation_key(1982)) VARIANT_BOOL MediaFormat::GetIsEmbedded ( );
__declspec(implementation_key(1983)) long MediaFormat::GetAudioSamplingRate ( );
__declspec(implementation_key(1984)) long MediaFormat::GetVideoFrameRate ( );
__declspec(implementation_key(1985)) long MediaFormat::GetSampleHeight ( );
__declspec(implementation_key(1986)) long MediaFormat::GetSampleWidth ( );
__declspec(implementation_key(1987)) _bstr_t MediaFormat::GetVideoCompressionType ( );
__declspec(implementation_key(1988)) _bstr_t MediaFormat::GetAudioCompressionType ( );
__declspec(implementation_key(1989)) _ApplicationPtr Coauthoring::GetApplication ( );
__declspec(implementation_key(1990)) IDispatchPtr Coauthoring::GetParent ( );
__declspec(implementation_key(1991)) VARIANT_BOOL Coauthoring::GetMergeMode ( );
__declspec(implementation_key(1992)) VARIANT_BOOL Coauthoring::GetFavorServerEditsDuringMerge ( );
__declspec(implementation_key(1993)) void Coauthoring::PutFavorServerEditsDuringMerge ( VARIANT_BOOL FavorServerEditsDuringMerge );
__declspec(implementation_key(1994)) HRESULT Coauthoring::EndReview ( );
__declspec(implementation_key(1995)) VARIANT_BOOL Coauthoring::GetPendingUpdates ( );
__declspec(implementation_key(1996)) long Coauthoring::GetCoauthorCount ( );
__declspec(implementation_key(1997)) _ApplicationPtr Broadcast::GetApplication ( );
__declspec(implementation_key(1998)) IDispatchPtr Broadcast::GetParent ( );
__declspec(implementation_key(1999)) HRESULT Broadcast::Start ( _bstr_t serverUrl );
__declspec(implementation_key(2000)) HRESULT Broadcast::End ( );
__declspec(implementation_key(2001)) _bstr_t Broadcast::GetAttendeeUrl ( );
__declspec(implementation_key(2002)) VARIANT_BOOL Broadcast::GetIsBroadcasting ( );
__declspec(implementation_key(2003)) HRESULT Broadcast::Pause ( );
__declspec(implementation_key(2004)) HRESULT Broadcast::Resume ( );
__declspec(implementation_key(2005)) HRESULT Broadcast::AddMeetingNotes ( _bstr_t notesUrl, _bstr_t notesWacUrl );
__declspec(implementation_key(2006)) __missing_type__  Broadcast::GetState ( );
__declspec(implementation_key(2007)) long Broadcast::GetCapabilities ( );
__declspec(implementation_key(2008)) _bstr_t Broadcast::GetSessionID ( );
__declspec(implementation_key(2009)) _bstr_t Broadcast::GetPresenterServiceUrl ( );
__declspec(implementation_key(2010)) IDispatchPtr Point::GetParent ( );
__declspec(implementation_key(2011)) ChartBorderPtr Point::GetBorder ( );
__declspec(implementation_key(2012)) _variant_t Point::ClearFormats ( );
__declspec(implementation_key(2013)) _variant_t Point::Copy ( );
__declspec(implementation_key(2014)) DataLabelPtr Point::GetDataLabel ( );
__declspec(implementation_key(2015)) _variant_t Point::Delete ( );
__declspec(implementation_key(2016)) long Point::GetExplosion ( );
__declspec(implementation_key(2017)) void Point::PutExplosion ( long RHS );
__declspec(implementation_key(2018)) VARIANT_BOOL Point::GetHasDataLabel ( );
__declspec(implementation_key(2019)) void Point::PutHasDataLabel ( VARIANT_BOOL RHS );
__declspec(implementation_key(2020)) InteriorPtr Point::GetInterior ( );
__declspec(implementation_key(2021)) VARIANT_BOOL Point::GetInvertIfNegative ( );
__declspec(implementation_key(2022)) void Point::PutInvertIfNegative ( VARIANT_BOOL RHS );
__declspec(implementation_key(2023)) long Point::GetMarkerBackgroundColor ( );
__declspec(implementation_key(2024)) void Point::PutMarkerBackgroundColor ( long RHS );
__declspec(implementation_key(2025)) enum XlColorIndex Point::GetMarkerBackgroundColorIndex ( );
__declspec(implementation_key(2026)) void Point::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(2027)) long Point::GetMarkerForegroundColor ( );
__declspec(implementation_key(2028)) void Point::PutMarkerForegroundColor ( long RHS );
__declspec(implementation_key(2029)) enum XlColorIndex Point::GetMarkerForegroundColorIndex ( );
__declspec(implementation_key(2030)) void Point::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(2031)) long Point::GetMarkerSize ( );
__declspec(implementation_key(2032)) void Point::PutMarkerSize ( long RHS );
__declspec(implementation_key(2033)) enum XlMarkerStyle Point::GetMarkerStyle ( );
__declspec(implementation_key(2034)) void Point::PutMarkerStyle ( enum XlMarkerStyle RHS );
__declspec(implementation_key(2035)) _variant_t Point::Paste ( );
__declspec(implementation_key(2036)) enum XlChartPictureType Point::GetPictureType ( );
__declspec(implementation_key(2037)) void Point::PutPictureType ( enum XlChartPictureType RHS );
__declspec(implementation_key(2038)) _variant_t Point::Select ( );
__declspec(implementation_key(2039)) VARIANT_BOOL Point::GetApplyPictToSides ( );
__declspec(implementation_key(2040)) void Point::PutApplyPictToSides ( VARIANT_BOOL RHS );
__declspec(implementation_key(2041)) VARIANT_BOOL Point::GetApplyPictToFront ( );
__declspec(implementation_key(2042)) void Point::PutApplyPictToFront ( VARIANT_BOOL RHS );
__declspec(implementation_key(2043)) VARIANT_BOOL Point::GetApplyPictToEnd ( );
__declspec(implementation_key(2044)) void Point::PutApplyPictToEnd ( VARIANT_BOOL RHS );
__declspec(implementation_key(2045)) VARIANT_BOOL Point::GetShadow ( );
__declspec(implementation_key(2046)) void Point::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(2047)) VARIANT_BOOL Point::GetSecondaryPlot ( );
__declspec(implementation_key(2048)) void Point::PutSecondaryPlot ( VARIANT_BOOL RHS );
__declspec(implementation_key(2049)) ChartFillFormatPtr Point::GetFill ( );
__declspec(implementation_key(2050)) VARIANT_BOOL Point::GetHas3DEffect ( );
__declspec(implementation_key(2051)) void Point::PutHas3DEffect ( VARIANT_BOOL RHS );
__declspec(implementation_key(2052)) ChartFormatPtr Point::GetFormat ( );
__declspec(implementation_key(2053)) long Point::GetCreator ( );
__declspec(implementation_key(2054)) double Point::GetPictureUnit2 ( );
__declspec(implementation_key(2055)) void Point::PutPictureUnit2 ( double RHS );
__declspec(implementation_key(2056)) _ApplicationPtr Point::GetApplication ( );
__declspec(implementation_key(2057)) _variant_t Point::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines );
__declspec(implementation_key(2058)) _variant_t Point::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator );
__declspec(implementation_key(2059)) long Point::GetPictureUnit ( );
__declspec(implementation_key(2060)) void Point::PutPictureUnit ( long RHS );
__declspec(implementation_key(2061)) _bstr_t Point::GetName ( );
__declspec(implementation_key(2062)) double Point::GetHeight ( );
__declspec(implementation_key(2063)) double Point::GetWidth ( );
__declspec(implementation_key(2064)) double Point::GetLeft ( );
__declspec(implementation_key(2065)) double Point::GetTop ( );
__declspec(implementation_key(2066)) double Point::PieSliceLocation ( enum XlPieSliceLocation loc, enum XlPieSliceIndex Index );
__declspec(implementation_key(2067)) VARIANT_BOOL Point::GetIsTotal ( );
__declspec(implementation_key(2068)) void Point::PutIsTotal ( VARIANT_BOOL pval );
__declspec(implementation_key(2069)) IDispatchPtr Points::GetParent ( );
__declspec(implementation_key(2070)) long Points::GetCount ( );
__declspec(implementation_key(2071)) PointPtr Points::Item ( long Index );
__declspec(implementation_key(2072)) IUnknownPtr Points::_NewEnum ( );
__declspec(implementation_key(2073)) long Points::GetCreator ( );
__declspec(implementation_key(2074)) _ApplicationPtr Points::GetApplication ( );
__declspec(implementation_key(2075)) PointPtr Points::_Default ( long Index );
__declspec(implementation_key(2076)) _ApplicationPtr ProtectedViewWindow::GetApplication ( );
__declspec(implementation_key(2077)) IDispatchPtr ProtectedViewWindow::GetParent ( );
__declspec(implementation_key(2078)) _PresentationPtr ProtectedViewWindow::GetPresentation ( );
__declspec(implementation_key(2079)) __missing_type__  ProtectedViewWindow::GetActive ( );
__declspec(implementation_key(2080)) enum PpWindowState ProtectedViewWindow::GetWindowState ( );
__declspec(implementation_key(2081)) void ProtectedViewWindow::PutWindowState ( enum PpWindowState WindowState );
__declspec(implementation_key(2082)) _bstr_t ProtectedViewWindow::GetCaption ( );
__declspec(implementation_key(2083)) _bstr_t ProtectedViewWindow::GetSourcePath ( );
__declspec(implementation_key(2084)) _bstr_t ProtectedViewWindow::GetSourceName ( );
__declspec(implementation_key(2085)) float ProtectedViewWindow::GetLeft ( );
__declspec(implementation_key(2086)) void ProtectedViewWindow::PutLeft ( float Left );
__declspec(implementation_key(2087)) float ProtectedViewWindow::GetTop ( );
__declspec(implementation_key(2088)) void ProtectedViewWindow::PutTop ( float Top );
__declspec(implementation_key(2089)) float ProtectedViewWindow::GetWidth ( );
__declspec(implementation_key(2090)) void ProtectedViewWindow::PutWidth ( float Width );
__declspec(implementation_key(2091)) float ProtectedViewWindow::GetHeight ( );
__declspec(implementation_key(2092)) void ProtectedViewWindow::PutHeight ( float Height );
__declspec(implementation_key(2093)) HRESULT ProtectedViewWindow::Activate ( );
__declspec(implementation_key(2094)) HRESULT ProtectedViewWindow::Close ( );
__declspec(implementation_key(2095)) _PresentationPtr ProtectedViewWindow::Edit ( _bstr_t ModifyPassword );
__declspec(implementation_key(2096)) long ProtectedViewWindow::GetHWND ( );
__declspec(implementation_key(2097)) _ApplicationPtr ProtectedViewWindows::GetApplication ( );
__declspec(implementation_key(2098)) IDispatchPtr ProtectedViewWindows::GetParent ( );
__declspec(implementation_key(2099)) ProtectedViewWindowPtr ProtectedViewWindows::Item ( int Index );
__declspec(implementation_key(2100)) ProtectedViewWindowPtr ProtectedViewWindows::Open ( _bstr_t FileName, _bstr_t ReadPassword, __missing_type__ OpenAndRepair );
__declspec(implementation_key(2101)) IDispatchPtr ChartCategory::GetParent ( );
__declspec(implementation_key(2102)) _bstr_t ChartCategory::GetName ( );
__declspec(implementation_key(2103)) VARIANT_BOOL ChartCategory::GetIsFiltered ( );
__declspec(implementation_key(2104)) void ChartCategory::PutIsFiltered ( VARIANT_BOOL pfIsFiltered );
__declspec(implementation_key(2105)) IDispatchPtr CategoryCollection::GetParent ( );
__declspec(implementation_key(2106)) long CategoryCollection::GetCount ( );
__declspec(implementation_key(2107)) ChartCategoryPtr CategoryCollection::Item ( const _variant_t & Index );
__declspec(implementation_key(2108)) _ApplicationPtr CategoryCollection::GetApplication ( );
__declspec(implementation_key(2109)) long CategoryCollection::GetCreator ( );
__declspec(implementation_key(2110)) ChartCategoryPtr CategoryCollection::_Default ( const _variant_t & Index );
__declspec(implementation_key(2111)) _ApplicationPtr ThemeVariant::GetApplication ( );
__declspec(implementation_key(2112)) IDispatchPtr ThemeVariant::GetParent ( );
__declspec(implementation_key(2113)) _bstr_t ThemeVariant::GetName ( );
__declspec(implementation_key(2114)) long ThemeVariant::GetWidth ( );
__declspec(implementation_key(2115)) long ThemeVariant::GetHeight ( );
__declspec(implementation_key(2116)) _bstr_t ThemeVariant::GetId ( );
__declspec(implementation_key(2117)) _ApplicationPtr ThemeVariants::GetApplication ( );
__declspec(implementation_key(2118)) IDispatchPtr ThemeVariants::GetParent ( );
__declspec(implementation_key(2119)) ThemeVariantPtr ThemeVariants::Item ( int Index );
__declspec(implementation_key(2120)) _ApplicationPtr Theme::GetApplication ( );
__declspec(implementation_key(2121)) IDispatchPtr Theme::GetParent ( );
__declspec(implementation_key(2122)) ThemeVariantsPtr Theme::GetThemeVariants ( );
__declspec(implementation_key(2123)) _ApplicationPtr SlideNavigation::GetApplication ( );
__declspec(implementation_key(2124)) IDispatchPtr SlideNavigation::GetParent ( );
__declspec(implementation_key(2125)) VARIANT_BOOL SlideNavigation::GetVisible ( );
__declspec(implementation_key(2126)) void SlideNavigation::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(2127)) _ApplicationPtr SlideShowWindow::GetApplication ( );
__declspec(implementation_key(2128)) IDispatchPtr SlideShowWindow::GetParent ( );
__declspec(implementation_key(2129)) SlideShowViewPtr SlideShowWindow::GetView ( );
__declspec(implementation_key(2130)) _PresentationPtr SlideShowWindow::GetPresentation ( );
__declspec(implementation_key(2131)) __missing_type__  SlideShowWindow::GetIsFullScreen ( );
__declspec(implementation_key(2132)) float SlideShowWindow::GetLeft ( );
__declspec(implementation_key(2133)) void SlideShowWindow::PutLeft ( float Left );
__declspec(implementation_key(2134)) float SlideShowWindow::GetTop ( );
__declspec(implementation_key(2135)) void SlideShowWindow::PutTop ( float Top );
__declspec(implementation_key(2136)) float SlideShowWindow::GetWidth ( );
__declspec(implementation_key(2137)) void SlideShowWindow::PutWidth ( float Width );
__declspec(implementation_key(2138)) float SlideShowWindow::GetHeight ( );
__declspec(implementation_key(2139)) void SlideShowWindow::PutHeight ( float Height );
__declspec(implementation_key(2140)) long SlideShowWindow::GetHWND ( );
__declspec(implementation_key(2141)) __missing_type__  SlideShowWindow::GetActive ( );
__declspec(implementation_key(2142)) HRESULT SlideShowWindow::Activate ( );
__declspec(implementation_key(2143)) SlideNavigationPtr SlideShowWindow::GetSlideNavigation ( );
__declspec(implementation_key(2144)) _ApplicationPtr SlideShowWindows::GetApplication ( );
__declspec(implementation_key(2145)) IDispatchPtr SlideShowWindows::GetParent ( );
__declspec(implementation_key(2146)) SlideShowWindowPtr SlideShowWindows::Item ( int Index );
__declspec(implementation_key(2147)) _ApplicationPtr SlideShowSettings::GetApplication ( );
__declspec(implementation_key(2148)) IDispatchPtr SlideShowSettings::GetParent ( );
__declspec(implementation_key(2149)) ColorFormatPtr SlideShowSettings::GetPointerColor ( );
__declspec(implementation_key(2150)) NamedSlideShowsPtr SlideShowSettings::GetNamedSlideShows ( );
__declspec(implementation_key(2151)) int SlideShowSettings::GetStartingSlide ( );
__declspec(implementation_key(2152)) void SlideShowSettings::PutStartingSlide ( int StartingSlide );
__declspec(implementation_key(2153)) int SlideShowSettings::GetEndingSlide ( );
__declspec(implementation_key(2154)) void SlideShowSettings::PutEndingSlide ( int EndingSlide );
__declspec(implementation_key(2155)) enum PpSlideShowAdvanceMode SlideShowSettings::GetAdvanceMode ( );
__declspec(implementation_key(2156)) void SlideShowSettings::PutAdvanceMode ( enum PpSlideShowAdvanceMode AdvanceMode );
__declspec(implementation_key(2157)) SlideShowWindowPtr SlideShowSettings::Run ( );
__declspec(implementation_key(2158)) __missing_type__  SlideShowSettings::GetLoopUntilStopped ( );
__declspec(implementation_key(2159)) void SlideShowSettings::PutLoopUntilStopped ( __missing_type__ LoopUntilStopped );
__declspec(implementation_key(2160)) enum PpSlideShowType SlideShowSettings::GetShowType ( );
__declspec(implementation_key(2161)) void SlideShowSettings::PutShowType ( enum PpSlideShowType ShowType );
__declspec(implementation_key(2162)) __missing_type__  SlideShowSettings::GetShowWithNarration ( );
__declspec(implementation_key(2163)) void SlideShowSettings::PutShowWithNarration ( __missing_type__ ShowWithNarration );
__declspec(implementation_key(2164)) __missing_type__  SlideShowSettings::GetShowWithAnimation ( );
__declspec(implementation_key(2165)) void SlideShowSettings::PutShowWithAnimation ( __missing_type__ ShowWithAnimation );
__declspec(implementation_key(2166)) _bstr_t SlideShowSettings::GetSlideShowName ( );
__declspec(implementation_key(2167)) void SlideShowSettings::PutSlideShowName ( _bstr_t SlideShowName );
__declspec(implementation_key(2168)) enum PpSlideShowRangeType SlideShowSettings::GetRangeType ( );
__declspec(implementation_key(2169)) void SlideShowSettings::PutRangeType ( enum PpSlideShowRangeType RangeType );
__declspec(implementation_key(2170)) __missing_type__  SlideShowSettings::GetShowScrollbar ( );
__declspec(implementation_key(2171)) void SlideShowSettings::PutShowScrollbar ( __missing_type__ ShowScrollbar );
__declspec(implementation_key(2172)) __missing_type__  SlideShowSettings::GetShowPresenterView ( );
__declspec(implementation_key(2173)) void SlideShowSettings::PutShowPresenterView ( __missing_type__ ShowPresenterView );
__declspec(implementation_key(2174)) __missing_type__  SlideShowSettings::GetShowMediaControls ( );
__declspec(implementation_key(2175)) void SlideShowSettings::PutShowMediaControls ( __missing_type__ ShowMediaControls );
__declspec(implementation_key(2176)) _ApplicationPtr Guide::GetApplication ( );
__declspec(implementation_key(2177)) IDispatchPtr Guide::GetParent ( );
__declspec(implementation_key(2178)) HRESULT Guide::Delete ( );
__declspec(implementation_key(2179)) enum PpGuideOrientation Guide::GetOrientation ( );
__declspec(implementation_key(2180)) float Guide::GetPosition ( );
__declspec(implementation_key(2181)) void Guide::PutPosition ( float Position );
__declspec(implementation_key(2182)) ColorFormatPtr Guide::GetColor ( );
__declspec(implementation_key(2183)) _ApplicationPtr Guides::GetApplication ( );
__declspec(implementation_key(2184)) IDispatchPtr Guides::GetParent ( );
__declspec(implementation_key(2185)) GuidePtr Guides::Item ( int Index );
__declspec(implementation_key(2186)) GuidePtr Guides::Add ( enum PpGuideOrientation Orientation, float Position );
__declspec(implementation_key(2187)) IDispatchPtr Series::GetParent ( );
__declspec(implementation_key(2188)) enum XlAxisGroup Series::GetAxisGroup ( );
__declspec(implementation_key(2189)) void Series::PutAxisGroup ( enum XlAxisGroup RHS );
__declspec(implementation_key(2190)) ChartBorderPtr Series::GetBorder ( );
__declspec(implementation_key(2191)) _variant_t Series::ClearFormats ( );
__declspec(implementation_key(2192)) _variant_t Series::Copy ( );
__declspec(implementation_key(2193)) IDispatchPtr Series::DataLabels ( const _variant_t & Index );
__declspec(implementation_key(2194)) _variant_t Series::Delete ( );
__declspec(implementation_key(2195)) _variant_t Series::ErrorBar ( enum XlErrorBarDirection Direction, enum XlErrorBarInclude Include, enum XlErrorBarType Type, const _variant_t & Amount, const _variant_t & MinusValues );
__declspec(implementation_key(2196)) ErrorBarsPtr Series::GetErrorBars ( );
__declspec(implementation_key(2197)) long Series::GetExplosion ( );
__declspec(implementation_key(2198)) void Series::PutExplosion ( long RHS );
__declspec(implementation_key(2199)) _bstr_t Series::GetFormula ( );
__declspec(implementation_key(2200)) void Series::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(2201)) _bstr_t Series::GetFormulaLocal ( );
__declspec(implementation_key(2202)) void Series::PutFormulaLocal ( _bstr_t RHS );
__declspec(implementation_key(2203)) _bstr_t Series::GetFormulaR1C1 ( );
__declspec(implementation_key(2204)) void Series::PutFormulaR1C1 ( _bstr_t RHS );
__declspec(implementation_key(2205)) _bstr_t Series::GetFormulaR1C1Local ( );
__declspec(implementation_key(2206)) void Series::PutFormulaR1C1Local ( _bstr_t RHS );
__declspec(implementation_key(2207)) VARIANT_BOOL Series::GetHasDataLabels ( );
__declspec(implementation_key(2208)) void Series::PutHasDataLabels ( VARIANT_BOOL RHS );
__declspec(implementation_key(2209)) VARIANT_BOOL Series::GetHasErrorBars ( );
__declspec(implementation_key(2210)) void Series::PutHasErrorBars ( VARIANT_BOOL RHS );
__declspec(implementation_key(2211)) InteriorPtr Series::GetInterior ( );
__declspec(implementation_key(2212)) ChartFillFormatPtr Series::GetFill ( );
__declspec(implementation_key(2213)) VARIANT_BOOL Series::GetInvertIfNegative ( );
__declspec(implementation_key(2214)) void Series::PutInvertIfNegative ( VARIANT_BOOL RHS );
__declspec(implementation_key(2215)) long Series::GetMarkerBackgroundColor ( );
__declspec(implementation_key(2216)) void Series::PutMarkerBackgroundColor ( long RHS );
__declspec(implementation_key(2217)) enum XlColorIndex Series::GetMarkerBackgroundColorIndex ( );
__declspec(implementation_key(2218)) void Series::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(2219)) long Series::GetMarkerForegroundColor ( );
__declspec(implementation_key(2220)) void Series::PutMarkerForegroundColor ( long RHS );
__declspec(implementation_key(2221)) enum XlColorIndex Series::GetMarkerForegroundColorIndex ( );
__declspec(implementation_key(2222)) void Series::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(2223)) long Series::GetMarkerSize ( );
__declspec(implementation_key(2224)) void Series::PutMarkerSize ( long RHS );
__declspec(implementation_key(2225)) enum XlMarkerStyle Series::GetMarkerStyle ( );
__declspec(implementation_key(2226)) void Series::PutMarkerStyle ( enum XlMarkerStyle RHS );
__declspec(implementation_key(2227)) _bstr_t Series::GetName ( );
__declspec(implementation_key(2228)) void Series::PutName ( _bstr_t RHS );
__declspec(implementation_key(2229)) _variant_t Series::Paste ( );
__declspec(implementation_key(2230)) enum XlChartPictureType Series::GetPictureType ( );
__declspec(implementation_key(2231)) void Series::PutPictureType ( enum XlChartPictureType RHS );
__declspec(implementation_key(2232)) long Series::GetPlotOrder ( );
__declspec(implementation_key(2233)) void Series::PutPlotOrder ( long RHS );
__declspec(implementation_key(2234)) IDispatchPtr Series::Points ( const _variant_t & Index );
__declspec(implementation_key(2235)) _variant_t Series::Select ( );
__declspec(implementation_key(2236)) VARIANT_BOOL Series::GetSmooth ( );
__declspec(implementation_key(2237)) void Series::PutSmooth ( VARIANT_BOOL RHS );
__declspec(implementation_key(2238)) IDispatchPtr Series::Trendlines ( const _variant_t & Index );
__declspec(implementation_key(2239)) long Series::GetType ( );
__declspec(implementation_key(2240)) void Series::PutType ( long RHS );
__declspec(implementation_key(2241)) __missing_type__  Series::GetChartType ( );
__declspec(implementation_key(2242)) void Series::PutChartType ( __missing_type__ RHS );
__declspec(implementation_key(2243)) HRESULT Series::ApplyCustomType ( __missing_type__ ChartType );
__declspec(implementation_key(2244)) _variant_t Series::GetValues ( );
__declspec(implementation_key(2245)) void Series::PutValues ( const _variant_t & RHS );
__declspec(implementation_key(2246)) _variant_t Series::GetXValues ( );
__declspec(implementation_key(2247)) void Series::PutXValues ( const _variant_t & RHS );
__declspec(implementation_key(2248)) _variant_t Series::GetBubbleSizes ( );
__declspec(implementation_key(2249)) void Series::PutBubbleSizes ( const _variant_t & RHS );
__declspec(implementation_key(2250)) enum XlBarShape Series::GetBarShape ( );
__declspec(implementation_key(2251)) void Series::PutBarShape ( enum XlBarShape RHS );
__declspec(implementation_key(2252)) VARIANT_BOOL Series::GetApplyPictToSides ( );
__declspec(implementation_key(2253)) void Series::PutApplyPictToSides ( VARIANT_BOOL RHS );
__declspec(implementation_key(2254)) VARIANT_BOOL Series::GetApplyPictToFront ( );
__declspec(implementation_key(2255)) void Series::PutApplyPictToFront ( VARIANT_BOOL RHS );
__declspec(implementation_key(2256)) VARIANT_BOOL Series::GetApplyPictToEnd ( );
__declspec(implementation_key(2257)) void Series::PutApplyPictToEnd ( VARIANT_BOOL RHS );
__declspec(implementation_key(2258)) VARIANT_BOOL Series::GetHas3DEffect ( );
__declspec(implementation_key(2259)) void Series::PutHas3DEffect ( VARIANT_BOOL RHS );
__declspec(implementation_key(2260)) VARIANT_BOOL Series::GetShadow ( );
__declspec(implementation_key(2261)) void Series::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(2262)) VARIANT_BOOL Series::GetHasLeaderLines ( );
__declspec(implementation_key(2263)) void Series::PutHasLeaderLines ( VARIANT_BOOL RHS );
__declspec(implementation_key(2264)) LeaderLinesPtr Series::GetLeaderLines ( );
__declspec(implementation_key(2265)) ChartFormatPtr Series::GetFormat ( );
__declspec(implementation_key(2266)) long Series::GetCreator ( );
__declspec(implementation_key(2267)) double Series::GetPictureUnit2 ( );
__declspec(implementation_key(2268)) void Series::PutPictureUnit2 ( double RHS );
__declspec(implementation_key(2269)) _ApplicationPtr Series::GetApplication ( );
__declspec(implementation_key(2270)) _variant_t Series::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines );
__declspec(implementation_key(2271)) _variant_t Series::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator );
__declspec(implementation_key(2272)) long Series::GetPictureUnit ( );
__declspec(implementation_key(2273)) void Series::PutPictureUnit ( long RHS );
__declspec(implementation_key(2274)) long Series::GetPlotColorIndex ( );
__declspec(implementation_key(2275)) long Series::GetInvertColor ( );
__declspec(implementation_key(2276)) void Series::PutInvertColor ( long RHS );
__declspec(implementation_key(2277)) enum XlColorIndex Series::GetInvertColorIndex ( );
__declspec(implementation_key(2278)) void Series::PutInvertColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(2279)) VARIANT_BOOL Series::GetIsFiltered ( );
__declspec(implementation_key(2280)) void Series::PutIsFiltered ( VARIANT_BOOL RHS );
__declspec(implementation_key(2281)) enum XlParentDataLabelOptions Series::GetParentDataLabelOption ( );
__declspec(implementation_key(2282)) void Series::PutParentDataLabelOption ( enum XlParentDataLabelOptions RHS );
__declspec(implementation_key(2283)) VARIANT_BOOL Series::GetQuartileCalculationInclusiveMedian ( );
__declspec(implementation_key(2284)) void Series::PutQuartileCalculationInclusiveMedian ( VARIANT_BOOL RHS );
__declspec(implementation_key(2285)) IDispatchPtr SeriesCollection::GetParent ( );
__declspec(implementation_key(2286)) long SeriesCollection::GetCount ( );
__declspec(implementation_key(2287)) _variant_t SeriesCollection::Extend ( const _variant_t & Source, const _variant_t & Rowcol, const _variant_t & CategoryLabels );
__declspec(implementation_key(2288)) SeriesPtr SeriesCollection::Item ( const _variant_t & Index );
__declspec(implementation_key(2289)) IUnknownPtr SeriesCollection::_NewEnum ( );
__declspec(implementation_key(2290)) SeriesPtr SeriesCollection::NewSeries ( );
__declspec(implementation_key(2291)) long SeriesCollection::GetCreator ( );
__declspec(implementation_key(2292)) _ApplicationPtr SeriesCollection::GetApplication ( );
__declspec(implementation_key(2293)) SeriesPtr SeriesCollection::Add ( const _variant_t & Source, enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace );
__declspec(implementation_key(2294)) SeriesPtr SeriesCollection::_Default ( const _variant_t & Index );
__declspec(implementation_key(2295)) IDispatchPtr FullSeriesCollection::GetParent ( );
__declspec(implementation_key(2296)) long FullSeriesCollection::GetCount ( );
__declspec(implementation_key(2297)) SeriesPtr FullSeriesCollection::Item ( const _variant_t & Index );
__declspec(implementation_key(2298)) IUnknownPtr FullSeriesCollection::_NewEnum ( );
__declspec(implementation_key(2299)) _ApplicationPtr FullSeriesCollection::GetApplication ( );
__declspec(implementation_key(2300)) long FullSeriesCollection::GetCreator ( );
__declspec(implementation_key(2301)) SeriesPtr FullSeriesCollection::_Default ( const _variant_t & Index );
__declspec(implementation_key(2302)) DownBarsPtr ChartGroup::GetDownBars ( );
__declspec(implementation_key(2303)) DropLinesPtr ChartGroup::GetDropLines ( );
__declspec(implementation_key(2304)) void ChartGroup::PutHasDropLines ( VARIANT_BOOL RHS );
__declspec(implementation_key(2305)) VARIANT_BOOL ChartGroup::GetHasDropLines ( );
__declspec(implementation_key(2306)) void ChartGroup::PutHasHiLoLines ( VARIANT_BOOL RHS );
__declspec(implementation_key(2307)) VARIANT_BOOL ChartGroup::GetHasHiLoLines ( );
__declspec(implementation_key(2308)) void ChartGroup::PutHasRadarAxisLabels ( VARIANT_BOOL RHS );
__declspec(implementation_key(2309)) VARIANT_BOOL ChartGroup::GetHasRadarAxisLabels ( );
__declspec(implementation_key(2310)) void ChartGroup::PutHasSeriesLines ( VARIANT_BOOL RHS );
__declspec(implementation_key(2311)) VARIANT_BOOL ChartGroup::GetHasSeriesLines ( );
__declspec(implementation_key(2312)) void ChartGroup::PutHasUpDownBars ( VARIANT_BOOL RHS );
__declspec(implementation_key(2313)) VARIANT_BOOL ChartGroup::GetHasUpDownBars ( );
__declspec(implementation_key(2314)) HiLoLinesPtr ChartGroup::GetHiLoLines ( );
__declspec(implementation_key(2315)) IDispatchPtr ChartGroup::SeriesCollection ( const _variant_t & Index );
__declspec(implementation_key(2316)) SeriesLinesPtr ChartGroup::GetSeriesLines ( );
__declspec(implementation_key(2317)) UpBarsPtr ChartGroup::GetUpBars ( );
__declspec(implementation_key(2318)) void ChartGroup::PutVaryByCategories ( VARIANT_BOOL RHS );
__declspec(implementation_key(2319)) VARIANT_BOOL ChartGroup::GetVaryByCategories ( );
__declspec(implementation_key(2320)) enum XlSizeRepresents ChartGroup::GetSizeRepresents ( );
__declspec(implementation_key(2321)) void ChartGroup::PutSizeRepresents ( enum XlSizeRepresents RHS );
__declspec(implementation_key(2322)) void ChartGroup::PutShowNegativeBubbles ( VARIANT_BOOL RHS );
__declspec(implementation_key(2323)) VARIANT_BOOL ChartGroup::GetShowNegativeBubbles ( );
__declspec(implementation_key(2324)) void ChartGroup::PutSplitType ( enum XlChartSplitType RHS );
__declspec(implementation_key(2325)) enum XlChartSplitType ChartGroup::GetSplitType ( );
__declspec(implementation_key(2326)) _variant_t ChartGroup::GetSplitValue ( );
__declspec(implementation_key(2327)) void ChartGroup::PutSplitValue ( const _variant_t & RHS );
__declspec(implementation_key(2328)) VARIANT_BOOL ChartGroup::GetHas3DShading ( );
__declspec(implementation_key(2329)) void ChartGroup::PutHas3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(2330)) long ChartGroup::GetCreator ( );
__declspec(implementation_key(2331)) IDispatchPtr ChartGroup::GetParent ( );
__declspec(implementation_key(2332)) _ApplicationPtr ChartGroup::GetApplication ( );
__declspec(implementation_key(2333)) enum XlAxisGroup ChartGroup::GetAxisGroup ( );
__declspec(implementation_key(2334)) void ChartGroup::PutAxisGroup ( enum XlAxisGroup RHS );
__declspec(implementation_key(2335)) long ChartGroup::GetBubbleScale ( );
__declspec(implementation_key(2336)) void ChartGroup::PutBubbleScale ( long RHS );
__declspec(implementation_key(2337)) long ChartGroup::GetDoughnutHoleSize ( );
__declspec(implementation_key(2338)) void ChartGroup::PutDoughnutHoleSize ( long RHS );
__declspec(implementation_key(2339)) long ChartGroup::GetFirstSliceAngle ( );
__declspec(implementation_key(2340)) void ChartGroup::PutFirstSliceAngle ( long RHS );
__declspec(implementation_key(2341)) long ChartGroup::GetGapWidth ( );
__declspec(implementation_key(2342)) void ChartGroup::PutGapWidth ( long RHS );
__declspec(implementation_key(2343)) long ChartGroup::GetIndex ( );
__declspec(implementation_key(2344)) long ChartGroup::GetOverlap ( );
__declspec(implementation_key(2345)) void ChartGroup::PutOverlap ( long RHS );
__declspec(implementation_key(2346)) TickLabelsPtr ChartGroup::GetRadarAxisLabels ( );
__declspec(implementation_key(2347)) long ChartGroup::GetSubtype ( );
__declspec(implementation_key(2348)) void ChartGroup::PutSubtype ( long RHS );
__declspec(implementation_key(2349)) long ChartGroup::GetType ( );
__declspec(implementation_key(2350)) void ChartGroup::PutType ( long RHS );
__declspec(implementation_key(2351)) long ChartGroup::GetSecondPlotSize ( );
__declspec(implementation_key(2352)) void ChartGroup::PutSecondPlotSize ( long RHS );
__declspec(implementation_key(2353)) IDispatchPtr ChartGroup::CategoryCollection ( const _variant_t & Index );
__declspec(implementation_key(2354)) IDispatchPtr ChartGroup::FullCategoryCollection ( const _variant_t & Index );
__declspec(implementation_key(2355)) enum XlBinsType ChartGroup::GetBinsType ( );
__declspec(implementation_key(2356)) void ChartGroup::PutBinsType ( enum XlBinsType RHS );
__declspec(implementation_key(2357)) double ChartGroup::GetBinWidthValue ( );
__declspec(implementation_key(2358)) void ChartGroup::PutBinWidthValue ( double pval );
__declspec(implementation_key(2359)) int ChartGroup::GetBinsCountValue ( );
__declspec(implementation_key(2360)) void ChartGroup::PutBinsCountValue ( int pval );
__declspec(implementation_key(2361)) VARIANT_BOOL ChartGroup::GetBinsOverflowEnabled ( );
__declspec(implementation_key(2362)) void ChartGroup::PutBinsOverflowEnabled ( VARIANT_BOOL pval );
__declspec(implementation_key(2363)) double ChartGroup::GetBinsOverflowValue ( );
__declspec(implementation_key(2364)) void ChartGroup::PutBinsOverflowValue ( double pval );
__declspec(implementation_key(2365)) VARIANT_BOOL ChartGroup::GetBinsUnderflowEnabled ( );
__declspec(implementation_key(2366)) void ChartGroup::PutBinsUnderflowEnabled ( VARIANT_BOOL pval );
__declspec(implementation_key(2367)) double ChartGroup::GetBinsUnderflowValue ( );
__declspec(implementation_key(2368)) void ChartGroup::PutBinsUnderflowValue ( double pval );
__declspec(implementation_key(2369)) IDispatchPtr ChartGroups::GetParent ( );
__declspec(implementation_key(2370)) long ChartGroups::GetCount ( );
__declspec(implementation_key(2371)) ChartGroupPtr ChartGroups::Item ( const _variant_t & Index );
__declspec(implementation_key(2372)) IUnknownPtr ChartGroups::_NewEnum ( );
__declspec(implementation_key(2373)) long ChartGroups::GetCreator ( );
__declspec(implementation_key(2374)) _ApplicationPtr ChartGroups::GetApplication ( );
__declspec(implementation_key(2375)) PresentationsPtr _Application::GetPresentations ( );
__declspec(implementation_key(2376)) DocumentWindowsPtr _Application::GetWindows ( );
__declspec(implementation_key(2377)) IUnknownPtr _Application::GetDialogs ( );
__declspec(implementation_key(2378)) DocumentWindowPtr _Application::GetActiveWindow ( );
__declspec(implementation_key(2379)) _PresentationPtr _Application::GetActivePresentation ( );
__declspec(implementation_key(2380)) SlideShowWindowsPtr _Application::GetSlideShowWindows ( );
__declspec(implementation_key(2381)) __missing_type__ _Application::GetCommandBars ( );
__declspec(implementation_key(2382)) _bstr_t _Application::GetPath ( );
__declspec(implementation_key(2383)) _bstr_t _Application::GetName ( );
__declspec(implementation_key(2384)) _bstr_t _Application::GetCaption ( );
__declspec(implementation_key(2385)) void _Application::PutCaption ( _bstr_t Caption );
__declspec(implementation_key(2386)) __missing_type__ _Application::GetAssistant ( );
__declspec(implementation_key(2387)) __missing_type__ _Application::GetFileSearch ( );
__declspec(implementation_key(2388)) __missing_type__ _Application::GetFileFind ( );
__declspec(implementation_key(2389)) _bstr_t _Application::GetBuild ( );
__declspec(implementation_key(2390)) _bstr_t _Application::GetVersion ( );
__declspec(implementation_key(2391)) _bstr_t _Application::GetOperatingSystem ( );
__declspec(implementation_key(2392)) _bstr_t _Application::GetActivePrinter ( );
__declspec(implementation_key(2393)) long _Application::GetCreator ( );
__declspec(implementation_key(2394)) AddInsPtr _Application::GetAddIns ( );
__declspec(implementation_key(2395)) VBEPtr _Application::GetVBE ( );
__declspec(implementation_key(2396)) HRESULT _Application::Help ( _bstr_t HelpFile, int ContextID );
__declspec(implementation_key(2397)) HRESULT _Application::Quit ( );
__declspec(implementation_key(2398)) _variant_t _Application::Run ( _bstr_t MacroName, SAFEARRAY * * safeArrayOfParams );
__declspec(implementation_key(2399)) IUnknownPtr _Application::PPFileDialog ( enum PpFileDialogType Type );
__declspec(implementation_key(2400)) HRESULT _Application::LaunchSpelling ( struct DocumentWindow * pWindow );
__declspec(implementation_key(2401)) float _Application::GetLeft ( );
__declspec(implementation_key(2402)) void _Application::PutLeft ( float Left );
__declspec(implementation_key(2403)) float _Application::GetTop ( );
__declspec(implementation_key(2404)) void _Application::PutTop ( float Top );
__declspec(implementation_key(2405)) float _Application::GetWidth ( );
__declspec(implementation_key(2406)) void _Application::PutWidth ( float Width );
__declspec(implementation_key(2407)) float _Application::GetHeight ( );
__declspec(implementation_key(2408)) void _Application::PutHeight ( float Height );
__declspec(implementation_key(2409)) enum PpWindowState _Application::GetWindowState ( );
__declspec(implementation_key(2410)) void _Application::PutWindowState ( enum PpWindowState WindowState );
__declspec(implementation_key(2411)) __missing_type__  _Application::GetVisible ( );
__declspec(implementation_key(2412)) void _Application::PutVisible ( __missing_type__ Visible );
__declspec(implementation_key(2413)) long _Application::GetHWND ( );
__declspec(implementation_key(2414)) __missing_type__  _Application::GetActive ( );
__declspec(implementation_key(2415)) HRESULT _Application::Activate ( );
__declspec(implementation_key(2416)) __missing_type__ _Application::GetAnswerWizard ( );
__declspec(implementation_key(2417)) __missing_type__ _Application::GetCOMAddIns ( );
__declspec(implementation_key(2418)) _bstr_t _Application::GetProductCode ( );
__declspec(implementation_key(2419)) DefaultWebOptionsPtr _Application::GetDefaultWebOptions ( );
__declspec(implementation_key(2420)) __missing_type__ _Application::GetLanguageSettings ( );
__declspec(implementation_key(2421)) __missing_type__ _Application::GetMsoDebugOptions ( );
__declspec(implementation_key(2422)) __missing_type__  _Application::GetShowWindowsInTaskbar ( );
__declspec(implementation_key(2423)) void _Application::PutShowWindowsInTaskbar ( __missing_type__ ShowWindowsInTaskbar );
__declspec(implementation_key(2424)) IUnknownPtr _Application::GetMarker ( );
__declspec(implementation_key(2425)) __missing_type__  _Application::GetFeatureInstall ( );
__declspec(implementation_key(2426)) void _Application::PutFeatureInstall ( __missing_type__ FeatureInstall );
__declspec(implementation_key(2427)) VARIANT_BOOL _Application::GetOptionFlag ( long Option, VARIANT_BOOL Persist );
__declspec(implementation_key(2428)) HRESULT _Application::SetOptionFlag ( long Option, VARIANT_BOOL State, VARIANT_BOOL Persist );
__declspec(implementation_key(2429)) __missing_type__ _Application::GetFileDialog ( __missing_type__ Type );
__declspec(implementation_key(2430)) __missing_type__  _Application::GetDisplayGridLines ( );
__declspec(implementation_key(2431)) void _Application::PutDisplayGridLines ( __missing_type__ DisplayGridLines );
__declspec(implementation_key(2432)) __missing_type__  _Application::GetAutomationSecurity ( );
__declspec(implementation_key(2433)) void _Application::PutAutomationSecurity ( __missing_type__ AutomationSecurity );
__declspec(implementation_key(2434)) __missing_type__ _Application::GetNewPresentation ( );
__declspec(implementation_key(2435)) enum PpAlertLevel _Application::GetDisplayAlerts ( );
__declspec(implementation_key(2436)) void _Application::PutDisplayAlerts ( enum PpAlertLevel DisplayAlerts );
__declspec(implementation_key(2437)) __missing_type__  _Application::GetShowStartupDialog ( );
__declspec(implementation_key(2438)) void _Application::PutShowStartupDialog ( __missing_type__ ShowStartupDialog );
__declspec(implementation_key(2439)) HRESULT _Application::SetPerfMarker ( int Marker );
__declspec(implementation_key(2440)) AutoCorrectPtr _Application::GetAutoCorrect ( );
__declspec(implementation_key(2441)) OptionsPtr _Application::GetOptions ( );
__declspec(implementation_key(2442)) HRESULT _Application::LaunchPublishSlidesDialog ( _bstr_t SlideLibraryUrl );
__declspec(implementation_key(2443)) HRESULT _Application::LaunchSendToPPTDialog ( VARIANT * SlideUrls );
__declspec(implementation_key(2444)) VARIANT_BOOL _Application::GetDisplayDocumentInformationPanel ( );
__declspec(implementation_key(2445)) void _Application::PutDisplayDocumentInformationPanel ( VARIANT_BOOL DisplayDocumentInformationPanel );
__declspec(implementation_key(2446)) __missing_type__ _Application::GetAssistance ( );
__declspec(implementation_key(2447)) long _Application::GetActiveEncryptionSession ( );
__declspec(implementation_key(2448)) FileConvertersPtr _Application::GetFileConverters ( );
__declspec(implementation_key(2449)) __missing_type__ _Application::GetSmartArtLayouts ( );
__declspec(implementation_key(2450)) __missing_type__ _Application::GetSmartArtQuickStyles ( );
__declspec(implementation_key(2451)) __missing_type__ _Application::GetSmartArtColors ( );
__declspec(implementation_key(2452)) ProtectedViewWindowsPtr _Application::GetProtectedViewWindows ( );
__declspec(implementation_key(2453)) ProtectedViewWindowPtr _Application::GetActiveProtectedViewWindow ( );
__declspec(implementation_key(2454)) VARIANT_BOOL _Application::GetIsSandboxed ( );
__declspec(implementation_key(2455)) ResampleMediaTasksPtr _Application::GetResampleMediaTasks ( );
__declspec(implementation_key(2456)) HRESULT _Application::StartNewUndoEntry ( );
__declspec(implementation_key(2457)) __missing_type__  _Application::GetFileValidation ( );
__declspec(implementation_key(2458)) void _Application::PutFileValidation ( __missing_type__ FileValidation );
__declspec(implementation_key(2459)) ThemePtr _Application::OpenThemeFile ( _bstr_t themeFileName );
__declspec(implementation_key(2460)) VARIANT_BOOL _Application::GetChartDataPointTrack ( );
__declspec(implementation_key(2461)) void _Application::PutChartDataPointTrack ( VARIANT_BOOL pfChartDataPointTrack );
__declspec(implementation_key(2462)) __missing_type__  _Application::GetDisplayGuides ( );
__declspec(implementation_key(2463)) void _Application::PutDisplayGuides ( __missing_type__ DisplayGridLines );
__declspec(implementation_key(2464)) _PresentationPtr _Global::GetActivePresentation ( );
__declspec(implementation_key(2465)) DocumentWindowPtr _Global::GetActiveWindow ( );
__declspec(implementation_key(2466)) AddInsPtr _Global::GetAddIns ( );
__declspec(implementation_key(2467)) _ApplicationPtr _Global::GetApplication ( );
__declspec(implementation_key(2468)) __missing_type__ _Global::GetAssistant ( );
__declspec(implementation_key(2469)) IUnknownPtr _Global::GetDialogs ( );
__declspec(implementation_key(2470)) PresentationsPtr _Global::GetPresentations ( );
__declspec(implementation_key(2471)) SlideShowWindowsPtr _Global::GetSlideShowWindows ( );
__declspec(implementation_key(2472)) DocumentWindowsPtr _Global::GetWindows ( );
__declspec(implementation_key(2473)) __missing_type__ _Global::GetCommandBars ( );
__declspec(implementation_key(2474)) __missing_type__ _Global::GetAnswerWizard ( );
__declspec(implementation_key(2475)) FileConvertersPtr _Global::GetFileConverters ( );
__declspec(implementation_key(2476)) ProtectedViewWindowsPtr _Global::GetProtectedViewWindows ( );
__declspec(implementation_key(2477)) ProtectedViewWindowPtr _Global::GetActiveProtectedViewWindow ( );
__declspec(implementation_key(2478)) VARIANT_BOOL _Global::GetIsSandboxed ( );
__declspec(implementation_key(2479)) _ApplicationPtr Selection::GetApplication ( );
__declspec(implementation_key(2480)) IDispatchPtr Selection::GetParent ( );
__declspec(implementation_key(2481)) HRESULT Selection::Cut ( );
__declspec(implementation_key(2482)) HRESULT Selection::Copy ( );
__declspec(implementation_key(2483)) HRESULT Selection::Delete ( );
__declspec(implementation_key(2484)) HRESULT Selection::Unselect ( );
__declspec(implementation_key(2485)) enum PpSelectionType Selection::GetType ( );
__declspec(implementation_key(2486)) SlideRangePtr Selection::GetSlideRange ( );
__declspec(implementation_key(2487)) ShapeRangePtr Selection::GetShapeRange ( );
__declspec(implementation_key(2488)) TextRangePtr Selection::GetTextRange ( );
__declspec(implementation_key(2489)) ShapeRangePtr Selection::GetChildShapeRange ( );
__declspec(implementation_key(2490)) VARIANT_BOOL Selection::GetHasChildShapeRange ( );
__declspec(implementation_key(2491)) __missing_type__ Selection::GetTextRange2 ( );
__declspec(implementation_key(2492)) _ApplicationPtr DocumentWindow::GetApplication ( );
__declspec(implementation_key(2493)) IDispatchPtr DocumentWindow::GetParent ( );
__declspec(implementation_key(2494)) SelectionPtr DocumentWindow::GetSelection ( );
__declspec(implementation_key(2495)) ViewPtr DocumentWindow::GetView ( );
__declspec(implementation_key(2496)) _PresentationPtr DocumentWindow::GetPresentation ( );
__declspec(implementation_key(2497)) enum PpViewType DocumentWindow::GetViewType ( );
__declspec(implementation_key(2498)) void DocumentWindow::PutViewType ( enum PpViewType ViewType );
__declspec(implementation_key(2499)) __missing_type__  DocumentWindow::GetBlackAndWhite ( );
__declspec(implementation_key(2500)) void DocumentWindow::PutBlackAndWhite ( __missing_type__ BlackAndWhite );
__declspec(implementation_key(2501)) __missing_type__  DocumentWindow::GetActive ( );
__declspec(implementation_key(2502)) enum PpWindowState DocumentWindow::GetWindowState ( );
__declspec(implementation_key(2503)) void DocumentWindow::PutWindowState ( enum PpWindowState WindowState );
__declspec(implementation_key(2504)) _bstr_t DocumentWindow::GetCaption ( );
__declspec(implementation_key(2505)) float DocumentWindow::GetLeft ( );
__declspec(implementation_key(2506)) void DocumentWindow::PutLeft ( float Left );
__declspec(implementation_key(2507)) float DocumentWindow::GetTop ( );
__declspec(implementation_key(2508)) void DocumentWindow::PutTop ( float Top );
__declspec(implementation_key(2509)) float DocumentWindow::GetWidth ( );
__declspec(implementation_key(2510)) void DocumentWindow::PutWidth ( float Width );
__declspec(implementation_key(2511)) float DocumentWindow::GetHeight ( );
__declspec(implementation_key(2512)) void DocumentWindow::PutHeight ( float Height );
__declspec(implementation_key(2513)) HRESULT DocumentWindow::FitToPage ( );
__declspec(implementation_key(2514)) HRESULT DocumentWindow::Activate ( );
__declspec(implementation_key(2515)) HRESULT DocumentWindow::LargeScroll ( int Down, int Up, int ToRight, int ToLeft );
__declspec(implementation_key(2516)) HRESULT DocumentWindow::SmallScroll ( int Down, int Up, int ToRight, int ToLeft );
__declspec(implementation_key(2517)) DocumentWindowPtr DocumentWindow::NewWindow ( );
__declspec(implementation_key(2518)) HRESULT DocumentWindow::Close ( );
__declspec(implementation_key(2519)) long DocumentWindow::GetHWND ( );
__declspec(implementation_key(2520)) PanePtr DocumentWindow::GetActivePane ( );
__declspec(implementation_key(2521)) PanesPtr DocumentWindow::GetPanes ( );
__declspec(implementation_key(2522)) long DocumentWindow::GetSplitVertical ( );
__declspec(implementation_key(2523)) void DocumentWindow::PutSplitVertical ( long SplitVertical );
__declspec(implementation_key(2524)) long DocumentWindow::GetSplitHorizontal ( );
__declspec(implementation_key(2525)) void DocumentWindow::PutSplitHorizontal ( long SplitHorizontal );
__declspec(implementation_key(2526)) IDispatchPtr DocumentWindow::RangeFromPoint ( int X, int Y );
__declspec(implementation_key(2527)) int DocumentWindow::PointsToScreenPixelsX ( float Points );
__declspec(implementation_key(2528)) int DocumentWindow::PointsToScreenPixelsY ( float Points );
__declspec(implementation_key(2529)) HRESULT DocumentWindow::ScrollIntoView ( float Left, float Top, float Width, float Height, __missing_type__ Start );
__declspec(implementation_key(2530)) VARIANT_BOOL DocumentWindow::IsSectionExpanded ( int sectionIndex );
__declspec(implementation_key(2531)) HRESULT DocumentWindow::ExpandSection ( int sectionIndex, VARIANT_BOOL Expand );
__declspec(implementation_key(2532)) HRESULT DocumentWindow::ShowInsertAppDialog ( int Filter );
__declspec(implementation_key(2533)) _ApplicationPtr DocumentWindows::GetApplication ( );
__declspec(implementation_key(2534)) IDispatchPtr DocumentWindows::GetParent ( );
__declspec(implementation_key(2535)) DocumentWindowPtr DocumentWindows::Item ( int Index );
__declspec(implementation_key(2536)) HRESULT DocumentWindows::Arrange ( enum PpArrangeStyle arrangeStyle );
__declspec(implementation_key(2537)) _ApplicationPtr Slides::GetApplication ( );
__declspec(implementation_key(2538)) IDispatchPtr Slides::GetParent ( );
__declspec(implementation_key(2539)) _SlidePtr Slides::Item ( const _variant_t & Index );
__declspec(implementation_key(2540)) _SlidePtr Slides::FindBySlideID ( long SlideID );
__declspec(implementation_key(2541)) _SlidePtr Slides::Add ( int Index, enum PpSlideLayout Layout );
__declspec(implementation_key(2542)) int Slides::InsertFromFile ( _bstr_t FileName, int Index, int SlideStart, int SlideEnd );
__declspec(implementation_key(2543)) SlideRangePtr Slides::Range ( const _variant_t & Index );
__declspec(implementation_key(2544)) SlideRangePtr Slides::Paste ( int Index );
__declspec(implementation_key(2545)) _SlidePtr Slides::AddSlide ( int Index, struct CustomLayout * pCustomLayout );
__declspec(implementation_key(2546)) _ApplicationPtr _Slide::GetApplication ( );
__declspec(implementation_key(2547)) IDispatchPtr _Slide::GetParent ( );
__declspec(implementation_key(2548)) ShapesPtr _Slide::GetShapes ( );
__declspec(implementation_key(2549)) HeadersFootersPtr _Slide::GetHeadersFooters ( );
__declspec(implementation_key(2550)) SlideShowTransitionPtr _Slide::GetSlideShowTransition ( );
__declspec(implementation_key(2551)) ColorSchemePtr _Slide::GetColorScheme ( );
__declspec(implementation_key(2552)) void _Slide::PutColorScheme ( struct ColorScheme * ColorScheme );
__declspec(implementation_key(2553)) ShapeRangePtr _Slide::GetBackground ( );
__declspec(implementation_key(2554)) _bstr_t _Slide::GetName ( );
__declspec(implementation_key(2555)) void _Slide::PutName ( _bstr_t Name );
__declspec(implementation_key(2556)) long _Slide::GetSlideID ( );
__declspec(implementation_key(2557)) int _Slide::GetPrintSteps ( );
__declspec(implementation_key(2558)) HRESULT _Slide::Select ( );
__declspec(implementation_key(2559)) HRESULT _Slide::Cut ( );
__declspec(implementation_key(2560)) HRESULT _Slide::Copy ( );
__declspec(implementation_key(2561)) enum PpSlideLayout _Slide::GetLayout ( );
__declspec(implementation_key(2562)) void _Slide::PutLayout ( enum PpSlideLayout Layout );
__declspec(implementation_key(2563)) SlideRangePtr _Slide::Duplicate ( );
__declspec(implementation_key(2564)) HRESULT _Slide::Delete ( );
__declspec(implementation_key(2565)) TagsPtr _Slide::GetTags ( );
__declspec(implementation_key(2566)) int _Slide::GetSlideIndex ( );
__declspec(implementation_key(2567)) int _Slide::GetSlideNumber ( );
__declspec(implementation_key(2568)) __missing_type__  _Slide::GetDisplayMasterShapes ( );
__declspec(implementation_key(2569)) void _Slide::PutDisplayMasterShapes ( __missing_type__ DisplayMasterShapes );
__declspec(implementation_key(2570)) __missing_type__  _Slide::GetFollowMasterBackground ( );
__declspec(implementation_key(2571)) void _Slide::PutFollowMasterBackground ( __missing_type__ FollowMasterBackground );
__declspec(implementation_key(2572)) SlideRangePtr _Slide::GetNotesPage ( );
__declspec(implementation_key(2573)) _MasterPtr _Slide::GetMaster ( );
__declspec(implementation_key(2574)) HyperlinksPtr _Slide::GetHyperlinks ( );
__declspec(implementation_key(2575)) HRESULT _Slide::Export ( _bstr_t FileName, _bstr_t FilterName, int ScaleWidth, int ScaleHeight );
__declspec(implementation_key(2576)) __missing_type__ _Slide::GetScripts ( );
__declspec(implementation_key(2577)) CommentsPtr _Slide::GetComments ( );
__declspec(implementation_key(2578)) DesignPtr _Slide::GetDesign ( );
__declspec(implementation_key(2579)) void _Slide::PutDesign ( struct Design * Design );
__declspec(implementation_key(2580)) HRESULT _Slide::MoveTo ( int toPos );
__declspec(implementation_key(2581)) TimeLinePtr _Slide::GetTimeLine ( );
__declspec(implementation_key(2582)) HRESULT _Slide::ApplyTemplate ( _bstr_t FileName );
__declspec(implementation_key(2583)) int _Slide::GetSectionNumber ( );
__declspec(implementation_key(2584)) CustomLayoutPtr _Slide::GetCustomLayout ( );
__declspec(implementation_key(2585)) void _Slide::PutCustomLayout ( struct CustomLayout * CustomLayout );
__declspec(implementation_key(2586)) HRESULT _Slide::ApplyTheme ( _bstr_t themeName );
__declspec(implementation_key(2587)) __missing_type__ _Slide::GetThemeColorScheme ( );
__declspec(implementation_key(2588)) HRESULT _Slide::ApplyThemeColorScheme ( _bstr_t themeColorSchemeName );
__declspec(implementation_key(2589)) __missing_type__  _Slide::GetBackgroundStyle ( );
__declspec(implementation_key(2590)) void _Slide::PutBackgroundStyle ( __missing_type__ BackgroundStyle );
__declspec(implementation_key(2591)) CustomerDataPtr _Slide::GetCustomerData ( );
__declspec(implementation_key(2592)) HRESULT _Slide::PublishSlides ( _bstr_t SlideLibraryUrl, VARIANT_BOOL Overwrite, VARIANT_BOOL UseSlideOrder );
__declspec(implementation_key(2593)) HRESULT _Slide::MoveToSectionStart ( int toSection );
__declspec(implementation_key(2594)) int _Slide::GetsectionIndex ( );
__declspec(implementation_key(2595)) __missing_type__  _Slide::GetHasNotesPage ( );
__declspec(implementation_key(2596)) HRESULT _Slide::ApplyTemplate2 ( _bstr_t FileName, _bstr_t VariantGUID );
__declspec(implementation_key(2597)) _ApplicationPtr SlideRange::GetApplication ( );
__declspec(implementation_key(2598)) IDispatchPtr SlideRange::GetParent ( );
__declspec(implementation_key(2599)) ShapesPtr SlideRange::GetShapes ( );
__declspec(implementation_key(2600)) HeadersFootersPtr SlideRange::GetHeadersFooters ( );
__declspec(implementation_key(2601)) SlideShowTransitionPtr SlideRange::GetSlideShowTransition ( );
__declspec(implementation_key(2602)) ColorSchemePtr SlideRange::GetColorScheme ( );
__declspec(implementation_key(2603)) void SlideRange::PutColorScheme ( struct ColorScheme * ColorScheme );
__declspec(implementation_key(2604)) ShapeRangePtr SlideRange::GetBackground ( );
__declspec(implementation_key(2605)) _bstr_t SlideRange::GetName ( );
__declspec(implementation_key(2606)) void SlideRange::PutName ( _bstr_t Name );
__declspec(implementation_key(2607)) long SlideRange::GetSlideID ( );
__declspec(implementation_key(2608)) int SlideRange::GetPrintSteps ( );
__declspec(implementation_key(2609)) HRESULT SlideRange::Select ( );
__declspec(implementation_key(2610)) HRESULT SlideRange::Cut ( );
__declspec(implementation_key(2611)) HRESULT SlideRange::Copy ( );
__declspec(implementation_key(2612)) enum PpSlideLayout SlideRange::GetLayout ( );
__declspec(implementation_key(2613)) void SlideRange::PutLayout ( enum PpSlideLayout Layout );
__declspec(implementation_key(2614)) SlideRangePtr SlideRange::Duplicate ( );
__declspec(implementation_key(2615)) HRESULT SlideRange::Delete ( );
__declspec(implementation_key(2616)) TagsPtr SlideRange::GetTags ( );
__declspec(implementation_key(2617)) int SlideRange::GetSlideIndex ( );
__declspec(implementation_key(2618)) int SlideRange::GetSlideNumber ( );
__declspec(implementation_key(2619)) __missing_type__  SlideRange::GetDisplayMasterShapes ( );
__declspec(implementation_key(2620)) void SlideRange::PutDisplayMasterShapes ( __missing_type__ DisplayMasterShapes );
__declspec(implementation_key(2621)) __missing_type__  SlideRange::GetFollowMasterBackground ( );
__declspec(implementation_key(2622)) void SlideRange::PutFollowMasterBackground ( __missing_type__ FollowMasterBackground );
__declspec(implementation_key(2623)) SlideRangePtr SlideRange::GetNotesPage ( );
__declspec(implementation_key(2624)) _MasterPtr SlideRange::GetMaster ( );
__declspec(implementation_key(2625)) HyperlinksPtr SlideRange::GetHyperlinks ( );
__declspec(implementation_key(2626)) HRESULT SlideRange::Export ( _bstr_t FileName, _bstr_t FilterName, int ScaleWidth, int ScaleHeight );
__declspec(implementation_key(2627)) _SlidePtr SlideRange::Item ( const _variant_t & Index );
__declspec(implementation_key(2628)) IUnknownPtr SlideRange::Get_NewEnum ( );
__declspec(implementation_key(2629)) _variant_t SlideRange::_Index ( int Index );
__declspec(implementation_key(2630)) long SlideRange::GetCount ( );
__declspec(implementation_key(2631)) __missing_type__ SlideRange::GetScripts ( );
__declspec(implementation_key(2632)) CommentsPtr SlideRange::GetComments ( );
__declspec(implementation_key(2633)) DesignPtr SlideRange::GetDesign ( );
__declspec(implementation_key(2634)) void SlideRange::PutDesign ( struct Design * Design );
__declspec(implementation_key(2635)) HRESULT SlideRange::MoveTo ( int toPos );
__declspec(implementation_key(2636)) TimeLinePtr SlideRange::GetTimeLine ( );
__declspec(implementation_key(2637)) HRESULT SlideRange::ApplyTemplate ( _bstr_t FileName );
__declspec(implementation_key(2638)) int SlideRange::GetSectionNumber ( );
__declspec(implementation_key(2639)) CustomLayoutPtr SlideRange::GetCustomLayout ( );
__declspec(implementation_key(2640)) void SlideRange::PutCustomLayout ( struct CustomLayout * CustomLayout );
__declspec(implementation_key(2641)) HRESULT SlideRange::ApplyTheme ( _bstr_t themeName );
__declspec(implementation_key(2642)) __missing_type__ SlideRange::GetThemeColorScheme ( );
__declspec(implementation_key(2643)) HRESULT SlideRange::ApplyThemeColorScheme ( _bstr_t themeColorSchemeName );
__declspec(implementation_key(2644)) __missing_type__  SlideRange::GetBackgroundStyle ( );
__declspec(implementation_key(2645)) void SlideRange::PutBackgroundStyle ( __missing_type__ BackgroundStyle );
__declspec(implementation_key(2646)) CustomerDataPtr SlideRange::GetCustomerData ( );
__declspec(implementation_key(2647)) HRESULT SlideRange::PublishSlides ( _bstr_t SlideLibraryUrl, VARIANT_BOOL Overwrite, VARIANT_BOOL UseSlideOrder );
__declspec(implementation_key(2648)) HRESULT SlideRange::MoveToSectionStart ( int toSection );
__declspec(implementation_key(2649)) int SlideRange::GetsectionIndex ( );
__declspec(implementation_key(2650)) __missing_type__  SlideRange::GetHasNotesPage ( );
__declspec(implementation_key(2651)) HRESULT SlideRange::ApplyTemplate2 ( _bstr_t FileName, _bstr_t VariantGUID );
__declspec(implementation_key(2652)) _ApplicationPtr _Master::GetApplication ( );
__declspec(implementation_key(2653)) IDispatchPtr _Master::GetParent ( );
__declspec(implementation_key(2654)) ShapesPtr _Master::GetShapes ( );
__declspec(implementation_key(2655)) HeadersFootersPtr _Master::GetHeadersFooters ( );
__declspec(implementation_key(2656)) ColorSchemePtr _Master::GetColorScheme ( );
__declspec(implementation_key(2657)) void _Master::PutColorScheme ( struct ColorScheme * ColorScheme );
__declspec(implementation_key(2658)) ShapeRangePtr _Master::GetBackground ( );
__declspec(implementation_key(2659)) _bstr_t _Master::GetName ( );
__declspec(implementation_key(2660)) void _Master::PutName ( _bstr_t Name );
__declspec(implementation_key(2661)) HRESULT _Master::Delete ( );
__declspec(implementation_key(2662)) float _Master::GetHeight ( );
__declspec(implementation_key(2663)) float _Master::GetWidth ( );
__declspec(implementation_key(2664)) TextStylesPtr _Master::GetTextStyles ( );
__declspec(implementation_key(2665)) HyperlinksPtr _Master::GetHyperlinks ( );
__declspec(implementation_key(2666)) __missing_type__ _Master::GetScripts ( );
__declspec(implementation_key(2667)) DesignPtr _Master::GetDesign ( );
__declspec(implementation_key(2668)) TimeLinePtr _Master::GetTimeLine ( );
__declspec(implementation_key(2669)) SlideShowTransitionPtr _Master::GetSlideShowTransition ( );
__declspec(implementation_key(2670)) CustomLayoutsPtr _Master::GetCustomLayouts ( );
__declspec(implementation_key(2671)) __missing_type__ _Master::GetTheme ( );
__declspec(implementation_key(2672)) HRESULT _Master::ApplyTheme ( _bstr_t themeName );
__declspec(implementation_key(2673)) __missing_type__  _Master::GetBackgroundStyle ( );
__declspec(implementation_key(2674)) void _Master::PutBackgroundStyle ( __missing_type__ BackgroundStyle );
__declspec(implementation_key(2675)) CustomerDataPtr _Master::GetCustomerData ( );
__declspec(implementation_key(2676)) GuidesPtr _Master::GetGuides ( );
__declspec(implementation_key(2677)) _ApplicationPtr Design::GetApplication ( );
__declspec(implementation_key(2678)) IDispatchPtr Design::GetParent ( );
__declspec(implementation_key(2679)) _MasterPtr Design::GetSlideMaster ( );
__declspec(implementation_key(2680)) _MasterPtr Design::GetTitleMaster ( );
__declspec(implementation_key(2681)) __missing_type__  Design::GetHasTitleMaster ( );
__declspec(implementation_key(2682)) _MasterPtr Design::AddTitleMaster ( );
__declspec(implementation_key(2683)) int Design::GetIndex ( );
__declspec(implementation_key(2684)) _bstr_t Design::GetName ( );
__declspec(implementation_key(2685)) void Design::PutName ( _bstr_t Name );
__declspec(implementation_key(2686)) __missing_type__  Design::GetPreserved ( );
__declspec(implementation_key(2687)) void Design::PutPreserved ( __missing_type__ Preserved );
__declspec(implementation_key(2688)) HRESULT Design::MoveTo ( int toPos );
__declspec(implementation_key(2689)) HRESULT Design::Delete ( );
__declspec(implementation_key(2690)) _ApplicationPtr Designs::GetApplication ( );
__declspec(implementation_key(2691)) IDispatchPtr Designs::GetParent ( );
__declspec(implementation_key(2692)) DesignPtr Designs::Item ( const _variant_t & Index );
__declspec(implementation_key(2693)) DesignPtr Designs::Add ( _bstr_t designName, int Index );
__declspec(implementation_key(2694)) DesignPtr Designs::Load ( _bstr_t TemplateName, int Index );
__declspec(implementation_key(2695)) DesignPtr Designs::Clone ( struct Design * pOriginal, int Index );
__declspec(implementation_key(2696)) IDispatchPtr Shapes::GetApplication ( );
__declspec(implementation_key(2697)) long Shapes::GetCreator ( );
__declspec(implementation_key(2698)) IDispatchPtr Shapes::GetParent ( );
__declspec(implementation_key(2699)) int Shapes::GetCount ( );
__declspec(implementation_key(2700)) ShapePtr Shapes::Item ( const _variant_t & Index );
__declspec(implementation_key(2701)) IUnknownPtr Shapes::Get_NewEnum ( );
__declspec(implementation_key(2702)) ShapePtr Shapes::AddCallout ( __missing_type__ Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(2703)) ShapePtr Shapes::AddConnector ( __missing_type__ Type, float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(2704)) ShapePtr Shapes::AddCurve ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(2705)) ShapePtr Shapes::AddLabel ( __missing_type__ Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(2706)) ShapePtr Shapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(2707)) ShapePtr Shapes::AddPicture ( _bstr_t FileName, __missing_type__ LinkToFile, __missing_type__ SaveWithDocument, float Left, float Top, float Width, float Height );
__declspec(implementation_key(2708)) ShapePtr Shapes::AddPolyline ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(2709)) ShapePtr Shapes::AddShape ( __missing_type__ Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(2710)) ShapePtr Shapes::AddTextEffect ( __missing_type__ PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, __missing_type__ FontBold, __missing_type__ FontItalic, float Left, float Top );
__declspec(implementation_key(2711)) ShapePtr Shapes::AddTextbox ( __missing_type__ Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(2712)) FreeformBuilderPtr Shapes::BuildFreeform ( __missing_type__ EditingType, float X1, float Y1 );
__declspec(implementation_key(2713)) HRESULT Shapes::SelectAll ( );
__declspec(implementation_key(2714)) ShapeRangePtr Shapes::Range ( const _variant_t & Index );
__declspec(implementation_key(2715)) __missing_type__  Shapes::GetHasTitle ( );
__declspec(implementation_key(2716)) ShapePtr Shapes::AddTitle ( );
__declspec(implementation_key(2717)) ShapePtr Shapes::GetTitle ( );
__declspec(implementation_key(2718)) PlaceholdersPtr Shapes::GetPlaceholders ( );
__declspec(implementation_key(2719)) ShapePtr Shapes::AddOLEObject ( float Left, float Top, float Width, float Height, _bstr_t ClassName, _bstr_t FileName, __missing_type__ DisplayAsIcon, _bstr_t IconFileName, int IconIndex, _bstr_t IconLabel, __missing_type__ Link );
__declspec(implementation_key(2720)) ShapePtr Shapes::AddComment ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(2721)) ShapePtr Shapes::AddPlaceholder ( enum PpPlaceholderType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(2722)) ShapePtr Shapes::AddMediaObject ( _bstr_t FileName, float Left, float Top, float Width, float Height );
__declspec(implementation_key(2723)) ShapeRangePtr Shapes::Paste ( );
__declspec(implementation_key(2724)) ShapePtr Shapes::AddTable ( int NumRows, int NumColumns, float Left, float Top, float Width, float Height );
__declspec(implementation_key(2725)) ShapeRangePtr Shapes::PasteSpecial ( enum PpPasteDataType DataType, __missing_type__ DisplayAsIcon, _bstr_t IconFileName, int IconIndex, _bstr_t IconLabel, __missing_type__ Link );
__declspec(implementation_key(2726)) ShapePtr Shapes::AddDiagram ( __missing_type__ Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(2727)) ShapePtr Shapes::AddCanvas ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(2728)) ShapePtr Shapes::AddChart ( __missing_type__ Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(2729)) ShapePtr Shapes::AddMediaObject2 ( _bstr_t FileName, __missing_type__ LinkToFile, __missing_type__ SaveWithDocument, float Left, float Top, float Width, float Height );
__declspec(implementation_key(2730)) ShapePtr Shapes::AddMediaObjectFromEmbedTag ( _bstr_t EmbedTag, float Left, float Top, float Width, float Height );
__declspec(implementation_key(2731)) ShapePtr Shapes::AddSmartArt ( __missing_type__ * Layout, float Left, float Top, float Width, float Height );
__declspec(implementation_key(2732)) ShapePtr Shapes::AddChart2 ( int Style, __missing_type__ Type, float Left, float Top, float Width, float Height, VARIANT_BOOL NewLayout );
__declspec(implementation_key(2733)) ShapePtr Shapes::AddPicture2 ( _bstr_t FileName, __missing_type__ LinkToFile, __missing_type__ SaveWithDocument, float Left, float Top, float Width, float Height, __missing_type__ compress );
__declspec(implementation_key(2734)) ShapePtr Shapes::AddInkShapeFromXML ( _bstr_t InkXML, float Left, float Top, float Width, float Height );
__declspec(implementation_key(2735)) IDispatchPtr Chart::GetParent ( );
__declspec(implementation_key(2736)) HRESULT Chart::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator );
__declspec(implementation_key(2737)) __missing_type__  Chart::GetChartType ( );
__declspec(implementation_key(2738)) void Chart::PutChartType ( __missing_type__ RHS );
__declspec(implementation_key(2739)) VARIANT_BOOL Chart::GetHasDataTable ( );
__declspec(implementation_key(2740)) void Chart::PutHasDataTable ( VARIANT_BOOL RHS );
__declspec(implementation_key(2741)) HRESULT Chart::ApplyCustomType ( __missing_type__ ChartType, const _variant_t & TypeName );
__declspec(implementation_key(2742)) HRESULT Chart::GetChartElement ( long X, long Y, long * ElementID, long * Arg1, long * Arg2 );
__declspec(implementation_key(2743)) HRESULT Chart::SetSourceData ( _bstr_t Source, const _variant_t & PlotBy );
__declspec(implementation_key(2744)) enum XlRowCol Chart::GetPlotBy ( );
__declspec(implementation_key(2745)) void Chart::PutPlotBy ( enum XlRowCol PlotBy );
__declspec(implementation_key(2746)) HRESULT Chart::AutoFormat ( long Gallery, const _variant_t & Format );
__declspec(implementation_key(2747)) HRESULT Chart::SetBackgroundPicture ( _bstr_t FileName );
__declspec(implementation_key(2748)) DataTablePtr Chart::GetDataTable ( );
__declspec(implementation_key(2749)) HRESULT Chart::Paste ( const _variant_t & Type, long lcid );
__declspec(implementation_key(2750)) enum XlBarShape Chart::GetBarShape ( );
__declspec(implementation_key(2751)) void Chart::PutBarShape ( enum XlBarShape RHS );
__declspec(implementation_key(2752)) HRESULT Chart::SetDefaultChart ( const _variant_t & Name );
__declspec(implementation_key(2753)) HRESULT Chart::ApplyChartTemplate ( _bstr_t FileName );
__declspec(implementation_key(2754)) HRESULT Chart::SaveChartTemplate ( _bstr_t FileName );
__declspec(implementation_key(2755)) WallsPtr Chart::GetSideWall ( );
__declspec(implementation_key(2756)) WallsPtr Chart::GetBackWall ( );
__declspec(implementation_key(2757)) _variant_t Chart::GetChartStyle ( );
__declspec(implementation_key(2758)) void Chart::PutChartStyle ( const _variant_t & RHS );
__declspec(implementation_key(2759)) HRESULT Chart::ClearToMatchStyle ( );
__declspec(implementation_key(2760)) VARIANT_BOOL Chart::GetHasPivotFields ( );
__declspec(implementation_key(2761)) void Chart::PutHasPivotFields ( VARIANT_BOOL RHS );
__declspec(implementation_key(2762)) void Chart::PutShowDataLabelsOverMaximum ( VARIANT_BOOL RHS );
__declspec(implementation_key(2763)) VARIANT_BOOL Chart::GetShowDataLabelsOverMaximum ( );
__declspec(implementation_key(2764)) HRESULT Chart::ApplyLayout ( long Layout, const _variant_t & ChartType );
__declspec(implementation_key(2765)) HRESULT Chart::Refresh ( );
__declspec(implementation_key(2766)) ChartDataPtr Chart::GetChartData ( );
__declspec(implementation_key(2767)) ShapesPtr Chart::GetShapes ( );
__declspec(implementation_key(2768)) long Chart::GetCreator ( );
__declspec(implementation_key(2769)) ChartGroupPtr Chart::GetArea3DGroup ( long lcid );
__declspec(implementation_key(2770)) IDispatchPtr Chart::AreaGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(2771)) ChartGroupPtr Chart::GetBar3DGroup ( long lcid );
__declspec(implementation_key(2772)) IDispatchPtr Chart::BarGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(2773)) ChartGroupPtr Chart::GetColumn3DGroup ( long lcid );
__declspec(implementation_key(2774)) IDispatchPtr Chart::ColumnGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(2775)) ChartGroupPtr Chart::GetLine3DGroup ( long lcid );
__declspec(implementation_key(2776)) IDispatchPtr Chart::LineGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(2777)) ChartGroupPtr Chart::GetPie3DGroup ( long lcid );
__declspec(implementation_key(2778)) IDispatchPtr Chart::PieGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(2779)) IDispatchPtr Chart::DoughnutGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(2780)) IDispatchPtr Chart::RadarGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(2781)) ChartGroupPtr Chart::GetSurfaceGroup ( long lcid );
__declspec(implementation_key(2782)) IDispatchPtr Chart::XYGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(2783)) _ApplicationPtr Chart::GetApplication ( );
__declspec(implementation_key(2784)) HRESULT Chart::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, long lcid );
__declspec(implementation_key(2785)) void Chart::PutAutoScaling ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(2786)) VARIANT_BOOL Chart::GetAutoScaling ( long lcid );
__declspec(implementation_key(2787)) IDispatchPtr Chart::Axes ( const _variant_t & Type, enum XlAxisGroup AxisGroup, long lcid );
__declspec(implementation_key(2788)) ChartAreaPtr Chart::GetChartArea ( long lcid );
__declspec(implementation_key(2789)) IDispatchPtr Chart::ChartGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(2790)) ChartTitlePtr Chart::GetChartTitle ( long lcid );
__declspec(implementation_key(2791)) HRESULT Chart::ChartWizard ( const _variant_t & Source, const _variant_t & Gallery, const _variant_t & Format, const _variant_t & PlotBy, const _variant_t & CategoryLabels, const _variant_t & SeriesLabels, const _variant_t & HasLegend, const _variant_t & Title, const _variant_t & CategoryTitle, const _variant_t & ValueTitle, const _variant_t & ExtraTitle, long lcid );
__declspec(implementation_key(2792)) HRESULT Chart::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(2793)) HRESULT Chart::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format, enum XlPictureAppearance Size, long LocaleID );
__declspec(implementation_key(2794)) CornersPtr Chart::GetCorners ( long lcid );
__declspec(implementation_key(2795)) HRESULT Chart::Delete ( long lcid );
__declspec(implementation_key(2796)) long Chart::GetDepthPercent ( long lcid );
__declspec(implementation_key(2797)) void Chart::PutDepthPercent ( long lcid, long RHS );
__declspec(implementation_key(2798)) enum XlDisplayBlanksAs Chart::GetDisplayBlanksAs ( long lcid );
__declspec(implementation_key(2799)) void Chart::PutDisplayBlanksAs ( long lcid, enum XlDisplayBlanksAs RHS );
__declspec(implementation_key(2800)) long Chart::GetElevation ( long lcid );
__declspec(implementation_key(2801)) void Chart::PutElevation ( long lcid, long RHS );
__declspec(implementation_key(2802)) VARIANT_BOOL Chart::Export ( _bstr_t FileName, const _variant_t & FilterName, const _variant_t & Interactive );
__declspec(implementation_key(2803)) FloorPtr Chart::GetFloor ( long lcid );
__declspec(implementation_key(2804)) long Chart::GetGapDepth ( long lcid );
__declspec(implementation_key(2805)) void Chart::PutGapDepth ( long lcid, long RHS );
__declspec(implementation_key(2806)) _variant_t Chart::GetHasAxis ( const _variant_t & Index1, const _variant_t & Index2, long lcid );
__declspec(implementation_key(2807)) void Chart::PutHasAxis ( const _variant_t & Index1, const _variant_t & Index2, long lcid, const _variant_t & RHS );
__declspec(implementation_key(2808)) VARIANT_BOOL Chart::GetHasLegend ( long lcid );
__declspec(implementation_key(2809)) void Chart::PutHasLegend ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(2810)) VARIANT_BOOL Chart::GetHasTitle ( long lcid );
__declspec(implementation_key(2811)) void Chart::PutHasTitle ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(2812)) long Chart::GetHeightPercent ( long lcid );
__declspec(implementation_key(2813)) void Chart::PutHeightPercent ( long lcid, long RHS );
__declspec(implementation_key(2814)) LegendPtr Chart::GetLegend ( long lcid );
__declspec(implementation_key(2815)) _bstr_t Chart::GetName ( );
__declspec(implementation_key(2816)) void Chart::PutName ( _bstr_t RHS );
__declspec(implementation_key(2817)) long Chart::GetPerspective ( long lcid );
__declspec(implementation_key(2818)) void Chart::PutPerspective ( long lcid, long RHS );
__declspec(implementation_key(2819)) PlotAreaPtr Chart::GetPlotArea ( long lcid );
__declspec(implementation_key(2820)) VARIANT_BOOL Chart::GetPlotVisibleOnly ( long lcid );
__declspec(implementation_key(2821)) void Chart::PutPlotVisibleOnly ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(2822)) _variant_t Chart::GetRightAngleAxes ( long lcid );
__declspec(implementation_key(2823)) void Chart::PutRightAngleAxes ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(2824)) _variant_t Chart::GetRotation ( long lcid );
__declspec(implementation_key(2825)) void Chart::PutRotation ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(2826)) HRESULT Chart::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(2827)) IDispatchPtr Chart::SeriesCollection ( const _variant_t & Index, long lcid );
__declspec(implementation_key(2828)) HRESULT Chart::SetElement ( __missing_type__ Element );
__declspec(implementation_key(2829)) long Chart::GetSubtype ( long lcid );
__declspec(implementation_key(2830)) void Chart::PutSubtype ( long lcid, long RHS );
__declspec(implementation_key(2831)) long Chart::GetType ( long lcid );
__declspec(implementation_key(2832)) void Chart::PutType ( long lcid, long RHS );
__declspec(implementation_key(2833)) WallsPtr Chart::GetWalls ( long lcid );
__declspec(implementation_key(2834)) ChartFormatPtr Chart::GetFormat ( );
__declspec(implementation_key(2835)) VARIANT_BOOL Chart::GetShowReportFilterFieldButtons ( );
__declspec(implementation_key(2836)) void Chart::PutShowReportFilterFieldButtons ( VARIANT_BOOL res );
__declspec(implementation_key(2837)) VARIANT_BOOL Chart::GetShowLegendFieldButtons ( );
__declspec(implementation_key(2838)) void Chart::PutShowLegendFieldButtons ( VARIANT_BOOL res );
__declspec(implementation_key(2839)) VARIANT_BOOL Chart::GetShowAxisFieldButtons ( );
__declspec(implementation_key(2840)) void Chart::PutShowAxisFieldButtons ( VARIANT_BOOL res );
__declspec(implementation_key(2841)) VARIANT_BOOL Chart::GetShowValueFieldButtons ( );
__declspec(implementation_key(2842)) void Chart::PutShowValueFieldButtons ( VARIANT_BOOL res );
__declspec(implementation_key(2843)) VARIANT_BOOL Chart::GetShowAllFieldButtons ( );
__declspec(implementation_key(2844)) void Chart::PutShowAllFieldButtons ( VARIANT_BOOL res );
__declspec(implementation_key(2845)) _bstr_t Chart::GetAlternativeText ( );
__declspec(implementation_key(2846)) void Chart::PutAlternativeText ( _bstr_t AlternativeText );
__declspec(implementation_key(2847)) _bstr_t Chart::GetTitle ( );
__declspec(implementation_key(2848)) void Chart::PutTitle ( _bstr_t Title );
__declspec(implementation_key(2849)) IDispatchPtr Chart::FullSeriesCollection ( const _variant_t & Index );
__declspec(implementation_key(2850)) enum XlCategoryLabelLevel Chart::GetCategoryLabelLevel ( );
__declspec(implementation_key(2851)) void Chart::PutCategoryLabelLevel ( enum XlCategoryLabelLevel plevel );
__declspec(implementation_key(2852)) enum XlSeriesNameLevel Chart::GetSeriesNameLevel ( );
__declspec(implementation_key(2853)) void Chart::PutSeriesNameLevel ( enum XlSeriesNameLevel plevel );
__declspec(implementation_key(2854)) VARIANT_BOOL Chart::GetHasHiddenContent ( );
__declspec(implementation_key(2855)) HRESULT Chart::DeleteHiddenContent ( );
__declspec(implementation_key(2856)) _variant_t Chart::GetChartColor ( );
__declspec(implementation_key(2857)) void Chart::PutChartColor ( const _variant_t & pColor );
__declspec(implementation_key(2858)) HRESULT Chart::ClearToMatchColorStyle ( );
__declspec(implementation_key(2859)) _ApplicationPtr Placeholders::GetApplication ( );
__declspec(implementation_key(2860)) IDispatchPtr Placeholders::GetParent ( );
__declspec(implementation_key(2861)) ShapePtr Placeholders::Item ( int Index );
__declspec(implementation_key(2862)) ShapePtr Placeholders::FindByName ( const _variant_t & Index );
__declspec(implementation_key(2863)) IDispatchPtr FreeformBuilder::GetApplication ( );
__declspec(implementation_key(2864)) long FreeformBuilder::GetCreator ( );
__declspec(implementation_key(2865)) IDispatchPtr FreeformBuilder::GetParent ( );
__declspec(implementation_key(2866)) HRESULT FreeformBuilder::AddNodes ( __missing_type__ SegmentType, __missing_type__ EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 );
__declspec(implementation_key(2867)) ShapePtr FreeformBuilder::ConvertToShape ( );
__declspec(implementation_key(2868)) IDispatchPtr Shape::GetApplication ( );
__declspec(implementation_key(2869)) long Shape::GetCreator ( );
__declspec(implementation_key(2870)) IDispatchPtr Shape::GetParent ( );
__declspec(implementation_key(2871)) HRESULT Shape::Apply ( );
__declspec(implementation_key(2872)) HRESULT Shape::Delete ( );
__declspec(implementation_key(2873)) HRESULT Shape::Flip ( __missing_type__ FlipCmd );
__declspec(implementation_key(2874)) HRESULT Shape::IncrementLeft ( float Increment );
__declspec(implementation_key(2875)) HRESULT Shape::IncrementRotation ( float Increment );
__declspec(implementation_key(2876)) HRESULT Shape::IncrementTop ( float Increment );
__declspec(implementation_key(2877)) HRESULT Shape::PickUp ( );
__declspec(implementation_key(2878)) HRESULT Shape::RerouteConnections ( );
__declspec(implementation_key(2879)) HRESULT Shape::ScaleHeight ( float Factor, __missing_type__ RelativeToOriginalSize, __missing_type__ fScale );
__declspec(implementation_key(2880)) HRESULT Shape::ScaleWidth ( float Factor, __missing_type__ RelativeToOriginalSize, __missing_type__ fScale );
__declspec(implementation_key(2881)) HRESULT Shape::SetShapesDefaultProperties ( );
__declspec(implementation_key(2882)) ShapeRangePtr Shape::Ungroup ( );
__declspec(implementation_key(2883)) HRESULT Shape::ZOrder ( __missing_type__ ZOrderCmd );
__declspec(implementation_key(2884)) AdjustmentsPtr Shape::GetAdjustments ( );
__declspec(implementation_key(2885)) __missing_type__  Shape::GetAutoShapeType ( );
__declspec(implementation_key(2886)) void Shape::PutAutoShapeType ( __missing_type__ AutoShapeType );
__declspec(implementation_key(2887)) __missing_type__  Shape::GetBlackWhiteMode ( );
__declspec(implementation_key(2888)) void Shape::PutBlackWhiteMode ( __missing_type__ BlackWhiteMode );
__declspec(implementation_key(2889)) CalloutFormatPtr Shape::GetCallout ( );
__declspec(implementation_key(2890)) int Shape::GetConnectionSiteCount ( );
__declspec(implementation_key(2891)) __missing_type__  Shape::GetConnector ( );
__declspec(implementation_key(2892)) ConnectorFormatPtr Shape::GetConnectorFormat ( );
__declspec(implementation_key(2893)) FillFormatPtr Shape::GetFill ( );
__declspec(implementation_key(2894)) GroupShapesPtr Shape::GetGroupItems ( );
__declspec(implementation_key(2895)) float Shape::GetHeight ( );
__declspec(implementation_key(2896)) void Shape::PutHeight ( float Height );
__declspec(implementation_key(2897)) __missing_type__  Shape::GetHorizontalFlip ( );
__declspec(implementation_key(2898)) float Shape::GetLeft ( );
__declspec(implementation_key(2899)) void Shape::PutLeft ( float Left );
__declspec(implementation_key(2900)) LineFormatPtr Shape::GetLine ( );
__declspec(implementation_key(2901)) __missing_type__  Shape::GetLockAspectRatio ( );
__declspec(implementation_key(2902)) void Shape::PutLockAspectRatio ( __missing_type__ LockAspectRatio );
__declspec(implementation_key(2903)) _bstr_t Shape::GetName ( );
__declspec(implementation_key(2904)) void Shape::PutName ( _bstr_t Name );
__declspec(implementation_key(2905)) ShapeNodesPtr Shape::GetNodes ( );
__declspec(implementation_key(2906)) float Shape::GetRotation ( );
__declspec(implementation_key(2907)) void Shape::PutRotation ( float Rotation );
__declspec(implementation_key(2908)) PictureFormatPtr Shape::GetPictureFormat ( );
__declspec(implementation_key(2909)) ShadowFormatPtr Shape::GetShadow ( );
__declspec(implementation_key(2910)) TextEffectFormatPtr Shape::GetTextEffect ( );
__declspec(implementation_key(2911)) TextFramePtr Shape::GetTextFrame ( );
__declspec(implementation_key(2912)) ThreeDFormatPtr Shape::GetThreeD ( );
__declspec(implementation_key(2913)) float Shape::GetTop ( );
__declspec(implementation_key(2914)) void Shape::PutTop ( float Top );
__declspec(implementation_key(2915)) __missing_type__  Shape::GetType ( );
__declspec(implementation_key(2916)) __missing_type__  Shape::GetVerticalFlip ( );
__declspec(implementation_key(2917)) _variant_t Shape::GetVertices ( );
__declspec(implementation_key(2918)) __missing_type__  Shape::GetVisible ( );
__declspec(implementation_key(2919)) void Shape::PutVisible ( __missing_type__ Visible );
__declspec(implementation_key(2920)) float Shape::GetWidth ( );
__declspec(implementation_key(2921)) void Shape::PutWidth ( float Width );
__declspec(implementation_key(2922)) int Shape::GetZOrderPosition ( );
__declspec(implementation_key(2923)) OLEFormatPtr Shape::GetOLEFormat ( );
__declspec(implementation_key(2924)) LinkFormatPtr Shape::GetLinkFormat ( );
__declspec(implementation_key(2925)) PlaceholderFormatPtr Shape::GetPlaceholderFormat ( );
__declspec(implementation_key(2926)) AnimationSettingsPtr Shape::GetAnimationSettings ( );
__declspec(implementation_key(2927)) ActionSettingsPtr Shape::GetActionSettings ( );
__declspec(implementation_key(2928)) TagsPtr Shape::GetTags ( );
__declspec(implementation_key(2929)) HRESULT Shape::Cut ( );
__declspec(implementation_key(2930)) HRESULT Shape::Copy ( );
__declspec(implementation_key(2931)) HRESULT Shape::Select ( __missing_type__ Replace );
__declspec(implementation_key(2932)) ShapeRangePtr Shape::Duplicate ( );
__declspec(implementation_key(2933)) enum PpMediaType Shape::GetMediaType ( );
__declspec(implementation_key(2934)) __missing_type__  Shape::GetHasTextFrame ( );
__declspec(implementation_key(2935)) SoundFormatPtr Shape::GetSoundFormat ( );
__declspec(implementation_key(2936)) __missing_type__ Shape::GetScript ( );
__declspec(implementation_key(2937)) _bstr_t Shape::GetAlternativeText ( );
__declspec(implementation_key(2938)) void Shape::PutAlternativeText ( _bstr_t AlternativeText );
__declspec(implementation_key(2939)) __missing_type__  Shape::GetHasTable ( );
__declspec(implementation_key(2940)) TablePtr Shape::GetTable ( );
__declspec(implementation_key(2941)) HRESULT Shape::Export ( _bstr_t PathName, enum PpShapeFormat Filter, int ScaleWidth, int ScaleHeight, enum PpExportMode ExportMode );
__declspec(implementation_key(2942)) __missing_type__  Shape::GetHasDiagram ( );
__declspec(implementation_key(2943)) DiagramPtr Shape::GetDiagram ( );
__declspec(implementation_key(2944)) __missing_type__  Shape::GetHasDiagramNode ( );
__declspec(implementation_key(2945)) DiagramNodePtr Shape::GetDiagramNode ( );
__declspec(implementation_key(2946)) __missing_type__  Shape::GetChild ( );
__declspec(implementation_key(2947)) ShapePtr Shape::GetParentGroup ( );
__declspec(implementation_key(2948)) CanvasShapesPtr Shape::GetCanvasItems ( );
__declspec(implementation_key(2949)) int Shape::GetId ( );
__declspec(implementation_key(2950)) HRESULT Shape::CanvasCropLeft ( float Increment );
__declspec(implementation_key(2951)) HRESULT Shape::CanvasCropTop ( float Increment );
__declspec(implementation_key(2952)) HRESULT Shape::CanvasCropRight ( float Increment );
__declspec(implementation_key(2953)) HRESULT Shape::CanvasCropBottom ( float Increment );
__declspec(implementation_key(2954)) void Shape::PutRTF ( _bstr_t _arg1 );
__declspec(implementation_key(2955)) CustomerDataPtr Shape::GetCustomerData ( );
__declspec(implementation_key(2956)) TextFrame2Ptr Shape::GetTextFrame2 ( );
__declspec(implementation_key(2957)) __missing_type__  Shape::GetHasChart ( );
__declspec(implementation_key(2958)) __missing_type__  Shape::GetShapeStyle ( );
__declspec(implementation_key(2959)) void Shape::PutShapeStyle ( __missing_type__ ShapeStyle );
__declspec(implementation_key(2960)) __missing_type__  Shape::GetBackgroundStyle ( );
__declspec(implementation_key(2961)) void Shape::PutBackgroundStyle ( __missing_type__ BackgroundStyle );
__declspec(implementation_key(2962)) __missing_type__ Shape::GetSoftEdge ( );
__declspec(implementation_key(2963)) __missing_type__ Shape::GetGlow ( );
__declspec(implementation_key(2964)) __missing_type__ Shape::GetReflection ( );
__declspec(implementation_key(2965)) ChartPtr Shape::GetChart ( );
__declspec(implementation_key(2966)) __missing_type__  Shape::GetHasSmartArt ( );
__declspec(implementation_key(2967)) __missing_type__ Shape::GetSmartArt ( );
__declspec(implementation_key(2968)) HRESULT Shape::ConvertTextToSmartArt ( __missing_type__ * Layout );
__declspec(implementation_key(2969)) _bstr_t Shape::GetTitle ( );
__declspec(implementation_key(2970)) void Shape::PutTitle ( _bstr_t Title );
__declspec(implementation_key(2971)) MediaFormatPtr Shape::GetMediaFormat ( );
__declspec(implementation_key(2972)) HRESULT Shape::PickupAnimation ( );
__declspec(implementation_key(2973)) HRESULT Shape::ApplyAnimation ( );
__declspec(implementation_key(2974)) HRESULT Shape::UpgradeMedia ( );
__declspec(implementation_key(2975)) __missing_type__  Shape::GetIsNarration ( );
__declspec(implementation_key(2976)) void Shape::PutIsNarration ( __missing_type__ IsNarration );
__declspec(implementation_key(2977)) _bstr_t Shape::GetInkXML ( );
__declspec(implementation_key(2978)) __missing_type__  Shape::GetHasInkXML ( );
__declspec(implementation_key(2979)) __missing_type__  Shape::GetHasSectionLink ( );
__declspec(implementation_key(2980)) IDispatchPtr ConnectorFormat::GetApplication ( );
__declspec(implementation_key(2981)) long ConnectorFormat::GetCreator ( );
__declspec(implementation_key(2982)) IDispatchPtr ConnectorFormat::GetParent ( );
__declspec(implementation_key(2983)) HRESULT ConnectorFormat::BeginConnect ( struct Shape * ConnectedShape, int ConnectionSite );
__declspec(implementation_key(2984)) HRESULT ConnectorFormat::BeginDisconnect ( );
__declspec(implementation_key(2985)) HRESULT ConnectorFormat::EndConnect ( struct Shape * ConnectedShape, int ConnectionSite );
__declspec(implementation_key(2986)) HRESULT ConnectorFormat::EndDisconnect ( );
__declspec(implementation_key(2987)) __missing_type__  ConnectorFormat::GetBeginConnected ( );
__declspec(implementation_key(2988)) ShapePtr ConnectorFormat::GetBeginConnectedShape ( );
__declspec(implementation_key(2989)) int ConnectorFormat::GetBeginConnectionSite ( );
__declspec(implementation_key(2990)) __missing_type__  ConnectorFormat::GetEndConnected ( );
__declspec(implementation_key(2991)) ShapePtr ConnectorFormat::GetEndConnectedShape ( );
__declspec(implementation_key(2992)) int ConnectorFormat::GetEndConnectionSite ( );
__declspec(implementation_key(2993)) __missing_type__  ConnectorFormat::GetType ( );
__declspec(implementation_key(2994)) void ConnectorFormat::PutType ( __missing_type__ Type );
__declspec(implementation_key(2995)) _ApplicationPtr _Presentation::GetApplication ( );
__declspec(implementation_key(2996)) IDispatchPtr _Presentation::GetParent ( );
__declspec(implementation_key(2997)) _MasterPtr _Presentation::GetSlideMaster ( );
__declspec(implementation_key(2998)) _MasterPtr _Presentation::GetTitleMaster ( );
__declspec(implementation_key(2999)) __missing_type__  _Presentation::GetHasTitleMaster ( );
__declspec(implementation_key(3000)) _MasterPtr _Presentation::AddTitleMaster ( );
__declspec(implementation_key(3001)) HRESULT _Presentation::ApplyTemplate ( _bstr_t FileName );
__declspec(implementation_key(3002)) _bstr_t _Presentation::GetTemplateName ( );
__declspec(implementation_key(3003)) _MasterPtr _Presentation::GetNotesMaster ( );
__declspec(implementation_key(3004)) _MasterPtr _Presentation::GetHandoutMaster ( );
__declspec(implementation_key(3005)) SlidesPtr _Presentation::GetSlides ( );
__declspec(implementation_key(3006)) PageSetupPtr _Presentation::GetPageSetup ( );
__declspec(implementation_key(3007)) ColorSchemesPtr _Presentation::GetColorSchemes ( );
__declspec(implementation_key(3008)) ExtraColorsPtr _Presentation::GetExtraColors ( );
__declspec(implementation_key(3009)) SlideShowSettingsPtr _Presentation::GetSlideShowSettings ( );
__declspec(implementation_key(3010)) FontsPtr _Presentation::GetFonts ( );
__declspec(implementation_key(3011)) DocumentWindowsPtr _Presentation::GetWindows ( );
__declspec(implementation_key(3012)) TagsPtr _Presentation::GetTags ( );
__declspec(implementation_key(3013)) ShapePtr _Presentation::GetDefaultShape ( );
__declspec(implementation_key(3014)) IDispatchPtr _Presentation::GetBuiltInDocumentProperties ( );
__declspec(implementation_key(3015)) IDispatchPtr _Presentation::GetCustomDocumentProperties ( );
__declspec(implementation_key(3016)) _VBProjectPtr _Presentation::GetVBProject ( );
__declspec(implementation_key(3017)) __missing_type__  _Presentation::GetReadOnly ( );
__declspec(implementation_key(3018)) _bstr_t _Presentation::GetFullName ( );
__declspec(implementation_key(3019)) _bstr_t _Presentation::GetName ( );
__declspec(implementation_key(3020)) _bstr_t _Presentation::GetPath ( );
__declspec(implementation_key(3021)) __missing_type__  _Presentation::GetSaved ( );
__declspec(implementation_key(3022)) void _Presentation::PutSaved ( __missing_type__ Saved );
__declspec(implementation_key(3023)) enum PpDirection _Presentation::GetLayoutDirection ( );
__declspec(implementation_key(3024)) void _Presentation::PutLayoutDirection ( enum PpDirection LayoutDirection );
__declspec(implementation_key(3025)) DocumentWindowPtr _Presentation::NewWindow ( );
__declspec(implementation_key(3026)) HRESULT _Presentation::FollowHyperlink ( _bstr_t Address, _bstr_t SubAddress, VARIANT_BOOL NewWindow, VARIANT_BOOL AddHistory, _bstr_t ExtraInfo, __missing_type__ Method, _bstr_t HeaderInfo );
__declspec(implementation_key(3027)) HRESULT _Presentation::AddToFavorites ( );
__declspec(implementation_key(3028)) HRESULT _Presentation::Unused ( );
__declspec(implementation_key(3029)) PrintOptionsPtr _Presentation::GetPrintOptions ( );
__declspec(implementation_key(3030)) HRESULT _Presentation::PrintOut ( int From, int To, _bstr_t PrintToFile, int Copies, __missing_type__ Collate );
__declspec(implementation_key(3031)) HRESULT _Presentation::Save ( );
__declspec(implementation_key(3032)) HRESULT _Presentation::SaveAs ( _bstr_t FileName, enum PpSaveAsFileType FileFormat, __missing_type__ EmbedTrueTypeFonts );
__declspec(implementation_key(3033)) HRESULT _Presentation::SaveCopyAs ( _bstr_t FileName, enum PpSaveAsFileType FileFormat, __missing_type__ EmbedTrueTypeFonts );
__declspec(implementation_key(3034)) HRESULT _Presentation::Export ( _bstr_t Path, _bstr_t FilterName, int ScaleWidth, int ScaleHeight );
__declspec(implementation_key(3035)) HRESULT _Presentation::Close ( );
__declspec(implementation_key(3036)) HRESULT _Presentation::SetUndoText ( _bstr_t Text );
__declspec(implementation_key(3037)) IDispatchPtr _Presentation::GetContainer ( );
__declspec(implementation_key(3038)) __missing_type__  _Presentation::GetDisplayComments ( );
__declspec(implementation_key(3039)) void _Presentation::PutDisplayComments ( __missing_type__ DisplayComments );
__declspec(implementation_key(3040)) enum PpFarEastLineBreakLevel _Presentation::GetFarEastLineBreakLevel ( );
__declspec(implementation_key(3041)) void _Presentation::PutFarEastLineBreakLevel ( enum PpFarEastLineBreakLevel FarEastLineBreakLevel );
__declspec(implementation_key(3042)) _bstr_t _Presentation::GetNoLineBreakBefore ( );
__declspec(implementation_key(3043)) void _Presentation::PutNoLineBreakBefore ( _bstr_t NoLineBreakBefore );
__declspec(implementation_key(3044)) _bstr_t _Presentation::GetNoLineBreakAfter ( );
__declspec(implementation_key(3045)) void _Presentation::PutNoLineBreakAfter ( _bstr_t NoLineBreakAfter );
__declspec(implementation_key(3046)) HRESULT _Presentation::UpdateLinks ( );
__declspec(implementation_key(3047)) SlideShowWindowPtr _Presentation::GetSlideShowWindow ( );
__declspec(implementation_key(3048)) __missing_type__  _Presentation::GetFarEastLineBreakLanguage ( );
__declspec(implementation_key(3049)) void _Presentation::PutFarEastLineBreakLanguage ( __missing_type__ FarEastLineBreakLanguage );
__declspec(implementation_key(3050)) HRESULT _Presentation::WebPagePreview ( );
__declspec(implementation_key(3051)) __missing_type__  _Presentation::GetDefaultLanguageID ( );
__declspec(implementation_key(3052)) void _Presentation::PutDefaultLanguageID ( __missing_type__ DefaultLanguageID );
__declspec(implementation_key(3053)) __missing_type__ _Presentation::GetCommandBars ( );
__declspec(implementation_key(3054)) PublishObjectsPtr _Presentation::GetPublishObjects ( );
__declspec(implementation_key(3055)) WebOptionsPtr _Presentation::GetWebOptions ( );
__declspec(implementation_key(3056)) __missing_type__ _Presentation::GetHTMLProject ( );
__declspec(implementation_key(3057)) HRESULT _Presentation::ReloadAs ( __missing_type__ cp );
__declspec(implementation_key(3058)) HRESULT _Presentation::MakeIntoTemplate ( __missing_type__ IsDesignTemplate );
__declspec(implementation_key(3059)) __missing_type__  _Presentation::GetEnvelopeVisible ( );
__declspec(implementation_key(3060)) void _Presentation::PutEnvelopeVisible ( __missing_type__ EnvelopeVisible );
__declspec(implementation_key(3061)) HRESULT _Presentation::sblt ( _bstr_t s );
__declspec(implementation_key(3062)) __missing_type__  _Presentation::GetVBASigned ( );
__declspec(implementation_key(3063)) __missing_type__  _Presentation::GetSnapToGrid ( );
__declspec(implementation_key(3064)) void _Presentation::PutSnapToGrid ( __missing_type__ SnapToGrid );
__declspec(implementation_key(3065)) float _Presentation::GetGridDistance ( );
__declspec(implementation_key(3066)) void _Presentation::PutGridDistance ( float GridDistance );
__declspec(implementation_key(3067)) DesignsPtr _Presentation::GetDesigns ( );
__declspec(implementation_key(3068)) HRESULT _Presentation::Merge ( _bstr_t Path );
__declspec(implementation_key(3069)) HRESULT _Presentation::CheckIn ( VARIANT_BOOL SaveChanges, const _variant_t & Comments, const _variant_t & MakePublic );
__declspec(implementation_key(3070)) VARIANT_BOOL _Presentation::CanCheckIn ( );
__declspec(implementation_key(3071)) __missing_type__ _Presentation::GetSignatures ( );
__declspec(implementation_key(3072)) __missing_type__  _Presentation::GetRemovePersonalInformation ( );
__declspec(implementation_key(3073)) void _Presentation::PutRemovePersonalInformation ( __missing_type__ RemovePersonalInformation );
__declspec(implementation_key(3074)) HRESULT _Presentation::SendForReview ( _bstr_t Recipients, _bstr_t Subject, VARIANT_BOOL ShowMessage, const _variant_t & IncludeAttachment );
__declspec(implementation_key(3075)) HRESULT _Presentation::ReplyWithChanges ( VARIANT_BOOL ShowMessage );
__declspec(implementation_key(3076)) HRESULT _Presentation::EndReview ( );
__declspec(implementation_key(3077)) enum PpRevisionInfo _Presentation::GetHasRevisionInfo ( );
__declspec(implementation_key(3078)) HRESULT _Presentation::AddBaseline ( _bstr_t FileName );
__declspec(implementation_key(3079)) HRESULT _Presentation::RemoveBaseline ( );
__declspec(implementation_key(3080)) _bstr_t _Presentation::GetPasswordEncryptionProvider ( );
__declspec(implementation_key(3081)) _bstr_t _Presentation::GetPasswordEncryptionAlgorithm ( );
__declspec(implementation_key(3082)) int _Presentation::GetPasswordEncryptionKeyLength ( );
__declspec(implementation_key(3083)) VARIANT_BOOL _Presentation::GetPasswordEncryptionFileProperties ( );
__declspec(implementation_key(3084)) HRESULT _Presentation::SetPasswordEncryptionOptions ( _bstr_t PasswordEncryptionProvider, _bstr_t PasswordEncryptionAlgorithm, int PasswordEncryptionKeyLength, VARIANT_BOOL PasswordEncryptionFileProperties );
__declspec(implementation_key(3085)) _bstr_t _Presentation::GetPassword ( );
__declspec(implementation_key(3086)) void _Presentation::PutPassword ( _bstr_t Password );
__declspec(implementation_key(3087)) _bstr_t _Presentation::GetWritePassword ( );
__declspec(implementation_key(3088)) void _Presentation::PutWritePassword ( _bstr_t WritePassword );
__declspec(implementation_key(3089)) __missing_type__ _Presentation::GetPermission ( );
__declspec(implementation_key(3090)) __missing_type__ _Presentation::GetSharedWorkspace ( );
__declspec(implementation_key(3091)) __missing_type__ _Presentation::GetSync ( );
__declspec(implementation_key(3092)) HRESULT _Presentation::SendFaxOverInternet ( _bstr_t Recipients, _bstr_t Subject, VARIANT_BOOL ShowMessage );
__declspec(implementation_key(3093)) __missing_type__ _Presentation::GetDocumentLibraryVersions ( );
__declspec(implementation_key(3094)) __missing_type__ _Presentation::GetContentTypeProperties ( );
__declspec(implementation_key(3095)) int _Presentation::GetSectionCount ( );
__declspec(implementation_key(3096)) VARIANT_BOOL _Presentation::GetHasSections ( );
__declspec(implementation_key(3097)) HRESULT _Presentation::NewSectionAfter ( int Index, VARIANT_BOOL AfterSlide, _bstr_t sectionTitle, int * newSectionIndex );
__declspec(implementation_key(3098)) HRESULT _Presentation::DeleteSection ( int Index );
__declspec(implementation_key(3099)) HRESULT _Presentation::DisableSections ( );
__declspec(implementation_key(3100)) _bstr_t _Presentation::sectionTitle ( int Index );
__declspec(implementation_key(3101)) HRESULT _Presentation::RemoveDocumentInformation ( enum PpRemoveDocInfoType Type );
__declspec(implementation_key(3102)) HRESULT _Presentation::CheckInWithVersion ( VARIANT_BOOL SaveChanges, const _variant_t & Comments, const _variant_t & MakePublic, const _variant_t & VersionType );
__declspec(implementation_key(3103)) HRESULT _Presentation::ExportAsFixedFormat ( _bstr_t Path, enum PpFixedFormatType FixedFormatType, enum PpFixedFormatIntent Intent, __missing_type__ FrameSlides, enum PpPrintHandoutOrder HandoutOrder, enum PpPrintOutputType OutputType, __missing_type__ PrintHiddenSlides, struct PrintRange * PrintRange, enum PpPrintRangeType RangeType, _bstr_t SlideShowName, VARIANT_BOOL IncludeDocProperties, VARIANT_BOOL KeepIRMSettings, VARIANT_BOOL DocStructureTags, VARIANT_BOOL BitmapMissingFonts, VARIANT_BOOL UseISO19005_1, const _variant_t & ExternalExporter );
__declspec(implementation_key(3104)) __missing_type__ _Presentation::GetServerPolicy ( );
__declspec(implementation_key(3105)) __missing_type__ _Presentation::GetWorkflowTasks ( );
__declspec(implementation_key(3106)) __missing_type__ _Presentation::GetWorkflowTemplates ( );
__declspec(implementation_key(3107)) HRESULT _Presentation::LockServerFile ( );
__declspec(implementation_key(3108)) __missing_type__ _Presentation::GetDocumentInspectors ( );
__declspec(implementation_key(3109)) VARIANT_BOOL _Presentation::GetHasVBProject ( );
__declspec(implementation_key(3110)) __missing_type__ _Presentation::GetCustomXMLParts ( );
__declspec(implementation_key(3111)) VARIANT_BOOL _Presentation::GetFinal ( );
__declspec(implementation_key(3112)) void _Presentation::PutFinal ( VARIANT_BOOL Final );
__declspec(implementation_key(3113)) HRESULT _Presentation::ApplyTheme ( _bstr_t themeName );
__declspec(implementation_key(3114)) CustomerDataPtr _Presentation::GetCustomerData ( );
__declspec(implementation_key(3115)) ResearchPtr _Presentation::GetResearch ( );
__declspec(implementation_key(3116)) HRESULT _Presentation::PublishSlides ( _bstr_t SlideLibraryUrl, VARIANT_BOOL Overwrite, VARIANT_BOOL UseSlideOrder );
__declspec(implementation_key(3117)) _bstr_t _Presentation::GetEncryptionProvider ( );
__declspec(implementation_key(3118)) void _Presentation::PutEncryptionProvider ( _bstr_t EncryptionProvider );
__declspec(implementation_key(3119)) HRESULT _Presentation::Convert ( );
__declspec(implementation_key(3120)) SectionPropertiesPtr _Presentation::GetSectionProperties ( );
__declspec(implementation_key(3121)) CoauthoringPtr _Presentation::GetCoauthoring ( );
__declspec(implementation_key(3122)) HRESULT _Presentation::MergeWithBaseline ( _bstr_t withPresentation, _bstr_t baselinePresentation );
__declspec(implementation_key(3123)) VARIANT_BOOL _Presentation::GetInMergeMode ( );
__declspec(implementation_key(3124)) HRESULT _Presentation::AcceptAll ( );
__declspec(implementation_key(3125)) HRESULT _Presentation::RejectAll ( );
__declspec(implementation_key(3126)) HRESULT _Presentation::EnsureAllMediaUpgraded ( );
__declspec(implementation_key(3127)) BroadcastPtr _Presentation::GetBroadcast ( );
__declspec(implementation_key(3128)) VARIANT_BOOL _Presentation::GetHasNotesMaster ( );
__declspec(implementation_key(3129)) VARIANT_BOOL _Presentation::GetHasHandoutMaster ( );
__declspec(implementation_key(3130)) HRESULT _Presentation::Convert2 ( _bstr_t FileName );
__declspec(implementation_key(3131)) enum PpMediaTaskStatus _Presentation::GetCreateVideoStatus ( );
__declspec(implementation_key(3132)) HRESULT _Presentation::CreateVideo ( _bstr_t FileName, VARIANT_BOOL UseTimingsAndNarrations, int DefaultSlideDuration, int VertResolution, int FramesPerSecond, int Quality );
__declspec(implementation_key(3133)) HRESULT _Presentation::ApplyTemplate2 ( _bstr_t FileName, _bstr_t VariantGUID );
__declspec(implementation_key(3134)) VARIANT_BOOL _Presentation::GetChartDataPointTrack ( );
__declspec(implementation_key(3135)) void _Presentation::PutChartDataPointTrack ( VARIANT_BOOL pfChartDataPointTrack );
__declspec(implementation_key(3136)) HRESULT _Presentation::ExportAsFixedFormat2 ( _bstr_t Path, enum PpFixedFormatType FixedFormatType, enum PpFixedFormatIntent Intent, __missing_type__ FrameSlides, enum PpPrintHandoutOrder HandoutOrder, enum PpPrintOutputType OutputType, __missing_type__ PrintHiddenSlides, struct PrintRange * PrintRange, enum PpPrintRangeType RangeType, _bstr_t SlideShowName, VARIANT_BOOL IncludeDocProperties, VARIANT_BOOL KeepIRMSettings, VARIANT_BOOL DocStructureTags, VARIANT_BOOL BitmapMissingFonts, VARIANT_BOOL UseISO19005_1, VARIANT_BOOL IncludeMarkup, const _variant_t & ExternalExporter );
__declspec(implementation_key(3137)) GuidesPtr _Presentation::GetGuides ( );
__declspec(implementation_key(3138)) _ApplicationPtr Cell::GetApplication ( );
__declspec(implementation_key(3139)) IDispatchPtr Cell::GetParent ( );
__declspec(implementation_key(3140)) ShapePtr Cell::GetShape ( );
__declspec(implementation_key(3141)) BordersPtr Cell::GetBorders ( );
__declspec(implementation_key(3142)) HRESULT Cell::Merge ( struct Cell * MergeTo );
__declspec(implementation_key(3143)) HRESULT Cell::Split ( int NumRows, int NumColumns );
__declspec(implementation_key(3144)) HRESULT Cell::Select ( );
__declspec(implementation_key(3145)) VARIANT_BOOL Cell::GetSelected ( );
__declspec(implementation_key(3146)) _ApplicationPtr CellRange::GetApplication ( );
__declspec(implementation_key(3147)) IDispatchPtr CellRange::GetParent ( );
__declspec(implementation_key(3148)) CellPtr CellRange::Item ( int Index );
__declspec(implementation_key(3149)) BordersPtr CellRange::GetBorders ( );
__declspec(implementation_key(3150)) _ApplicationPtr Column::GetApplication ( );
__declspec(implementation_key(3151)) IDispatchPtr Column::GetParent ( );
__declspec(implementation_key(3152)) CellRangePtr Column::GetCells ( );
__declspec(implementation_key(3153)) HRESULT Column::Select ( );
__declspec(implementation_key(3154)) HRESULT Column::Delete ( );
__declspec(implementation_key(3155)) float Column::GetWidth ( );
__declspec(implementation_key(3156)) void Column::PutWidth ( float Width );
__declspec(implementation_key(3157)) _ApplicationPtr Columns::GetApplication ( );
__declspec(implementation_key(3158)) IDispatchPtr Columns::GetParent ( );
__declspec(implementation_key(3159)) ColumnPtr Columns::Item ( int Index );
__declspec(implementation_key(3160)) ColumnPtr Columns::Add ( int BeforeColumn );
__declspec(implementation_key(3161)) _ApplicationPtr Row::GetApplication ( );
__declspec(implementation_key(3162)) IDispatchPtr Row::GetParent ( );
__declspec(implementation_key(3163)) CellRangePtr Row::GetCells ( );
__declspec(implementation_key(3164)) HRESULT Row::Select ( );
__declspec(implementation_key(3165)) HRESULT Row::Delete ( );
__declspec(implementation_key(3166)) float Row::GetHeight ( );
__declspec(implementation_key(3167)) void Row::PutHeight ( float Height );
__declspec(implementation_key(3168)) _ApplicationPtr Rows::GetApplication ( );
__declspec(implementation_key(3169)) IDispatchPtr Rows::GetParent ( );
__declspec(implementation_key(3170)) RowPtr Rows::Item ( int Index );
__declspec(implementation_key(3171)) RowPtr Rows::Add ( int BeforeRow );
__declspec(implementation_key(3172)) _ApplicationPtr Table::GetApplication ( );
__declspec(implementation_key(3173)) IDispatchPtr Table::GetParent ( );
__declspec(implementation_key(3174)) ColumnsPtr Table::GetColumns ( );
__declspec(implementation_key(3175)) RowsPtr Table::GetRows ( );
__declspec(implementation_key(3176)) CellPtr Table::Cell ( int Row, int Column );
__declspec(implementation_key(3177)) enum PpDirection Table::GetTableDirection ( );
__declspec(implementation_key(3178)) void Table::PutTableDirection ( enum PpDirection TableDirection );
__declspec(implementation_key(3179)) HRESULT Table::MergeBorders ( );
__declspec(implementation_key(3180)) VARIANT_BOOL Table::GetFirstRow ( );
__declspec(implementation_key(3181)) void Table::PutFirstRow ( VARIANT_BOOL FirstRow );
__declspec(implementation_key(3182)) VARIANT_BOOL Table::GetLastRow ( );
__declspec(implementation_key(3183)) void Table::PutLastRow ( VARIANT_BOOL LastRow );
__declspec(implementation_key(3184)) VARIANT_BOOL Table::GetFirstCol ( );
__declspec(implementation_key(3185)) void Table::PutFirstCol ( VARIANT_BOOL FirstCol );
__declspec(implementation_key(3186)) VARIANT_BOOL Table::GetLastCol ( );
__declspec(implementation_key(3187)) void Table::PutLastCol ( VARIANT_BOOL LastCol );
__declspec(implementation_key(3188)) VARIANT_BOOL Table::GetHorizBanding ( );
__declspec(implementation_key(3189)) void Table::PutHorizBanding ( VARIANT_BOOL HorizBanding );
__declspec(implementation_key(3190)) VARIANT_BOOL Table::GetVertBanding ( );
__declspec(implementation_key(3191)) void Table::PutVertBanding ( VARIANT_BOOL VertBanding );
__declspec(implementation_key(3192)) TableStylePtr Table::GetStyle ( );
__declspec(implementation_key(3193)) TableBackgroundPtr Table::GetBackground ( );
__declspec(implementation_key(3194)) HRESULT Table::ScaleProportionally ( float scale );
__declspec(implementation_key(3195)) HRESULT Table::ApplyStyle ( _bstr_t StyleID, VARIANT_BOOL SaveFormatting );
__declspec(implementation_key(3196)) _bstr_t Table::GetAlternativeText ( );
__declspec(implementation_key(3197)) void Table::PutAlternativeText ( _bstr_t AlternativeText );
__declspec(implementation_key(3198)) _bstr_t Table::GetTitle ( );
__declspec(implementation_key(3199)) void Table::PutTitle ( _bstr_t Title );
__declspec(implementation_key(3200)) _ApplicationPtr Timing::GetApplication ( );
__declspec(implementation_key(3201)) IDispatchPtr Timing::GetParent ( );
__declspec(implementation_key(3202)) float Timing::GetDuration ( );
__declspec(implementation_key(3203)) void Timing::PutDuration ( float Duration );
__declspec(implementation_key(3204)) enum MsoAnimTriggerType Timing::GetTriggerType ( );
__declspec(implementation_key(3205)) void Timing::PutTriggerType ( enum MsoAnimTriggerType TriggerType );
__declspec(implementation_key(3206)) float Timing::GetTriggerDelayTime ( );
__declspec(implementation_key(3207)) void Timing::PutTriggerDelayTime ( float TriggerDelayTime );
__declspec(implementation_key(3208)) ShapePtr Timing::GetTriggerShape ( );
__declspec(implementation_key(3209)) void Timing::PutTriggerShape ( struct Shape * TriggerShape );
__declspec(implementation_key(3210)) int Timing::GetRepeatCount ( );
__declspec(implementation_key(3211)) void Timing::PutRepeatCount ( int RepeatCount );
__declspec(implementation_key(3212)) float Timing::GetRepeatDuration ( );
__declspec(implementation_key(3213)) void Timing::PutRepeatDuration ( float RepeatDuration );
__declspec(implementation_key(3214)) float Timing::GetSpeed ( );
__declspec(implementation_key(3215)) void Timing::PutSpeed ( float Speed );
__declspec(implementation_key(3216)) float Timing::GetAccelerate ( );
__declspec(implementation_key(3217)) void Timing::PutAccelerate ( float Accelerate );
__declspec(implementation_key(3218)) float Timing::GetDecelerate ( );
__declspec(implementation_key(3219)) void Timing::PutDecelerate ( float Decelerate );
__declspec(implementation_key(3220)) __missing_type__  Timing::GetAutoReverse ( );
__declspec(implementation_key(3221)) void Timing::PutAutoReverse ( __missing_type__ AutoReverse );
__declspec(implementation_key(3222)) __missing_type__  Timing::GetSmoothStart ( );
__declspec(implementation_key(3223)) void Timing::PutSmoothStart ( __missing_type__ SmoothStart );
__declspec(implementation_key(3224)) __missing_type__  Timing::GetSmoothEnd ( );
__declspec(implementation_key(3225)) void Timing::PutSmoothEnd ( __missing_type__ SmoothEnd );
__declspec(implementation_key(3226)) __missing_type__  Timing::GetRewindAtEnd ( );
__declspec(implementation_key(3227)) void Timing::PutRewindAtEnd ( __missing_type__ RewindAtEnd );
__declspec(implementation_key(3228)) enum MsoAnimEffectRestart Timing::GetRestart ( );
__declspec(implementation_key(3229)) void Timing::PutRestart ( enum MsoAnimEffectRestart Restart );
__declspec(implementation_key(3230)) __missing_type__  Timing::GetBounceEnd ( );
__declspec(implementation_key(3231)) void Timing::PutBounceEnd ( __missing_type__ BounceEnd );
__declspec(implementation_key(3232)) float Timing::GetBounceEndIntensity ( );
__declspec(implementation_key(3233)) void Timing::PutBounceEndIntensity ( float BounceEndIntensity );
__declspec(implementation_key(3234)) _bstr_t Timing::GetTriggerBookmark ( );
__declspec(implementation_key(3235)) void Timing::PutTriggerBookmark ( _bstr_t TriggerBookmark );
__declspec(implementation_key(3236)) _ApplicationPtr AnimationBehavior::GetApplication ( );
__declspec(implementation_key(3237)) IDispatchPtr AnimationBehavior::GetParent ( );
__declspec(implementation_key(3238)) enum MsoAnimAdditive AnimationBehavior::GetAdditive ( );
__declspec(implementation_key(3239)) void AnimationBehavior::PutAdditive ( enum MsoAnimAdditive Additive );
__declspec(implementation_key(3240)) enum MsoAnimAccumulate AnimationBehavior::GetAccumulate ( );
__declspec(implementation_key(3241)) void AnimationBehavior::PutAccumulate ( enum MsoAnimAccumulate Accumulate );
__declspec(implementation_key(3242)) enum MsoAnimType AnimationBehavior::GetType ( );
__declspec(implementation_key(3243)) void AnimationBehavior::PutType ( enum MsoAnimType Type );
__declspec(implementation_key(3244)) MotionEffectPtr AnimationBehavior::GetMotionEffect ( );
__declspec(implementation_key(3245)) ColorEffectPtr AnimationBehavior::GetColorEffect ( );
__declspec(implementation_key(3246)) ScaleEffectPtr AnimationBehavior::GetScaleEffect ( );
__declspec(implementation_key(3247)) RotationEffectPtr AnimationBehavior::GetRotationEffect ( );
__declspec(implementation_key(3248)) PropertyEffectPtr AnimationBehavior::GetPropertyEffect ( );
__declspec(implementation_key(3249)) TimingPtr AnimationBehavior::GetTiming ( );
__declspec(implementation_key(3250)) HRESULT AnimationBehavior::Delete ( );
__declspec(implementation_key(3251)) CommandEffectPtr AnimationBehavior::GetCommandEffect ( );
__declspec(implementation_key(3252)) FilterEffectPtr AnimationBehavior::GetFilterEffect ( );
__declspec(implementation_key(3253)) SetEffectPtr AnimationBehavior::GetSetEffect ( );
__declspec(implementation_key(3254)) _ApplicationPtr AnimationBehaviors::GetApplication ( );
__declspec(implementation_key(3255)) IDispatchPtr AnimationBehaviors::GetParent ( );
__declspec(implementation_key(3256)) AnimationBehaviorPtr AnimationBehaviors::Item ( int Index );
__declspec(implementation_key(3257)) AnimationBehaviorPtr AnimationBehaviors::Add ( enum MsoAnimType Type, int Index );
__declspec(implementation_key(3258)) _ApplicationPtr Effect::GetApplication ( );
__declspec(implementation_key(3259)) IDispatchPtr Effect::GetParent ( );
__declspec(implementation_key(3260)) ShapePtr Effect::GetShape ( );
__declspec(implementation_key(3261)) void Effect::PutShape ( struct Shape * Shape );
__declspec(implementation_key(3262)) HRESULT Effect::MoveTo ( int toPos );
__declspec(implementation_key(3263)) HRESULT Effect::MoveBefore ( struct Effect * Effect );
__declspec(implementation_key(3264)) HRESULT Effect::MoveAfter ( struct Effect * Effect );
__declspec(implementation_key(3265)) HRESULT Effect::Delete ( );
__declspec(implementation_key(3266)) int Effect::GetIndex ( );
__declspec(implementation_key(3267)) TimingPtr Effect::GetTiming ( );
__declspec(implementation_key(3268)) enum MsoAnimEffect Effect::GetEffectType ( );
__declspec(implementation_key(3269)) void Effect::PutEffectType ( enum MsoAnimEffect EffectType );
__declspec(implementation_key(3270)) EffectParametersPtr Effect::GetEffectParameters ( );
__declspec(implementation_key(3271)) int Effect::GetTextRangeStart ( );
__declspec(implementation_key(3272)) int Effect::GetTextRangeLength ( );
__declspec(implementation_key(3273)) int Effect::GetParagraph ( );
__declspec(implementation_key(3274)) void Effect::PutParagraph ( int Paragraph );
__declspec(implementation_key(3275)) _bstr_t Effect::GetDisplayName ( );
__declspec(implementation_key(3276)) __missing_type__  Effect::GetExit ( );
__declspec(implementation_key(3277)) void Effect::PutExit ( __missing_type__ Exit );
__declspec(implementation_key(3278)) AnimationBehaviorsPtr Effect::GetBehaviors ( );
__declspec(implementation_key(3279)) EffectInformationPtr Effect::GetEffectInformation ( );
__declspec(implementation_key(3280)) HRESULT EApplication::WindowSelectionChange ( struct Selection * Sel );
__declspec(implementation_key(3281)) HRESULT EApplication::WindowBeforeRightClick ( struct Selection * Sel, VARIANT_BOOL * Cancel );
__declspec(implementation_key(3282)) HRESULT EApplication::WindowBeforeDoubleClick ( struct Selection * Sel, VARIANT_BOOL * Cancel );
__declspec(implementation_key(3283)) HRESULT EApplication::PresentationClose ( struct _Presentation * Pres );
__declspec(implementation_key(3284)) HRESULT EApplication::PresentationSave ( struct _Presentation * Pres );
__declspec(implementation_key(3285)) HRESULT EApplication::PresentationOpen ( struct _Presentation * Pres );
__declspec(implementation_key(3286)) HRESULT EApplication::NewPresentation ( struct _Presentation * Pres );
__declspec(implementation_key(3287)) HRESULT EApplication::PresentationNewSlide ( struct _Slide * Sld );
__declspec(implementation_key(3288)) HRESULT EApplication::WindowActivate ( struct _Presentation * Pres, struct DocumentWindow * Wn );
__declspec(implementation_key(3289)) HRESULT EApplication::WindowDeactivate ( struct _Presentation * Pres, struct DocumentWindow * Wn );
__declspec(implementation_key(3290)) HRESULT EApplication::SlideShowBegin ( struct SlideShowWindow * Wn );
__declspec(implementation_key(3291)) HRESULT EApplication::SlideShowNextBuild ( struct SlideShowWindow * Wn );
__declspec(implementation_key(3292)) HRESULT EApplication::SlideShowNextSlide ( struct SlideShowWindow * Wn );
__declspec(implementation_key(3293)) HRESULT EApplication::SlideShowEnd ( struct _Presentation * Pres );
__declspec(implementation_key(3294)) HRESULT EApplication::PresentationPrint ( struct _Presentation * Pres );
__declspec(implementation_key(3295)) HRESULT EApplication::SlideSelectionChanged ( struct SlideRange * SldRange );
__declspec(implementation_key(3296)) HRESULT EApplication::ColorSchemeChanged ( struct SlideRange * SldRange );
__declspec(implementation_key(3297)) HRESULT EApplication::PresentationBeforeSave ( struct _Presentation * Pres, VARIANT_BOOL * Cancel );
__declspec(implementation_key(3298)) HRESULT EApplication::SlideShowNextClick ( struct SlideShowWindow * Wn, struct Effect * nEffect );
__declspec(implementation_key(3299)) HRESULT EApplication::AfterNewPresentation ( struct _Presentation * Pres );
__declspec(implementation_key(3300)) HRESULT EApplication::AfterPresentationOpen ( struct _Presentation * Pres );
__declspec(implementation_key(3301)) HRESULT EApplication::PresentationSync ( struct _Presentation * Pres, __missing_type__ SyncEventType );
__declspec(implementation_key(3302)) HRESULT EApplication::SlideShowOnNext ( struct SlideShowWindow * Wn );
__declspec(implementation_key(3303)) HRESULT EApplication::SlideShowOnPrevious ( struct SlideShowWindow * Wn );
__declspec(implementation_key(3304)) HRESULT EApplication::PresentationBeforeClose ( struct _Presentation * Pres, VARIANT_BOOL * Cancel );
__declspec(implementation_key(3305)) HRESULT EApplication::ProtectedViewWindowOpen ( struct ProtectedViewWindow * ProtViewWindow );
__declspec(implementation_key(3306)) HRESULT EApplication::ProtectedViewWindowBeforeEdit ( struct ProtectedViewWindow * ProtViewWindow, VARIANT_BOOL * Cancel );
__declspec(implementation_key(3307)) HRESULT EApplication::ProtectedViewWindowBeforeClose ( struct ProtectedViewWindow * ProtViewWindow, enum PpProtectedViewCloseReason ProtectedViewCloseReason, VARIANT_BOOL * Cancel );
__declspec(implementation_key(3308)) HRESULT EApplication::ProtectedViewWindowActivate ( struct ProtectedViewWindow * ProtViewWindow );
__declspec(implementation_key(3309)) HRESULT EApplication::ProtectedViewWindowDeactivate ( struct ProtectedViewWindow * ProtViewWindow );
__declspec(implementation_key(3310)) HRESULT EApplication::PresentationCloseFinal ( struct _Presentation * Pres );
__declspec(implementation_key(3311)) HRESULT EApplication::AfterDragDropOnSlide ( struct _Slide * Sld, float X, float Y );
__declspec(implementation_key(3312)) HRESULT EApplication::AfterShapeSizeChange ( struct Shape * shp );
__declspec(implementation_key(3313)) _ApplicationPtr Sequence::GetApplication ( );
__declspec(implementation_key(3314)) IDispatchPtr Sequence::GetParent ( );
__declspec(implementation_key(3315)) EffectPtr Sequence::Item ( int Index );
__declspec(implementation_key(3316)) EffectPtr Sequence::AddEffect ( struct Shape * Shape, enum MsoAnimEffect effectId, enum MsoAnimateByLevel Level, enum MsoAnimTriggerType trigger, int Index );
__declspec(implementation_key(3317)) EffectPtr Sequence::Clone ( struct Effect * Effect, int Index );
__declspec(implementation_key(3318)) EffectPtr Sequence::FindFirstAnimationFor ( struct Shape * Shape );
__declspec(implementation_key(3319)) EffectPtr Sequence::FindFirstAnimationForClick ( int click );
__declspec(implementation_key(3320)) EffectPtr Sequence::ConvertToBuildLevel ( struct Effect * Effect, enum MsoAnimateByLevel Level );
__declspec(implementation_key(3321)) EffectPtr Sequence::ConvertToAfterEffect ( struct Effect * Effect, enum MsoAnimAfterEffect After, __missing_type__ DimColor, enum PpColorSchemeIndex DimSchemeColor );
__declspec(implementation_key(3322)) EffectPtr Sequence::ConvertToAnimateBackground ( struct Effect * Effect, __missing_type__ AnimateBackground );
__declspec(implementation_key(3323)) EffectPtr Sequence::ConvertToAnimateInReverse ( struct Effect * Effect, __missing_type__ animateInReverse );
__declspec(implementation_key(3324)) EffectPtr Sequence::ConvertToTextUnitEffect ( struct Effect * Effect, enum MsoAnimTextUnitEffect unitEffect );
__declspec(implementation_key(3325)) EffectPtr Sequence::AddTriggerEffect ( struct Shape * pShape, enum MsoAnimEffect effectId, enum MsoAnimTriggerType trigger, struct Shape * pTriggerShape, _bstr_t bookmark, enum MsoAnimateByLevel Level );
__declspec(implementation_key(3326)) _ApplicationPtr Sequences::GetApplication ( );
__declspec(implementation_key(3327)) IDispatchPtr Sequences::GetParent ( );
__declspec(implementation_key(3328)) SequencePtr Sequences::Item ( int Index );
__declspec(implementation_key(3329)) SequencePtr Sequences::Add ( int Index );
__declspec(implementation_key(3330)) _ApplicationPtr TimeLine::GetApplication ( );
__declspec(implementation_key(3331)) IDispatchPtr TimeLine::GetParent ( );
__declspec(implementation_key(3332)) SequencePtr TimeLine::GetMainSequence ( );
__declspec(implementation_key(3333)) SequencesPtr TimeLine::GetInteractiveSequences ( );
__declspec(implementation_key(3334)) enum PpResampleMediaProfile ResampleMediaTask::Getprofile ( );
__declspec(implementation_key(3335)) VARIANT_BOOL ResampleMediaTask::GetIsLinked ( );
__declspec(implementation_key(3336)) VARIANT_BOOL ResampleMediaTask::GetIsEmbedded ( );
__declspec(implementation_key(3337)) long ResampleMediaTask::GetAudioSamplingRate ( );
__declspec(implementation_key(3338)) long ResampleMediaTask::GetVideoFrameRate ( );
__declspec(implementation_key(3339)) long ResampleMediaTask::GetSampleHeight ( );
__declspec(implementation_key(3340)) long ResampleMediaTask::GetSampleWidth ( );
__declspec(implementation_key(3341)) _bstr_t ResampleMediaTask::GetContainerType ( );
__declspec(implementation_key(3342)) _bstr_t ResampleMediaTask::GetVideoCompressionType ( );
__declspec(implementation_key(3343)) _bstr_t ResampleMediaTask::GetAudioCompressionType ( );
__declspec(implementation_key(3344)) ShapePtr ResampleMediaTask::GetShape ( );
__declspec(implementation_key(3345)) ResampleMediaTaskPtr ResampleMediaTasks::Item ( int Index );
__declspec(implementation_key(3346)) HRESULT ResampleMediaTasks::Pause ( );
__declspec(implementation_key(3347)) HRESULT ResampleMediaTasks::Cancel ( );
__declspec(implementation_key(3348)) HRESULT ResampleMediaTasks::Resume ( );
__declspec(implementation_key(3349)) long ResampleMediaTasks::GetPercentComplete ( );
__declspec(implementation_key(3350)) IDispatchPtr ShapeRange::GetApplication ( );
__declspec(implementation_key(3351)) long ShapeRange::GetCreator ( );
__declspec(implementation_key(3352)) IDispatchPtr ShapeRange::GetParent ( );
__declspec(implementation_key(3353)) HRESULT ShapeRange::Apply ( );
__declspec(implementation_key(3354)) HRESULT ShapeRange::Delete ( );
__declspec(implementation_key(3355)) HRESULT ShapeRange::Flip ( __missing_type__ FlipCmd );
__declspec(implementation_key(3356)) HRESULT ShapeRange::IncrementLeft ( float Increment );
__declspec(implementation_key(3357)) HRESULT ShapeRange::IncrementRotation ( float Increment );
__declspec(implementation_key(3358)) HRESULT ShapeRange::IncrementTop ( float Increment );
__declspec(implementation_key(3359)) HRESULT ShapeRange::PickUp ( );
__declspec(implementation_key(3360)) HRESULT ShapeRange::RerouteConnections ( );
__declspec(implementation_key(3361)) HRESULT ShapeRange::ScaleHeight ( float Factor, __missing_type__ RelativeToOriginalSize, __missing_type__ fScale );
__declspec(implementation_key(3362)) HRESULT ShapeRange::ScaleWidth ( float Factor, __missing_type__ RelativeToOriginalSize, __missing_type__ fScale );
__declspec(implementation_key(3363)) HRESULT ShapeRange::SetShapesDefaultProperties ( );
__declspec(implementation_key(3364)) ShapeRangePtr ShapeRange::Ungroup ( );
__declspec(implementation_key(3365)) HRESULT ShapeRange::ZOrder ( __missing_type__ ZOrderCmd );
__declspec(implementation_key(3366)) AdjustmentsPtr ShapeRange::GetAdjustments ( );
__declspec(implementation_key(3367)) __missing_type__  ShapeRange::GetAutoShapeType ( );
__declspec(implementation_key(3368)) void ShapeRange::PutAutoShapeType ( __missing_type__ AutoShapeType );
__declspec(implementation_key(3369)) __missing_type__  ShapeRange::GetBlackWhiteMode ( );
__declspec(implementation_key(3370)) void ShapeRange::PutBlackWhiteMode ( __missing_type__ BlackWhiteMode );
__declspec(implementation_key(3371)) CalloutFormatPtr ShapeRange::GetCallout ( );
__declspec(implementation_key(3372)) int ShapeRange::GetConnectionSiteCount ( );
__declspec(implementation_key(3373)) __missing_type__  ShapeRange::GetConnector ( );
__declspec(implementation_key(3374)) ConnectorFormatPtr ShapeRange::GetConnectorFormat ( );
__declspec(implementation_key(3375)) FillFormatPtr ShapeRange::GetFill ( );
__declspec(implementation_key(3376)) GroupShapesPtr ShapeRange::GetGroupItems ( );
__declspec(implementation_key(3377)) float ShapeRange::GetHeight ( );
__declspec(implementation_key(3378)) void ShapeRange::PutHeight ( float Height );
__declspec(implementation_key(3379)) __missing_type__  ShapeRange::GetHorizontalFlip ( );
__declspec(implementation_key(3380)) float ShapeRange::GetLeft ( );
__declspec(implementation_key(3381)) void ShapeRange::PutLeft ( float Left );
__declspec(implementation_key(3382)) LineFormatPtr ShapeRange::GetLine ( );
__declspec(implementation_key(3383)) __missing_type__  ShapeRange::GetLockAspectRatio ( );
__declspec(implementation_key(3384)) void ShapeRange::PutLockAspectRatio ( __missing_type__ LockAspectRatio );
__declspec(implementation_key(3385)) _bstr_t ShapeRange::GetName ( );
__declspec(implementation_key(3386)) void ShapeRange::PutName ( _bstr_t Name );
__declspec(implementation_key(3387)) ShapeNodesPtr ShapeRange::GetNodes ( );
__declspec(implementation_key(3388)) float ShapeRange::GetRotation ( );
__declspec(implementation_key(3389)) void ShapeRange::PutRotation ( float Rotation );
__declspec(implementation_key(3390)) PictureFormatPtr ShapeRange::GetPictureFormat ( );
__declspec(implementation_key(3391)) ShadowFormatPtr ShapeRange::GetShadow ( );
__declspec(implementation_key(3392)) TextEffectFormatPtr ShapeRange::GetTextEffect ( );
__declspec(implementation_key(3393)) TextFramePtr ShapeRange::GetTextFrame ( );
__declspec(implementation_key(3394)) ThreeDFormatPtr ShapeRange::GetThreeD ( );
__declspec(implementation_key(3395)) float ShapeRange::GetTop ( );
__declspec(implementation_key(3396)) void ShapeRange::PutTop ( float Top );
__declspec(implementation_key(3397)) __missing_type__  ShapeRange::GetType ( );
__declspec(implementation_key(3398)) __missing_type__  ShapeRange::GetVerticalFlip ( );
__declspec(implementation_key(3399)) _variant_t ShapeRange::GetVertices ( );
__declspec(implementation_key(3400)) __missing_type__  ShapeRange::GetVisible ( );
__declspec(implementation_key(3401)) void ShapeRange::PutVisible ( __missing_type__ Visible );
__declspec(implementation_key(3402)) float ShapeRange::GetWidth ( );
__declspec(implementation_key(3403)) void ShapeRange::PutWidth ( float Width );
__declspec(implementation_key(3404)) int ShapeRange::GetZOrderPosition ( );
__declspec(implementation_key(3405)) OLEFormatPtr ShapeRange::GetOLEFormat ( );
__declspec(implementation_key(3406)) LinkFormatPtr ShapeRange::GetLinkFormat ( );
__declspec(implementation_key(3407)) PlaceholderFormatPtr ShapeRange::GetPlaceholderFormat ( );
__declspec(implementation_key(3408)) AnimationSettingsPtr ShapeRange::GetAnimationSettings ( );
__declspec(implementation_key(3409)) ActionSettingsPtr ShapeRange::GetActionSettings ( );
__declspec(implementation_key(3410)) TagsPtr ShapeRange::GetTags ( );
__declspec(implementation_key(3411)) HRESULT ShapeRange::Cut ( );
__declspec(implementation_key(3412)) HRESULT ShapeRange::Copy ( );
__declspec(implementation_key(3413)) HRESULT ShapeRange::Select ( __missing_type__ Replace );
__declspec(implementation_key(3414)) ShapeRangePtr ShapeRange::Duplicate ( );
__declspec(implementation_key(3415)) enum PpMediaType ShapeRange::GetMediaType ( );
__declspec(implementation_key(3416)) __missing_type__  ShapeRange::GetHasTextFrame ( );
__declspec(implementation_key(3417)) SoundFormatPtr ShapeRange::GetSoundFormat ( );
__declspec(implementation_key(3418)) ShapePtr ShapeRange::Item ( const _variant_t & Index );
__declspec(implementation_key(3419)) IUnknownPtr ShapeRange::Get_NewEnum ( );
__declspec(implementation_key(3420)) _variant_t ShapeRange::_Index ( int Index );
__declspec(implementation_key(3421)) long ShapeRange::GetCount ( );
__declspec(implementation_key(3422)) ShapePtr ShapeRange::Group ( );
__declspec(implementation_key(3423)) ShapePtr ShapeRange::Regroup ( );
__declspec(implementation_key(3424)) HRESULT ShapeRange::Align ( __missing_type__ AlignCmd, __missing_type__ RelativeTo );
__declspec(implementation_key(3425)) HRESULT ShapeRange::Distribute ( __missing_type__ DistributeCmd, __missing_type__ RelativeTo );
__declspec(implementation_key(3426)) HRESULT ShapeRange::GetPolygonalRepresentation ( unsigned long maxPointsInBuffer, float * pPoints, unsigned long * numPointsInPolygon, __missing_type__ * IsOpen );
__declspec(implementation_key(3427)) __missing_type__ ShapeRange::GetScript ( );
__declspec(implementation_key(3428)) _bstr_t ShapeRange::GetAlternativeText ( );
__declspec(implementation_key(3429)) void ShapeRange::PutAlternativeText ( _bstr_t AlternativeText );
__declspec(implementation_key(3430)) __missing_type__  ShapeRange::GetHasTable ( );
__declspec(implementation_key(3431)) TablePtr ShapeRange::GetTable ( );
__declspec(implementation_key(3432)) HRESULT ShapeRange::Export ( _bstr_t PathName, enum PpShapeFormat Filter, int ScaleWidth, int ScaleHeight, enum PpExportMode ExportMode );
__declspec(implementation_key(3433)) __missing_type__  ShapeRange::GetHasDiagram ( );
__declspec(implementation_key(3434)) DiagramPtr ShapeRange::GetDiagram ( );
__declspec(implementation_key(3435)) __missing_type__  ShapeRange::GetHasDiagramNode ( );
__declspec(implementation_key(3436)) DiagramNodePtr ShapeRange::GetDiagramNode ( );
__declspec(implementation_key(3437)) __missing_type__  ShapeRange::GetChild ( );
__declspec(implementation_key(3438)) ShapePtr ShapeRange::GetParentGroup ( );
__declspec(implementation_key(3439)) CanvasShapesPtr ShapeRange::GetCanvasItems ( );
__declspec(implementation_key(3440)) int ShapeRange::GetId ( );
__declspec(implementation_key(3441)) HRESULT ShapeRange::CanvasCropLeft ( float Increment );
__declspec(implementation_key(3442)) HRESULT ShapeRange::CanvasCropTop ( float Increment );
__declspec(implementation_key(3443)) HRESULT ShapeRange::CanvasCropRight ( float Increment );
__declspec(implementation_key(3444)) HRESULT ShapeRange::CanvasCropBottom ( float Increment );
__declspec(implementation_key(3445)) void ShapeRange::PutRTF ( _bstr_t _arg1 );
__declspec(implementation_key(3446)) CustomerDataPtr ShapeRange::GetCustomerData ( );
__declspec(implementation_key(3447)) TextFrame2Ptr ShapeRange::GetTextFrame2 ( );
__declspec(implementation_key(3448)) __missing_type__  ShapeRange::GetHasChart ( );
__declspec(implementation_key(3449)) __missing_type__  ShapeRange::GetShapeStyle ( );
__declspec(implementation_key(3450)) void ShapeRange::PutShapeStyle ( __missing_type__ ShapeStyle );
__declspec(implementation_key(3451)) __missing_type__  ShapeRange::GetBackgroundStyle ( );
__declspec(implementation_key(3452)) void ShapeRange::PutBackgroundStyle ( __missing_type__ BackgroundStyle );
__declspec(implementation_key(3453)) __missing_type__ ShapeRange::GetSoftEdge ( );
__declspec(implementation_key(3454)) __missing_type__ ShapeRange::GetGlow ( );
__declspec(implementation_key(3455)) __missing_type__ ShapeRange::GetReflection ( );
__declspec(implementation_key(3456)) ChartPtr ShapeRange::GetChart ( );
__declspec(implementation_key(3457)) __missing_type__  ShapeRange::GetHasSmartArt ( );
__declspec(implementation_key(3458)) __missing_type__ ShapeRange::GetSmartArt ( );
__declspec(implementation_key(3459)) HRESULT ShapeRange::ConvertTextToSmartArt ( __missing_type__ * Layout );
__declspec(implementation_key(3460)) _bstr_t ShapeRange::GetTitle ( );
__declspec(implementation_key(3461)) void ShapeRange::PutTitle ( _bstr_t Title );
__declspec(implementation_key(3462)) MediaFormatPtr ShapeRange::GetMediaFormat ( );
__declspec(implementation_key(3463)) HRESULT ShapeRange::PickupAnimation ( );
__declspec(implementation_key(3464)) HRESULT ShapeRange::ApplyAnimation ( );
__declspec(implementation_key(3465)) HRESULT ShapeRange::UpgradeMedia ( );
__declspec(implementation_key(3466)) HRESULT ShapeRange::MergeShapes ( __missing_type__ MergeCmd, struct Shape * PrimaryShape );
__declspec(implementation_key(3467)) __missing_type__  ShapeRange::GetIsNarration ( );
__declspec(implementation_key(3468)) void ShapeRange::PutIsNarration ( __missing_type__ IsNarration );
__declspec(implementation_key(3469)) _bstr_t ShapeRange::GetInkXML ( );
__declspec(implementation_key(3470)) __missing_type__  ShapeRange::GetHasInkXML ( );
__declspec(implementation_key(3471)) __missing_type__  ShapeRange::GetHasSectionLink ( );
__declspec(implementation_key(3472)) IDispatchPtr GroupShapes::GetApplication ( );
__declspec(implementation_key(3473)) long GroupShapes::GetCreator ( );
__declspec(implementation_key(3474)) IDispatchPtr GroupShapes::GetParent ( );
__declspec(implementation_key(3475)) int GroupShapes::GetCount ( );
__declspec(implementation_key(3476)) ShapePtr GroupShapes::Item ( const _variant_t & Index );
__declspec(implementation_key(3477)) IUnknownPtr GroupShapes::Get_NewEnum ( );
__declspec(implementation_key(3478)) ShapeRangePtr GroupShapes::Range ( const _variant_t & Index );
__declspec(implementation_key(3479)) IDispatchPtr CanvasShapes::GetApplication ( );
__declspec(implementation_key(3480)) long CanvasShapes::GetCreator ( );
__declspec(implementation_key(3481)) IDispatchPtr CanvasShapes::GetParent ( );
__declspec(implementation_key(3482)) int CanvasShapes::GetCount ( );
__declspec(implementation_key(3483)) ShapePtr CanvasShapes::Item ( const _variant_t & Index );
__declspec(implementation_key(3484)) IUnknownPtr CanvasShapes::Get_NewEnum ( );
__declspec(implementation_key(3485)) ShapePtr CanvasShapes::AddCallout ( __missing_type__ Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(3486)) ShapePtr CanvasShapes::AddConnector ( __missing_type__ Type, float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(3487)) ShapePtr CanvasShapes::AddCurve ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(3488)) ShapePtr CanvasShapes::AddLabel ( __missing_type__ Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(3489)) ShapePtr CanvasShapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(3490)) ShapePtr CanvasShapes::AddPicture ( _bstr_t FileName, __missing_type__ LinkToFile, __missing_type__ SaveWithDocument, float Left, float Top, float Width, float Height );
__declspec(implementation_key(3491)) ShapePtr CanvasShapes::AddPolyline ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(3492)) ShapePtr CanvasShapes::AddShape ( __missing_type__ Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(3493)) ShapePtr CanvasShapes::AddTextEffect ( __missing_type__ PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, __missing_type__ FontBold, __missing_type__ FontItalic, float Left, float Top );
__declspec(implementation_key(3494)) ShapePtr CanvasShapes::AddTextbox ( __missing_type__ Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(3495)) FreeformBuilderPtr CanvasShapes::BuildFreeform ( __missing_type__ EditingType, float X1, float Y1 );
__declspec(implementation_key(3496)) ShapeRangePtr CanvasShapes::Range ( const _variant_t & Index );
__declspec(implementation_key(3497)) HRESULT CanvasShapes::SelectAll ( );
__declspec(implementation_key(3498)) ShapePtr CanvasShapes::GetBackground ( );
__declspec(implementation_key(3499)) _ApplicationPtr CustomLayout::GetApplication ( );
__declspec(implementation_key(3500)) IDispatchPtr CustomLayout::GetParent ( );
__declspec(implementation_key(3501)) ShapesPtr CustomLayout::GetShapes ( );
__declspec(implementation_key(3502)) HeadersFootersPtr CustomLayout::GetHeadersFooters ( );
__declspec(implementation_key(3503)) ShapeRangePtr CustomLayout::GetBackground ( );
__declspec(implementation_key(3504)) _bstr_t CustomLayout::GetName ( );
__declspec(implementation_key(3505)) void CustomLayout::PutName ( _bstr_t Name );
__declspec(implementation_key(3506)) HRESULT CustomLayout::Delete ( );
__declspec(implementation_key(3507)) float CustomLayout::GetHeight ( );
__declspec(implementation_key(3508)) float CustomLayout::GetWidth ( );
__declspec(implementation_key(3509)) HyperlinksPtr CustomLayout::GetHyperlinks ( );
__declspec(implementation_key(3510)) DesignPtr CustomLayout::GetDesign ( );
__declspec(implementation_key(3511)) TimeLinePtr CustomLayout::GetTimeLine ( );
__declspec(implementation_key(3512)) SlideShowTransitionPtr CustomLayout::GetSlideShowTransition ( );
__declspec(implementation_key(3513)) _bstr_t CustomLayout::GetMatchingName ( );
__declspec(implementation_key(3514)) void CustomLayout::PutMatchingName ( _bstr_t MatchingName );
__declspec(implementation_key(3515)) __missing_type__  CustomLayout::GetPreserved ( );
__declspec(implementation_key(3516)) void CustomLayout::PutPreserved ( __missing_type__ Preserved );
__declspec(implementation_key(3517)) int CustomLayout::GetIndex ( );
__declspec(implementation_key(3518)) HRESULT CustomLayout::Select ( );
__declspec(implementation_key(3519)) HRESULT CustomLayout::Cut ( );
__declspec(implementation_key(3520)) HRESULT CustomLayout::Copy ( );
__declspec(implementation_key(3521)) CustomLayoutPtr CustomLayout::Duplicate ( );
__declspec(implementation_key(3522)) HRESULT CustomLayout::MoveTo ( int toPos );
__declspec(implementation_key(3523)) __missing_type__  CustomLayout::GetDisplayMasterShapes ( );
__declspec(implementation_key(3524)) void CustomLayout::PutDisplayMasterShapes ( __missing_type__ DisplayMasterShapes );
__declspec(implementation_key(3525)) __missing_type__  CustomLayout::GetFollowMasterBackground ( );
__declspec(implementation_key(3526)) void CustomLayout::PutFollowMasterBackground ( __missing_type__ FollowMasterBackground );
__declspec(implementation_key(3527)) __missing_type__ CustomLayout::GetThemeColorScheme ( );
__declspec(implementation_key(3528)) CustomerDataPtr CustomLayout::GetCustomerData ( );
__declspec(implementation_key(3529)) GuidesPtr CustomLayout::GetGuides ( );
__declspec(implementation_key(3530)) _ApplicationPtr CustomLayouts::GetApplication ( );
__declspec(implementation_key(3531)) IDispatchPtr CustomLayouts::GetParent ( );
__declspec(implementation_key(3532)) CustomLayoutPtr CustomLayouts::Item ( const _variant_t & Index );
__declspec(implementation_key(3533)) CustomLayoutPtr CustomLayouts::Add ( int Index );
__declspec(implementation_key(3534)) CustomLayoutPtr CustomLayouts::Paste ( int Index );
__declspec(implementation_key(3535)) _ApplicationPtr Comments::GetApplication ( );
__declspec(implementation_key(3536)) IDispatchPtr Comments::GetParent ( );
__declspec(implementation_key(3537)) CommentPtr Comments::Item ( int Index );
__declspec(implementation_key(3538)) CommentPtr Comments::Add ( float Left, float Top, _bstr_t Author, _bstr_t AuthorInitials, _bstr_t Text );
__declspec(implementation_key(3539)) CommentPtr Comments::Add2 ( float Left, float Top, _bstr_t Author, _bstr_t AuthorInitials, _bstr_t Text, _bstr_t ProviderID, _bstr_t UserID );
__declspec(implementation_key(3540)) _ApplicationPtr Comment::GetApplication ( );
__declspec(implementation_key(3541)) IDispatchPtr Comment::GetParent ( );
__declspec(implementation_key(3542)) _bstr_t Comment::GetAuthor ( );
__declspec(implementation_key(3543)) _bstr_t Comment::GetAuthorInitials ( );
__declspec(implementation_key(3544)) _bstr_t Comment::GetText ( );
__declspec(implementation_key(3545)) DATE Comment::GetDateTime ( );
__declspec(implementation_key(3546)) int Comment::GetAuthorIndex ( );
__declspec(implementation_key(3547)) float Comment::GetLeft ( );
__declspec(implementation_key(3548)) float Comment::GetTop ( );
__declspec(implementation_key(3549)) HRESULT Comment::Delete ( );
__declspec(implementation_key(3550)) _bstr_t Comment::GetProviderID ( );
__declspec(implementation_key(3551)) _bstr_t Comment::GetUserID ( );
__declspec(implementation_key(3552)) int Comment::GetTimeZoneBias ( );
__declspec(implementation_key(3553)) CommentsPtr Comment::GetReplies ( );
__declspec(implementation_key(3554)) VARIANT_BOOL Comment::GetCollapsed ( );
__declspec(implementation_key(3555)) IDispatchPtr DiagramNode::GetApplication ( );
__declspec(implementation_key(3556)) long DiagramNode::GetCreator ( );
__declspec(implementation_key(3557)) DiagramNodePtr DiagramNode::AddNode ( __missing_type__ Pos, __missing_type__ NodeType );
__declspec(implementation_key(3558)) HRESULT DiagramNode::Delete ( );
__declspec(implementation_key(3559)) HRESULT DiagramNode::MoveNode ( struct DiagramNode * TargetNode, __missing_type__ Pos );
__declspec(implementation_key(3560)) HRESULT DiagramNode::ReplaceNode ( struct DiagramNode * TargetNode );
__declspec(implementation_key(3561)) HRESULT DiagramNode::SwapNode ( struct DiagramNode * TargetNode, VARIANT_BOOL SwapChildren );
__declspec(implementation_key(3562)) DiagramNodePtr DiagramNode::CloneNode ( VARIANT_BOOL CopyChildren, struct DiagramNode * TargetNode, __missing_type__ Pos );
__declspec(implementation_key(3563)) HRESULT DiagramNode::TransferChildren ( struct DiagramNode * ReceivingNode );
__declspec(implementation_key(3564)) DiagramNodePtr DiagramNode::NextNode ( );
__declspec(implementation_key(3565)) DiagramNodePtr DiagramNode::PrevNode ( );
__declspec(implementation_key(3566)) IDispatchPtr DiagramNode::GetParent ( );
__declspec(implementation_key(3567)) DiagramNodeChildrenPtr DiagramNode::GetChildren ( );
__declspec(implementation_key(3568)) ShapePtr DiagramNode::GetShape ( );
__declspec(implementation_key(3569)) DiagramNodePtr DiagramNode::GetRoot ( );
__declspec(implementation_key(3570)) DiagramPtr DiagramNode::GetDiagram ( );
__declspec(implementation_key(3571)) __missing_type__  DiagramNode::GetLayout ( );
__declspec(implementation_key(3572)) void DiagramNode::PutLayout ( __missing_type__ Type );
__declspec(implementation_key(3573)) ShapePtr DiagramNode::GetTextShape ( );
__declspec(implementation_key(3574)) IDispatchPtr DiagramNodeChildren::GetApplication ( );
__declspec(implementation_key(3575)) long DiagramNodeChildren::GetCreator ( );
__declspec(implementation_key(3576)) IUnknownPtr DiagramNodeChildren::Get_NewEnum ( );
__declspec(implementation_key(3577)) DiagramNodePtr DiagramNodeChildren::Item ( const _variant_t & Index );
__declspec(implementation_key(3578)) DiagramNodePtr DiagramNodeChildren::AddNode ( const _variant_t & Index, __missing_type__ NodeType );
__declspec(implementation_key(3579)) HRESULT DiagramNodeChildren::SelectAll ( );
__declspec(implementation_key(3580)) IDispatchPtr DiagramNodeChildren::GetParent ( );
__declspec(implementation_key(3581)) int DiagramNodeChildren::GetCount ( );
__declspec(implementation_key(3582)) DiagramNodePtr DiagramNodeChildren::GetFirstChild ( );
__declspec(implementation_key(3583)) DiagramNodePtr DiagramNodeChildren::GetLastChild ( );
__declspec(implementation_key(3584)) IDispatchPtr DiagramNodes::GetApplication ( );
__declspec(implementation_key(3585)) long DiagramNodes::GetCreator ( );
__declspec(implementation_key(3586)) IUnknownPtr DiagramNodes::Get_NewEnum ( );
__declspec(implementation_key(3587)) DiagramNodePtr DiagramNodes::Item ( const _variant_t & Index );
__declspec(implementation_key(3588)) HRESULT DiagramNodes::SelectAll ( );
__declspec(implementation_key(3589)) IDispatchPtr DiagramNodes::GetParent ( );
__declspec(implementation_key(3590)) int DiagramNodes::GetCount ( );
__declspec(implementation_key(3591)) IDispatchPtr Diagram::GetApplication ( );
__declspec(implementation_key(3592)) long Diagram::GetCreator ( );
__declspec(implementation_key(3593)) IDispatchPtr Diagram::GetParent ( );
__declspec(implementation_key(3594)) DiagramNodesPtr Diagram::GetNodes ( );
__declspec(implementation_key(3595)) __missing_type__  Diagram::GetType ( );
__declspec(implementation_key(3596)) __missing_type__  Diagram::GetAutoLayout ( );
__declspec(implementation_key(3597)) void Diagram::PutAutoLayout ( __missing_type__ AutoLayout );
__declspec(implementation_key(3598)) __missing_type__  Diagram::GetReverse ( );
__declspec(implementation_key(3599)) void Diagram::PutReverse ( __missing_type__ Reverse );
__declspec(implementation_key(3600)) __missing_type__  Diagram::GetAutoFormat ( );
__declspec(implementation_key(3601)) void Diagram::PutAutoFormat ( __missing_type__ AutoFormat );
__declspec(implementation_key(3602)) HRESULT Diagram::Convert ( __missing_type__ Type );
__declspec(implementation_key(3603)) HRESULT Diagram::FitText ( );
__declspec(implementation_key(3604)) FileConverterPtr FileConverters::Item ( const _variant_t & Index );
__declspec(implementation_key(3605)) _ApplicationPtr FileConverter::GetApplication ( );
__declspec(implementation_key(3606)) VARIANT_BOOL FileConverter::GetCanOpen ( );
__declspec(implementation_key(3607)) VARIANT_BOOL FileConverter::GetCanSave ( );
__declspec(implementation_key(3608)) _bstr_t FileConverter::GetClassName ( );
__declspec(implementation_key(3609)) FileConvertersPtr FileConverter::GetCreator ( );
__declspec(implementation_key(3610)) _bstr_t FileConverter::GetExtensions ( );
__declspec(implementation_key(3611)) _bstr_t FileConverter::GetFormatName ( );
__declspec(implementation_key(3612)) _bstr_t FileConverter::GetName ( );
__declspec(implementation_key(3613)) FileConvertersPtr FileConverter::GetParent ( );
__declspec(implementation_key(3614)) _bstr_t FileConverter::GetPath ( );
__declspec(implementation_key(3615)) long FileConverter::GetOpenFormat ( );
__declspec(implementation_key(3616)) long FileConverter::GetSaveFormat ( );
#pragma stop_map_region

} // namespace PowerPoint

#pragma pack(pop)
