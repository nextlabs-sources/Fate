

#pragma once
#include "stdafx.h"
#include <Windows.h>
#include "outlookObj.h"

#include "./InspsEventDisp.h"
#include "./InspEventDisp.h"
#include "../common/FileCache.h"
#include "outlookUtilities.h"
#include "MailItemUtility.h"
#include "msoObj.h"
#include "../common/AttachmentFileMgr.h"
#include "../common/CommonTools.h"
#include "../outlook/outlookUtilities.h"
#include "../outlook/ConfigManager.h"
#include "../common/RuntimeTracer.h"
#include "ExceptionHandler.h"

extern CItemEventList g_ItemCache ;
#pragma comment(lib, "ws2_32")
#include "MAPIX.h"
CComPtr<IMAPISession> pSession  = NULL;

CMeetingItemCache g_MeetingItemCache;
std::wstring g_strOETempFolder;
CFileCache   g_RealFileCache;
CFileCache   g_TempFileCache(FALSE);

extern DWORD InitFeat();

static BYTE cbDftSetting[] = {0xba,0x00,0x72,0x03,0x30,0x01,0x00,0x00,0x96,0x01,0x00,0x00,0x04,0x00,0x00,0x00,0x1e,0x00,0x00,0x00,0x1e,\
0x00,0x00,0x00,0x1e,0x00,0x00,0x00,0x1e,0x00,0x00,0x00,0x1e,0x00,0x00,0x00,0x1e,0x00,0x00,0x00,0x22,0x00,0x00,0x00,0x1e,0x00,\
0x00,0x00,0x1e,0x00,0x00,0x00,0x1e,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x06,0x00,0x00,\
0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x02,0x00,\
0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x06,0x00,0x00,\
0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0xdc,0x00,0x00,0x00,0x69,0xac,0x08,0x5b,0x44,0x9c,0x04,0xbd,0xb0,\
0x01,0xac,0x40,0xb9,0x50,0x00,0x00,0x00,0x63,0x30,0x90,0x06,0x00,0x03,0x00,0x0a,0x00,0x2d,0x00,0x16,0x00,0x00,0x00,0x1d,0x00,\
0x00,0x00,0x00,0x03,0x00,0x00,0x12,0x02,0x00,0x00,0x00,0x00,0x04,0x06,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xa7,0x01,0x18,0x04,0x37,0x00,0xc8,0x00,0x98,0x04,0x01,0x80,0xff,0xff,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x74,0x20,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x06,0x00,0x00,0x00,0x0c,0x00,\
0x00,0x00,0x0c,0x02,0x00,0x03,0x00,0x00,0x05,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0x04,0x02,0x00,0x00,0x00,0x12,0x00,0x00,\
0x00,0x00,0x60,0x30,0x90,0xba,0x00,0x94,0x00,0x64,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,\
0x00,0xff,0x01,0x00,0x00,0x00,0x11,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x74,0x43,0xe0,\
0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x43,0x02,0x00,0x00,0x00,0x00,0xe4,0x04,0x00,0x00,\
0x1d,0x08,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0xd4,0x94,0x46,0x00,0xd4,0x94,0x46,0x01,0x00,0x00,0x00,0x2f,0x11,0x00,0x00,0x00,0x08,0x0a,0x00,0x06,0x00,0x00,\
0x00,0x13,0x33,0x42,0xc1,0x24,0x00,0x00,0x00,0x0a,0x05,0x0c,0x0c,0x03,0x02,0x04,0x06,0x00,0x00,0x03,0x00,0x00,0x01,0x01,0x01,\
0x06,0x06,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0x63,0x19,\
0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x20,0x00,\
0x64,0x00,0x00,0x00,0x63,0x63,0x19,0x00,0x00,0x00,0x8c,0x0a,0x00,0x00,0x00,0x00,0xe0,0x10,0x00,0x00,0x4b,0x00,0x00,0x00,0x4b,\
0x00,0x00,0x00,0x20,0x00,0x64,0x00,0x00,0x00,0x63,0x63,0x19,0x00,0x00,0x00,0x8c,0x0a,0x00,0x00,0x00,0x00,0xe0,0x10,0x00,0x00,\
0x4b,0x00,0x00,0x00,0x4b,0x00,0x00,0x00,0x21,0x00,0x19,0x00,0x00,0x00,0x63,0x63,0x19,0x00,0x00,0x00,0x8c,0x0a,0x00,0x00,0x00,\
0x00,0xe0,0x10,0x00,0x00,0x4b,0x00,0x00,0x00,0x4b,0x00,0x00,0x00,0x20,0x00,0x64,0x00,0x00,0x00,0x63,0x63,0x19,0x00,0x00,0x00,\
0x8c,0x0a,0x00,0x00,0x00,0x00,0xe0,0x10,0x00,0x00,0x4b,0x00,0x00,0x00,0x4b,0x00,0x00,0x00,0x20,0x00,0x64,0x00,0x00,0x00,0x63,\
0x01,0x19,0x00,0x00,0x00,0x8c,0x0a,0x00,0x00,0x00,0x00,0xe0,0x10,0x00,0x00,0x4b,0x00,0x00,0x00,0x4b,0x00,0x00,0x00,0x20,0x00,\
0x64,0x00,0x00,0x00,0x63,0x01,0x19,0x00,0x00,0x00,0x8c,0x0a,0x00,0x00,0x00,0x00,0xb0,0x13,0x00,0x00,0x4b,0x00,0x00,0x00,0x4b,\
0x00,0x00,0x00,0x64,0x00,0x00,0x00,0x20,0x00,0x64,0x00,0x00,0x00,0x63,0x63,0x19,0x00,0x00,0x00,0x8c,0x0a,0x00,0x00,0x00,0x00,\
0xe0,0x10,0x00,0x00,0x4b,0x00,0x00,0x00,0x4b,0x00,0x00,0x00,0x20,0x00,0x64,0x00,0x00,0x00,0x63,0x63,0x19,0x00,0x00,0x00,0x8c,\
0x0a,0x00,0x00,0x00,0x00,0xe0,0x10,0x00,0x00,0x4b,0x00,0x00,0x00,0x4b,0x00,0x00,0x00,0x20,0x00,0x64,0x00,0x00,0x00,0x63,0x63,\
0x19,0x00,0x00,0x00,0x8c,0x0a,0x00,0x00,0x00,0x00,0xe0,0x10,0x00,0x00,0x4b,0x00,0x00,0x00,0x4b,0x00,0x00,0x00,0x90,0x02,0x00,\
0x00,0x02,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x01,0x01,0x01,0x00,0x01,0x00,\
0x01,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x01,0x00,0x02,0x00,0x03,0x01,0x03,0x01,0x03,0x01,0x03,0x00,0x03,0x01,\
0x02,0x00,0x03,0x01,0x03,0x01,0x03,0x01,0x03,0x01,0x00,0x00,0x23,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,\
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,\
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,\
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,\
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,\
0x01,0x01,0x01,0x01,0x01,0x03,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xff,0xff,0xcf,0xff,0xff,0xff,\
0x00,0x00,0x86,0x02,0xff,0xff,0x00,0x00,0x86,0x02,0xff,0xff,0x00,0x00,0x0c,0x00,0xff,0xff,0x00,0x00,0x01,0x00,0xff,0xff,0x00,\
0x00,0x01,0x00,0xff,0xff,0x00,0x00,0x01,0x00,0x58,0x00,0x00,0x00,0x58,0x00,0x50,0x00,0x56,0x00,0x4d,0x00,0x00,0x00,0x4e,0x00,\
0x65,0x00,0x78,0x00,0x74,0x00,0x6c,0x00,0x61,0x00,0x62,0x00,0x73,0x00,0x20,0x00,0x49,0x00,0x6e,0x00,0x63,0x00,0x2e,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x87,0xff,0xff,0x03,0x00,0x00,0x3e,0x00,0x02,0x02,0x00,0x00,0x06,0x00,0x09,0x00,0x34,0x00,\
0x00,0x00,0x00,0x00,0x90,0x00,0x90,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x14,0x00,0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x63,0x78,0x00,0xc8,0x00,0x00,0x00,0x00,0x00,0x14,0x00,0x00,0x00,\
0x00,0x00,0x90,0x00,0x90,0x00,0x80,0x00,0xff,0xff,0x00,0x00,0x08,0x00,0xff,0xff,0x00,0x00,0x08,0x00,0xff,0xff,0x0b,0x00,0x04,\
0x00,0x01,0x00,0x20,0x00,0x01,0x80,0x14,0x00,0x0b,0x00,0x43,0x00,0x6f,0x00,0x75,0x00,0x72,0x00,0x69,0x00,0x65,0x00,0x72,0x00,\
0x20,0x00,0x4e,0x00,0x65,0x00,0x77,0x00,0x01,0x80,0x14,0x00,0x0b,0x00,0x43,0x00,0x6f,0x00,0x75,0x00,0x72,0x00,0x69,0x00,0x65,\
0x00,0x72,0x00,0x20,0x00,0x4e,0x00,0x65,0x00,0x77,0x00,0x01,0x80,0x14,0x00,0x0b,0x00,0x43,0x00,0x6f,0x00,0x75,0x00,0x72,0x00,\
0x69,0x00,0x65,0x00,0x72,0x00,0x20,0x00,0x4e,0x00,0x65,0x00,0x77,0x00,0x01,0x80,0x14,0x00,0x01,0x00,0x20,0x00,0x01,0x80,0x14,\
0x00,0x0b,0x00,0x43,0x00,0x6f,0x00,0x75,0x00,0x72,0x00,0x69,0x00,0x65,0x00,0x72,0x00,0x20,0x00,0x4e,0x00,0x65,0x00,0x77,0x00,\
0x01,0x80,0x14,0x00,0x09,0x00,0x4d,0x00,0x53,0x00,0x20,0x00,0x47,0x00,0x6f,0x00,0x74,0x00,0x68,0x00,0x69,0x00,0x63,0x00,0x01,\
0x80,0x15,0x00,0x07,0x00,0x4d,0x00,0x69,0x00,0x6e,0x00,0x67,0x00,0x4c,0x00,0x69,0x00,0x55,0x00,0x01,0x80,0x18,0x00,0x06,0x00,\
0x53,0x00,0x69,0x00,0x6d,0x00,0x53,0x00,0x75,0x00,0x6e,0x00,0x01,0x80,0x15,0x00,0x05,0x00,0x44,0x00,0x6f,0x00,0x74,0x00,0x75,\
0x00,0x6d,0x00,0x01,0x80,0x14,0x00,0x01,0x00,0x20,0x00,0x01,0x80,0x1c,0x00,0x00,0x00,0x00,0x00};
static void ForceNonFullScreenReadingView()
{
	//HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\12.0\\Word\\Data
	long	lResult	= 0;
	HKEY    hKeyWord= NULL;
	HKEY    hKeyData= NULL;
	DWORD   dwType  = 0;
	DWORD   cbValue = 2048;
	BYTE    pValue[2048];	memset(pValue, 0, sizeof(pValue));

	lResult = RegOpenKeyEx(HKEY_CURRENT_USER, L"Software\\Microsoft\\Office\\12.0\\Word", 0, KEY_ALL_ACCESS, &hKeyWord);
	if( lResult!= ERROR_SUCCESS )
	{
		lResult = RegOpenKeyEx(HKEY_CURRENT_USER, L"Software\\Wow6432Node\\Microsoft\\Office\\12.0\\Word", 0, KEY_ALL_ACCESS, &hKeyWord);
	}
	if(ERROR_SUCCESS == lResult)
	{
		lResult = RegCreateKeyEx(hKeyWord, L"Data", 0, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &hKeyData, NULL);
		if(ERROR_SUCCESS == lResult)
		{
			if( ERROR_SUCCESS == RegQueryValueEx(hKeyData, L"Settings", NULL, &dwType, pValue, &cbValue) && REG_BINARY == dwType && cbValue > 547)
			{
				DP((L"[ForceNonFullScreenReadingView] Get the data!\n"));
				if(0x40&pValue[547])		// 1000000
				{
					DP((L"[ForceNonFullScreenReadingView] Reset the data!\n"));
					pValue[547] &= 0x3F;	// 0111111
				}
				RegSetValueEx(hKeyData, L"Settings", 0, REG_BINARY, pValue, cbValue);
			}
			else
			{
				DP((L"[ForceNonFullScreenReadingView] Set the data manually!\n"));

				cbValue = sizeof(cbDftSetting);
				RegSetValueEx(hKeyData, L"Settings", 0, REG_BINARY, cbDftSetting, cbValue);
			}

			RegCloseKey(hKeyData); hKeyData = NULL;
		}
		else
		{
			DP((L"[ForceNonFullScreenReadingView] Fail to open word.data key!\n"));
		}
		RegCloseKey(hKeyWord); hKeyWord = NULL;
	}
	else
	{
		DP((L"[ForceNonFullScreenReadingView] Fail to open word key!\n"));
	}
}

static void ForceNoWordEditor(CComPtr<Outlook::_Application> spApp)
{
	//HKEY_CURRENT_USER\Software\Microsoft\Office\11.0\Outlook\Options\Mail
    BOOL    bIsOffice2K3 = FALSE;
    BOOL    bIsOffice2K7 = FALSE;
	long	lResult	= 0;
	HKEY    hKey    = NULL;
	DWORD   dwType  = REG_DWORD;
	DWORD   cbValue = 4;
	DWORD   dwValue = 0;

    CComBSTR bstrVersion;
    HRESULT hr = spApp->get_Version(&bstrVersion);
    if(SUCCEEDED(hr) && bstrVersion)
    {
        DP((L"Outlook version is : %s\n", bstrVersion));
        if(0 == wcsncmp(bstrVersion, L"11.0.0.", 7))
        {
            bIsOffice2K3 = TRUE;
        }
        else if(0 == wcsncmp(bstrVersion, L"12.0.0.", 7))
        {
            bIsOffice2K7 = TRUE;
        }
        else
        {
        }
    }

    if(!bIsOffice2K3 && !bIsOffice2K7) return;


    if(bIsOffice2K3)
	{
	    //lResult = RegOpenKeyExW(HKEY_CURRENT_USER, L"Software\\Microsoft\\Office\\11.0\\Outlook\\Options\\Mail", 0, KEY_ALL_ACCESS, &hKey);
        lResult = RegCreateKeyEx(HKEY_CURRENT_USER, L"Software\\Microsoft\\Office\\11.0\\Outlook\\Options\\Mail", 0, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &hKey, NULL);
		if( lResult !=ERROR_SUCCESS)
		{
			 lResult = RegCreateKeyEx(HKEY_CURRENT_USER, L"Software\\Wow6432Node\\Microsoft\\Office\\11.0\\Outlook\\Options\\Mail", 0, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &hKey, NULL);
		}
	}
    else
	{
	    lResult = RegCreateKeyEx(HKEY_CURRENT_USER, L"Software\\Microsoft\\Office\\12.0\\Outlook\\Options\\Mail", 0, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &hKey, NULL);
		if( lResult !=ERROR_SUCCESS)
		{
			lResult = RegCreateKeyEx(HKEY_CURRENT_USER, L"Software\\Wow6432Node\\Microsoft\\Office\\12.0\\Outlook\\Options\\Mail", 0, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &hKey, NULL);
		}
	}
	if(ERROR_SUCCESS == lResult)
	{
        if( ERROR_SUCCESS == RegQueryValueExW(hKey, L"EditorPreference", NULL, &dwType, (LPBYTE)&dwValue, &cbValue) && REG_DWORD==dwType && 4==cbValue)
        {
            DWORD dwFlag      = 1;

            if(dwValue&dwFlag)
            {
                // it means current outlook is using word as editor
                dwValue &= (~dwFlag);
                RegSetValueExW(hKey, L"EditorPreference", 0, REG_DWORD, (LPBYTE)&dwValue, 4);
            }
        }
        else
        {
                dwValue = 0x20000;
                RegSetValueExW(hKey, L"EditorPreference", 0, REG_DWORD, (LPBYTE)&dwValue, 4);
        }
    }
}

void MyRemoveFolder(LPCWSTR wzFolder, bool delSelf)
{
	if ((wzFolder==NULL) || wcslen(wzFolder)==0){
		return;
	}


	WIN32_FIND_DATA FindFileData;
	HANDLE			hFind;
	int nLen = 0;

    WCHAR wzFilter[MAX_PATH] = {0};
	WCHAR wzTempFolder[MAX_PATH] = {0};
	WCHAR wzTemp[MAX_PATH] = {0};

	wcsncpy_s(wzFilter, MAX_PATH, wzFolder, _TRUNCATE);
	nLen = (int)wcslen(wzFilter);
	if(nLen>0 && L'\\'==wzFilter[nLen-1])
		wzFilter[nLen-1] = 0;
	wcsncpy_s(wzTempFolder, MAX_PATH, wzFilter, _TRUNCATE);
	wcsncat_s(wzFilter, MAX_PATH, L"\\*", _TRUNCATE);
	//SetCurrentDirectory(wzTemp);
	hFind = FindFirstFile(wzFilter, &FindFileData);
	if(INVALID_HANDLE_VALUE != hFind)
	{
		do 
		{
			if(0== wcscmp(L".", FindFileData.cFileName)
				|| 0== wcscmp(L"..", FindFileData.cFileName))
				continue;

			_snwprintf_s(wzTemp, MAX_PATH, _TRUNCATE, L"%s\\%s", wzTempFolder, FindFileData.cFileName);
			if(FILE_ATTRIBUTE_DIRECTORY & FindFileData.dwFileAttributes){
				MyRemoveFolder(wzTemp, true);
			}
			else
			{
				SetFileAttributes(wzTemp, FILE_ATTRIBUTE_NORMAL);
				DeleteFile(wzTemp);
			}
		} while(FindNextFile(hFind, &FindFileData));
		FindClose(hFind);
	}
	else
	{
		DP((L"Fail to enum file! err=%d\n", GetLastError()));
	}
   
	if (delSelf){
		RemoveDirectory(wzTempFolder);
	}
}
/************************************************************************/
/* CLASS COutlookObj                                                    */
/************************************************************************/
COutlookObj::COutlookObj()
{
    m_spInspsSinkObj    = NULL;
    m_dwInspsSinkCookie = 0;
    m_bSendAttachmentDirectly = FALSE;
	m_bMeetingRespondChangedTo0 = FALSE;
    m_intSaveWindowThreadID = -1;
	InitializeCriticalSection(&m_csAutoCloseMSTW);
	m_hEventDelayInit = CreateEventW(NULL, TRUE, FALSE, NULL);
}

COutlookObj::~COutlookObj()
{
    DeleteCriticalSection(&m_csAutoCloseMSTW);
}


void COutlookObj::WaitDelayInitFinish()
{
	NLONLY_DEBUG;
	if (m_hEventDelayInit){
		DWORD dwWait = WaitForSingleObject(m_hEventDelayInit, 10*1000);
		if (dwWait==WAIT_TIMEOUT){
				DP((L"WaitDelayInitFinish wait timeout 10s\n"));
		}
	} 
}


DWORD WINAPI COutlookObj::DelayInitProc(LPVOID lpParameter)
{
	NLONLY_DEBUG;
	//g_pOutlookObj->DeleteOETempFolder();

	//Init Attachment file manager, this will re-create OE temp folder
	g_pOutlookObj->InitAttachmentFileManager();

	// Init RuntimeTracer info
	CRuntimeTracer::InitBasicInfo();

	// Init Exception handler
	CExceptionHandler::InitInstance();

	if(g_pOutlookObj->m_hEventDelayInit)
	{
		SetEvent(g_pOutlookObj->m_hEventDelayInit);
	}

	return 0;
}

// SinkAppEvent for inline action.-replay/replay all/froward.
HRESULT COutlookObj::SinkAppEvent( CComPtr<IDispatch> lpAppDisp )
{
	DP((L"Enter COutlookObj::SinkAppEvent\n"));

	HRESULT hr = S_OK ;
	DWORD dwSinkCookie = 0;
	CComObject<CmsoObj>* pDisp = 0;
	hr = CComObject<CmsoObj>::CreateInstance(&pDisp);
	hr = pDisp->QueryInterface(IID_IUnknown, (void**)&m_sSinkObj);
	if(SUCCEEDED(hr) && m_sSinkObj)
	{
		hr = AtlAdvise(lpAppDisp, m_sSinkObj, __uuidof(Outlook::ApplicationEvents), &dwSinkCookie);            
		if(FAILED(hr))
		{
			hr = S_FALSE ;
			DP((L"COutlookObj::OnConnection -> Fail to sink current inspectors!\n"));
		}
	}

	DP((L"Leave COutlookObj::SinkAppEvent\n"));

	return hr ;
}


void CExplorerSink::OnSeletionChange()
{
	CComPtr<Outlook::_Application> spApp = g_pOutlookObj->get_App();
	if (spApp)
	{
		CComQIPtr<Outlook::_Explorer, &Outlook::IID__Explorer> spExp;
		HRESULT hr = spApp->ActiveExplorer(&spExp);
		if (SUCCEEDED(hr) && spExp)
		{
			CComPtr<Outlook::Selection> spSelection;
			hr = spExp->get_Selection(&spSelection);
			if (SUCCEEDED(hr) && spSelection)
			{
				long Count = 0;
				hr = spSelection->get_Count(&Count);
				if (SUCCEEDED(hr))
				{
					for (int i = 0 ; i < Count; i++)
					{

						CComPtr<IDispatch> spItem;
						hr = spSelection->Item(CComVariant(i + 1), &spItem);
						if (SUCCEEDED(hr) && spItem)
						{
							ITEM_TYPE emItemType = DEFAULT;
							BOOL bRet = OLUtilities::CheckGetMailItemType(spItem,emItemType);
							if (bRet)
							{
								if (emItemType == MAIL_ITEM)
								{
									CComPtr<IDispatch> spCurMailItem = 0;
									HRESULT hr = spItem->QueryInterface(Outlook::IID__MailItem, (void**)&spCurMailItem);
									if(SUCCEEDED(hr) && spCurMailItem)
									{
										if (g_ItemCache.FindItem(spCurMailItem))
										{
											continue;
										}
										
										CComObject<CItemEventDisp>* spMailItemSinkObj = 0;
										hr = CComObject<CItemEventDisp>::CreateInstance(&spMailItemSinkObj);
										if(SUCCEEDED(hr) && spMailItemSinkObj)
										{
											spMailItemSinkObj->SetMailItemPtr(spCurMailItem);
											DWORD Cookie = 0;
											CComPtr<IUnknown> spMailItemUnknowObj = NULL;
											hr = spMailItemSinkObj->QueryInterface(IID_IUnknown, (void**)&spMailItemUnknowObj);
											if(SUCCEEDED(hr) && spMailItemUnknowObj)
											{
												spMailItemSinkObj->m_nEventNeedSink = PRVIEW_EVENT | REPLAY_EVENT;//only monitor event
												hr = AtlAdvise(spCurMailItem, spMailItemUnknowObj, __uuidof(Outlook::ItemEvents), &Cookie);
												if(FAILED(hr))
												{
													DP((L"OnSeletionChange  Fail to AtlAdvise mail event\n"));
												}
												g_ItemCache.AddItem( spCurMailItem, spMailItemSinkObj );
											}
										}
										else
										{
											DP((L"CInspEventDisp::InitInspSink  Fail to create CItemEventDisp\n"));
										}
									}
								}

							}
						}

					}


				}

			}

		}
	}

}



STDMETHODIMP CExplorerSink::Invoke(DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)
{
	UNREFERENCED_PARAMETER(riid);
	UNREFERENCED_PARAMETER(lcid);
	UNREFERENCED_PARAMETER(wFlags);
	UNREFERENCED_PARAMETER(pDispParams);
	UNREFERENCED_PARAMETER(pVarResult);
	UNREFERENCED_PARAMETER(pExcepInfo);
	UNREFERENCED_PARAMETER(puArgErr);

	switch(dispIdMember)
	{
	case 0xf007:
		{
			OnSeletionChange();
		}
		break;
	default:
		break;
	}

	return S_OK;
}



void CExplorersSink::OnNewExplorer(CComPtr<IDispatch> pExp)
{
	DWORD expCook;
	CComObject<CExplorerSink> *Explorersink = NULL;
	CComObject<CExplorerSink>::CreateInstance(&Explorersink);
	HRESULT hr = AtlAdvise(pExp,Explorersink,__uuidof(ExplorerEvents_10),&expCook);
	if (SUCCEEDED(hr))
	{
		g_pOutlookObj->m_SinkObjMgr.m_mapSinkExpObj[pExp] = expCook;
	}
	

}



STDMETHODIMP  CExplorersSink::Invoke(DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)
{

	UNREFERENCED_PARAMETER(riid);
	UNREFERENCED_PARAMETER(lcid);
	UNREFERENCED_PARAMETER(wFlags);
	UNREFERENCED_PARAMETER(pVarResult);
	UNREFERENCED_PARAMETER(pExcepInfo);
	UNREFERENCED_PARAMETER(puArgErr);

	switch(dispIdMember)
	{
	case 0xf001:
		{
			if (pDispParams->rgvarg[0].pdispVal!=NULL)
			{
				OnNewExplorer(pDispParams->rgvarg[0].pdispVal);
			}
		}
		break;
	default:
		break;
	}

	return S_OK;
}






HRESULT COutlookObj::OnConnection(LPDISPATCH Application, int ConnectMode, LPDISPATCH AddInInst, SAFEARRAY * * custom)
{
    UNREFERENCED_PARAMETER(ConnectMode);
    UNREFERENCED_PARAMETER(AddInInst);
    UNREFERENCED_PARAMETER(custom);
    HRESULT hr = S_OK;
	WSADATA wsaData;
	hr = SinkAppEvent( Application) ;
	WSAStartup(MAKEWORD(2,0), &wsaData);
#ifdef WSO2K7
	ForceNonFullScreenReadingView();
#endif
	theCfg.LoadConfig();
	PolicyCommunicator::m_nQueryPCTimeout = theCfg.QueryPCTimeout();

    InitFeat();    
    try
    {
		CComQIPtr <Outlook::_Application> spApp(Application);
		m_spApp = spApp;
	
		// get the explorer app
		hr = m_spApp->ActiveExplorer(&m_spExp);

		m_Explorerscook = 0;
		hr = m_spApp->get_Explorers(&m_spExplores);
		if (SUCCEEDED(hr) && m_spExplores)
		{
			CComObject<CExplorersSink> *sinkExplorers = NULL;
			CComObject<CExplorersSink>::CreateInstance(&sinkExplorers);
			AtlAdvise(m_spExplores,sinkExplorers,__uuidof(ExplorersEvents),&m_Explorerscook);
		}
		
		DWORD expCookie = 0;
		CComObject<CExplorerSink> *Explorersink = NULL;
		CComObject<CExplorerSink>::CreateInstance(&Explorersink);
		hr = AtlAdvise(m_spExp,Explorersink,__uuidof(ExplorerEvents_10),&expCookie);
		if (SUCCEEDED(hr))
		{
			CComPtr<Outlook::_Explorer> spExp = get_Explorer();
			CComPtr<IDispatch> spDispatich = 0;
			hr = spExp->QueryInterface(IID_IDispatch,(void**)&spDispatich);
			if (SUCCEEDED(hr)&&spDispatich)
			{
				m_SinkObjMgr.m_mapSinkExpObj[spDispatich] = expCookie;
			}
		}

        // get inspectors
        hr = m_spApp->get_Inspectors(&m_spInsps);
	
#if 0 //dely this to thread: DelayInitProc, because it may cost a lot of time 2019/4/17
		//delete OE temp folder
        DeleteOETempFolder();
           
		//Init Attachment file manager, this will re-create OE temp folder
		InitAttachmentFileManager();

		// Init RuntimeTracer info
		CRuntimeTracer::InitBasicInfo();

		// Init Exception handler
		CExceptionHandler::InitInstance();
#else 
		HANDLE hThreadDelayInit = ::CreateThread(NULL, 0, DelayInitProc, NULL, 0, NULL);
		if (hThreadDelayInit){
			CloseHandle(hThreadDelayInit);
			hThreadDelayInit = NULL;
		}
#endif 
		

      
    }
    catch (_com_error e)
    {
        DP((L"COutlookObj::OnConnection -> exception!\n"));
    }
    DP((L"COutlookObj::OnConnection -> end!\n"));
    return S_OK;
}

HRESULT COutlookObj::OnDisconnection(int RemoveMode, SAFEARRAY * * custom)
{
    UNREFERENCED_PARAMETER(RemoveMode);
    UNREFERENCED_PARAMETER(custom);

	
	if( pSession != NULL )
	{
		pSession->Logoff(NULL,NULL,NULL);
		pSession = NULL ;
	}

	if(m_Explorerscook) AtlUnadvise(m_spExplores, __uuidof(Outlook::ExplorersEvents), m_Explorerscook);
	m_SinkObjMgr.UnSinkExpObj();
	

    // Release exception handler
    CExceptionHandler::ReleaseInstance();
 
    return S_OK;
}
HRESULT COutlookObj::OnItemSend(CComPtr<IDispatch> lpDispItem, VARIANT_BOOL* Cancel ) 
{

    HRESULT hr = S_OK ;
	logd(L"====>enter COutlookObj::OnItemSend");
		CComObject<CItemEventDisp>* ItemEventDisp = g_ItemCache.FindItem(lpDispItem) ;
		if (ItemEventDisp == NULL) 
		{   
            // FixBug 35118
            // Check meeting and get window
            ITEM_TYPE emItemType = DEFAULT;
            OLUtilities::CheckGetMailItemType(lpDispItem, emItemType);
            NLPRINT_DEBUGVIEWLOG(L"KimTest: Dispatch:[0x%p], Type:[%d]\n", lpDispItem, emItemType);
            if (MEETING_ITEM == emItemType)
            {
                // Get current active window
                HWND hCurActive = GetActiveWindow();
                NLPRINT_DEBUGVIEWLOG(L"KimTest: Current Active Window: 0x%p\n", hCurActive);
                if (hCurActive == CItemEventDisp::s_hCurActiveWindow)
                {
                    NLPRINT_DEBUGVIEWLOG(L"No need process this meeting send event, it already processed in item event\n");
                    return hr;
                }
            }

			CComObject<CItemEventDisp>* spMailItemSinkObj = NULL;
			hr = CComObject<CItemEventDisp>::CreateInstance(&spMailItemSinkObj);
			if (SUCCEEDED(hr) && spMailItemSinkObj != NULL)
			{
			
				spMailItemSinkObj->SetMailItemPtr(lpDispItem);
                
                // For new a meeting, no inline meeting item, but here must set the inline flag as true.
                // If the inline flag is false, the meeting email will pop up after it send out.
				spMailItemSinkObj->OnSendEx(Cancel, TRUE);
			}
		}

	return hr ;
}

void COutlookObj::SetAutoCloseMeetingSaveTipWindow(BOOL bAutoClose)
{
    DWORD dwThreadID = GetCurrentThreadId();
	EnterCriticalSection(&m_csAutoCloseMSTW);
    if (bAutoClose)
    {
        m_intSaveWindowThreadID = dwThreadID;
    }
    else m_intSaveWindowThreadID = -1;
	LeaveCriticalSection(&m_csAutoCloseMSTW);
}

BOOL COutlookObj::NeedAutoCloseMeetingSaveTipWindow()
{
	BOOL bAutoClose = FALSE;
    DWORD dwThreadID = GetCurrentThreadId();
	EnterCriticalSection(&m_csAutoCloseMSTW);
    if (dwThreadID == (DWORD)m_intSaveWindowThreadID)   bAutoClose = TRUE;
	LeaveCriticalSection(&m_csAutoCloseMSTW);
	return bAutoClose;
}

void COutlookObj::DeleteOETempFolder()
{
	// Check and delete temp files
	long lUnSendItemCount = OLUtilities::GetFolderItemsCount(olFolderOutbox, false);
	DP((L"OUTBOX items count:[%d]", lUnSendItemCount));
	if (0 == lUnSendItemCount)
	{
		// PA is a common module, not all temp file is create in OE process.
		// We need delete the temp file bug now we don't known who create it and who use it.
		// The PA module need update to fix this problems.
		// wstring wstrPAObTempFolder = wstrSysTempFolder + L"PA\\";       // PA temp folder, ZIP and ENCRYPT obligation used this temp folder, "C:\Users\~\AppData\Local\Temp\PA\Encryption\"

		std::wstring wstrOETempFolder = OLUtilities::CreateOETempFolder(TRUE);
		DeleteFolderOrFile(wstrOETempFolder, FALSE);
	}

}

BOOL COutlookObj::InitAttachmentFileManager()
{
	//create OE temp Folder
	g_strOETempFolder = OLUtilities::CreateOETempFolder(TRUE);

	//empty folder
	MyRemoveFolder(g_strOETempFolder.c_str(), false);

	// Init attachment file manager
	std::wstring wstrOutlookTempFolder;
	OLUtilities::GetOutlookTempFolder(wstrOutlookTempFolder, OLUtilities::GetVersionNumber());
	if (wstrOutlookTempFolder.empty())
	{
		DP((L"Get outlook temp folder failed, get it from Shell Folders.\n"));
		wstrOutlookTempFolder = GetShellFolder(HKEY_CURRENT_USER, L"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders", L"Cache");
		if (wstrOutlookTempFolder.empty())
		{
			wstrOutlookTempFolder = GetDefaultShellFolderCache();
		}
		if (!wstrOutlookTempFolder.empty())
		{
			wstrOutlookTempFolder += L"\\content.outlook\\";
		}
	}
	DP((L"OE/Outlook temp folder, wstrOETemp:[%s], wstrOutlookTempFolder:[%s]\n", g_strOETempFolder.c_str(), wstrOutlookTempFolder.c_str()));

	if ((g_strOETempFolder.empty()) ||(wstrOutlookTempFolder.empty()) )
	{
	    return FALSE;
	}
	else
	{
		std::wstring wstrContentWordTempFolder = GetContentWordFolderFromOutlookTempPath();
        std::wstring wstrContentMsoTempFolder = GetContentMsoFolderFromOutlookTempPath();

		CAttachmentFileMgr& theAttachmentFileMgr = CAttachmentFileMgr::GetInstance();
		if (!theAttachmentFileMgr.GetInitFlag())
		{
			theAttachmentFileMgr.Init(g_strOETempFolder, wstrOutlookTempFolder, wstrContentWordTempFolder, wstrContentMsoTempFolder, OLUtilities::GetVersionNumber(), GetOutlookImageType(), GetPlateformVersion() , GetOSImageType());
		}
		return TRUE;
	}
}



void CSinkObjMgr::UnSinkExpObj()
{
	map<CComPtr<IDispatch>,int>::iterator itor;
	for (itor = m_mapSinkExpObj.begin(); itor != m_mapSinkExpObj.end(); itor++)
	{
		if(itor->second > 0)
		{
			AtlUnadvise(itor->first, __uuidof(Outlook::ExplorerEvents_10), itor->second);
		}
	}
}