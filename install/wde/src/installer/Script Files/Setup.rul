#include "Setup.h"  
#include "ifx.h" 
#include "include/servicecontrol.h" 
#include "include/logging.h"
#include "include/common.h"


///////////////////////////////////////////////////////////////////////////////
//                                                                           
// Function:  ValidateUninstallPassword
//                                                                           
//  Purpose:  Attempts to shutdown the agent service and displays a UI if necessary.
//			  This function is used only in the UI sequence.
//
//  Returns: 0 if sucessful
//           1 if password is incorrect
//           2 if some other fatal error occured
//                                                                           
///////////////////////////////////////////////////////////////////////////////
function INT ValidateAdministrationPassword(hMSI)
	INT result; 
    STRING resultAsString;  
    STRING UNINSTALL_PASSWORD;
begin    
	WriteToLogFile(hMSI, "Begin ValidateAdministrationPassword()");  
	UNINSTALL_PASSWORD=GetProperty(hMSI,"UNINSTALL_PASSWORD");
	if (UNINSTALL_PASSWORD = "") then
		MessageBox("Please input password !!", INFORMATION);
	    DenyNextDialog(hMSI);
	    return ERROR_SUCCESS;
	endif;
	
 	result = StopService(hMSI);             
    
 	switch (result)
		case ERROR_INCORRECT_PASSWORD:			
 			DenyNextDialog(hMSI);
			MessageBox("Invalid Password ! \nThe password you have entered is invalid. Please check your password and try again.", SEVERE);
	 	case ERROR_AGENT_NOT_STOPPED:                            
	 		DenyNextDialog(hMSI);
	 		MessageBox("An unexpected error occured. The Policy Controller service could not be stopped.", SEVERE);
	 		return result;	 
		case ERROR_SUCCESS:      
			AllowNextDialog(hMSI);                      
	 	default:
	 		DenyNextDialog(hMSI);
	 		MessageBox("An unexpected error occured. The Policy Controller service could not be stopped.", SEVERE);	  
	 		return result;                                          				
	 endswitch;
	 
	 return ERROR_SUCCESS;
end;  


/*
 * Start the EDP Manager process 
 */                              
function INT StartEDPManager(hMSI)
	STRING EDPManagerDir;                                           
	STRING EDPManagerPath;
	NUMBER pathSize;
	INT nResult;
begin 
    MsiGetProperty(hMSI, "CustomActionData", EDPManagerDir, pathSize); 
    WriteToLogFile(hMSI, "EDPMANAGERDIR:"+EDPManagerDir^"bin\\edpmanager.exe");
    nResult = LaunchAppAndWait(EDPManagerDir^"bin\\edpmanager.exe", "", LAAW_OPTION_NOWAIT | LAAW_OPTION_HIDDEN);
    return ERROR_SUCCESS; 
end;

/*
 * Stop the EDP Manager process
 */                              
function INT StopEDPManager(hMSI)
  string SYSTEMFOLDER;
  NUMBER pathSize;  
  INT nResult;
begin                                   
 MsiGetTargetPath(hMSI, "SystemFolder", SYSTEMFOLDER, pathSize);
 nResult = LaunchAppAndWait(SYSTEMFOLDER^"taskkill.exe", "/f /im edpmanager.exe", WAIT | LAAW_OPTION_HIDDEN);
 return nResult;
end;
         
function INT DeleteProcDetectService(hMSI)
  string szResult;  
  INT nResult;                        
  INT nvServiceState;
begin       

//ServiceGetServiceState ( "ProcDetect", nvServiceState ); 
//if(nvServiceState = SERVICE_RUNNING ) then
//	nResult = ServiceStopService("ProcDetect");    
//	if (nResult < 0) then
//    	NumToStr(szResult,nResult);
//    	MessageBox("Failed to stop ProcDetect service.("+szResult+") Please manually remove the service after uninstallation completes.",SEVERE);
//    	return ERROR_SUCCESS;
//    endif;
// endif;    
 nResult = ServiceRemoveService("ProcDetect");
 if(nResult <0) then
    NumToStr(szResult,nResult);
    MessageBox("Failed to delete ProcDetect service.("+szResult+") Please manually remove the service after uninstallation completes.",SEVERE);
 endif;
 return ERROR_SUCCESS;
end;          

function INT StartProcDetect(hMSI)
  string ProcDetect,szResult;  
  INT nResult;
begin                                   
 nResult = ServiceStartService("ProcDetect","");
 if(nResult <0) then
    NumToStr(szResult,nResult);
    MessageBox("Failed to start ProcDetect service.("+szResult+") Please manually launch the service after installation completes.",SEVERE);
 endif;
 return ERROR_SUCCESS;
end;


function INT ConfigureDesktopEnforcer(hMSI)
  string Installdir,res_string;
  NUMBER pathSize;  
  INT nResult;
begin                                   
 MsiGetProperty(hMSI, "CustomActionData",Installdir, pathSize); 
 WriteToLogFile(hMSI, "WDE:"+Installdir^"bin"^"NLRegisterPlugins.exe --wde --register");
 nResult = LaunchAppAndWait(Installdir^"bin"^"NLRegisterPlugins.exe", "--wde --register", WAIT | LAAW_OPTION_HIDDEN);
 if(nResult<0) then
   NumToStr(res_string,nResult);
   WriteToLogFile(hMSI, "WDE Result:"+res_string);  
   MessageBox( "Error !! An unexpected error occured.("+res_string+") NLRegisterPlugins.exe could not be executed.", SEVERE);	 
 endif;
 
 WriteToLogFile(hMSI, "WDE:"+Installdir^"bin"^"NLRegisterPlugins.exe --cbe --register");
 nResult = LaunchAppAndWait(Installdir^"bin"^"NLRegisterPlugins.exe", "--cbe --register", WAIT | LAAW_OPTION_HIDDEN);
 if(nResult<0) then
   NumToStr(res_string,nResult);
   WriteToLogFile(hMSI, "WDE Result:"+res_string);  
   MessageBox( "Error !! An unexpected error occured.("+res_string+") NLRegisterPlugins.exe could not be executed.", SEVERE);	 
 endif;	
 
  WriteToLogFile(hMSI, "WDE:"+Installdir^"bin"^"NLRegisterPlugins.exe --wdeiepep --register");
 nResult = LaunchAppAndWait(Installdir^"bin"^"NLRegisterPlugins.exe", "--wdeiepep --register", WAIT | LAAW_OPTION_HIDDEN);
 if(nResult<0) then
   NumToStr(res_string,nResult);
   WriteToLogFile(hMSI, "WDE Result:"+res_string);  
   MessageBox( "Error !! An unexpected error occured.("+res_string+") NLRegisterPlugins.exe could not be executed.", SEVERE);	 
 endif;	
 	
 return nResult;
end;   

function INT UnconfigureDesktopEnforcer(hMSI)
  string Installdir,res_string;
  NUMBER pathSize;  
  INT nResult;
begin                                   
 MsiGetProperty(hMSI, "CustomActionData",Installdir, pathSize); 
 WriteToLogFile(hMSI, "WDE:"+Installdir^"bin"^"NLRegisterPlugins.exe --wde --unregister");
 nResult = LaunchAppAndWait(Installdir^"bin"^"NLRegisterPlugins.exe", "--wde --unregister", WAIT | LAAW_OPTION_HIDDEN);
 if(nResult<0) then
   NumToStr(res_string,nResult);
   WriteToLogFile(hMSI, "WDE Result:"+res_string);  
   MessageBox( "Error !! An unexpected error occured.("+res_string+") NLRegisterPlugins.exe could not be executed.", SEVERE);	 
 endif;	   
 
  WriteToLogFile(hMSI, "WDE:"+Installdir^"bin"^"NLRegisterPlugins.exe --cbe --unregister");
 nResult = LaunchAppAndWait(Installdir^"bin"^"NLRegisterPlugins.exe", "--cbe --unregister", WAIT | LAAW_OPTION_HIDDEN);
 if(nResult<0) then
   NumToStr(res_string,nResult);
   WriteToLogFile(hMSI, "WDE Result:"+res_string);  
   MessageBox( "Error !! An unexpected error occured.("+res_string+") NLRegisterPlugins.exe could not be executed.", SEVERE);	 
 endif;	
 
   WriteToLogFile(hMSI, "WDE:"+Installdir^"bin"^"NLRegisterPlugins.exe --wdeiepep --unregister");
 nResult = LaunchAppAndWait(Installdir^"bin"^"NLRegisterPlugins.exe", "--wdeiepep --unregister", WAIT | LAAW_OPTION_HIDDEN);
 if(nResult<0) then
   NumToStr(res_string,nResult);
   WriteToLogFile(hMSI, "WDE Result:"+res_string);  
   MessageBox( "Error !! An unexpected error occured.("+res_string+") NLRegisterPlugins.exe could not be executed.", SEVERE);	 
 endif;	
 
 return nResult;
end;



function INT CreateProcDetectService(hMSI)
  string InstallDir,SYSTEMFOLDER,szResult;
  NUMBER pathSize;  
  INT nResult;
begin                                   
 MsiGetTargetPath(hMSI, "SystemFolder", SYSTEMFOLDER, pathSize);
 MsiGetProperty(hMSI, "CustomActionData", InstallDir, pathSize);
 WriteToLogFile(hMSI,"CustomActionData:"+InstallDir);
 if (ServiceExistsService("ProcDetect")) then    
 	return ERROR_SUCCESS;
 else
 	WriteToLogFile(hMSI,SYSTEMFOLDER^"sc.exe create ProcDetect binPath= "+InstallDir+"driver\\procdetect.sys type= kernel start= auto");
 	nResult = LaunchAppAndWait(SYSTEMFOLDER^"sc.exe", "create ProcDetect binPath= \""+InstallDir+"driver\\procdetect.sys\" type= kernel start= auto", WAIT | LAAW_OPTION_HIDDEN);
 	if (LAAW_PARAMETERS.nLaunchResult  != 0) then
        NumToStr(szResult,LAAW_PARAMETERS.nLaunchResult);
        WriteToLogFile(hMSI,"Fail SC create:"+szResult);
 	endif;
 endif;
 return nResult;
end;   




function INT ClearVerboseRegistryEntry(hMSI)
  string InstallDir,SYSTEMFOLDER,szResult;
  NUMBER pathSize;  
  INT nResult;
begin
  RegDBSetDefaultRoot(HKEY_CURRENT_USER); 
  if (RegDBKeyExist("Software\Nextlabs\EDP Manager") = 1) then 
     WriteToLogFile(hMSI,"EDP Manager entries exist. Removing invalid key 'VerboseLogEnabled'" );  
     RegDBDeleteValue("Software\Nextlabs\EDP Manager","VerboseLogEnabled");
  endif; 
  return ERROR_SUCCESS;
end;             


function INT checkAndDelete(hMSI, keyname)

begin
 
    
    if (RegDBKeyExist(keyname) = 1) then
        if (RegDBDeleteKey(keyname) < 0) then
        	MessageBox("Delete key "+keyname+" failed.\nPlease delete manually", SEVERE);
        endif;
    endif;
                                                                                                    
	return ERROR_SUCCESS;                                                                                                    

end;

                   
function INT DeleteRegistry(hMSI)

begin      
    if (RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE) < 0) then 
        MessageBox ("First call to RegDBSetDefaultRoot failed.\nPlease check and delete manually", SEVERE);    
        return ERROR_SUCCESS;
    endif;  
    
	checkAndDelete(hMSI, "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Browser Helper Objects\{FB159F40-0C40-4480-9A72-71C1D07606B7}");
    checkAndDelete(hMSI, "SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\explorer\Browser Helper Objects\{FB159F40-0C40-4480-9A72-71C1D07606B7}");   
    checkAndDelete(hMSI, "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Browser Helper Objects\{FB159F40-0C40-4480-9A72-71C1D07606B7}"); 
    checkAndDelete(hMSI, "SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\explorer\Browser Helper Objects\{FB159F40-0C40-4480-9A72-71C1D07606B7}"); 
    checkAndDelete(hMSI, "SOFTWARE\Classes\AppID\{2A9EAF67-12C2-4655-A2DD-E7D988A3AE59}"); 
    checkAndDelete(hMSI, "SOFTWARE\Microsoft\Office\Word\Addins\NLVLOfficeEnforcer.1");            
    checkAndDelete(hMSI, "SOFTWARE\Wow6432Node\Microsoft\Office\Word\Addins\NLVLOfficeEnforcer.1"); 
    checkAndDelete(hMSI, "SOFTWARE\Microsoft\Office\Excel\Addins\NLVLOfficeEnforcer.1"); 
    checkAndDelete(hMSI, "SOFTWARE\Wow6432Node\Microsoft\Office\Excel\Addins\NLVLOfficeEnforcer.1"); 
    checkAndDelete(hMSI, "SOFTWARE\Microsoft\Office\PowerPoint\Addins\NLVLOfficeEnforcer.1"); 
    checkAndDelete(hMSI, "SOFTWARE\Wow6432Node\Microsoft\Office\PowerPoint\Addins\NLVLOfficeEnforcer.1"); 
    checkAndDelete(hMSI, "SOFTWARE\Microsoft\Office\Outlook\Addins\msoPEP.msoObj.1"); 
    checkAndDelete(hMSI, "SOFTWARE\Wow6432Node\Microsoft\Office\Outlook\Addins\msoPEP.msoObj.1"); 

    checkAndDelete(hMSI, "SOFTWARE\Microsoft\Office\Excel\Addins\CEOffice.Office"); 
    checkAndDelete(hMSI, "SOFTWARE\Wow6432Node\Microsoft\Office\Excel\Addins\CEOffice.Office"); 
    checkAndDelete(hMSI, "SOFTWARE\Microsoft\Office\PowerPoint\Addins\CEOffice.Office"); 
    checkAndDelete(hMSI, "SOFTWARE\Wow6432Node\Microsoft\Office\PowerPoint\Addins\CEOffice.Office"); 
    checkAndDelete(hMSI, "SOFTWARE\Microsoft\Office\Word\Addins\CEOffice.Office"); 
    checkAndDelete(hMSI, "SOFTWARE\Wow6432Node\Microsoft\Office\Word\Addins\CEOffice.Office"); 
    checkAndDelete(hMSI, "SOFTWARE\Microsoft\Office\Word\Addins\OutlookAddin.1"); 
    checkAndDelete(hMSI, "SOFTWARE\Wow6432Node\Microsoft\Office\Word\Addins\OutlookAddin.1"); 
    checkAndDelete(hMSI, "SOFTWARE\Microsoft\Office\Word\Addins\NlPortableEncryptionCtx.1"); 
    checkAndDelete(hMSI, "SOFTWARE\Wow6432Node\Microsoft\Office\Word\Addins\NlPortableEncryptionCtx.1");      
    
    checkAndDelete(hMSI, "SOFTWARE\Microsoft\Windows\CurrentVersion\Run\EDPManager");
    
    if (RegDBSetDefaultRoot (HKEY_CLASSES_ROOT) < 0) then 
        MessageBox ("First call to RegDBSetDefaultRoot failed.\nPlease check and delete manually", SEVERE);    
        return ERROR_SUCCESS;
    endif;  
    checkAndDelete(hMSI, "*\shellex\ContextMenuHandlers\CE_Explorer"); 
end;
           
function INT InsertDeleteInRunonce(hMSI)

  	string Installdir;
  	NUMBER pathSize;  
  	INT nResult;   
  	STRING szKey;
  	STRING szNumName;
  	STRING szNumValue;
  	INT nSize;
  	INT nType;

begin               
	REGDB_OPTIONS = REGDB_OPTIONS | REGDB_OPTION_WOW64_64KEY ;
	WriteToLogFile(hMSI, "Writing runonce registry");                          
 	MsiGetProperty(hMSI, "CustomActionData",Installdir, pathSize); 
 	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);  
	szKey = "SOFTWARE\\MICROSOFT\\WINDOWS\\CurrentVersion\\Runonce";
	if (RegDBCreateKeyEx (szKey, "") < 0) then 
        //MessageBox ("RegDBCreateKeyEx failed.", SEVERE); 
    	WriteToLogFile(hMSI, "Runonce does not exist");
    endif; 
    szNumName  = "DeleteWDEbin"; 
    szNumValue = "cmd /c rmdir \""+Installdir + "\bin\" /s /q";  
    WriteToLogFile(hMSI,szNumValue);
    nType      = REGDB_STRING; 
    nSize      = -1;      
    nResult = RegDBSetKeyValueEx (szKey, szNumName, nType, szNumValue, nSize); 
    if ( nResult < 0) then 
        MessageBox ("RegDBSetKeyValueEx failed.", SEVERE); 
		WriteToLogFile(hMSI, "Unable to create registry!");
		
	endif;  
	
	szNumName  = "DeleteWDE"; 
	szNumValue = "cmd /c rmdir \""+Installdir + "\" /s /q";  
	WriteToLogFile(hMSI,szNumValue);
	nType      = REGDB_STRING; 
	nSize      = -1;      
	nResult = RegDBSetKeyValueEx (szKey, szNumName, nType, szNumValue, nSize); 
	if ( nResult < 0) then 
	    MessageBox ("RegDBSetKeyValueEx failed.", SEVERE); 
	    WriteToLogFile(hMSI, "Unable to create registry!");
			
	endif;  
	

	
	return nResult;

end;          




function INT InsertDateToRegistry(hMSI)
    NUMBER nvResult;
    STRING svResult;                                            
    STRING sKey;
    LIST ListID;  
    STRING sMonth;
    STRING sYear;
    STRING sDate;
    
begin
	WriteToLogFile(hMSI, "Inserting date into registry ... ");
    if (GetSystemInfo (DATE, nvResult, svResult) < 0) then 
        WriteToLogFile(hMSI,"Unable to retrieve system date !");
    else    
 		ListID = ListCreate (STRINGLIST); 
        nvResult = StrGetTokens (ListID, svResult, "-");
        ListGetFirstString(ListID, sMonth);
        ListGetNextString(ListID, sDate);
        ListGetNextString(ListID, sYear); 
        WriteToLogFile(hMSI, "Date retrieved : " + sMonth+"/"+sDate+"/"+sYear);
        if (StrLength(sDate) < 2) then
        	sDate="0"+sDate;
        endif;
        if (StrLength(sMonth) < 2) then
        	sMonth="0"+sMonth;
        endif; 
        svResult = sMonth+"/"+sDate+"/"+sYear;
        
    	ListDestroy (ListID); 
     	REGDB_OPTIONS = REGDB_OPTIONS | REGDB_OPTION_WOW64_64KEY;   
    	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
    	sKey = "SOFTWARE\\NextLabs\\Compliant Enterprise\\Desktop Enforcer";
    	nvResult = RegDBSetKeyValueEx(sKey, "LastUpdated", REGDB_STRING, svResult, -1);
    	if (nvResult < 0) then
    		WriteToLogFile(hMSI, "Unable to create date registry key!");
    	endif;
    	
    endif; 
    return ERROR_SUCCESS;
end;      
       
function INT AddFirewallExceptionList(hMsi)    
STRING sParam;
NUMBER nResult;
STRING sResult; 

begin  
   //To get the target system OS version 
   //4  The operating system is Windows NT 4.0.   
   //5  The operating system is Windows Server 2003 R2, Windows Server 2003, Windows   XP,or Windows 2000.  
   //6  The operating system is Windows Vista or Windows Server 2008. 
   GetSystemInfo(WINMAJOR, nResult, sResult);
   if(nResult <= 5 ) then
        sParam = "firewall add allowedprogram mode=ENABLE profile=ALL name=\"nlsce.exe\" program=\"" ^INSTALLDIR ^ "bin\\nlsce.exe\""; 
   else
		sParam = "advfirewall firewall add rule name=\"nlsce.exe\" action=allow dir=in enable=yes program=\"" ^INSTALLDIR ^ "bin\\nlsce.exe\"";
   endif;
   
   LaunchAppAndWait("netsh", sParam, LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN);  
   nResult=LAAW_PARAMETERS.nLaunchResult;    
   NumToStr(sResult,nResult);    
   if (nResult!=0) then
   		//WriteToLogFile(hMsi,"Warnning Add NLSCE.exe to Firewall Exception List faild! You may need to add it by manually.");
   endif;
   return ERROR_SUCCESS;

end;   