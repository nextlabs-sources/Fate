#!/bin/bash
#
# DESCRIPTION
#	This script generates a number of bash variables used in PCV and release build.
#
#	The main objective is to make it easy to rebuild in case of build error. Also build 
#	parameters are explicit so that it is easy to understand or override. This script
#	generates a ./build.config file to be used by ./buildAll. Run this script after ./setEnv.
#
# USAGE
#	See printUsage()
#
# NOTES
#	When bash script is run from Hudson, the output string of $(hostname), $(whoami) is return
#	with a trailing '\r'. Use tr to remove the trailing '\r' ($(hostname | tr -d "\r")).


echo "NextLabs EDP Products Build Configuration Script"
echo "Specify --help for more information"


#
# Process commandline parameters
#

# ------------------------------
# printUsage()

function printUsage
{
	echo "usage: configure [--type=release|pcv_smdc|pcv_cdc|dev] [--mapBuildRoot=<drive>]"
	echo "  mapBuildRoot  Use short path for NLBUILDROOT to avoid Cygwin and InstallShield"
	echo "                path length limitation. Specify a drive letter that NLBUILDROOT is"
	echo "                mapped to (e.g., --mapBuildRoot=k). IMPORTANT: Beware that if you"
	echo "                have two Hudson projects setup to use the same drive, you can"
	echo "                potentially have one project changing drive mapping of another"
	echo "                in the middle of a build and produce unpredictible result. In this"
	echo "                case, you should use a different drive mapping for a second"
	echo "                project."
	echo "  type          Build configuration type. Default is dev. Valid values are:"
	echo "                  release"
	echo "                    BUILD_NUMBER must be specified"
	echo "                    BUILDTYPE=release"
	echo "                    PREFAST=0"
	echo "                  pcv_smdc or pcv_cdc"
	echo "                    BUILD_NUMBER is generated by this script"
	echo "                    BUILDTYPE=release|debug"
	echo "                    PREFAST=1"
	echo "                  dev"
	echo "                    BUILD_NUMBER is generated by this script"
	echo "                    BUILDTYPE=release|debug"
	echo "                    PREFAST=0|1"
	echo ""
	echo "Environment variables used by this script include:"
	echo "  BUILD_NUMBER=<#>          Valid only for --type=release. Otherwise, auto-generated."
	echo "  BUILDTYPE=release|debug   Always release for --type=release"
	echo "  NLEXTERNALDIR=<path>      Local dirctory of source from //depot/external"
	echo "  NLEXTERNALDIR2=<path>     Local dirctory of source from //depot/main/external"
	echo "  NLBUILDROOT=<path>        Will always be set to current directory"
	echo "  ESCROW                    When set, forces code-signing and time-stamping to be turned off"
	echo "  PREFAST=0|1"
	echo ""
	echo "Environment Variables:"
	echo "  BUILD_NUMBER     = $BUILD_NUMBER"
	echo "  BUILDTYPE        = $BUILDTYPE"
	echo "  OFFICIALCERT     = $OFFICIALCERT"
	echo "  PREFAST          = $PREFAST"
	echo "  NLBUILDROOT      = $NLBUILDROOT"
	echo "  NLEXTERNALDIR    = $NLEXTERNALDIR"
	echo "  NLEXTERNALDIR2   = $NLEXTERNALDIR2"
}

# Help
if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
	printUsage
	exit 0
fi

# Parse arguements
CONFIG_TYPE=dev
MAP_BUILD_ROOT=

while [ $# -gt 0 ]; do
	if [ "${1%%=*}" == "--type" ]; then
		CONFIG_TYPE=${1##*=}
	elif [ "${1%%=*}" == "--mapBuildRoot" ]; then
		MAP_BUILD_ROOT=${1##*=}
	fi
	
	shift
done

# Check for errors
if [ "$CONFIG_TYPE" != "release" ] &&  [ "$CONFIG_TYPE" != "pcv_smdc" ] \
	&&  [ "$CONFIG_TYPE" != "pcv_cdc" ] &&  [ "$CONFIG_TYPE" != "dev" ]; then
	echo "### ERROR: Invalid config type $CONFIG_TYPE"
	exit 1
fi

# Print arguements
echo "INFO: Parameters:"
echo "  CONFIG_TYPE      = $CONFIG_TYPE"
echo "  MAP_BUILD_ROOT   = $MAP_BUILD_ROOT"


#
# Check for errors
#

MAP_PATH=${MAP_BUILD_ROOT}:/
NLEXTERNALDIR=`cygpath -m "$NLEXTERNALDIR"`
NLEXTERNALDIR2=`cygpath -m "$NLEXTERNALDIR2"`

if [ "$MAP_BUILD_ROOT" != "" ] && [ ! -d $MAP_PATH ]; then
	echo "### ERROR: Invalid mapped build root $MAP_PATH"
	exit 1
fi

if [ "$NLEXTERNALDIR" == "" ]; then
	echo "### ERROR: Missing variable \$NLEXTERNALDIR"
	exit 1
fi

if [ ! -d $NLEXTERNALDIR ]; then
	echo "### ERROR: Missing external directory $NLEXTERNALDIR"
	exit 1
fi

if [ "$NLEXTERNALDIR2" == "" ]; then
	echo "### ERROR: Missing variable \$NLEXTERNALDIR2"
	exit 1
fi

if [ ! -d $NLEXTERNALDIR2 ]; then
	echo "### ERROR: Missing external directory $NLEXTERNALDIR2"
	exit 1
fi

if [ "$CONFIG_TYPE" == "release" ] || [ "$CONFIG_TYPE" == "pcv_smdc" ] || [ "$CONFIG_TYPE" == "pcv_cdc" ]; then
#TBF: Should check if BUILD_NUMBER is numeric

	if [ "$BUILD_NUMBER" == "" ] || [ $BUILD_NUMBER -eq 0 ]; then
		echo "### ERROR: Missing or invalid \$BUILD_NUMBER"
		exit 1
	fi
fi


#
# Prepare variables
#

# Set project root
if [ "$MAP_BUILD_ROOT" == "" ]; then
	NLBUILDROOT=$(cygpath -m $(pwd) | tr -d "\r")
else
	NLBUILDROOT=${MAP_BUILD_ROOT}:
fi

# Set WDK root
	WDKDIR=C:\\WinDDK\\7600.16385.1

# Compiler variables
if [ "$CONFIG_TYPE" == "release" ]; then
	BUILDTYPE=release
	PREFAST=0

	# If ESCROW is not defined, then we want code-signing to be done
	# with NextLabs official cert.
	if [ "X${ESCROW}" = "X" ] ; then
		OFFICIALCERT=1
	else
		OFFICIALCERT=0
	fi

	VERSION_BUILD=$BUILD_NUMBER
	VERSION_BUILD_SHORT=$BUILD_NUMBER
	MAKE_CFLAGS_32="OFFICIALCERT=$OFFICIALCERT BUILDTYPE=$BUILDTYPE TARGETENVARCH=x86 PREFAST=$PREFAST VERSION_BUILD=$VERSION_BUILD"
	MAKE_CFLAGS_64="OFFICIALCERT=$OFFICIALCERT BUILDTYPE=$BUILDTYPE TARGETENVARCH=x64 PREFAST=$PREFAST VERSION_BUILD=$VERSION_BUILD"
	MAKE_CSFLAGS="OFFICIALCERT=$OFFICIALCERT BUILDTYPE=$BUILDTYPE PREFAST=$PREFAST VERSION_BUILD=$VERSION_BUILD"
	MAKE_INSTALLFLAGS="OFFICIALCERT=$OFFICIALCERT BUILDTYPE=release VERSION_BUILD=$VERSION_BUILD"	
elif [ "$CONFIG_TYPE" == "pcv_smdc" ] || [ "$CONFIG_TYPE" == "pcv_cdc" ]; then	
	if [ "$BUILDTYPE" == "" ] || [ "$BUILDTYPE" != "debug" ]; then
		BUILDTYPE=release
	fi
	
	if [ "$PREFAST" == "" ] || [ $PREFAST -ne 0 ]; then
		PREFAST=1
	fi

	if [ "$CONFIG_TYPE" == "pcv_smdc" ]; then
		BUILD_CODE=PS
	else
		BUILD_CODE=PC
	fi
	
	BRANCH_NAME=CombinedInstaller

	if [ "$BRANCH_NAME" == "" ]; then
		BRANCH_NAME=$(basename `pwd`)

		if [ "$BRANCH_NAME" == "workspace" ]; then
			BRANCH_NAME=$(basename $(dirname `pwd`))
		fi
	fi
	
	OFFICIALCERT=0
#	VERSION_BUILD_SHORT=$BUILD_NUMBER${BUILD_CODE}_$BRANCH_NAME
	VERSION_BUILD_SHORT=$BUILD_NUMBER
	VERSION_BUILD=$VERSION_BUILD_SHORT
	MAKE_CFLAGS_32="OFFICIALCERT=$OFFICIALCERT BUILDTYPE=$BUILDTYPE TARGETENVARCH=x86 PREFAST=$PREFAST VERSION_BUILD=$VERSION_BUILD"
	MAKE_CFLAGS_64="OFFICIALCERT=$OFFICIALCERT BUILDTYPE=$BUILDTYPE TARGETENVARCH=x64 PREFAST=$PREFAST VERSION_BUILD=$VERSION_BUILD"
	MAKE_CSFLAGS="OFFICIALCERT=$OFFICIALCERT BUILDTYPE=$BUILDTYPE PREFAST=$PREFAST VERSION_BUILD=$VERSION_BUILD"
	MAKE_INSTALLFLAGS="OFFICIALCERT=$OFFICIALCERT BUILDTYPE=pcv VERSION_BUILD=$VERSION_BUILD"	
else	
	if [ "$BUILD_NUMBER" == "" ] || [ $BUILD_NUMBER -eq 0 ]; then
		BUILD_NUMBER=10001
	fi

	if [ "$BUILDTYPE" == "" ] || [ "$BUILDTYPE" != "release" ]; then
		BUILDTYPE=debug
	fi
	
	if [ "$PREFAST" == "" ] || [ $PREFAST -ne 0 ]; then
		PREFAST=1
	fi

	OFFICIALCERT=0
	VERSION_BUILD_SHORT=${BUILD_NUMBER}DX_$(hostname | tr -d "\r")
	VERSION_BUILD=$VERSION_BUILD_SHORT-$(whoami | tr -d "\r")-$(date +"%Y.%m.%d-%H:%M")
	MAKE_CFLAGS_32="OFFICIALCERT=$OFFICIALCERT BUILDTYPE=$BUILDTYPE TARGETENVARCH=x86 PREFAST=$PREFAST VERSION_BUILD=$VERSION_BUILD"
	MAKE_CFLAGS_64="OFFICIALCERT=$OFFICIALCERT BUILDTYPE=$BUILDTYPE TARGETENVARCH=x64 PREFAST=$PREFAST VERSION_BUILD=$VERSION_BUILD"
	MAKE_CSFLAGS="OFFICIALCERT=$OFFICIALCERT BUILDTYPE=$BUILDTYPE PREFAST=$PREFAST VERSION_BUILD=$VERSION_BUILD"
	MAKE_INSTALLFLAGS="OFFICIALCERT=$OFFICIALCERT BUILDTYPE=dev VERSION_BUILD=$VERSION_BUILD"
fi

# Project info
BUILD_DATE=$(date +"%Y%m%d")
BUILD_DATE_LONG=$(date +"%Y%m%d%H%M")

# Dependencies used by Makefile.xlib
#	To debug getNewestProductBuildArtifactFile.pl file location problem, add --verbose.
if [ "$XLIB_DESTINY_BUILD_ARTIFACTS_ZIP_FILE" == "" ]; then
    XLIB_DESTINY_BUILD_ARTIFACTS_ZIP_FILE="S:/build/release_artifacts/Destiny/8.7.2.0/13/destiny-8.7.2.0-13-201904231309-build.zip"
#	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
#		--startpath=S:/build/release_artifacts/Destiny/7.7.0.0 \
#		--outfile=build.config.destiny --varname=XLIB_DESTINY_BUILD_ARTIFACTS_ZIP_FILE
#	source ./build.config.destiny
fi

if [ "$XLIB_INSTALLER_BUILD_ARTIFACTS_XLIB_BIN_ZIP_FILE" == "" ]; then
#	XLIB_INSTALLER_BUILD_ARTIFACTS_XLIB_BIN_ZIP_FILE="S:/build/release_artifacts/installer/2.0.0.0/11/installer-support-2.0.0.0-11-release-20121203-xlib-bin.zip"
	perl $NLBUILDROOT/build/getNewestProductBuildArtifactFile.pl \
		--startpath=S:/build/release_artifacts/installer/2.0.0.0 \
		--outfile=build.config.installer --varname=XLIB_INSTALLER_BUILD_ARTIFACTS_XLIB_BIN_ZIP_FILE
	source ./build.config.installer
fi

WDE_HLKSIGNED_BINARIES_ZIP_FILE="S:/build/release_artifacts/WindowsDesktopEnforcer/8.4.69_HKLSigned/1898772.zip"

# Locations used by Makefile.publish
SYNC_FOLDER_ROOT=s:/global/Us2Cdc/engineering

if [ "$CONFIG_TYPE" == "release" ]; then
	REPOSITORY_ROOT=s:/build/release_candidate
else
	REPOSITORY_ROOT=s:/build/pcv
fi


#
# Generate build.config
#

# Write file

(
cat <<EOT
#!/bin/bash
#
# Description
#	This script contains variable to be used by ./buildAll script. It can also be used to
#	setup the environment for manual compilation. It is especially useful for partial 
#	rebuilding after fixing compilation problem or incremental build after bug fix.
#
# WARNING
#	This file is generated by ./configure. You may edit this file for debugging because
#	changes will be overriden when ./configure is run.

export CONFIG_TYPE=$CONFIG_TYPE
export BUILD_NUMBER=$BUILD_NUMBER
export VERSION_BUILD=$VERSION_BUILD
export VERSION_BUILD_SHORT=$VERSION_BUILD_SHORT
export BUILDTYPE=$BUILDTYPE
export BUILD_DATE=$BUILD_DATE
export BUILD_DATE_LONG=$BUILD_DATE_LONG
export PREFAST=$PREFAST
export OFFICIALCERT=$OFFICIALCERT

export XLIB_DESTINY_BUILD_ARTIFACTS_ZIP_FILE=$XLIB_DESTINY_BUILD_ARTIFACTS_ZIP_FILE
export XLIB_INSTALLER_BUILD_ARTIFACTS_XLIB_BIN_ZIP_FILE=$XLIB_INSTALLER_BUILD_ARTIFACTS_XLIB_BIN_ZIP_FILE
export WDE_HLKSIGNED_BINARIES_ZIP_FILE=$WDE_HLKSIGNED_BINARIES_ZIP_FILE

export REPOSITORY_ROOT=$REPOSITORY_ROOT
export SYNC_FOLDER_ROOT=$SYNC_FOLDER_ROOT

export NLBUILDROOT=$NLBUILDROOT
export WDKDIR=$WDKDIR	
export NLEXTERNALDIR=$NLEXTERNALDIR
export NLEXTERNALDIR2=$NLEXTERNALDIR2

export MAKE_CFLAGS_32="$MAKE_CFLAGS_32"
export MAKE_CFLAGS_64="$MAKE_CFLAGS_64"
export MAKE_CSFLAGS="$MAKE_CSFLAGS"
export MAKE_INSTALLFLAGS="$MAKE_INSTALLFLAGS"
EOT
) > build.config

# Print content of build.config
echo ""
echo "INFO: build.config"

cat build.config
