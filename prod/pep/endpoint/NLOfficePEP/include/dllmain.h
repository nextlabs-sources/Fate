#pragma once
#include "NLOfficePEP.h" // generated by IDL compiler
#include "NLOfficePEP_Comm.h"  // need to use some common structs and class


//
// use this class to host all components that OfficePEP project may used
// and _AtlModule by it's nature is a good singleton
//
class CNxtOfficePEPModule : public CAtlDllModuleT< CNxtOfficePEPModule >
{
private:
	HMODULE				hPepDll_;
	CComPtr<IDispatch>	app_;
	OfficeVer		ver_;
	AppType				type_;
	BOOL				bconnected_;
public:
	CNxtOfficePEPModule() : hPepDll_(NULL), app_(NULL), ver_(kUnknown), type_(kAppUnk),bconnected_(false){}

public:
	inline OfficeVer version() { return ver_; }
	inline AppType		 type(){ return type_; }
	inline CComPtr<IDispatch> app() { return app_; }
	inline void connected(BOOL bset) { bconnected_ = bset; }
	inline BOOL connected() { return bconnected_; }

public: // On* means events
	void OnDllAttach(HMODULE hDll);
	void OnDllDetach();

	HRESULT OnAppConnect(LPDISPATCH Application);
private:// 
	void _configDeploy();
public :
	DECLARE_LIBID(LIBID_NxtOfficePEPLib)
	DECLARE_REGISTRY_APPID_RESOURCEID(IDR_NXTOFFICEPEP, "{8BE5E6A3-7405-49D6-977B-5A6F4F3DE089}")
private:
	inline AppType getType(){
		AppType rt = kAppUnk;

		wchar_t wszModule[1024] = { 0 };
		::GetModuleFileNameW(NULL, wszModule, 1024);
		wchar_t* pAppName = wcsrchr(wszModule, L'\\');
		if (NULL != pAppName++)
		{
			if (_wcsicmp(pAppName, L"WINWORD.exe") == 0)
			{
				rt = kAppWord;
			}
			else if (_wcsicmp(pAppName, L"EXCEL.exe") == 0)
			{
				rt = kAppExcel;
			}
			else if (_wcsicmp(pAppName, L"POWERPNT.exe") == 0)
			{
				rt = kAppPPT;
			}
		}
		return rt;
	}
	inline OfficeVer getVersion(IDispatch* pApp)
	{
		OfficeVer rt = kUnknown;
		if (NULL != pApp)
		{
			CComVariant theResult;
			HRESULT hr = AutoWrap(DISPATCH_PROPERTYGET, &theResult, pApp, L"Version", 0);
			if (SUCCEEDED(hr))
			{
				wstring strVersion = theResult.bstrVal;
				if (0 == _wcsnicmp(strVersion.c_str(), L"16.0", 3))
				{
					rt = kVer2016;
				}
				else if (0 == _wcsnicmp(strVersion.c_str(), L"15.0", 3))
				{
					rt = kVer2013;
				}
				else if (0 == _wcsnicmp(strVersion.c_str(), L"14.0", 3))
				{
					rt = kVer2010;
				}
				else if (0 == _wcsnicmp(strVersion.c_str(), L"12.0", 3))
				{
					rt = kVer2007;
				}
				else if (0 == _wcsnicmp(strVersion.c_str(), L"11.0", 3))
				{
					rt = kVer2003;
				}
			}
		}
		return rt;
	}

public:
	static bool cfg_enableDebug;
	static bool cfg_enableOutEvalPC;

};


extern class CNxtOfficePEPModule _AtlModule;

// PEP helpers
namespace pep{

	inline AppType appType(){ return _AtlModule.type();	}

	inline ATL::CComPtr<IDispatch> getApp(){return _AtlModule.app();}

	inline OfficeVer getVersion(){ return _AtlModule.version(); }
	
	inline bool isWordApp()	{return kAppWord == pep::appType();}

	inline bool isExcelApp(){return kAppExcel == pep::appType();}

	inline bool isPPtApp(){	return kAppPPT == pep::appType();}

	inline bool isWordFile(_In_ const wstring& wstrFilePath)
	{
		std::wstring wstrFileExternsions = GetSuffixFromFileName(wstrFilePath);

		// .doc, .docx, .docm, .dotx, .dotm, .dot (6)
		if (boost::algorithm::iequals(wstrFileExternsions, L"doc") ||
			boost::algorithm::iequals(wstrFileExternsions, L"docx") ||
			boost::algorithm::iequals(wstrFileExternsions, L"docm") ||
			boost::algorithm::iequals(wstrFileExternsions, L"dotx") ||
			boost::algorithm::iequals(wstrFileExternsions, L"dotm") ||
			boost::algorithm::iequals(wstrFileExternsions, L"dot")
			)
		{
			return true;
		}
		return false;
	}
	inline bool isExcelFile(_In_ const wstring& wstrFilePath)
	{
		std::wstring wstrFileExternsions = GetSuffixFromFileName(wstrFilePath);

		// .xls, .xlsx, .xlsm, .xlsb, .xlam, .xla, .xlt, .xltm, .xltx ( 9 )
		if (boost::algorithm::iequals(wstrFileExternsions, L"xls") ||
			boost::algorithm::iequals(wstrFileExternsions, L"xlsx") ||
			boost::algorithm::iequals(wstrFileExternsions, L"xlsm") ||
			boost::algorithm::iequals(wstrFileExternsions, L"xlsb") ||
			boost::algorithm::iequals(wstrFileExternsions, L"xlam") ||
			boost::algorithm::iequals(wstrFileExternsions, L"xla") ||
			boost::algorithm::iequals(wstrFileExternsions, L"xlt") ||
			boost::algorithm::iequals(wstrFileExternsions, L"xltm") ||
			boost::algorithm::iequals(wstrFileExternsions, L"xltx")
			)
		{
			return true;
		}
		return false;
	}

	inline bool isPPTFile(_In_ const wstring& wstrFilePath)
	{
		std::wstring wstrFileExternsions = GetSuffixFromFileName(wstrFilePath);

		// pptx, pptm, ppt, potx, potm, pot, ppsx, ppsm, pps, ppam, ppa ( 11 )
		if (boost::algorithm::iequals(wstrFileExternsions, L"pptx") ||
			boost::algorithm::iequals(wstrFileExternsions, L"pptm") ||
			boost::algorithm::iequals(wstrFileExternsions, L"ppt") ||
			boost::algorithm::iequals(wstrFileExternsions, L"potx") ||
			boost::algorithm::iequals(wstrFileExternsions, L"potm") ||
			boost::algorithm::iequals(wstrFileExternsions, L"pot") ||
			boost::algorithm::iequals(wstrFileExternsions, L"ppsx") ||
			boost::algorithm::iequals(wstrFileExternsions, L"ppsm") ||
			boost::algorithm::iequals(wstrFileExternsions, L"pps") ||
			boost::algorithm::iequals(wstrFileExternsions, L"ppam") ||
			boost::algorithm::iequals(wstrFileExternsions, L"ppa")
			)
		{
			return true;
		}
		return false;
	}

	inline bool isNxlFile(_In_ const wstring& wstrFilePath)
	{
		// .nxl
		std::wstring wstrFileExternsions = GetSuffixFromFileName(wstrFilePath);
		if (boost::algorithm::iequals(wstrFileExternsions, L"nxl"))
		{
			return true;
		}
		return false;
	}

	inline bool isPdfFile(_In_ const wstring& wstrFilePath)
	{
		// .pdf
		std::wstring wstrFileExternsions = GetSuffixFromFileName(wstrFilePath);
		if (boost::algorithm::iequals(wstrFileExternsions, L"pdf"))
		{
			return true;
		}
		return false;
	}
}
