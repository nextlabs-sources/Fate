// Created by Microsoft (R) C/C++ Compiler Version 15.00.30729.01 (b9324dab).
//
// c:\users\ccao.o390-ccao\desktop\test\test\release\msppt.tli
//
// Wrapper implementations for Win32 type library C:\\Users\\ccao.O390-CCAO\\Desktop\\2016\\MSPPT.OLB
// compiler-generated file created 06/14/16 at 15:20:13 - DO NOT EDIT!


//
// interface Collection wrapper method implementations
//

#pragma implementation_key(1)
inline IUnknownPtr PowerPoint::Collection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2)
inline _variant_t PowerPoint::Collection::_Index ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Index(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3)
inline long PowerPoint::Collection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ColorFormat wrapper method implementations
//

#pragma implementation_key(4)
inline IDispatchPtr PowerPoint::ColorFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5)
inline long PowerPoint::ColorFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6)
inline IDispatchPtr PowerPoint::ColorFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7)
inline __missing_type__  PowerPoint::ColorFormat::GetRGB ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_RGB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(8)
inline void PowerPoint::ColorFormat::PutRGB ( __missing_type__ RGB ) {
    HRESULT _hr = put_RGB(RGB);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(9)
inline __missing_type__  PowerPoint::ColorFormat::GetType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(10)
inline enum PowerPoint::PpColorSchemeIndex PowerPoint::ColorFormat::GetSchemeColor ( ) {
    enum PpColorSchemeIndex _result;
    HRESULT _hr = get_SchemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(11)
inline void PowerPoint::ColorFormat::PutSchemeColor ( enum PpColorSchemeIndex SchemeColor ) {
    HRESULT _hr = put_SchemeColor(SchemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(12)
inline float PowerPoint::ColorFormat::GetTintAndShade ( ) {
    float _result = 0;
    HRESULT _hr = get_TintAndShade(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(13)
inline void PowerPoint::ColorFormat::PutTintAndShade ( float pValue ) {
    HRESULT _hr = put_TintAndShade(pValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(14)
inline __missing_type__  PowerPoint::ColorFormat::GetObjectThemeColor ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ObjectThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(15)
inline void PowerPoint::ColorFormat::PutObjectThemeColor ( __missing_type__ ObjectThemeColor ) {
    HRESULT _hr = put_ObjectThemeColor(ObjectThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(16)
inline float PowerPoint::ColorFormat::GetBrightness ( ) {
    float _result = 0;
    HRESULT _hr = get_Brightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(17)
inline void PowerPoint::ColorFormat::PutBrightness ( float Brightness ) {
    HRESULT _hr = put_Brightness(Brightness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface NamedSlideShow wrapper method implementations
//

#pragma implementation_key(18)
inline PowerPoint::_ApplicationPtr PowerPoint::NamedSlideShow::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(19)
inline IDispatchPtr PowerPoint::NamedSlideShow::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(20)
inline _bstr_t PowerPoint::NamedSlideShow::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(21)
inline HRESULT PowerPoint::NamedSlideShow::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(22)
inline _variant_t PowerPoint::NamedSlideShow::GetSlideIDs ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SlideIDs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(23)
inline long PowerPoint::NamedSlideShow::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface NamedSlideShows wrapper method implementations
//

#pragma implementation_key(24)
inline PowerPoint::_ApplicationPtr PowerPoint::NamedSlideShows::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(25)
inline IDispatchPtr PowerPoint::NamedSlideShows::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(26)
inline PowerPoint::NamedSlideShowPtr PowerPoint::NamedSlideShows::Item ( const _variant_t & Index ) {
    struct NamedSlideShow * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamedSlideShowPtr(_result, false);
}

#pragma implementation_key(27)
inline PowerPoint::NamedSlideShowPtr PowerPoint::NamedSlideShows::Add ( _bstr_t Name, const _variant_t & safeArrayOfSlideIDs ) {
    struct NamedSlideShow * _result = 0;
    HRESULT _hr = raw_Add(Name, safeArrayOfSlideIDs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamedSlideShowPtr(_result, false);
}

//
// interface PrintRange wrapper method implementations
//

#pragma implementation_key(28)
inline PowerPoint::_ApplicationPtr PowerPoint::PrintRange::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(29)
inline IDispatchPtr PowerPoint::PrintRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(30)
inline int PowerPoint::PrintRange::GetStart ( ) {
    int _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(31)
inline int PowerPoint::PrintRange::GetEnd ( ) {
    int _result = 0;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(32)
inline HRESULT PowerPoint::PrintRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface PrintRanges wrapper method implementations
//

#pragma implementation_key(33)
inline PowerPoint::PrintRangePtr PowerPoint::PrintRanges::Add ( int Start, int End ) {
    struct PrintRange * _result = 0;
    HRESULT _hr = raw_Add(Start, End, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PrintRangePtr(_result, false);
}

#pragma implementation_key(34)
inline PowerPoint::_ApplicationPtr PowerPoint::PrintRanges::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(35)
inline HRESULT PowerPoint::PrintRanges::ClearAll ( ) {
    HRESULT _hr = raw_ClearAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(36)
inline PowerPoint::PrintRangePtr PowerPoint::PrintRanges::Item ( int Index ) {
    struct PrintRange * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PrintRangePtr(_result, false);
}

#pragma implementation_key(37)
inline IDispatchPtr PowerPoint::PrintRanges::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface PrintOptions wrapper method implementations
//

#pragma implementation_key(38)
inline PowerPoint::_ApplicationPtr PowerPoint::PrintOptions::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(39)
inline enum PowerPoint::PpPrintColorType PowerPoint::PrintOptions::GetPrintColorType ( ) {
    enum PpPrintColorType _result;
    HRESULT _hr = get_PrintColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(40)
inline void PowerPoint::PrintOptions::PutPrintColorType ( enum PpPrintColorType PrintColorType ) {
    HRESULT _hr = put_PrintColorType(PrintColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(41)
inline __missing_type__  PowerPoint::PrintOptions::GetCollate ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Collate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(42)
inline void PowerPoint::PrintOptions::PutCollate ( __missing_type__ Collate ) {
    HRESULT _hr = put_Collate(Collate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(43)
inline __missing_type__  PowerPoint::PrintOptions::GetFitToPage ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_FitToPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(44)
inline void PowerPoint::PrintOptions::PutFitToPage ( __missing_type__ FitToPage ) {
    HRESULT _hr = put_FitToPage(FitToPage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(45)
inline __missing_type__  PowerPoint::PrintOptions::GetFrameSlides ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_FrameSlides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(46)
inline void PowerPoint::PrintOptions::PutFrameSlides ( __missing_type__ FrameSlides ) {
    HRESULT _hr = put_FrameSlides(FrameSlides);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(47)
inline int PowerPoint::PrintOptions::GetNumberOfCopies ( ) {
    int _result = 0;
    HRESULT _hr = get_NumberOfCopies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(48)
inline void PowerPoint::PrintOptions::PutNumberOfCopies ( int NumberOfCopies ) {
    HRESULT _hr = put_NumberOfCopies(NumberOfCopies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(49)
inline enum PowerPoint::PpPrintOutputType PowerPoint::PrintOptions::GetOutputType ( ) {
    enum PpPrintOutputType _result;
    HRESULT _hr = get_OutputType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(50)
inline void PowerPoint::PrintOptions::PutOutputType ( enum PpPrintOutputType OutputType ) {
    HRESULT _hr = put_OutputType(OutputType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(51)
inline IDispatchPtr PowerPoint::PrintOptions::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(52)
inline __missing_type__  PowerPoint::PrintOptions::GetPrintHiddenSlides ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_PrintHiddenSlides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(53)
inline void PowerPoint::PrintOptions::PutPrintHiddenSlides ( __missing_type__ PrintHiddenSlides ) {
    HRESULT _hr = put_PrintHiddenSlides(PrintHiddenSlides);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(54)
inline __missing_type__  PowerPoint::PrintOptions::GetPrintInBackground ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_PrintInBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(55)
inline void PowerPoint::PrintOptions::PutPrintInBackground ( __missing_type__ PrintInBackground ) {
    HRESULT _hr = put_PrintInBackground(PrintInBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(56)
inline enum PowerPoint::PpPrintRangeType PowerPoint::PrintOptions::GetRangeType ( ) {
    enum PpPrintRangeType _result;
    HRESULT _hr = get_RangeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(57)
inline void PowerPoint::PrintOptions::PutRangeType ( enum PpPrintRangeType RangeType ) {
    HRESULT _hr = put_RangeType(RangeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(58)
inline PowerPoint::PrintRangesPtr PowerPoint::PrintOptions::GetRanges ( ) {
    struct PrintRanges * _result = 0;
    HRESULT _hr = get_Ranges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PrintRangesPtr(_result, false);
}

#pragma implementation_key(59)
inline __missing_type__  PowerPoint::PrintOptions::GetPrintFontsAsGraphics ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_PrintFontsAsGraphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(60)
inline void PowerPoint::PrintOptions::PutPrintFontsAsGraphics ( __missing_type__ PrintFontsAsGraphics ) {
    HRESULT _hr = put_PrintFontsAsGraphics(PrintFontsAsGraphics);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(61)
inline _bstr_t PowerPoint::PrintOptions::GetSlideShowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlideShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(62)
inline void PowerPoint::PrintOptions::PutSlideShowName ( _bstr_t SlideShowName ) {
    HRESULT _hr = put_SlideShowName(SlideShowName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(63)
inline _bstr_t PowerPoint::PrintOptions::GetActivePrinter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivePrinter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(64)
inline void PowerPoint::PrintOptions::PutActivePrinter ( _bstr_t ActivePrinter ) {
    HRESULT _hr = put_ActivePrinter(ActivePrinter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(65)
inline enum PowerPoint::PpPrintHandoutOrder PowerPoint::PrintOptions::GetHandoutOrder ( ) {
    enum PpPrintHandoutOrder _result;
    HRESULT _hr = get_HandoutOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(66)
inline void PowerPoint::PrintOptions::PutHandoutOrder ( enum PpPrintHandoutOrder HandoutOrder ) {
    HRESULT _hr = put_HandoutOrder(HandoutOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(67)
inline __missing_type__  PowerPoint::PrintOptions::GetPrintComments ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_PrintComments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(68)
inline void PowerPoint::PrintOptions::PutPrintComments ( __missing_type__ PrintComments ) {
    HRESULT _hr = put_PrintComments(PrintComments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(69)
inline int PowerPoint::PrintOptions::GetsectionIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_sectionIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(70)
inline void PowerPoint::PrintOptions::PutsectionIndex ( int sectionIndex ) {
    HRESULT _hr = put_sectionIndex(sectionIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(71)
inline __missing_type__  PowerPoint::PrintOptions::GetHighQuality ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HighQuality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(72)
inline void PowerPoint::PrintOptions::PutHighQuality ( __missing_type__ HighQuality ) {
    HRESULT _hr = put_HighQuality(HighQuality);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AddIn wrapper method implementations
//

#pragma implementation_key(73)
inline PowerPoint::_ApplicationPtr PowerPoint::AddIn::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(74)
inline IDispatchPtr PowerPoint::AddIn::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(75)
inline _bstr_t PowerPoint::AddIn::GetFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(76)
inline _bstr_t PowerPoint::AddIn::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(77)
inline _bstr_t PowerPoint::AddIn::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(78)
inline __missing_type__  PowerPoint::AddIn::GetRegistered ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Registered(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(79)
inline void PowerPoint::AddIn::PutRegistered ( __missing_type__ Registered ) {
    HRESULT _hr = put_Registered(Registered);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(80)
inline __missing_type__  PowerPoint::AddIn::GetAutoLoad ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AutoLoad(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(81)
inline void PowerPoint::AddIn::PutAutoLoad ( __missing_type__ AutoLoad ) {
    HRESULT _hr = put_AutoLoad(AutoLoad);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(82)
inline __missing_type__  PowerPoint::AddIn::GetLoaded ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Loaded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(83)
inline void PowerPoint::AddIn::PutLoaded ( __missing_type__ Loaded ) {
    HRESULT _hr = put_Loaded(Loaded);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(84)
inline __missing_type__  PowerPoint::AddIn::GetDisplayAlerts ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_DisplayAlerts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(85)
inline void PowerPoint::AddIn::PutDisplayAlerts ( __missing_type__ DisplayAlerts ) {
    HRESULT _hr = put_DisplayAlerts(DisplayAlerts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(86)
inline __missing_type__  PowerPoint::AddIn::GetRegisteredInHKLM ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_RegisteredInHKLM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface AddIns wrapper method implementations
//

#pragma implementation_key(87)
inline PowerPoint::_ApplicationPtr PowerPoint::AddIns::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(88)
inline IDispatchPtr PowerPoint::AddIns::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(89)
inline PowerPoint::AddInPtr PowerPoint::AddIns::Item ( VARIANT * Index ) {
    struct AddIn * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInPtr(_result, false);
}

#pragma implementation_key(90)
inline PowerPoint::AddInPtr PowerPoint::AddIns::Add ( _bstr_t FileName ) {
    struct AddIn * _result = 0;
    HRESULT _hr = raw_Add(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInPtr(_result, false);
}

#pragma implementation_key(91)
inline HRESULT PowerPoint::AddIns::Remove ( VARIANT * Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Presentations wrapper method implementations
//

#pragma implementation_key(92)
inline PowerPoint::_ApplicationPtr PowerPoint::Presentations::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(93)
inline IDispatchPtr PowerPoint::Presentations::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(94)
inline PowerPoint::_PresentationPtr PowerPoint::Presentations::Item ( const _variant_t & Index ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(95)
inline PowerPoint::_PresentationPtr PowerPoint::Presentations::Add ( __missing_type__ WithWindow ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = raw_Add(WithWindow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(96)
inline PowerPoint::_PresentationPtr PowerPoint::Presentations::OpenOld ( _bstr_t FileName, __missing_type__ ReadOnly, __missing_type__ Untitled, __missing_type__ WithWindow ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = raw_OpenOld(FileName, ReadOnly, Untitled, WithWindow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(97)
inline PowerPoint::_PresentationPtr PowerPoint::Presentations::Open ( _bstr_t FileName, __missing_type__ ReadOnly, __missing_type__ Untitled, __missing_type__ WithWindow ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = raw_Open(FileName, ReadOnly, Untitled, WithWindow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(98)
inline HRESULT PowerPoint::Presentations::CheckOut ( _bstr_t FileName ) {
    HRESULT _hr = raw_CheckOut(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(99)
inline VARIANT_BOOL PowerPoint::Presentations::CanCheckOut ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanCheckOut(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(100)
inline PowerPoint::_PresentationPtr PowerPoint::Presentations::Open2007 ( _bstr_t FileName, __missing_type__ ReadOnly, __missing_type__ Untitled, __missing_type__ WithWindow, __missing_type__ OpenAndRepair ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = raw_Open2007(FileName, ReadOnly, Untitled, WithWindow, OpenAndRepair, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

//
// interface Hyperlink wrapper method implementations
//

#pragma implementation_key(101)
inline PowerPoint::_ApplicationPtr PowerPoint::Hyperlink::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(102)
inline IDispatchPtr PowerPoint::Hyperlink::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(103)
inline __missing_type__  PowerPoint::Hyperlink::GetType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(104)
inline _bstr_t PowerPoint::Hyperlink::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(105)
inline void PowerPoint::Hyperlink::PutAddress ( _bstr_t Address ) {
    HRESULT _hr = put_Address(Address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(106)
inline _bstr_t PowerPoint::Hyperlink::GetSubAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SubAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(107)
inline void PowerPoint::Hyperlink::PutSubAddress ( _bstr_t SubAddress ) {
    HRESULT _hr = put_SubAddress(SubAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(108)
inline HRESULT PowerPoint::Hyperlink::AddToFavorites ( ) {
    HRESULT _hr = raw_AddToFavorites();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(109)
inline _bstr_t PowerPoint::Hyperlink::GetEmailSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EmailSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(110)
inline void PowerPoint::Hyperlink::PutEmailSubject ( _bstr_t EmailSubject ) {
    HRESULT _hr = put_EmailSubject(EmailSubject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(111)
inline _bstr_t PowerPoint::Hyperlink::GetScreenTip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScreenTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(112)
inline void PowerPoint::Hyperlink::PutScreenTip ( _bstr_t ScreenTip ) {
    HRESULT _hr = put_ScreenTip(ScreenTip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(113)
inline _bstr_t PowerPoint::Hyperlink::GetTextToDisplay ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextToDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(114)
inline void PowerPoint::Hyperlink::PutTextToDisplay ( _bstr_t TextToDisplay ) {
    HRESULT _hr = put_TextToDisplay(TextToDisplay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(115)
inline __missing_type__  PowerPoint::Hyperlink::GetShowAndReturn ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ShowAndReturn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(116)
inline void PowerPoint::Hyperlink::PutShowAndReturn ( __missing_type__ ShowAndReturn ) {
    HRESULT _hr = put_ShowAndReturn(ShowAndReturn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(117)
inline HRESULT PowerPoint::Hyperlink::Follow ( ) {
    HRESULT _hr = raw_Follow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(118)
inline HRESULT PowerPoint::Hyperlink::CreateNewDocument ( _bstr_t FileName, __missing_type__ EditNow, __missing_type__ Overwrite ) {
    HRESULT _hr = raw_CreateNewDocument(FileName, EditNow, Overwrite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(119)
inline HRESULT PowerPoint::Hyperlink::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Hyperlinks wrapper method implementations
//

#pragma implementation_key(120)
inline PowerPoint::_ApplicationPtr PowerPoint::Hyperlinks::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(121)
inline IDispatchPtr PowerPoint::Hyperlinks::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(122)
inline PowerPoint::HyperlinkPtr PowerPoint::Hyperlinks::Item ( int Index ) {
    struct Hyperlink * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinkPtr(_result, false);
}

//
// interface PageSetup wrapper method implementations
//

#pragma implementation_key(123)
inline PowerPoint::_ApplicationPtr PowerPoint::PageSetup::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(124)
inline IDispatchPtr PowerPoint::PageSetup::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(125)
inline int PowerPoint::PageSetup::GetFirstSlideNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_FirstSlideNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(126)
inline void PowerPoint::PageSetup::PutFirstSlideNumber ( int FirstSlideNumber ) {
    HRESULT _hr = put_FirstSlideNumber(FirstSlideNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(127)
inline float PowerPoint::PageSetup::GetSlideHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_SlideHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(128)
inline void PowerPoint::PageSetup::PutSlideHeight ( float SlideHeight ) {
    HRESULT _hr = put_SlideHeight(SlideHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(129)
inline float PowerPoint::PageSetup::GetSlideWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_SlideWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(130)
inline void PowerPoint::PageSetup::PutSlideWidth ( float SlideWidth ) {
    HRESULT _hr = put_SlideWidth(SlideWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(131)
inline enum PowerPoint::PpSlideSizeType PowerPoint::PageSetup::GetSlideSize ( ) {
    enum PpSlideSizeType _result;
    HRESULT _hr = get_SlideSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(132)
inline void PowerPoint::PageSetup::PutSlideSize ( enum PpSlideSizeType SlideSize ) {
    HRESULT _hr = put_SlideSize(SlideSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(133)
inline __missing_type__  PowerPoint::PageSetup::GetNotesOrientation ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_NotesOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(134)
inline void PowerPoint::PageSetup::PutNotesOrientation ( __missing_type__ NotesOrientation ) {
    HRESULT _hr = put_NotesOrientation(NotesOrientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(135)
inline __missing_type__  PowerPoint::PageSetup::GetSlideOrientation ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_SlideOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(136)
inline void PowerPoint::PageSetup::PutSlideOrientation ( __missing_type__ SlideOrientation ) {
    HRESULT _hr = put_SlideOrientation(SlideOrientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ExtraColors wrapper method implementations
//

#pragma implementation_key(137)
inline PowerPoint::_ApplicationPtr PowerPoint::ExtraColors::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(138)
inline IDispatchPtr PowerPoint::ExtraColors::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(139)
inline __missing_type__  PowerPoint::ExtraColors::Item ( int Index ) {
    __missing_type__ _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(140)
inline HRESULT PowerPoint::ExtraColors::Add ( __missing_type__ Type ) {
    HRESULT _hr = raw_Add(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(141)
inline HRESULT PowerPoint::ExtraColors::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface RGBColor wrapper method implementations
//

#pragma implementation_key(142)
inline PowerPoint::_ApplicationPtr PowerPoint::RGBColor::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(143)
inline IDispatchPtr PowerPoint::RGBColor::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(144)
inline __missing_type__  PowerPoint::RGBColor::GetRGB ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_RGB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(145)
inline void PowerPoint::RGBColor::PutRGB ( __missing_type__ RGB ) {
    HRESULT _hr = put_RGB(RGB);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ColorScheme wrapper method implementations
//

#pragma implementation_key(146)
inline PowerPoint::_ApplicationPtr PowerPoint::ColorScheme::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(147)
inline IDispatchPtr PowerPoint::ColorScheme::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(148)
inline PowerPoint::RGBColorPtr PowerPoint::ColorScheme::Colors ( enum PpColorSchemeIndex SchemeColor ) {
    struct RGBColor * _result = 0;
    HRESULT _hr = raw_Colors(SchemeColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RGBColorPtr(_result, false);
}

#pragma implementation_key(149)
inline HRESULT PowerPoint::ColorScheme::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ColorSchemes wrapper method implementations
//

#pragma implementation_key(150)
inline PowerPoint::_ApplicationPtr PowerPoint::ColorSchemes::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(151)
inline IDispatchPtr PowerPoint::ColorSchemes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(152)
inline PowerPoint::ColorSchemePtr PowerPoint::ColorSchemes::Item ( int Index ) {
    struct ColorScheme * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemePtr(_result, false);
}

#pragma implementation_key(153)
inline PowerPoint::ColorSchemePtr PowerPoint::ColorSchemes::Add ( struct ColorScheme * Scheme ) {
    struct ColorScheme * _result = 0;
    HRESULT _hr = raw_Add(Scheme, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemePtr(_result, false);
}

//
// interface SoundEffect wrapper method implementations
//

#pragma implementation_key(154)
inline PowerPoint::_ApplicationPtr PowerPoint::SoundEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(155)
inline IDispatchPtr PowerPoint::SoundEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(156)
inline _bstr_t PowerPoint::SoundEffect::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(157)
inline void PowerPoint::SoundEffect::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(158)
inline enum PowerPoint::PpSoundEffectType PowerPoint::SoundEffect::GetType ( ) {
    enum PpSoundEffectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(159)
inline void PowerPoint::SoundEffect::PutType ( enum PpSoundEffectType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(160)
inline HRESULT PowerPoint::SoundEffect::ImportFromFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_ImportFromFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(161)
inline HRESULT PowerPoint::SoundEffect::Play ( ) {
    HRESULT _hr = raw_Play();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SlideShowTransition wrapper method implementations
//

#pragma implementation_key(162)
inline PowerPoint::_ApplicationPtr PowerPoint::SlideShowTransition::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(163)
inline IDispatchPtr PowerPoint::SlideShowTransition::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(164)
inline __missing_type__  PowerPoint::SlideShowTransition::GetAdvanceOnClick ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AdvanceOnClick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(165)
inline void PowerPoint::SlideShowTransition::PutAdvanceOnClick ( __missing_type__ AdvanceOnClick ) {
    HRESULT _hr = put_AdvanceOnClick(AdvanceOnClick);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(166)
inline __missing_type__  PowerPoint::SlideShowTransition::GetAdvanceOnTime ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AdvanceOnTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(167)
inline void PowerPoint::SlideShowTransition::PutAdvanceOnTime ( __missing_type__ AdvanceOnTime ) {
    HRESULT _hr = put_AdvanceOnTime(AdvanceOnTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(168)
inline float PowerPoint::SlideShowTransition::GetAdvanceTime ( ) {
    float _result = 0;
    HRESULT _hr = get_AdvanceTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(169)
inline void PowerPoint::SlideShowTransition::PutAdvanceTime ( float AdvanceTime ) {
    HRESULT _hr = put_AdvanceTime(AdvanceTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(170)
inline enum PowerPoint::PpEntryEffect PowerPoint::SlideShowTransition::GetEntryEffect ( ) {
    enum PpEntryEffect _result;
    HRESULT _hr = get_EntryEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(171)
inline void PowerPoint::SlideShowTransition::PutEntryEffect ( enum PpEntryEffect EntryEffect ) {
    HRESULT _hr = put_EntryEffect(EntryEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(172)
inline __missing_type__  PowerPoint::SlideShowTransition::GetHidden ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(173)
inline void PowerPoint::SlideShowTransition::PutHidden ( __missing_type__ Hidden ) {
    HRESULT _hr = put_Hidden(Hidden);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(174)
inline __missing_type__  PowerPoint::SlideShowTransition::GetLoopSoundUntilNext ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_LoopSoundUntilNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(175)
inline void PowerPoint::SlideShowTransition::PutLoopSoundUntilNext ( __missing_type__ LoopSoundUntilNext ) {
    HRESULT _hr = put_LoopSoundUntilNext(LoopSoundUntilNext);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(176)
inline PowerPoint::SoundEffectPtr PowerPoint::SlideShowTransition::GetSoundEffect ( ) {
    struct SoundEffect * _result = 0;
    HRESULT _hr = get_SoundEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundEffectPtr(_result, false);
}

#pragma implementation_key(177)
inline enum PowerPoint::PpTransitionSpeed PowerPoint::SlideShowTransition::GetSpeed ( ) {
    enum PpTransitionSpeed _result;
    HRESULT _hr = get_Speed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(178)
inline void PowerPoint::SlideShowTransition::PutSpeed ( enum PpTransitionSpeed Speed ) {
    HRESULT _hr = put_Speed(Speed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(179)
inline float PowerPoint::SlideShowTransition::GetDuration ( ) {
    float _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(180)
inline void PowerPoint::SlideShowTransition::PutDuration ( float Duration ) {
    HRESULT _hr = put_Duration(Duration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface SoundFormat wrapper method implementations
//

#pragma implementation_key(181)
inline HRESULT PowerPoint::SoundFormat::Play ( ) {
    HRESULT _hr = raw_Play();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(182)
inline HRESULT PowerPoint::SoundFormat::Import ( _bstr_t FileName ) {
    HRESULT _hr = raw_Import(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(183)
inline enum PowerPoint::PpSoundFormatType PowerPoint::SoundFormat::Export ( _bstr_t FileName ) {
    enum PpSoundFormatType _result;
    HRESULT _hr = raw_Export(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(184)
inline enum PowerPoint::PpSoundFormatType PowerPoint::SoundFormat::GetType ( ) {
    enum PpSoundFormatType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(185)
inline _bstr_t PowerPoint::SoundFormat::GetSourceFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceFullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface PlaceholderFormat wrapper method implementations
//

#pragma implementation_key(186)
inline PowerPoint::_ApplicationPtr PowerPoint::PlaceholderFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(187)
inline IDispatchPtr PowerPoint::PlaceholderFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(188)
inline enum PowerPoint::PpPlaceholderType PowerPoint::PlaceholderFormat::GetType ( ) {
    enum PpPlaceholderType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(189)
inline _bstr_t PowerPoint::PlaceholderFormat::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(190)
inline void PowerPoint::PlaceholderFormat::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(191)
inline __missing_type__  PowerPoint::PlaceholderFormat::GetContainedType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ContainedType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Adjustments wrapper method implementations
//

#pragma implementation_key(192)
inline IDispatchPtr PowerPoint::Adjustments::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(193)
inline long PowerPoint::Adjustments::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(194)
inline IDispatchPtr PowerPoint::Adjustments::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(195)
inline int PowerPoint::Adjustments::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(196)
inline float PowerPoint::Adjustments::GetItem ( int Index ) {
    float _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(197)
inline void PowerPoint::Adjustments::PutItem ( int Index, float Val ) {
    HRESULT _hr = put_Item(Index, Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PictureFormat wrapper method implementations
//

#pragma implementation_key(198)
inline IDispatchPtr PowerPoint::PictureFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(199)
inline long PowerPoint::PictureFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(200)
inline IDispatchPtr PowerPoint::PictureFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(201)
inline HRESULT PowerPoint::PictureFormat::IncrementBrightness ( float Increment ) {
    HRESULT _hr = raw_IncrementBrightness(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(202)
inline HRESULT PowerPoint::PictureFormat::IncrementContrast ( float Increment ) {
    HRESULT _hr = raw_IncrementContrast(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(203)
inline float PowerPoint::PictureFormat::GetBrightness ( ) {
    float _result = 0;
    HRESULT _hr = get_Brightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(204)
inline void PowerPoint::PictureFormat::PutBrightness ( float Brightness ) {
    HRESULT _hr = put_Brightness(Brightness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(205)
inline __missing_type__  PowerPoint::PictureFormat::GetColorType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(206)
inline void PowerPoint::PictureFormat::PutColorType ( __missing_type__ ColorType ) {
    HRESULT _hr = put_ColorType(ColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(207)
inline float PowerPoint::PictureFormat::GetContrast ( ) {
    float _result = 0;
    HRESULT _hr = get_Contrast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(208)
inline void PowerPoint::PictureFormat::PutContrast ( float Contrast ) {
    HRESULT _hr = put_Contrast(Contrast);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(209)
inline float PowerPoint::PictureFormat::GetCropBottom ( ) {
    float _result = 0;
    HRESULT _hr = get_CropBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(210)
inline void PowerPoint::PictureFormat::PutCropBottom ( float CropBottom ) {
    HRESULT _hr = put_CropBottom(CropBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(211)
inline float PowerPoint::PictureFormat::GetCropLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_CropLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(212)
inline void PowerPoint::PictureFormat::PutCropLeft ( float CropLeft ) {
    HRESULT _hr = put_CropLeft(CropLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(213)
inline float PowerPoint::PictureFormat::GetCropRight ( ) {
    float _result = 0;
    HRESULT _hr = get_CropRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(214)
inline void PowerPoint::PictureFormat::PutCropRight ( float CropRight ) {
    HRESULT _hr = put_CropRight(CropRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(215)
inline float PowerPoint::PictureFormat::GetCropTop ( ) {
    float _result = 0;
    HRESULT _hr = get_CropTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(216)
inline void PowerPoint::PictureFormat::PutCropTop ( float CropTop ) {
    HRESULT _hr = put_CropTop(CropTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(217)
inline __missing_type__  PowerPoint::PictureFormat::GetTransparencyColor ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_TransparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(218)
inline void PowerPoint::PictureFormat::PutTransparencyColor ( __missing_type__ TransparencyColor ) {
    HRESULT _hr = put_TransparencyColor(TransparencyColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(219)
inline __missing_type__  PowerPoint::PictureFormat::GetTransparentBackground ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_TransparentBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(220)
inline void PowerPoint::PictureFormat::PutTransparentBackground ( __missing_type__ TransparentBackground ) {
    HRESULT _hr = put_TransparentBackground(TransparentBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(221)
inline __missing_type__ PowerPoint::PictureFormat::GetCrop ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Crop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface FillFormat wrapper method implementations
//

#pragma implementation_key(222)
inline IDispatchPtr PowerPoint::FillFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(223)
inline long PowerPoint::FillFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(224)
inline IDispatchPtr PowerPoint::FillFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(225)
inline HRESULT PowerPoint::FillFormat::Background ( ) {
    HRESULT _hr = raw_Background();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(226)
inline HRESULT PowerPoint::FillFormat::OneColorGradient ( __missing_type__ Style, int Variant, float Degree ) {
    HRESULT _hr = raw_OneColorGradient(Style, Variant, Degree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(227)
inline HRESULT PowerPoint::FillFormat::Patterned ( __missing_type__ Pattern ) {
    HRESULT _hr = raw_Patterned(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(228)
inline HRESULT PowerPoint::FillFormat::PresetGradient ( __missing_type__ Style, int Variant, __missing_type__ PresetGradientType ) {
    HRESULT _hr = raw_PresetGradient(Style, Variant, PresetGradientType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(229)
inline HRESULT PowerPoint::FillFormat::PresetTextured ( __missing_type__ PresetTexture ) {
    HRESULT _hr = raw_PresetTextured(PresetTexture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(230)
inline HRESULT PowerPoint::FillFormat::Solid ( ) {
    HRESULT _hr = raw_Solid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(231)
inline HRESULT PowerPoint::FillFormat::TwoColorGradient ( __missing_type__ Style, int Variant ) {
    HRESULT _hr = raw_TwoColorGradient(Style, Variant);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(232)
inline HRESULT PowerPoint::FillFormat::UserPicture ( _bstr_t PictureFile ) {
    HRESULT _hr = raw_UserPicture(PictureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(233)
inline HRESULT PowerPoint::FillFormat::UserTextured ( _bstr_t TextureFile ) {
    HRESULT _hr = raw_UserTextured(TextureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(234)
inline PowerPoint::ColorFormatPtr PowerPoint::FillFormat::GetBackColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(235)
inline void PowerPoint::FillFormat::PutBackColor ( struct ColorFormat * BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(236)
inline PowerPoint::ColorFormatPtr PowerPoint::FillFormat::GetForeColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(237)
inline void PowerPoint::FillFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(238)
inline __missing_type__  PowerPoint::FillFormat::GetGradientColorType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_GradientColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(239)
inline float PowerPoint::FillFormat::GetGradientDegree ( ) {
    float _result = 0;
    HRESULT _hr = get_GradientDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(240)
inline __missing_type__  PowerPoint::FillFormat::GetGradientStyle ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_GradientStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(241)
inline int PowerPoint::FillFormat::GetGradientVariant ( ) {
    int _result = 0;
    HRESULT _hr = get_GradientVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(242)
inline __missing_type__  PowerPoint::FillFormat::GetPattern ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(243)
inline __missing_type__  PowerPoint::FillFormat::GetPresetGradientType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_PresetGradientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(244)
inline __missing_type__  PowerPoint::FillFormat::GetPresetTexture ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_PresetTexture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(245)
inline _bstr_t PowerPoint::FillFormat::GetTextureName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextureName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(246)
inline __missing_type__  PowerPoint::FillFormat::GetTextureType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_TextureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(247)
inline float PowerPoint::FillFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(248)
inline void PowerPoint::FillFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(249)
inline __missing_type__  PowerPoint::FillFormat::GetType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(250)
inline __missing_type__  PowerPoint::FillFormat::GetVisible ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(251)
inline void PowerPoint::FillFormat::PutVisible ( __missing_type__ Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(252)
inline __missing_type__ PowerPoint::FillFormat::GetGradientStops ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_GradientStops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(253)
inline float PowerPoint::FillFormat::GetTextureOffsetX ( ) {
    float _result = 0;
    HRESULT _hr = get_TextureOffsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(254)
inline void PowerPoint::FillFormat::PutTextureOffsetX ( float TextureOffsetX ) {
    HRESULT _hr = put_TextureOffsetX(TextureOffsetX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(255)
inline float PowerPoint::FillFormat::GetTextureOffsetY ( ) {
    float _result = 0;
    HRESULT _hr = get_TextureOffsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(256)
inline void PowerPoint::FillFormat::PutTextureOffsetY ( float TextureOffsetY ) {
    HRESULT _hr = put_TextureOffsetY(TextureOffsetY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(257)
inline __missing_type__  PowerPoint::FillFormat::GetTextureAlignment ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_TextureAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(258)
inline void PowerPoint::FillFormat::PutTextureAlignment ( __missing_type__ TextureAlignment ) {
    HRESULT _hr = put_TextureAlignment(TextureAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(259)
inline float PowerPoint::FillFormat::GetTextureHorizontalScale ( ) {
    float _result = 0;
    HRESULT _hr = get_TextureHorizontalScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(260)
inline void PowerPoint::FillFormat::PutTextureHorizontalScale ( float HorizontalScale ) {
    HRESULT _hr = put_TextureHorizontalScale(HorizontalScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(261)
inline float PowerPoint::FillFormat::GetTextureVerticalScale ( ) {
    float _result = 0;
    HRESULT _hr = get_TextureVerticalScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(262)
inline void PowerPoint::FillFormat::PutTextureVerticalScale ( float VerticalScale ) {
    HRESULT _hr = put_TextureVerticalScale(VerticalScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(263)
inline __missing_type__  PowerPoint::FillFormat::GetTextureTile ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_TextureTile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(264)
inline void PowerPoint::FillFormat::PutTextureTile ( __missing_type__ TextureTile ) {
    HRESULT _hr = put_TextureTile(TextureTile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(265)
inline __missing_type__  PowerPoint::FillFormat::GetRotateWithObject ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_RotateWithObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(266)
inline void PowerPoint::FillFormat::PutRotateWithObject ( __missing_type__ RotateWithObject ) {
    HRESULT _hr = put_RotateWithObject(RotateWithObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(267)
inline __missing_type__ PowerPoint::FillFormat::GetPictureEffects ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_PictureEffects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(268)
inline float PowerPoint::FillFormat::GetGradientAngle ( ) {
    float _result = 0;
    HRESULT _hr = get_GradientAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(269)
inline void PowerPoint::FillFormat::PutGradientAngle ( float GradientAngle ) {
    HRESULT _hr = put_GradientAngle(GradientAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface LineFormat wrapper method implementations
//

#pragma implementation_key(270)
inline IDispatchPtr PowerPoint::LineFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(271)
inline long PowerPoint::LineFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(272)
inline IDispatchPtr PowerPoint::LineFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(273)
inline PowerPoint::ColorFormatPtr PowerPoint::LineFormat::GetBackColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(274)
inline void PowerPoint::LineFormat::PutBackColor ( struct ColorFormat * BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(275)
inline __missing_type__  PowerPoint::LineFormat::GetBeginArrowheadLength ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_BeginArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(276)
inline void PowerPoint::LineFormat::PutBeginArrowheadLength ( __missing_type__ BeginArrowheadLength ) {
    HRESULT _hr = put_BeginArrowheadLength(BeginArrowheadLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(277)
inline __missing_type__  PowerPoint::LineFormat::GetBeginArrowheadStyle ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_BeginArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(278)
inline void PowerPoint::LineFormat::PutBeginArrowheadStyle ( __missing_type__ BeginArrowheadStyle ) {
    HRESULT _hr = put_BeginArrowheadStyle(BeginArrowheadStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(279)
inline __missing_type__  PowerPoint::LineFormat::GetBeginArrowheadWidth ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_BeginArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(280)
inline void PowerPoint::LineFormat::PutBeginArrowheadWidth ( __missing_type__ BeginArrowheadWidth ) {
    HRESULT _hr = put_BeginArrowheadWidth(BeginArrowheadWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(281)
inline __missing_type__  PowerPoint::LineFormat::GetDashStyle ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_DashStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(282)
inline void PowerPoint::LineFormat::PutDashStyle ( __missing_type__ DashStyle ) {
    HRESULT _hr = put_DashStyle(DashStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(283)
inline __missing_type__  PowerPoint::LineFormat::GetEndArrowheadLength ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_EndArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(284)
inline void PowerPoint::LineFormat::PutEndArrowheadLength ( __missing_type__ EndArrowheadLength ) {
    HRESULT _hr = put_EndArrowheadLength(EndArrowheadLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(285)
inline __missing_type__  PowerPoint::LineFormat::GetEndArrowheadStyle ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_EndArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(286)
inline void PowerPoint::LineFormat::PutEndArrowheadStyle ( __missing_type__ EndArrowheadStyle ) {
    HRESULT _hr = put_EndArrowheadStyle(EndArrowheadStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(287)
inline __missing_type__  PowerPoint::LineFormat::GetEndArrowheadWidth ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_EndArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(288)
inline void PowerPoint::LineFormat::PutEndArrowheadWidth ( __missing_type__ EndArrowheadWidth ) {
    HRESULT _hr = put_EndArrowheadWidth(EndArrowheadWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(289)
inline PowerPoint::ColorFormatPtr PowerPoint::LineFormat::GetForeColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(290)
inline void PowerPoint::LineFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(291)
inline __missing_type__  PowerPoint::LineFormat::GetPattern ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(292)
inline void PowerPoint::LineFormat::PutPattern ( __missing_type__ Pattern ) {
    HRESULT _hr = put_Pattern(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(293)
inline __missing_type__  PowerPoint::LineFormat::GetStyle ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(294)
inline void PowerPoint::LineFormat::PutStyle ( __missing_type__ Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(295)
inline float PowerPoint::LineFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(296)
inline void PowerPoint::LineFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(297)
inline __missing_type__  PowerPoint::LineFormat::GetVisible ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(298)
inline void PowerPoint::LineFormat::PutVisible ( __missing_type__ Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(299)
inline float PowerPoint::LineFormat::GetWeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(300)
inline void PowerPoint::LineFormat::PutWeight ( float Weight ) {
    HRESULT _hr = put_Weight(Weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(301)
inline __missing_type__  PowerPoint::LineFormat::GetInsetPen ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_InsetPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(302)
inline void PowerPoint::LineFormat::PutInsetPen ( __missing_type__ InsetPen ) {
    HRESULT _hr = put_InsetPen(InsetPen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShadowFormat wrapper method implementations
//

#pragma implementation_key(303)
inline IDispatchPtr PowerPoint::ShadowFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(304)
inline long PowerPoint::ShadowFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(305)
inline IDispatchPtr PowerPoint::ShadowFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(306)
inline HRESULT PowerPoint::ShadowFormat::IncrementOffsetX ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(307)
inline HRESULT PowerPoint::ShadowFormat::IncrementOffsetY ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(308)
inline PowerPoint::ColorFormatPtr PowerPoint::ShadowFormat::GetForeColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(309)
inline void PowerPoint::ShadowFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(310)
inline __missing_type__  PowerPoint::ShadowFormat::GetObscured ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Obscured(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(311)
inline void PowerPoint::ShadowFormat::PutObscured ( __missing_type__ Obscured ) {
    HRESULT _hr = put_Obscured(Obscured);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(312)
inline float PowerPoint::ShadowFormat::GetOffsetX ( ) {
    float _result = 0;
    HRESULT _hr = get_OffsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(313)
inline void PowerPoint::ShadowFormat::PutOffsetX ( float OffsetX ) {
    HRESULT _hr = put_OffsetX(OffsetX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(314)
inline float PowerPoint::ShadowFormat::GetOffsetY ( ) {
    float _result = 0;
    HRESULT _hr = get_OffsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(315)
inline void PowerPoint::ShadowFormat::PutOffsetY ( float OffsetY ) {
    HRESULT _hr = put_OffsetY(OffsetY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(316)
inline float PowerPoint::ShadowFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(317)
inline void PowerPoint::ShadowFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(318)
inline __missing_type__  PowerPoint::ShadowFormat::GetType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(319)
inline void PowerPoint::ShadowFormat::PutType ( __missing_type__ Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(320)
inline __missing_type__  PowerPoint::ShadowFormat::GetVisible ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(321)
inline void PowerPoint::ShadowFormat::PutVisible ( __missing_type__ Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(322)
inline __missing_type__  PowerPoint::ShadowFormat::GetStyle ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(323)
inline void PowerPoint::ShadowFormat::PutStyle ( __missing_type__ ShadowStyle ) {
    HRESULT _hr = put_Style(ShadowStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(324)
inline float PowerPoint::ShadowFormat::GetBlur ( ) {
    float _result = 0;
    HRESULT _hr = get_Blur(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(325)
inline void PowerPoint::ShadowFormat::PutBlur ( float Blur ) {
    HRESULT _hr = put_Blur(Blur);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(326)
inline float PowerPoint::ShadowFormat::GetSize ( ) {
    float _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(327)
inline void PowerPoint::ShadowFormat::PutSize ( float Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(328)
inline __missing_type__  PowerPoint::ShadowFormat::GetRotateWithShape ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_RotateWithShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(329)
inline void PowerPoint::ShadowFormat::PutRotateWithShape ( __missing_type__ RotateWithShape ) {
    HRESULT _hr = put_RotateWithShape(RotateWithShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TextEffectFormat wrapper method implementations
//

#pragma implementation_key(330)
inline IDispatchPtr PowerPoint::TextEffectFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(331)
inline long PowerPoint::TextEffectFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(332)
inline IDispatchPtr PowerPoint::TextEffectFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(333)
inline HRESULT PowerPoint::TextEffectFormat::ToggleVerticalText ( ) {
    HRESULT _hr = raw_ToggleVerticalText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(334)
inline __missing_type__  PowerPoint::TextEffectFormat::GetAlignment ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(335)
inline void PowerPoint::TextEffectFormat::PutAlignment ( __missing_type__ Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(336)
inline __missing_type__  PowerPoint::TextEffectFormat::GetFontBold ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_FontBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(337)
inline void PowerPoint::TextEffectFormat::PutFontBold ( __missing_type__ FontBold ) {
    HRESULT _hr = put_FontBold(FontBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(338)
inline __missing_type__  PowerPoint::TextEffectFormat::GetFontItalic ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_FontItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(339)
inline void PowerPoint::TextEffectFormat::PutFontItalic ( __missing_type__ FontItalic ) {
    HRESULT _hr = put_FontItalic(FontItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(340)
inline _bstr_t PowerPoint::TextEffectFormat::GetFontName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(341)
inline void PowerPoint::TextEffectFormat::PutFontName ( _bstr_t FontName ) {
    HRESULT _hr = put_FontName(FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(342)
inline float PowerPoint::TextEffectFormat::GetFontSize ( ) {
    float _result = 0;
    HRESULT _hr = get_FontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(343)
inline void PowerPoint::TextEffectFormat::PutFontSize ( float FontSize ) {
    HRESULT _hr = put_FontSize(FontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(344)
inline __missing_type__  PowerPoint::TextEffectFormat::GetKernedPairs ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_KernedPairs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(345)
inline void PowerPoint::TextEffectFormat::PutKernedPairs ( __missing_type__ KernedPairs ) {
    HRESULT _hr = put_KernedPairs(KernedPairs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(346)
inline __missing_type__  PowerPoint::TextEffectFormat::GetNormalizedHeight ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_NormalizedHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(347)
inline void PowerPoint::TextEffectFormat::PutNormalizedHeight ( __missing_type__ NormalizedHeight ) {
    HRESULT _hr = put_NormalizedHeight(NormalizedHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(348)
inline __missing_type__  PowerPoint::TextEffectFormat::GetPresetShape ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_PresetShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(349)
inline void PowerPoint::TextEffectFormat::PutPresetShape ( __missing_type__ PresetShape ) {
    HRESULT _hr = put_PresetShape(PresetShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(350)
inline __missing_type__  PowerPoint::TextEffectFormat::GetPresetTextEffect ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_PresetTextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(351)
inline void PowerPoint::TextEffectFormat::PutPresetTextEffect ( __missing_type__ Preset ) {
    HRESULT _hr = put_PresetTextEffect(Preset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(352)
inline __missing_type__  PowerPoint::TextEffectFormat::GetRotatedChars ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_RotatedChars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(353)
inline void PowerPoint::TextEffectFormat::PutRotatedChars ( __missing_type__ RotatedChars ) {
    HRESULT _hr = put_RotatedChars(RotatedChars);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(354)
inline _bstr_t PowerPoint::TextEffectFormat::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(355)
inline void PowerPoint::TextEffectFormat::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(356)
inline float PowerPoint::TextEffectFormat::GetTracking ( ) {
    float _result = 0;
    HRESULT _hr = get_Tracking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(357)
inline void PowerPoint::TextEffectFormat::PutTracking ( float Tracking ) {
    HRESULT _hr = put_Tracking(Tracking);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ThreeDFormat wrapper method implementations
//

#pragma implementation_key(358)
inline IDispatchPtr PowerPoint::ThreeDFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(359)
inline long PowerPoint::ThreeDFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(360)
inline IDispatchPtr PowerPoint::ThreeDFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(361)
inline HRESULT PowerPoint::ThreeDFormat::IncrementRotationX ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(362)
inline HRESULT PowerPoint::ThreeDFormat::IncrementRotationY ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(363)
inline HRESULT PowerPoint::ThreeDFormat::ResetRotation ( ) {
    HRESULT _hr = raw_ResetRotation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(364)
inline HRESULT PowerPoint::ThreeDFormat::SetThreeDFormat ( __missing_type__ PresetThreeDFormat ) {
    HRESULT _hr = raw_SetThreeDFormat(PresetThreeDFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(365)
inline HRESULT PowerPoint::ThreeDFormat::SetExtrusionDirection ( __missing_type__ PresetExtrusionDirection ) {
    HRESULT _hr = raw_SetExtrusionDirection(PresetExtrusionDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(366)
inline float PowerPoint::ThreeDFormat::GetDepth ( ) {
    float _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(367)
inline void PowerPoint::ThreeDFormat::PutDepth ( float Depth ) {
    HRESULT _hr = put_Depth(Depth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(368)
inline PowerPoint::ColorFormatPtr PowerPoint::ThreeDFormat::GetExtrusionColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ExtrusionColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(369)
inline __missing_type__  PowerPoint::ThreeDFormat::GetExtrusionColorType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ExtrusionColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(370)
inline void PowerPoint::ThreeDFormat::PutExtrusionColorType ( __missing_type__ ExtrusionColorType ) {
    HRESULT _hr = put_ExtrusionColorType(ExtrusionColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(371)
inline __missing_type__  PowerPoint::ThreeDFormat::GetPerspective ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Perspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(372)
inline void PowerPoint::ThreeDFormat::PutPerspective ( __missing_type__ Perspective ) {
    HRESULT _hr = put_Perspective(Perspective);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(373)
inline __missing_type__  PowerPoint::ThreeDFormat::GetPresetExtrusionDirection ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_PresetExtrusionDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(374)
inline __missing_type__  PowerPoint::ThreeDFormat::GetPresetLightingDirection ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_PresetLightingDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(375)
inline void PowerPoint::ThreeDFormat::PutPresetLightingDirection ( __missing_type__ PresetLightingDirection ) {
    HRESULT _hr = put_PresetLightingDirection(PresetLightingDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(376)
inline __missing_type__  PowerPoint::ThreeDFormat::GetPresetLightingSoftness ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_PresetLightingSoftness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(377)
inline void PowerPoint::ThreeDFormat::PutPresetLightingSoftness ( __missing_type__ PresetLightingSoftness ) {
    HRESULT _hr = put_PresetLightingSoftness(PresetLightingSoftness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(378)
inline __missing_type__  PowerPoint::ThreeDFormat::GetPresetMaterial ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_PresetMaterial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(379)
inline void PowerPoint::ThreeDFormat::PutPresetMaterial ( __missing_type__ PresetMaterial ) {
    HRESULT _hr = put_PresetMaterial(PresetMaterial);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(380)
inline __missing_type__  PowerPoint::ThreeDFormat::GetPresetThreeDFormat ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_PresetThreeDFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(381)
inline float PowerPoint::ThreeDFormat::GetRotationX ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(382)
inline void PowerPoint::ThreeDFormat::PutRotationX ( float RotationX ) {
    HRESULT _hr = put_RotationX(RotationX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(383)
inline float PowerPoint::ThreeDFormat::GetRotationY ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(384)
inline void PowerPoint::ThreeDFormat::PutRotationY ( float RotationY ) {
    HRESULT _hr = put_RotationY(RotationY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(385)
inline __missing_type__  PowerPoint::ThreeDFormat::GetVisible ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(386)
inline void PowerPoint::ThreeDFormat::PutVisible ( __missing_type__ Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(387)
inline HRESULT PowerPoint::ThreeDFormat::SetPresetCamera ( __missing_type__ PresetCamera ) {
    HRESULT _hr = raw_SetPresetCamera(PresetCamera);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(388)
inline HRESULT PowerPoint::ThreeDFormat::IncrementRotationZ ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationZ(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(389)
inline HRESULT PowerPoint::ThreeDFormat::IncrementRotationHorizontal ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationHorizontal(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(390)
inline HRESULT PowerPoint::ThreeDFormat::IncrementRotationVertical ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationVertical(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(391)
inline __missing_type__  PowerPoint::ThreeDFormat::GetPresetLighting ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_PresetLighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(392)
inline void PowerPoint::ThreeDFormat::PutPresetLighting ( __missing_type__ PresetLightRigType ) {
    HRESULT _hr = put_PresetLighting(PresetLightRigType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(393)
inline float PowerPoint::ThreeDFormat::GetZ ( ) {
    float _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(394)
inline void PowerPoint::ThreeDFormat::PutZ ( float Z ) {
    HRESULT _hr = put_Z(Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(395)
inline __missing_type__  PowerPoint::ThreeDFormat::GetBevelTopType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_BevelTopType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(396)
inline void PowerPoint::ThreeDFormat::PutBevelTopType ( __missing_type__ BevelTopType ) {
    HRESULT _hr = put_BevelTopType(BevelTopType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(397)
inline float PowerPoint::ThreeDFormat::GetBevelTopInset ( ) {
    float _result = 0;
    HRESULT _hr = get_BevelTopInset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(398)
inline void PowerPoint::ThreeDFormat::PutBevelTopInset ( float BevelTopInset ) {
    HRESULT _hr = put_BevelTopInset(BevelTopInset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(399)
inline float PowerPoint::ThreeDFormat::GetBevelTopDepth ( ) {
    float _result = 0;
    HRESULT _hr = get_BevelTopDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(400)
inline void PowerPoint::ThreeDFormat::PutBevelTopDepth ( float BevelTopDepth ) {
    HRESULT _hr = put_BevelTopDepth(BevelTopDepth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(401)
inline __missing_type__  PowerPoint::ThreeDFormat::GetBevelBottomType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_BevelBottomType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(402)
inline void PowerPoint::ThreeDFormat::PutBevelBottomType ( __missing_type__ BevelBottomType ) {
    HRESULT _hr = put_BevelBottomType(BevelBottomType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(403)
inline float PowerPoint::ThreeDFormat::GetBevelBottomInset ( ) {
    float _result = 0;
    HRESULT _hr = get_BevelBottomInset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(404)
inline void PowerPoint::ThreeDFormat::PutBevelBottomInset ( float BevelBottomInset ) {
    HRESULT _hr = put_BevelBottomInset(BevelBottomInset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(405)
inline float PowerPoint::ThreeDFormat::GetBevelBottomDepth ( ) {
    float _result = 0;
    HRESULT _hr = get_BevelBottomDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(406)
inline void PowerPoint::ThreeDFormat::PutBevelBottomDepth ( float BevelBottomDepth ) {
    HRESULT _hr = put_BevelBottomDepth(BevelBottomDepth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(407)
inline __missing_type__  PowerPoint::ThreeDFormat::GetPresetCamera ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_PresetCamera(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(408)
inline float PowerPoint::ThreeDFormat::GetRotationZ ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(409)
inline void PowerPoint::ThreeDFormat::PutRotationZ ( float RotationZ ) {
    HRESULT _hr = put_RotationZ(RotationZ);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(410)
inline float PowerPoint::ThreeDFormat::GetContourWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_ContourWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(411)
inline void PowerPoint::ThreeDFormat::PutContourWidth ( float Width ) {
    HRESULT _hr = put_ContourWidth(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(412)
inline PowerPoint::ColorFormatPtr PowerPoint::ThreeDFormat::GetContourColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ContourColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(413)
inline float PowerPoint::ThreeDFormat::GetFieldOfView ( ) {
    float _result = 0;
    HRESULT _hr = get_FieldOfView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(414)
inline void PowerPoint::ThreeDFormat::PutFieldOfView ( float FOV ) {
    HRESULT _hr = put_FieldOfView(FOV);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(415)
inline __missing_type__  PowerPoint::ThreeDFormat::GetProjectText ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ProjectText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(416)
inline void PowerPoint::ThreeDFormat::PutProjectText ( __missing_type__ ProjectText ) {
    HRESULT _hr = put_ProjectText(ProjectText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(417)
inline float PowerPoint::ThreeDFormat::GetLightAngle ( ) {
    float _result = 0;
    HRESULT _hr = get_LightAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(418)
inline void PowerPoint::ThreeDFormat::PutLightAngle ( float LightAngle ) {
    HRESULT _hr = put_LightAngle(LightAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CalloutFormat wrapper method implementations
//

#pragma implementation_key(419)
inline IDispatchPtr PowerPoint::CalloutFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(420)
inline long PowerPoint::CalloutFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(421)
inline IDispatchPtr PowerPoint::CalloutFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(422)
inline HRESULT PowerPoint::CalloutFormat::AutomaticLength ( ) {
    HRESULT _hr = raw_AutomaticLength();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(423)
inline HRESULT PowerPoint::CalloutFormat::CustomDrop ( float Drop ) {
    HRESULT _hr = raw_CustomDrop(Drop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(424)
inline HRESULT PowerPoint::CalloutFormat::CustomLength ( float Length ) {
    HRESULT _hr = raw_CustomLength(Length);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(425)
inline HRESULT PowerPoint::CalloutFormat::PresetDrop ( __missing_type__ DropType ) {
    HRESULT _hr = raw_PresetDrop(DropType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(426)
inline __missing_type__  PowerPoint::CalloutFormat::GetAccent ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Accent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(427)
inline void PowerPoint::CalloutFormat::PutAccent ( __missing_type__ Accent ) {
    HRESULT _hr = put_Accent(Accent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(428)
inline __missing_type__  PowerPoint::CalloutFormat::GetAngle ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(429)
inline void PowerPoint::CalloutFormat::PutAngle ( __missing_type__ Angle ) {
    HRESULT _hr = put_Angle(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(430)
inline __missing_type__  PowerPoint::CalloutFormat::GetAutoAttach ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AutoAttach(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(431)
inline void PowerPoint::CalloutFormat::PutAutoAttach ( __missing_type__ AutoAttach ) {
    HRESULT _hr = put_AutoAttach(AutoAttach);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(432)
inline __missing_type__  PowerPoint::CalloutFormat::GetAutoLength ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AutoLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(433)
inline __missing_type__  PowerPoint::CalloutFormat::GetBorder ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(434)
inline void PowerPoint::CalloutFormat::PutBorder ( __missing_type__ Border ) {
    HRESULT _hr = put_Border(Border);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(435)
inline float PowerPoint::CalloutFormat::GetDrop ( ) {
    float _result = 0;
    HRESULT _hr = get_Drop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(436)
inline __missing_type__  PowerPoint::CalloutFormat::GetDropType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_DropType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(437)
inline float PowerPoint::CalloutFormat::GetGap ( ) {
    float _result = 0;
    HRESULT _hr = get_Gap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(438)
inline void PowerPoint::CalloutFormat::PutGap ( float Gap ) {
    HRESULT _hr = put_Gap(Gap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(439)
inline float PowerPoint::CalloutFormat::GetLength ( ) {
    float _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(440)
inline __missing_type__  PowerPoint::CalloutFormat::GetType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(441)
inline void PowerPoint::CalloutFormat::PutType ( __missing_type__ Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShapeNode wrapper method implementations
//

#pragma implementation_key(442)
inline IDispatchPtr PowerPoint::ShapeNode::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(443)
inline long PowerPoint::ShapeNode::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(444)
inline IDispatchPtr PowerPoint::ShapeNode::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(445)
inline __missing_type__  PowerPoint::ShapeNode::GetEditingType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_EditingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(446)
inline _variant_t PowerPoint::ShapeNode::GetPoints ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(447)
inline __missing_type__  PowerPoint::ShapeNode::GetSegmentType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_SegmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ShapeNodes wrapper method implementations
//

#pragma implementation_key(448)
inline IDispatchPtr PowerPoint::ShapeNodes::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(449)
inline long PowerPoint::ShapeNodes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(450)
inline IDispatchPtr PowerPoint::ShapeNodes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(451)
inline int PowerPoint::ShapeNodes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(452)
inline PowerPoint::ShapeNodePtr PowerPoint::ShapeNodes::Item ( const _variant_t & Index ) {
    struct ShapeNode * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodePtr(_result, false);
}

#pragma implementation_key(453)
inline IUnknownPtr PowerPoint::ShapeNodes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(454)
inline HRESULT PowerPoint::ShapeNodes::Delete ( int Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(455)
inline HRESULT PowerPoint::ShapeNodes::Insert ( int Index, __missing_type__ SegmentType, __missing_type__ EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 ) {
    HRESULT _hr = raw_Insert(Index, SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(456)
inline HRESULT PowerPoint::ShapeNodes::SetEditingType ( int Index, __missing_type__ EditingType ) {
    HRESULT _hr = raw_SetEditingType(Index, EditingType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(457)
inline HRESULT PowerPoint::ShapeNodes::SetPosition ( int Index, float X1, float Y1 ) {
    HRESULT _hr = raw_SetPosition(Index, X1, Y1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(458)
inline HRESULT PowerPoint::ShapeNodes::SetSegmentType ( int Index, __missing_type__ SegmentType ) {
    HRESULT _hr = raw_SetSegmentType(Index, SegmentType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface LinkFormat wrapper method implementations
//

#pragma implementation_key(459)
inline PowerPoint::_ApplicationPtr PowerPoint::LinkFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(460)
inline IDispatchPtr PowerPoint::LinkFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(461)
inline _bstr_t PowerPoint::LinkFormat::GetSourceFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceFullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(462)
inline void PowerPoint::LinkFormat::PutSourceFullName ( _bstr_t SourceFullName ) {
    HRESULT _hr = put_SourceFullName(SourceFullName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(463)
inline enum PowerPoint::PpUpdateOption PowerPoint::LinkFormat::GetAutoUpdate ( ) {
    enum PpUpdateOption _result;
    HRESULT _hr = get_AutoUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(464)
inline void PowerPoint::LinkFormat::PutAutoUpdate ( enum PpUpdateOption AutoUpdate ) {
    HRESULT _hr = put_AutoUpdate(AutoUpdate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(465)
inline HRESULT PowerPoint::LinkFormat::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(466)
inline HRESULT PowerPoint::LinkFormat::BreakLink ( ) {
    HRESULT _hr = raw_BreakLink();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ObjectVerbs wrapper method implementations
//

#pragma implementation_key(467)
inline PowerPoint::_ApplicationPtr PowerPoint::ObjectVerbs::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(468)
inline IDispatchPtr PowerPoint::ObjectVerbs::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(469)
inline _bstr_t PowerPoint::ObjectVerbs::Item ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface OLEFormat wrapper method implementations
//

#pragma implementation_key(470)
inline PowerPoint::_ApplicationPtr PowerPoint::OLEFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(471)
inline IDispatchPtr PowerPoint::OLEFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(472)
inline PowerPoint::ObjectVerbsPtr PowerPoint::OLEFormat::GetObjectVerbs ( ) {
    struct ObjectVerbs * _result = 0;
    HRESULT _hr = get_ObjectVerbs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ObjectVerbsPtr(_result, false);
}

#pragma implementation_key(473)
inline IDispatchPtr PowerPoint::OLEFormat::GetObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(474)
inline _bstr_t PowerPoint::OLEFormat::GetProgID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProgID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(475)
inline enum PowerPoint::PpFollowColors PowerPoint::OLEFormat::GetFollowColors ( ) {
    enum PpFollowColors _result;
    HRESULT _hr = get_FollowColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(476)
inline void PowerPoint::OLEFormat::PutFollowColors ( enum PpFollowColors FollowColors ) {
    HRESULT _hr = put_FollowColors(FollowColors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(477)
inline HRESULT PowerPoint::OLEFormat::DoVerb ( int Index ) {
    HRESULT _hr = raw_DoVerb(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(478)
inline HRESULT PowerPoint::OLEFormat::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ActionSetting wrapper method implementations
//

#pragma implementation_key(479)
inline PowerPoint::_ApplicationPtr PowerPoint::ActionSetting::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(480)
inline IDispatchPtr PowerPoint::ActionSetting::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(481)
inline enum PowerPoint::PpActionType PowerPoint::ActionSetting::GetAction ( ) {
    enum PpActionType _result;
    HRESULT _hr = get_Action(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(482)
inline void PowerPoint::ActionSetting::PutAction ( enum PpActionType Action ) {
    HRESULT _hr = put_Action(Action);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(483)
inline _bstr_t PowerPoint::ActionSetting::GetActionVerb ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionVerb(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(484)
inline void PowerPoint::ActionSetting::PutActionVerb ( _bstr_t ActionVerb ) {
    HRESULT _hr = put_ActionVerb(ActionVerb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(485)
inline __missing_type__  PowerPoint::ActionSetting::GetAnimateAction ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AnimateAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(486)
inline void PowerPoint::ActionSetting::PutAnimateAction ( __missing_type__ AnimateAction ) {
    HRESULT _hr = put_AnimateAction(AnimateAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(487)
inline _bstr_t PowerPoint::ActionSetting::GetRun ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(488)
inline void PowerPoint::ActionSetting::PutRun ( _bstr_t Run ) {
    HRESULT _hr = put_Run(Run);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(489)
inline _bstr_t PowerPoint::ActionSetting::GetSlideShowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlideShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(490)
inline void PowerPoint::ActionSetting::PutSlideShowName ( _bstr_t SlideShowName ) {
    HRESULT _hr = put_SlideShowName(SlideShowName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(491)
inline PowerPoint::HyperlinkPtr PowerPoint::ActionSetting::GetHyperlink ( ) {
    struct Hyperlink * _result = 0;
    HRESULT _hr = get_Hyperlink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinkPtr(_result, false);
}

#pragma implementation_key(492)
inline PowerPoint::SoundEffectPtr PowerPoint::ActionSetting::GetSoundEffect ( ) {
    struct SoundEffect * _result = 0;
    HRESULT _hr = get_SoundEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundEffectPtr(_result, false);
}

#pragma implementation_key(493)
inline __missing_type__  PowerPoint::ActionSetting::GetShowAndReturn ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ShowAndReturn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(494)
inline void PowerPoint::ActionSetting::PutShowAndReturn ( __missing_type__ ShowAndReturn ) {
    HRESULT _hr = put_ShowAndReturn(ShowAndReturn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ActionSettings wrapper method implementations
//

#pragma implementation_key(495)
inline PowerPoint::_ApplicationPtr PowerPoint::ActionSettings::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(496)
inline IDispatchPtr PowerPoint::ActionSettings::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(497)
inline PowerPoint::ActionSettingPtr PowerPoint::ActionSettings::Item ( enum PpMouseActivation Index ) {
    struct ActionSetting * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionSettingPtr(_result, false);
}

//
// interface PlaySettings wrapper method implementations
//

#pragma implementation_key(498)
inline PowerPoint::_ApplicationPtr PowerPoint::PlaySettings::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(499)
inline IDispatchPtr PowerPoint::PlaySettings::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(500)
inline _bstr_t PowerPoint::PlaySettings::GetActionVerb ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionVerb(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(501)
inline void PowerPoint::PlaySettings::PutActionVerb ( _bstr_t ActionVerb ) {
    HRESULT _hr = put_ActionVerb(ActionVerb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(502)
inline __missing_type__  PowerPoint::PlaySettings::GetHideWhileNotPlaying ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HideWhileNotPlaying(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(503)
inline void PowerPoint::PlaySettings::PutHideWhileNotPlaying ( __missing_type__ HideWhileNotPlaying ) {
    HRESULT _hr = put_HideWhileNotPlaying(HideWhileNotPlaying);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(504)
inline __missing_type__  PowerPoint::PlaySettings::GetLoopUntilStopped ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_LoopUntilStopped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(505)
inline void PowerPoint::PlaySettings::PutLoopUntilStopped ( __missing_type__ LoopUntilStopped ) {
    HRESULT _hr = put_LoopUntilStopped(LoopUntilStopped);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(506)
inline __missing_type__  PowerPoint::PlaySettings::GetPlayOnEntry ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_PlayOnEntry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(507)
inline void PowerPoint::PlaySettings::PutPlayOnEntry ( __missing_type__ PlayOnEntry ) {
    HRESULT _hr = put_PlayOnEntry(PlayOnEntry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(508)
inline __missing_type__  PowerPoint::PlaySettings::GetRewindMovie ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_RewindMovie(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(509)
inline void PowerPoint::PlaySettings::PutRewindMovie ( __missing_type__ RewindMovie ) {
    HRESULT _hr = put_RewindMovie(RewindMovie);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(510)
inline __missing_type__  PowerPoint::PlaySettings::GetPauseAnimation ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_PauseAnimation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(511)
inline void PowerPoint::PlaySettings::PutPauseAnimation ( __missing_type__ PauseAnimation ) {
    HRESULT _hr = put_PauseAnimation(PauseAnimation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(512)
inline int PowerPoint::PlaySettings::GetStopAfterSlides ( ) {
    int _result = 0;
    HRESULT _hr = get_StopAfterSlides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(513)
inline void PowerPoint::PlaySettings::PutStopAfterSlides ( int StopAfterSlides ) {
    HRESULT _hr = put_StopAfterSlides(StopAfterSlides);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AnimationSettings wrapper method implementations
//

#pragma implementation_key(514)
inline PowerPoint::_ApplicationPtr PowerPoint::AnimationSettings::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(515)
inline IDispatchPtr PowerPoint::AnimationSettings::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(516)
inline PowerPoint::ColorFormatPtr PowerPoint::AnimationSettings::GetDimColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_DimColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(517)
inline PowerPoint::SoundEffectPtr PowerPoint::AnimationSettings::GetSoundEffect ( ) {
    struct SoundEffect * _result = 0;
    HRESULT _hr = get_SoundEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundEffectPtr(_result, false);
}

#pragma implementation_key(518)
inline enum PowerPoint::PpEntryEffect PowerPoint::AnimationSettings::GetEntryEffect ( ) {
    enum PpEntryEffect _result;
    HRESULT _hr = get_EntryEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(519)
inline void PowerPoint::AnimationSettings::PutEntryEffect ( enum PpEntryEffect EntryEffect ) {
    HRESULT _hr = put_EntryEffect(EntryEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(520)
inline enum PowerPoint::PpAfterEffect PowerPoint::AnimationSettings::GetAfterEffect ( ) {
    enum PpAfterEffect _result;
    HRESULT _hr = get_AfterEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(521)
inline void PowerPoint::AnimationSettings::PutAfterEffect ( enum PpAfterEffect AfterEffect ) {
    HRESULT _hr = put_AfterEffect(AfterEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(522)
inline int PowerPoint::AnimationSettings::GetAnimationOrder ( ) {
    int _result = 0;
    HRESULT _hr = get_AnimationOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(523)
inline void PowerPoint::AnimationSettings::PutAnimationOrder ( int AnimationOrder ) {
    HRESULT _hr = put_AnimationOrder(AnimationOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(524)
inline enum PowerPoint::PpAdvanceMode PowerPoint::AnimationSettings::GetAdvanceMode ( ) {
    enum PpAdvanceMode _result;
    HRESULT _hr = get_AdvanceMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(525)
inline void PowerPoint::AnimationSettings::PutAdvanceMode ( enum PpAdvanceMode AdvanceMode ) {
    HRESULT _hr = put_AdvanceMode(AdvanceMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(526)
inline float PowerPoint::AnimationSettings::GetAdvanceTime ( ) {
    float _result = 0;
    HRESULT _hr = get_AdvanceTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(527)
inline void PowerPoint::AnimationSettings::PutAdvanceTime ( float AdvanceTime ) {
    HRESULT _hr = put_AdvanceTime(AdvanceTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(528)
inline PowerPoint::PlaySettingsPtr PowerPoint::AnimationSettings::GetPlaySettings ( ) {
    struct PlaySettings * _result = 0;
    HRESULT _hr = get_PlaySettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlaySettingsPtr(_result, false);
}

#pragma implementation_key(529)
inline enum PowerPoint::PpTextLevelEffect PowerPoint::AnimationSettings::GetTextLevelEffect ( ) {
    enum PpTextLevelEffect _result;
    HRESULT _hr = get_TextLevelEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(530)
inline void PowerPoint::AnimationSettings::PutTextLevelEffect ( enum PpTextLevelEffect TextLevelEffect ) {
    HRESULT _hr = put_TextLevelEffect(TextLevelEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(531)
inline enum PowerPoint::PpTextUnitEffect PowerPoint::AnimationSettings::GetTextUnitEffect ( ) {
    enum PpTextUnitEffect _result;
    HRESULT _hr = get_TextUnitEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(532)
inline void PowerPoint::AnimationSettings::PutTextUnitEffect ( enum PpTextUnitEffect TextUnitEffect ) {
    HRESULT _hr = put_TextUnitEffect(TextUnitEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(533)
inline __missing_type__  PowerPoint::AnimationSettings::GetAnimate ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Animate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(534)
inline void PowerPoint::AnimationSettings::PutAnimate ( __missing_type__ Animate ) {
    HRESULT _hr = put_Animate(Animate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(535)
inline __missing_type__  PowerPoint::AnimationSettings::GetAnimateBackground ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AnimateBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(536)
inline void PowerPoint::AnimationSettings::PutAnimateBackground ( __missing_type__ AnimateBackground ) {
    HRESULT _hr = put_AnimateBackground(AnimateBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(537)
inline __missing_type__  PowerPoint::AnimationSettings::GetAnimateTextInReverse ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AnimateTextInReverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(538)
inline void PowerPoint::AnimationSettings::PutAnimateTextInReverse ( __missing_type__ AnimateTextInReverse ) {
    HRESULT _hr = put_AnimateTextInReverse(AnimateTextInReverse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(539)
inline enum PowerPoint::PpChartUnitEffect PowerPoint::AnimationSettings::GetChartUnitEffect ( ) {
    enum PpChartUnitEffect _result;
    HRESULT _hr = get_ChartUnitEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(540)
inline void PowerPoint::AnimationSettings::PutChartUnitEffect ( enum PpChartUnitEffect ChartUnitEffect ) {
    HRESULT _hr = put_ChartUnitEffect(ChartUnitEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface RulerLevel wrapper method implementations
//

#pragma implementation_key(541)
inline PowerPoint::_ApplicationPtr PowerPoint::RulerLevel::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(542)
inline IDispatchPtr PowerPoint::RulerLevel::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(543)
inline float PowerPoint::RulerLevel::GetFirstMargin ( ) {
    float _result = 0;
    HRESULT _hr = get_FirstMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(544)
inline void PowerPoint::RulerLevel::PutFirstMargin ( float FirstMargin ) {
    HRESULT _hr = put_FirstMargin(FirstMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(545)
inline float PowerPoint::RulerLevel::GetLeftMargin ( ) {
    float _result = 0;
    HRESULT _hr = get_LeftMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(546)
inline void PowerPoint::RulerLevel::PutLeftMargin ( float LeftMargin ) {
    HRESULT _hr = put_LeftMargin(LeftMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface RulerLevels wrapper method implementations
//

#pragma implementation_key(547)
inline PowerPoint::_ApplicationPtr PowerPoint::RulerLevels::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(548)
inline IDispatchPtr PowerPoint::RulerLevels::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(549)
inline PowerPoint::RulerLevelPtr PowerPoint::RulerLevels::Item ( int Index ) {
    struct RulerLevel * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RulerLevelPtr(_result, false);
}

//
// interface TabStop wrapper method implementations
//

#pragma implementation_key(550)
inline PowerPoint::_ApplicationPtr PowerPoint::TabStop::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(551)
inline IDispatchPtr PowerPoint::TabStop::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(552)
inline enum PowerPoint::PpTabStopType PowerPoint::TabStop::GetType ( ) {
    enum PpTabStopType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(553)
inline void PowerPoint::TabStop::PutType ( enum PpTabStopType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(554)
inline float PowerPoint::TabStop::GetPosition ( ) {
    float _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(555)
inline void PowerPoint::TabStop::PutPosition ( float Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(556)
inline HRESULT PowerPoint::TabStop::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TabStops wrapper method implementations
//

#pragma implementation_key(557)
inline PowerPoint::_ApplicationPtr PowerPoint::TabStops::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(558)
inline IDispatchPtr PowerPoint::TabStops::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(559)
inline PowerPoint::TabStopPtr PowerPoint::TabStops::Item ( int Index ) {
    struct TabStop * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStopPtr(_result, false);
}

#pragma implementation_key(560)
inline float PowerPoint::TabStops::GetDefaultSpacing ( ) {
    float _result = 0;
    HRESULT _hr = get_DefaultSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(561)
inline void PowerPoint::TabStops::PutDefaultSpacing ( float DefaultSpacing ) {
    HRESULT _hr = put_DefaultSpacing(DefaultSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(562)
inline PowerPoint::TabStopPtr PowerPoint::TabStops::Add ( enum PpTabStopType Type, float Position ) {
    struct TabStop * _result = 0;
    HRESULT _hr = raw_Add(Type, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStopPtr(_result, false);
}

//
// interface Ruler wrapper method implementations
//

#pragma implementation_key(563)
inline PowerPoint::_ApplicationPtr PowerPoint::Ruler::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(564)
inline IDispatchPtr PowerPoint::Ruler::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(565)
inline PowerPoint::TabStopsPtr PowerPoint::Ruler::GetTabStops ( ) {
    struct TabStops * _result = 0;
    HRESULT _hr = get_TabStops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStopsPtr(_result, false);
}

#pragma implementation_key(566)
inline PowerPoint::RulerLevelsPtr PowerPoint::Ruler::GetLevels ( ) {
    struct RulerLevels * _result = 0;
    HRESULT _hr = get_Levels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RulerLevelsPtr(_result, false);
}

//
// interface Font wrapper method implementations
//

#pragma implementation_key(567)
inline PowerPoint::_ApplicationPtr PowerPoint::Font::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(568)
inline IDispatchPtr PowerPoint::Font::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(569)
inline PowerPoint::ColorFormatPtr PowerPoint::Font::GetColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(570)
inline __missing_type__  PowerPoint::Font::GetBold ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(571)
inline void PowerPoint::Font::PutBold ( __missing_type__ Bold ) {
    HRESULT _hr = put_Bold(Bold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(572)
inline __missing_type__  PowerPoint::Font::GetItalic ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(573)
inline void PowerPoint::Font::PutItalic ( __missing_type__ Italic ) {
    HRESULT _hr = put_Italic(Italic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(574)
inline __missing_type__  PowerPoint::Font::GetShadow ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(575)
inline void PowerPoint::Font::PutShadow ( __missing_type__ Shadow ) {
    HRESULT _hr = put_Shadow(Shadow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(576)
inline __missing_type__  PowerPoint::Font::GetEmboss ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Emboss(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(577)
inline void PowerPoint::Font::PutEmboss ( __missing_type__ Emboss ) {
    HRESULT _hr = put_Emboss(Emboss);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(578)
inline __missing_type__  PowerPoint::Font::GetUnderline ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Underline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(579)
inline void PowerPoint::Font::PutUnderline ( __missing_type__ Underline ) {
    HRESULT _hr = put_Underline(Underline);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(580)
inline __missing_type__  PowerPoint::Font::GetSubscript ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Subscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(581)
inline void PowerPoint::Font::PutSubscript ( __missing_type__ Subscript ) {
    HRESULT _hr = put_Subscript(Subscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(582)
inline __missing_type__  PowerPoint::Font::GetSuperscript ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Superscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(583)
inline void PowerPoint::Font::PutSuperscript ( __missing_type__ Superscript ) {
    HRESULT _hr = put_Superscript(Superscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(584)
inline float PowerPoint::Font::GetBaselineOffset ( ) {
    float _result = 0;
    HRESULT _hr = get_BaselineOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(585)
inline void PowerPoint::Font::PutBaselineOffset ( float BaselineOffset ) {
    HRESULT _hr = put_BaselineOffset(BaselineOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(586)
inline __missing_type__  PowerPoint::Font::GetEmbedded ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Embedded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(587)
inline __missing_type__  PowerPoint::Font::GetEmbeddable ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Embeddable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(588)
inline float PowerPoint::Font::GetSize ( ) {
    float _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(589)
inline void PowerPoint::Font::PutSize ( float Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(590)
inline _bstr_t PowerPoint::Font::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(591)
inline void PowerPoint::Font::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(592)
inline _bstr_t PowerPoint::Font::GetNameFarEast ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameFarEast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(593)
inline void PowerPoint::Font::PutNameFarEast ( _bstr_t NameFarEast ) {
    HRESULT _hr = put_NameFarEast(NameFarEast);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(594)
inline _bstr_t PowerPoint::Font::GetNameAscii ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameAscii(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(595)
inline void PowerPoint::Font::PutNameAscii ( _bstr_t NameAscii ) {
    HRESULT _hr = put_NameAscii(NameAscii);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(596)
inline __missing_type__  PowerPoint::Font::GetAutoRotateNumbers ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AutoRotateNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(597)
inline void PowerPoint::Font::PutAutoRotateNumbers ( __missing_type__ AutoRotateNumbers ) {
    HRESULT _hr = put_AutoRotateNumbers(AutoRotateNumbers);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(598)
inline _bstr_t PowerPoint::Font::GetNameOther ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameOther(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(599)
inline void PowerPoint::Font::PutNameOther ( _bstr_t NameOther ) {
    HRESULT _hr = put_NameOther(NameOther);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(600)
inline _bstr_t PowerPoint::Font::GetNameComplexScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameComplexScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(601)
inline void PowerPoint::Font::PutNameComplexScript ( _bstr_t NameComplexScript ) {
    HRESULT _hr = put_NameComplexScript(NameComplexScript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Fonts wrapper method implementations
//

#pragma implementation_key(602)
inline PowerPoint::_ApplicationPtr PowerPoint::Fonts::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(603)
inline IDispatchPtr PowerPoint::Fonts::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(604)
inline PowerPoint::FontPtr PowerPoint::Fonts::Item ( const _variant_t & Index ) {
    struct Font * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(605)
inline HRESULT PowerPoint::Fonts::Replace ( _bstr_t Original, _bstr_t Replacement ) {
    HRESULT _hr = raw_Replace(Original, Replacement);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface HeaderFooter wrapper method implementations
//

#pragma implementation_key(606)
inline PowerPoint::_ApplicationPtr PowerPoint::HeaderFooter::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(607)
inline IDispatchPtr PowerPoint::HeaderFooter::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(608)
inline __missing_type__  PowerPoint::HeaderFooter::GetVisible ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(609)
inline void PowerPoint::HeaderFooter::PutVisible ( __missing_type__ Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(610)
inline _bstr_t PowerPoint::HeaderFooter::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(611)
inline void PowerPoint::HeaderFooter::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(612)
inline __missing_type__  PowerPoint::HeaderFooter::GetUseFormat ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_UseFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(613)
inline void PowerPoint::HeaderFooter::PutUseFormat ( __missing_type__ UseFormat ) {
    HRESULT _hr = put_UseFormat(UseFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(614)
inline enum PowerPoint::PpDateTimeFormat PowerPoint::HeaderFooter::GetFormat ( ) {
    enum PpDateTimeFormat _result;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(615)
inline void PowerPoint::HeaderFooter::PutFormat ( enum PpDateTimeFormat Format ) {
    HRESULT _hr = put_Format(Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface HeadersFooters wrapper method implementations
//

#pragma implementation_key(616)
inline PowerPoint::_ApplicationPtr PowerPoint::HeadersFooters::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(617)
inline IDispatchPtr PowerPoint::HeadersFooters::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(618)
inline PowerPoint::HeaderFooterPtr PowerPoint::HeadersFooters::GetDateAndTime ( ) {
    struct HeaderFooter * _result = 0;
    HRESULT _hr = get_DateAndTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeaderFooterPtr(_result, false);
}

#pragma implementation_key(619)
inline PowerPoint::HeaderFooterPtr PowerPoint::HeadersFooters::GetSlideNumber ( ) {
    struct HeaderFooter * _result = 0;
    HRESULT _hr = get_SlideNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeaderFooterPtr(_result, false);
}

#pragma implementation_key(620)
inline PowerPoint::HeaderFooterPtr PowerPoint::HeadersFooters::GetHeader ( ) {
    struct HeaderFooter * _result = 0;
    HRESULT _hr = get_Header(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeaderFooterPtr(_result, false);
}

#pragma implementation_key(621)
inline PowerPoint::HeaderFooterPtr PowerPoint::HeadersFooters::GetFooter ( ) {
    struct HeaderFooter * _result = 0;
    HRESULT _hr = get_Footer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeaderFooterPtr(_result, false);
}

#pragma implementation_key(622)
inline __missing_type__  PowerPoint::HeadersFooters::GetDisplayOnTitleSlide ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_DisplayOnTitleSlide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(623)
inline void PowerPoint::HeadersFooters::PutDisplayOnTitleSlide ( __missing_type__ DisplayOnTitleSlide ) {
    HRESULT _hr = put_DisplayOnTitleSlide(DisplayOnTitleSlide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(624)
inline HRESULT PowerPoint::HeadersFooters::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Tags wrapper method implementations
//

#pragma implementation_key(625)
inline PowerPoint::_ApplicationPtr PowerPoint::Tags::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(626)
inline IDispatchPtr PowerPoint::Tags::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(627)
inline _bstr_t PowerPoint::Tags::Item ( _bstr_t Name ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Item(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(628)
inline HRESULT PowerPoint::Tags::Add ( _bstr_t Name, _bstr_t Value ) {
    HRESULT _hr = raw_Add(Name, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(629)
inline HRESULT PowerPoint::Tags::Delete ( _bstr_t Name ) {
    HRESULT _hr = raw_Delete(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(630)
inline HRESULT PowerPoint::Tags::AddBinary ( _bstr_t Name, _bstr_t FilePath ) {
    HRESULT _hr = raw_AddBinary(Name, FilePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(631)
inline long PowerPoint::Tags::BinaryValue ( _bstr_t Name ) {
    long _result = 0;
    HRESULT _hr = raw_BinaryValue(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(632)
inline _bstr_t PowerPoint::Tags::Name ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Name(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(633)
inline _bstr_t PowerPoint::Tags::Value ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Value(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface MouseTracker wrapper method implementations
//

#pragma implementation_key(634)
inline HRESULT PowerPoint::MouseTracker::OnTrack ( float X, float Y ) {
    HRESULT _hr = raw_OnTrack(X, Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(635)
inline HRESULT PowerPoint::MouseTracker::EndTrack ( float X, float Y ) {
    HRESULT _hr = raw_EndTrack(X, Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface MouseDownHandler wrapper method implementations
//

#pragma implementation_key(636)
inline HRESULT PowerPoint::MouseDownHandler::OnMouseDown ( IUnknown * activeWin ) {
    HRESULT _hr = raw_OnMouseDown(activeWin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface OCXExtender wrapper method implementations
//

#pragma implementation_key(637)
inline VARIANT_BOOL PowerPoint::OCXExtender::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(638)
inline void PowerPoint::OCXExtender::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(639)
inline float PowerPoint::OCXExtender::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(640)
inline void PowerPoint::OCXExtender::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(641)
inline float PowerPoint::OCXExtender::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(642)
inline void PowerPoint::OCXExtender::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(643)
inline float PowerPoint::OCXExtender::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(644)
inline void PowerPoint::OCXExtender::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(645)
inline float PowerPoint::OCXExtender::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(646)
inline void PowerPoint::OCXExtender::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(647)
inline int PowerPoint::OCXExtender::GetZOrderPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(648)
inline _bstr_t PowerPoint::OCXExtender::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(649)
inline void PowerPoint::OCXExtender::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(650)
inline _bstr_t PowerPoint::OCXExtender::GetAltHTML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltHTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(651)
inline void PowerPoint::OCXExtender::PutAltHTML ( _bstr_t AltHTML ) {
    HRESULT _hr = put_AltHTML(AltHTML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface OCXExtenderEvents wrapper method implementations
//

#pragma implementation_key(652)
inline HRESULT PowerPoint::OCXExtenderEvents::GotFocus ( ) {
    HRESULT _hr = raw_GotFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(653)
inline HRESULT PowerPoint::OCXExtenderEvents::LostFocus ( ) {
    HRESULT _hr = raw_LostFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface BulletFormat wrapper method implementations
//

#pragma implementation_key(654)
inline PowerPoint::_ApplicationPtr PowerPoint::BulletFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(655)
inline IDispatchPtr PowerPoint::BulletFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(656)
inline __missing_type__  PowerPoint::BulletFormat::GetVisible ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(657)
inline void PowerPoint::BulletFormat::PutVisible ( __missing_type__ Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(658)
inline int PowerPoint::BulletFormat::GetCharacter ( ) {
    int _result = 0;
    HRESULT _hr = get_Character(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(659)
inline void PowerPoint::BulletFormat::PutCharacter ( int Character ) {
    HRESULT _hr = put_Character(Character);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(660)
inline float PowerPoint::BulletFormat::GetRelativeSize ( ) {
    float _result = 0;
    HRESULT _hr = get_RelativeSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(661)
inline void PowerPoint::BulletFormat::PutRelativeSize ( float RelativeSize ) {
    HRESULT _hr = put_RelativeSize(RelativeSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(662)
inline __missing_type__  PowerPoint::BulletFormat::GetUseTextColor ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_UseTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(663)
inline void PowerPoint::BulletFormat::PutUseTextColor ( __missing_type__ UseTextColor ) {
    HRESULT _hr = put_UseTextColor(UseTextColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(664)
inline __missing_type__  PowerPoint::BulletFormat::GetUseTextFont ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_UseTextFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(665)
inline void PowerPoint::BulletFormat::PutUseTextFont ( __missing_type__ UseTextFont ) {
    HRESULT _hr = put_UseTextFont(UseTextFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(666)
inline PowerPoint::FontPtr PowerPoint::BulletFormat::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(667)
inline enum PowerPoint::PpBulletType PowerPoint::BulletFormat::GetType ( ) {
    enum PpBulletType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(668)
inline void PowerPoint::BulletFormat::PutType ( enum PpBulletType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(669)
inline enum PowerPoint::PpNumberedBulletStyle PowerPoint::BulletFormat::GetStyle ( ) {
    enum PpNumberedBulletStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(670)
inline void PowerPoint::BulletFormat::PutStyle ( enum PpNumberedBulletStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(671)
inline int PowerPoint::BulletFormat::GetStartValue ( ) {
    int _result = 0;
    HRESULT _hr = get_StartValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(672)
inline void PowerPoint::BulletFormat::PutStartValue ( int StartValue ) {
    HRESULT _hr = put_StartValue(StartValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(673)
inline HRESULT PowerPoint::BulletFormat::Picture ( _bstr_t Picture ) {
    HRESULT _hr = raw_Picture(Picture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(674)
inline int PowerPoint::BulletFormat::GetNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ParagraphFormat wrapper method implementations
//

#pragma implementation_key(675)
inline PowerPoint::_ApplicationPtr PowerPoint::ParagraphFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(676)
inline IDispatchPtr PowerPoint::ParagraphFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(677)
inline enum PowerPoint::PpParagraphAlignment PowerPoint::ParagraphFormat::GetAlignment ( ) {
    enum PpParagraphAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(678)
inline void PowerPoint::ParagraphFormat::PutAlignment ( enum PpParagraphAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(679)
inline PowerPoint::BulletFormatPtr PowerPoint::ParagraphFormat::GetBullet ( ) {
    struct BulletFormat * _result = 0;
    HRESULT _hr = get_Bullet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BulletFormatPtr(_result, false);
}

#pragma implementation_key(680)
inline __missing_type__  PowerPoint::ParagraphFormat::GetLineRuleBefore ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_LineRuleBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(681)
inline void PowerPoint::ParagraphFormat::PutLineRuleBefore ( __missing_type__ LineRuleBefore ) {
    HRESULT _hr = put_LineRuleBefore(LineRuleBefore);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(682)
inline __missing_type__  PowerPoint::ParagraphFormat::GetLineRuleAfter ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_LineRuleAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(683)
inline void PowerPoint::ParagraphFormat::PutLineRuleAfter ( __missing_type__ LineRuleAfter ) {
    HRESULT _hr = put_LineRuleAfter(LineRuleAfter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(684)
inline __missing_type__  PowerPoint::ParagraphFormat::GetLineRuleWithin ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_LineRuleWithin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(685)
inline void PowerPoint::ParagraphFormat::PutLineRuleWithin ( __missing_type__ LineRuleWithin ) {
    HRESULT _hr = put_LineRuleWithin(LineRuleWithin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(686)
inline float PowerPoint::ParagraphFormat::GetSpaceBefore ( ) {
    float _result = 0;
    HRESULT _hr = get_SpaceBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(687)
inline void PowerPoint::ParagraphFormat::PutSpaceBefore ( float SpaceBefore ) {
    HRESULT _hr = put_SpaceBefore(SpaceBefore);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(688)
inline float PowerPoint::ParagraphFormat::GetSpaceAfter ( ) {
    float _result = 0;
    HRESULT _hr = get_SpaceAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(689)
inline void PowerPoint::ParagraphFormat::PutSpaceAfter ( float SpaceAfter ) {
    HRESULT _hr = put_SpaceAfter(SpaceAfter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(690)
inline float PowerPoint::ParagraphFormat::GetSpaceWithin ( ) {
    float _result = 0;
    HRESULT _hr = get_SpaceWithin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(691)
inline void PowerPoint::ParagraphFormat::PutSpaceWithin ( float SpaceWithin ) {
    HRESULT _hr = put_SpaceWithin(SpaceWithin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(692)
inline enum PowerPoint::PpBaselineAlignment PowerPoint::ParagraphFormat::GetBaseLineAlignment ( ) {
    enum PpBaselineAlignment _result;
    HRESULT _hr = get_BaseLineAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(693)
inline void PowerPoint::ParagraphFormat::PutBaseLineAlignment ( enum PpBaselineAlignment BaseLineAlignment ) {
    HRESULT _hr = put_BaseLineAlignment(BaseLineAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(694)
inline __missing_type__  PowerPoint::ParagraphFormat::GetFarEastLineBreakControl ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_FarEastLineBreakControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(695)
inline void PowerPoint::ParagraphFormat::PutFarEastLineBreakControl ( __missing_type__ FarEastLineBreakControl ) {
    HRESULT _hr = put_FarEastLineBreakControl(FarEastLineBreakControl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(696)
inline __missing_type__  PowerPoint::ParagraphFormat::GetWordWrap ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(697)
inline void PowerPoint::ParagraphFormat::PutWordWrap ( __missing_type__ WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(698)
inline __missing_type__  PowerPoint::ParagraphFormat::GetHangingPunctuation ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HangingPunctuation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(699)
inline void PowerPoint::ParagraphFormat::PutHangingPunctuation ( __missing_type__ HangingPunctuation ) {
    HRESULT _hr = put_HangingPunctuation(HangingPunctuation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(700)
inline enum PowerPoint::PpDirection PowerPoint::ParagraphFormat::GetTextDirection ( ) {
    enum PpDirection _result;
    HRESULT _hr = get_TextDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(701)
inline void PowerPoint::ParagraphFormat::PutTextDirection ( enum PpDirection TextDirection ) {
    HRESULT _hr = put_TextDirection(TextDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TextStyleLevel wrapper method implementations
//

#pragma implementation_key(702)
inline PowerPoint::_ApplicationPtr PowerPoint::TextStyleLevel::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(703)
inline IDispatchPtr PowerPoint::TextStyleLevel::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(704)
inline PowerPoint::ParagraphFormatPtr PowerPoint::TextStyleLevel::GetParagraphFormat ( ) {
    struct ParagraphFormat * _result = 0;
    HRESULT _hr = get_ParagraphFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParagraphFormatPtr(_result, false);
}

#pragma implementation_key(705)
inline PowerPoint::FontPtr PowerPoint::TextStyleLevel::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

//
// interface TextStyleLevels wrapper method implementations
//

#pragma implementation_key(706)
inline PowerPoint::_ApplicationPtr PowerPoint::TextStyleLevels::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(707)
inline IDispatchPtr PowerPoint::TextStyleLevels::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(708)
inline PowerPoint::TextStyleLevelPtr PowerPoint::TextStyleLevels::Item ( int Level ) {
    struct TextStyleLevel * _result = 0;
    HRESULT _hr = raw_Item(Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextStyleLevelPtr(_result, false);
}

//
// interface Borders wrapper method implementations
//

#pragma implementation_key(709)
inline PowerPoint::_ApplicationPtr PowerPoint::Borders::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(710)
inline IDispatchPtr PowerPoint::Borders::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(711)
inline PowerPoint::LineFormatPtr PowerPoint::Borders::Item ( enum PpBorderType BorderType ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = raw_Item(BorderType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

//
// interface Pane wrapper method implementations
//

#pragma implementation_key(712)
inline IDispatchPtr PowerPoint::Pane::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(713)
inline HRESULT PowerPoint::Pane::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(714)
inline __missing_type__  PowerPoint::Pane::GetActive ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(715)
inline PowerPoint::_ApplicationPtr PowerPoint::Pane::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(716)
inline enum PowerPoint::PpViewType PowerPoint::Pane::GetViewType ( ) {
    enum PpViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Panes wrapper method implementations
//

#pragma implementation_key(717)
inline PowerPoint::_ApplicationPtr PowerPoint::Panes::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(718)
inline PowerPoint::PanePtr PowerPoint::Panes::Item ( int Index ) {
    struct Pane * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanePtr(_result, false);
}

#pragma implementation_key(719)
inline IDispatchPtr PowerPoint::Panes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface DefaultWebOptions wrapper method implementations
//

#pragma implementation_key(720)
inline __missing_type__  PowerPoint::DefaultWebOptions::GetIncludeNavigation ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_IncludeNavigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(721)
inline void PowerPoint::DefaultWebOptions::PutIncludeNavigation ( __missing_type__ IncludeNavigation ) {
    HRESULT _hr = put_IncludeNavigation(IncludeNavigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(722)
inline enum PowerPoint::PpFrameColors PowerPoint::DefaultWebOptions::GetFrameColors ( ) {
    enum PpFrameColors _result;
    HRESULT _hr = get_FrameColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(723)
inline void PowerPoint::DefaultWebOptions::PutFrameColors ( enum PpFrameColors FrameColors ) {
    HRESULT _hr = put_FrameColors(FrameColors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(724)
inline __missing_type__  PowerPoint::DefaultWebOptions::GetResizeGraphics ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ResizeGraphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(725)
inline void PowerPoint::DefaultWebOptions::PutResizeGraphics ( __missing_type__ ResizeGraphics ) {
    HRESULT _hr = put_ResizeGraphics(ResizeGraphics);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(726)
inline __missing_type__  PowerPoint::DefaultWebOptions::GetShowSlideAnimation ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ShowSlideAnimation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(727)
inline void PowerPoint::DefaultWebOptions::PutShowSlideAnimation ( __missing_type__ ShowSlideAnimation ) {
    HRESULT _hr = put_ShowSlideAnimation(ShowSlideAnimation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(728)
inline __missing_type__  PowerPoint::DefaultWebOptions::GetOrganizeInFolder ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_OrganizeInFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(729)
inline void PowerPoint::DefaultWebOptions::PutOrganizeInFolder ( __missing_type__ OrganizeInFolder ) {
    HRESULT _hr = put_OrganizeInFolder(OrganizeInFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(730)
inline __missing_type__  PowerPoint::DefaultWebOptions::GetUseLongFileNames ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_UseLongFileNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(731)
inline void PowerPoint::DefaultWebOptions::PutUseLongFileNames ( __missing_type__ UseLongFileNames ) {
    HRESULT _hr = put_UseLongFileNames(UseLongFileNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(732)
inline __missing_type__  PowerPoint::DefaultWebOptions::GetRelyOnVML ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_RelyOnVML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(733)
inline void PowerPoint::DefaultWebOptions::PutRelyOnVML ( __missing_type__ RelyOnVML ) {
    HRESULT _hr = put_RelyOnVML(RelyOnVML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(734)
inline __missing_type__  PowerPoint::DefaultWebOptions::GetAllowPNG ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AllowPNG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(735)
inline void PowerPoint::DefaultWebOptions::PutAllowPNG ( __missing_type__ AllowPNG ) {
    HRESULT _hr = put_AllowPNG(AllowPNG);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(736)
inline __missing_type__  PowerPoint::DefaultWebOptions::GetScreenSize ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ScreenSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(737)
inline void PowerPoint::DefaultWebOptions::PutScreenSize ( __missing_type__ ScreenSize ) {
    HRESULT _hr = put_ScreenSize(ScreenSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(738)
inline __missing_type__  PowerPoint::DefaultWebOptions::GetEncoding ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Encoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(739)
inline void PowerPoint::DefaultWebOptions::PutEncoding ( __missing_type__ Encoding ) {
    HRESULT _hr = put_Encoding(Encoding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(740)
inline __missing_type__  PowerPoint::DefaultWebOptions::GetUpdateLinksOnSave ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_UpdateLinksOnSave(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(741)
inline void PowerPoint::DefaultWebOptions::PutUpdateLinksOnSave ( __missing_type__ UpdateLinksOnSave ) {
    HRESULT _hr = put_UpdateLinksOnSave(UpdateLinksOnSave);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(742)
inline __missing_type__  PowerPoint::DefaultWebOptions::GetCheckIfOfficeIsHTMLEditor ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_CheckIfOfficeIsHTMLEditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(743)
inline void PowerPoint::DefaultWebOptions::PutCheckIfOfficeIsHTMLEditor ( __missing_type__ CheckIfOfficeIsHTMLEditor ) {
    HRESULT _hr = put_CheckIfOfficeIsHTMLEditor(CheckIfOfficeIsHTMLEditor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(744)
inline __missing_type__  PowerPoint::DefaultWebOptions::GetAlwaysSaveInDefaultEncoding ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AlwaysSaveInDefaultEncoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(745)
inline void PowerPoint::DefaultWebOptions::PutAlwaysSaveInDefaultEncoding ( __missing_type__ AlwaysSaveInDefaultEncoding ) {
    HRESULT _hr = put_AlwaysSaveInDefaultEncoding(AlwaysSaveInDefaultEncoding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(746)
inline __missing_type__ PowerPoint::DefaultWebOptions::GetFonts ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Fonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(747)
inline _bstr_t PowerPoint::DefaultWebOptions::GetFolderSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FolderSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(748)
inline __missing_type__  PowerPoint::DefaultWebOptions::GetTargetBrowser ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_TargetBrowser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(749)
inline void PowerPoint::DefaultWebOptions::PutTargetBrowser ( __missing_type__ TargetBrowser ) {
    HRESULT _hr = put_TargetBrowser(TargetBrowser);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(750)
inline __missing_type__  PowerPoint::DefaultWebOptions::GetSaveNewWebPagesAsWebArchives ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_SaveNewWebPagesAsWebArchives(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(751)
inline void PowerPoint::DefaultWebOptions::PutSaveNewWebPagesAsWebArchives ( __missing_type__ SaveNewWebPagesAsWebArchives ) {
    HRESULT _hr = put_SaveNewWebPagesAsWebArchives(SaveNewWebPagesAsWebArchives);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(752)
inline enum PowerPoint::PpHTMLVersion PowerPoint::DefaultWebOptions::GetHTMLVersion ( ) {
    enum PpHTMLVersion _result;
    HRESULT _hr = get_HTMLVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(753)
inline void PowerPoint::DefaultWebOptions::PutHTMLVersion ( enum PpHTMLVersion HTMLVersion ) {
    HRESULT _hr = put_HTMLVersion(HTMLVersion);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface WebOptions wrapper method implementations
//

#pragma implementation_key(754)
inline __missing_type__  PowerPoint::WebOptions::GetIncludeNavigation ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_IncludeNavigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(755)
inline void PowerPoint::WebOptions::PutIncludeNavigation ( __missing_type__ IncludeNavigation ) {
    HRESULT _hr = put_IncludeNavigation(IncludeNavigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(756)
inline enum PowerPoint::PpFrameColors PowerPoint::WebOptions::GetFrameColors ( ) {
    enum PpFrameColors _result;
    HRESULT _hr = get_FrameColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(757)
inline void PowerPoint::WebOptions::PutFrameColors ( enum PpFrameColors FrameColors ) {
    HRESULT _hr = put_FrameColors(FrameColors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(758)
inline __missing_type__  PowerPoint::WebOptions::GetResizeGraphics ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ResizeGraphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(759)
inline void PowerPoint::WebOptions::PutResizeGraphics ( __missing_type__ ResizeGraphics ) {
    HRESULT _hr = put_ResizeGraphics(ResizeGraphics);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(760)
inline __missing_type__  PowerPoint::WebOptions::GetShowSlideAnimation ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ShowSlideAnimation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(761)
inline void PowerPoint::WebOptions::PutShowSlideAnimation ( __missing_type__ ShowSlideAnimation ) {
    HRESULT _hr = put_ShowSlideAnimation(ShowSlideAnimation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(762)
inline __missing_type__  PowerPoint::WebOptions::GetOrganizeInFolder ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_OrganizeInFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(763)
inline void PowerPoint::WebOptions::PutOrganizeInFolder ( __missing_type__ OrganizeInFolder ) {
    HRESULT _hr = put_OrganizeInFolder(OrganizeInFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(764)
inline __missing_type__  PowerPoint::WebOptions::GetUseLongFileNames ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_UseLongFileNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(765)
inline void PowerPoint::WebOptions::PutUseLongFileNames ( __missing_type__ UseLongFileNames ) {
    HRESULT _hr = put_UseLongFileNames(UseLongFileNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(766)
inline __missing_type__  PowerPoint::WebOptions::GetRelyOnVML ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_RelyOnVML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(767)
inline void PowerPoint::WebOptions::PutRelyOnVML ( __missing_type__ RelyOnVML ) {
    HRESULT _hr = put_RelyOnVML(RelyOnVML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(768)
inline __missing_type__  PowerPoint::WebOptions::GetAllowPNG ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AllowPNG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(769)
inline void PowerPoint::WebOptions::PutAllowPNG ( __missing_type__ AllowPNG ) {
    HRESULT _hr = put_AllowPNG(AllowPNG);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(770)
inline __missing_type__  PowerPoint::WebOptions::GetScreenSize ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ScreenSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(771)
inline void PowerPoint::WebOptions::PutScreenSize ( __missing_type__ ScreenSize ) {
    HRESULT _hr = put_ScreenSize(ScreenSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(772)
inline __missing_type__  PowerPoint::WebOptions::GetEncoding ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Encoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(773)
inline void PowerPoint::WebOptions::PutEncoding ( __missing_type__ Encoding ) {
    HRESULT _hr = put_Encoding(Encoding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(774)
inline _bstr_t PowerPoint::WebOptions::GetFolderSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FolderSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(775)
inline HRESULT PowerPoint::WebOptions::UseDefaultFolderSuffix ( ) {
    HRESULT _hr = raw_UseDefaultFolderSuffix();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(776)
inline __missing_type__  PowerPoint::WebOptions::GetTargetBrowser ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_TargetBrowser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(777)
inline void PowerPoint::WebOptions::PutTargetBrowser ( __missing_type__ TargetBrowser ) {
    HRESULT _hr = put_TargetBrowser(TargetBrowser);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(778)
inline enum PowerPoint::PpHTMLVersion PowerPoint::WebOptions::GetHTMLVersion ( ) {
    enum PpHTMLVersion _result;
    HRESULT _hr = get_HTMLVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(779)
inline void PowerPoint::WebOptions::PutHTMLVersion ( enum PpHTMLVersion HTMLVersion ) {
    HRESULT _hr = put_HTMLVersion(HTMLVersion);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PublishObject wrapper method implementations
//

#pragma implementation_key(780)
inline PowerPoint::_ApplicationPtr PowerPoint::PublishObject::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(781)
inline IDispatchPtr PowerPoint::PublishObject::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(782)
inline enum PowerPoint::PpHTMLVersion PowerPoint::PublishObject::GetHTMLVersion ( ) {
    enum PpHTMLVersion _result;
    HRESULT _hr = get_HTMLVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(783)
inline void PowerPoint::PublishObject::PutHTMLVersion ( enum PpHTMLVersion HTMLVersion ) {
    HRESULT _hr = put_HTMLVersion(HTMLVersion);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(784)
inline enum PowerPoint::PpPublishSourceType PowerPoint::PublishObject::GetSourceType ( ) {
    enum PpPublishSourceType _result;
    HRESULT _hr = get_SourceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(785)
inline void PowerPoint::PublishObject::PutSourceType ( enum PpPublishSourceType SourceType ) {
    HRESULT _hr = put_SourceType(SourceType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(786)
inline int PowerPoint::PublishObject::GetRangeStart ( ) {
    int _result = 0;
    HRESULT _hr = get_RangeStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(787)
inline void PowerPoint::PublishObject::PutRangeStart ( int RangeStart ) {
    HRESULT _hr = put_RangeStart(RangeStart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(788)
inline int PowerPoint::PublishObject::GetRangeEnd ( ) {
    int _result = 0;
    HRESULT _hr = get_RangeEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(789)
inline void PowerPoint::PublishObject::PutRangeEnd ( int RangeEnd ) {
    HRESULT _hr = put_RangeEnd(RangeEnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(790)
inline _bstr_t PowerPoint::PublishObject::GetSlideShowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlideShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(791)
inline void PowerPoint::PublishObject::PutSlideShowName ( _bstr_t SlideShowName ) {
    HRESULT _hr = put_SlideShowName(SlideShowName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(792)
inline __missing_type__  PowerPoint::PublishObject::GetSpeakerNotes ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_SpeakerNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(793)
inline void PowerPoint::PublishObject::PutSpeakerNotes ( __missing_type__ SpeakerNotes ) {
    HRESULT _hr = put_SpeakerNotes(SpeakerNotes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(794)
inline _bstr_t PowerPoint::PublishObject::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(795)
inline void PowerPoint::PublishObject::PutFileName ( _bstr_t FileName ) {
    HRESULT _hr = put_FileName(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(796)
inline HRESULT PowerPoint::PublishObject::Publish ( ) {
    HRESULT _hr = raw_Publish();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface PublishObjects wrapper method implementations
//

#pragma implementation_key(797)
inline PowerPoint::_ApplicationPtr PowerPoint::PublishObjects::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(798)
inline IDispatchPtr PowerPoint::PublishObjects::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(799)
inline PowerPoint::PublishObjectPtr PowerPoint::PublishObjects::Item ( int Index ) {
    struct PublishObject * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PublishObjectPtr(_result, false);
}

//
// interface TextRange wrapper method implementations
//

#pragma implementation_key(800)
inline PowerPoint::_ApplicationPtr PowerPoint::TextRange::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(801)
inline IDispatchPtr PowerPoint::TextRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(802)
inline PowerPoint::ActionSettingsPtr PowerPoint::TextRange::GetActionSettings ( ) {
    struct ActionSettings * _result = 0;
    HRESULT _hr = get_ActionSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionSettingsPtr(_result, false);
}

#pragma implementation_key(803)
inline long PowerPoint::TextRange::GetStart ( ) {
    long _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(804)
inline long PowerPoint::TextRange::GetLength ( ) {
    long _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(805)
inline float PowerPoint::TextRange::GetBoundLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(806)
inline float PowerPoint::TextRange::GetBoundTop ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(807)
inline float PowerPoint::TextRange::GetBoundWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(808)
inline float PowerPoint::TextRange::GetBoundHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(809)
inline PowerPoint::TextRangePtr PowerPoint::TextRange::Paragraphs ( int Start, int Length ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Paragraphs(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(810)
inline PowerPoint::TextRangePtr PowerPoint::TextRange::Sentences ( int Start, int Length ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Sentences(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(811)
inline PowerPoint::TextRangePtr PowerPoint::TextRange::Words ( int Start, int Length ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Words(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(812)
inline PowerPoint::TextRangePtr PowerPoint::TextRange::Characters ( int Start, int Length ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(813)
inline PowerPoint::TextRangePtr PowerPoint::TextRange::Lines ( int Start, int Length ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Lines(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(814)
inline PowerPoint::TextRangePtr PowerPoint::TextRange::Runs ( int Start, int Length ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Runs(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(815)
inline PowerPoint::TextRangePtr PowerPoint::TextRange::TrimText ( ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_TrimText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(816)
inline _bstr_t PowerPoint::TextRange::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(817)
inline void PowerPoint::TextRange::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(818)
inline PowerPoint::TextRangePtr PowerPoint::TextRange::InsertAfter ( _bstr_t NewText ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_InsertAfter(NewText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(819)
inline PowerPoint::TextRangePtr PowerPoint::TextRange::InsertBefore ( _bstr_t NewText ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_InsertBefore(NewText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(820)
inline PowerPoint::TextRangePtr PowerPoint::TextRange::InsertDateTime ( enum PpDateTimeFormat DateTimeFormat, __missing_type__ InsertAsField ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_InsertDateTime(DateTimeFormat, InsertAsField, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(821)
inline PowerPoint::TextRangePtr PowerPoint::TextRange::InsertSlideNumber ( ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_InsertSlideNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(822)
inline PowerPoint::TextRangePtr PowerPoint::TextRange::InsertSymbol ( _bstr_t FontName, int CharNumber, __missing_type__ Unicode ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_InsertSymbol(FontName, CharNumber, Unicode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(823)
inline PowerPoint::FontPtr PowerPoint::TextRange::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(824)
inline PowerPoint::ParagraphFormatPtr PowerPoint::TextRange::GetParagraphFormat ( ) {
    struct ParagraphFormat * _result = 0;
    HRESULT _hr = get_ParagraphFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParagraphFormatPtr(_result, false);
}

#pragma implementation_key(825)
inline int PowerPoint::TextRange::GetIndentLevel ( ) {
    int _result = 0;
    HRESULT _hr = get_IndentLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(826)
inline void PowerPoint::TextRange::PutIndentLevel ( int IndentLevel ) {
    HRESULT _hr = put_IndentLevel(IndentLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(827)
inline HRESULT PowerPoint::TextRange::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(828)
inline HRESULT PowerPoint::TextRange::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(829)
inline HRESULT PowerPoint::TextRange::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(830)
inline HRESULT PowerPoint::TextRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(831)
inline PowerPoint::TextRangePtr PowerPoint::TextRange::Paste ( ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(832)
inline HRESULT PowerPoint::TextRange::ChangeCase ( enum PpChangeCase Type ) {
    HRESULT _hr = raw_ChangeCase(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(833)
inline HRESULT PowerPoint::TextRange::AddPeriods ( ) {
    HRESULT _hr = raw_AddPeriods();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(834)
inline HRESULT PowerPoint::TextRange::RemovePeriods ( ) {
    HRESULT _hr = raw_RemovePeriods();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(835)
inline PowerPoint::TextRangePtr PowerPoint::TextRange::Find ( _bstr_t FindWhat, int After, __missing_type__ MatchCase, __missing_type__ WholeWords ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Find(FindWhat, After, MatchCase, WholeWords, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(836)
inline PowerPoint::TextRangePtr PowerPoint::TextRange::Replace ( _bstr_t FindWhat, _bstr_t ReplaceWhat, int After, __missing_type__ MatchCase, __missing_type__ WholeWords ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Replace(FindWhat, ReplaceWhat, After, MatchCase, WholeWords, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(837)
inline HRESULT PowerPoint::TextRange::RotatedBounds ( float * X1, float * Y1, float * X2, float * Y2, float * X3, float * Y3, float * x4, float * y4 ) {
    HRESULT _hr = raw_RotatedBounds(X1, Y1, X2, Y2, X3, Y3, x4, y4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(838)
inline __missing_type__  PowerPoint::TextRange::GetLanguageID ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_LanguageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(839)
inline void PowerPoint::TextRange::PutLanguageID ( __missing_type__ LanguageID ) {
    HRESULT _hr = put_LanguageID(LanguageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(840)
inline HRESULT PowerPoint::TextRange::RtlRun ( ) {
    HRESULT _hr = raw_RtlRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(841)
inline HRESULT PowerPoint::TextRange::LtrRun ( ) {
    HRESULT _hr = raw_LtrRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(842)
inline PowerPoint::TextRangePtr PowerPoint::TextRange::PasteSpecial ( enum PpPasteDataType DataType, __missing_type__ DisplayAsIcon, _bstr_t IconFileName, int IconIndex, _bstr_t IconLabel, __missing_type__ Link ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_PasteSpecial(DataType, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Link, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

//
// interface TextFrame wrapper method implementations
//

#pragma implementation_key(843)
inline IDispatchPtr PowerPoint::TextFrame::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(844)
inline long PowerPoint::TextFrame::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(845)
inline IDispatchPtr PowerPoint::TextFrame::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(846)
inline float PowerPoint::TextFrame::GetMarginBottom ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(847)
inline void PowerPoint::TextFrame::PutMarginBottom ( float MarginBottom ) {
    HRESULT _hr = put_MarginBottom(MarginBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(848)
inline float PowerPoint::TextFrame::GetMarginLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(849)
inline void PowerPoint::TextFrame::PutMarginLeft ( float MarginLeft ) {
    HRESULT _hr = put_MarginLeft(MarginLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(850)
inline float PowerPoint::TextFrame::GetMarginRight ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(851)
inline void PowerPoint::TextFrame::PutMarginRight ( float MarginRight ) {
    HRESULT _hr = put_MarginRight(MarginRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(852)
inline float PowerPoint::TextFrame::GetMarginTop ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(853)
inline void PowerPoint::TextFrame::PutMarginTop ( float MarginTop ) {
    HRESULT _hr = put_MarginTop(MarginTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(854)
inline __missing_type__  PowerPoint::TextFrame::GetOrientation ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(855)
inline void PowerPoint::TextFrame::PutOrientation ( __missing_type__ Orientation ) {
    HRESULT _hr = put_Orientation(Orientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(856)
inline __missing_type__  PowerPoint::TextFrame::GetHasText ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(857)
inline PowerPoint::TextRangePtr PowerPoint::TextFrame::GetTextRange ( ) {
    struct TextRange * _result = 0;
    HRESULT _hr = get_TextRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(858)
inline PowerPoint::RulerPtr PowerPoint::TextFrame::GetRuler ( ) {
    struct Ruler * _result = 0;
    HRESULT _hr = get_Ruler(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RulerPtr(_result, false);
}

#pragma implementation_key(859)
inline __missing_type__  PowerPoint::TextFrame::GetHorizontalAnchor ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HorizontalAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(860)
inline void PowerPoint::TextFrame::PutHorizontalAnchor ( __missing_type__ HorizontalAnchor ) {
    HRESULT _hr = put_HorizontalAnchor(HorizontalAnchor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(861)
inline __missing_type__  PowerPoint::TextFrame::GetVerticalAnchor ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_VerticalAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(862)
inline void PowerPoint::TextFrame::PutVerticalAnchor ( __missing_type__ VerticalAnchor ) {
    HRESULT _hr = put_VerticalAnchor(VerticalAnchor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(863)
inline enum PowerPoint::PpAutoSize PowerPoint::TextFrame::GetAutoSize ( ) {
    enum PpAutoSize _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(864)
inline void PowerPoint::TextFrame::PutAutoSize ( enum PpAutoSize AutoSize ) {
    HRESULT _hr = put_AutoSize(AutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(865)
inline __missing_type__  PowerPoint::TextFrame::GetWordWrap ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(866)
inline void PowerPoint::TextFrame::PutWordWrap ( __missing_type__ WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(867)
inline HRESULT PowerPoint::TextFrame::DeleteText ( ) {
    HRESULT _hr = raw_DeleteText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TextStyle wrapper method implementations
//

#pragma implementation_key(868)
inline PowerPoint::_ApplicationPtr PowerPoint::TextStyle::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(869)
inline IDispatchPtr PowerPoint::TextStyle::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(870)
inline PowerPoint::RulerPtr PowerPoint::TextStyle::GetRuler ( ) {
    struct Ruler * _result = 0;
    HRESULT _hr = get_Ruler(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RulerPtr(_result, false);
}

#pragma implementation_key(871)
inline PowerPoint::TextFramePtr PowerPoint::TextStyle::GetTextFrame ( ) {
    struct TextFrame * _result = 0;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(872)
inline PowerPoint::TextStyleLevelsPtr PowerPoint::TextStyle::GetLevels ( ) {
    struct TextStyleLevels * _result = 0;
    HRESULT _hr = get_Levels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextStyleLevelsPtr(_result, false);
}

//
// interface TextStyles wrapper method implementations
//

#pragma implementation_key(873)
inline PowerPoint::_ApplicationPtr PowerPoint::TextStyles::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(874)
inline IDispatchPtr PowerPoint::TextStyles::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(875)
inline PowerPoint::TextStylePtr PowerPoint::TextStyles::Item ( enum PpTextStyleType Type ) {
    struct TextStyle * _result = 0;
    HRESULT _hr = raw_Item(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextStylePtr(_result, false);
}

//
// interface _PowerRex wrapper method implementations
//

#pragma implementation_key(876)
inline HRESULT PowerPoint::_PowerRex::OnAsfEncoderEvent ( const _variant_t & erorCode, const _variant_t & bstrErrorDesc ) {
    HRESULT _hr = raw_OnAsfEncoderEvent(erorCode, bstrErrorDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface EffectParameters wrapper method implementations
//

#pragma implementation_key(877)
inline PowerPoint::_ApplicationPtr PowerPoint::EffectParameters::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(878)
inline IDispatchPtr PowerPoint::EffectParameters::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(879)
inline enum PowerPoint::MsoAnimDirection PowerPoint::EffectParameters::GetDirection ( ) {
    enum MsoAnimDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(880)
inline void PowerPoint::EffectParameters::PutDirection ( enum MsoAnimDirection Direction ) {
    HRESULT _hr = put_Direction(Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(881)
inline float PowerPoint::EffectParameters::GetAmount ( ) {
    float _result = 0;
    HRESULT _hr = get_Amount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(882)
inline void PowerPoint::EffectParameters::PutAmount ( float Amount ) {
    HRESULT _hr = put_Amount(Amount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(883)
inline float PowerPoint::EffectParameters::GetSize ( ) {
    float _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(884)
inline void PowerPoint::EffectParameters::PutSize ( float Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(885)
inline PowerPoint::ColorFormatPtr PowerPoint::EffectParameters::GetColor2 ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_Color2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(886)
inline __missing_type__  PowerPoint::EffectParameters::GetRelative ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Relative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(887)
inline void PowerPoint::EffectParameters::PutRelative ( __missing_type__ Relative ) {
    HRESULT _hr = put_Relative(Relative);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(888)
inline _bstr_t PowerPoint::EffectParameters::GetFontName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(889)
inline void PowerPoint::EffectParameters::PutFontName ( _bstr_t FontName ) {
    HRESULT _hr = put_FontName(FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface EffectInformation wrapper method implementations
//

#pragma implementation_key(890)
inline PowerPoint::_ApplicationPtr PowerPoint::EffectInformation::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(891)
inline IDispatchPtr PowerPoint::EffectInformation::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(892)
inline enum PowerPoint::MsoAnimAfterEffect PowerPoint::EffectInformation::GetAfterEffect ( ) {
    enum MsoAnimAfterEffect _result;
    HRESULT _hr = get_AfterEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(893)
inline __missing_type__  PowerPoint::EffectInformation::GetAnimateBackground ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AnimateBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(894)
inline __missing_type__  PowerPoint::EffectInformation::GetAnimateTextInReverse ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AnimateTextInReverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(895)
inline enum PowerPoint::MsoAnimateByLevel PowerPoint::EffectInformation::GetBuildByLevelEffect ( ) {
    enum MsoAnimateByLevel _result;
    HRESULT _hr = get_BuildByLevelEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(896)
inline PowerPoint::ColorFormatPtr PowerPoint::EffectInformation::GetDim ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_Dim(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(897)
inline PowerPoint::PlaySettingsPtr PowerPoint::EffectInformation::GetPlaySettings ( ) {
    struct PlaySettings * _result = 0;
    HRESULT _hr = get_PlaySettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlaySettingsPtr(_result, false);
}

#pragma implementation_key(898)
inline PowerPoint::SoundEffectPtr PowerPoint::EffectInformation::GetSoundEffect ( ) {
    struct SoundEffect * _result = 0;
    HRESULT _hr = get_SoundEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundEffectPtr(_result, false);
}

#pragma implementation_key(899)
inline enum PowerPoint::MsoAnimTextUnitEffect PowerPoint::EffectInformation::GetTextUnitEffect ( ) {
    enum MsoAnimTextUnitEffect _result;
    HRESULT _hr = get_TextUnitEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface MotionEffect wrapper method implementations
//

#pragma implementation_key(900)
inline PowerPoint::_ApplicationPtr PowerPoint::MotionEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(901)
inline IDispatchPtr PowerPoint::MotionEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(902)
inline float PowerPoint::MotionEffect::GetByX ( ) {
    float _result = 0;
    HRESULT _hr = get_ByX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(903)
inline void PowerPoint::MotionEffect::PutByX ( float ByX ) {
    HRESULT _hr = put_ByX(ByX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(904)
inline float PowerPoint::MotionEffect::GetByY ( ) {
    float _result = 0;
    HRESULT _hr = get_ByY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(905)
inline void PowerPoint::MotionEffect::PutByY ( float ByY ) {
    HRESULT _hr = put_ByY(ByY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(906)
inline float PowerPoint::MotionEffect::GetFromX ( ) {
    float _result = 0;
    HRESULT _hr = get_FromX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(907)
inline void PowerPoint::MotionEffect::PutFromX ( float FromX ) {
    HRESULT _hr = put_FromX(FromX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(908)
inline float PowerPoint::MotionEffect::GetFromY ( ) {
    float _result = 0;
    HRESULT _hr = get_FromY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(909)
inline void PowerPoint::MotionEffect::PutFromY ( float FromY ) {
    HRESULT _hr = put_FromY(FromY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(910)
inline float PowerPoint::MotionEffect::GetToX ( ) {
    float _result = 0;
    HRESULT _hr = get_ToX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(911)
inline void PowerPoint::MotionEffect::PutToX ( float ToX ) {
    HRESULT _hr = put_ToX(ToX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(912)
inline float PowerPoint::MotionEffect::GetToY ( ) {
    float _result = 0;
    HRESULT _hr = get_ToY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(913)
inline void PowerPoint::MotionEffect::PutToY ( float ToY ) {
    HRESULT _hr = put_ToY(ToY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(914)
inline _bstr_t PowerPoint::MotionEffect::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(915)
inline void PowerPoint::MotionEffect::PutPath ( _bstr_t Path ) {
    HRESULT _hr = put_Path(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ColorEffect wrapper method implementations
//

#pragma implementation_key(916)
inline PowerPoint::_ApplicationPtr PowerPoint::ColorEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(917)
inline IDispatchPtr PowerPoint::ColorEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(918)
inline PowerPoint::ColorFormatPtr PowerPoint::ColorEffect::GetBy ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_By(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(919)
inline PowerPoint::ColorFormatPtr PowerPoint::ColorEffect::GetFrom ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_From(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(920)
inline PowerPoint::ColorFormatPtr PowerPoint::ColorEffect::GetTo ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_To(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

//
// interface ScaleEffect wrapper method implementations
//

#pragma implementation_key(921)
inline PowerPoint::_ApplicationPtr PowerPoint::ScaleEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(922)
inline IDispatchPtr PowerPoint::ScaleEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(923)
inline float PowerPoint::ScaleEffect::GetByX ( ) {
    float _result = 0;
    HRESULT _hr = get_ByX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(924)
inline void PowerPoint::ScaleEffect::PutByX ( float ByX ) {
    HRESULT _hr = put_ByX(ByX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(925)
inline float PowerPoint::ScaleEffect::GetByY ( ) {
    float _result = 0;
    HRESULT _hr = get_ByY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(926)
inline void PowerPoint::ScaleEffect::PutByY ( float ByY ) {
    HRESULT _hr = put_ByY(ByY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(927)
inline float PowerPoint::ScaleEffect::GetFromX ( ) {
    float _result = 0;
    HRESULT _hr = get_FromX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(928)
inline void PowerPoint::ScaleEffect::PutFromX ( float FromX ) {
    HRESULT _hr = put_FromX(FromX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(929)
inline float PowerPoint::ScaleEffect::GetFromY ( ) {
    float _result = 0;
    HRESULT _hr = get_FromY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(930)
inline void PowerPoint::ScaleEffect::PutFromY ( float FromY ) {
    HRESULT _hr = put_FromY(FromY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(931)
inline float PowerPoint::ScaleEffect::GetToX ( ) {
    float _result = 0;
    HRESULT _hr = get_ToX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(932)
inline void PowerPoint::ScaleEffect::PutToX ( float ToX ) {
    HRESULT _hr = put_ToX(ToX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(933)
inline float PowerPoint::ScaleEffect::GetToY ( ) {
    float _result = 0;
    HRESULT _hr = get_ToY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(934)
inline void PowerPoint::ScaleEffect::PutToY ( float ToY ) {
    HRESULT _hr = put_ToY(ToY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface RotationEffect wrapper method implementations
//

#pragma implementation_key(935)
inline PowerPoint::_ApplicationPtr PowerPoint::RotationEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(936)
inline IDispatchPtr PowerPoint::RotationEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(937)
inline float PowerPoint::RotationEffect::GetBy ( ) {
    float _result = 0;
    HRESULT _hr = get_By(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(938)
inline void PowerPoint::RotationEffect::PutBy ( float By ) {
    HRESULT _hr = put_By(By);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(939)
inline float PowerPoint::RotationEffect::GetFrom ( ) {
    float _result = 0;
    HRESULT _hr = get_From(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(940)
inline void PowerPoint::RotationEffect::PutFrom ( float From ) {
    HRESULT _hr = put_From(From);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(941)
inline float PowerPoint::RotationEffect::GetTo ( ) {
    float _result = 0;
    HRESULT _hr = get_To(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(942)
inline void PowerPoint::RotationEffect::PutTo ( float To ) {
    HRESULT _hr = put_To(To);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AnimationPoint wrapper method implementations
//

#pragma implementation_key(943)
inline PowerPoint::_ApplicationPtr PowerPoint::AnimationPoint::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(944)
inline IDispatchPtr PowerPoint::AnimationPoint::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(945)
inline HRESULT PowerPoint::AnimationPoint::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(946)
inline float PowerPoint::AnimationPoint::GetTime ( ) {
    float _result = 0;
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(947)
inline void PowerPoint::AnimationPoint::PutTime ( float Time ) {
    HRESULT _hr = put_Time(Time);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(948)
inline _variant_t PowerPoint::AnimationPoint::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(949)
inline void PowerPoint::AnimationPoint::PutValue ( const _variant_t & Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(950)
inline _bstr_t PowerPoint::AnimationPoint::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(951)
inline void PowerPoint::AnimationPoint::PutFormula ( _bstr_t Formula ) {
    HRESULT _hr = put_Formula(Formula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AnimationPoints wrapper method implementations
//

#pragma implementation_key(952)
inline PowerPoint::_ApplicationPtr PowerPoint::AnimationPoints::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(953)
inline IDispatchPtr PowerPoint::AnimationPoints::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(954)
inline PowerPoint::AnimationPointPtr PowerPoint::AnimationPoints::Item ( int Index ) {
    struct AnimationPoint * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationPointPtr(_result, false);
}

#pragma implementation_key(955)
inline PowerPoint::AnimationPointPtr PowerPoint::AnimationPoints::Add ( int Index ) {
    struct AnimationPoint * _result = 0;
    HRESULT _hr = raw_Add(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationPointPtr(_result, false);
}

#pragma implementation_key(956)
inline __missing_type__  PowerPoint::AnimationPoints::GetSmooth ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Smooth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(957)
inline void PowerPoint::AnimationPoints::PutSmooth ( __missing_type__ Smooth ) {
    HRESULT _hr = put_Smooth(Smooth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PropertyEffect wrapper method implementations
//

#pragma implementation_key(958)
inline PowerPoint::_ApplicationPtr PowerPoint::PropertyEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(959)
inline IDispatchPtr PowerPoint::PropertyEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(960)
inline enum PowerPoint::MsoAnimProperty PowerPoint::PropertyEffect::GetProperty ( ) {
    enum MsoAnimProperty _result;
    HRESULT _hr = get_Property(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(961)
inline void PowerPoint::PropertyEffect::PutProperty ( enum MsoAnimProperty Property ) {
    HRESULT _hr = put_Property(Property);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(962)
inline PowerPoint::AnimationPointsPtr PowerPoint::PropertyEffect::GetPoints ( ) {
    struct AnimationPoints * _result = 0;
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationPointsPtr(_result, false);
}

#pragma implementation_key(963)
inline _variant_t PowerPoint::PropertyEffect::GetFrom ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_From(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(964)
inline void PowerPoint::PropertyEffect::PutFrom ( const _variant_t & From ) {
    HRESULT _hr = put_From(From);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(965)
inline _variant_t PowerPoint::PropertyEffect::GetTo ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_To(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(966)
inline void PowerPoint::PropertyEffect::PutTo ( const _variant_t & To ) {
    HRESULT _hr = put_To(To);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AutoCorrect wrapper method implementations
//

#pragma implementation_key(967)
inline VARIANT_BOOL PowerPoint::AutoCorrect::GetDisplayAutoCorrectOptions ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayAutoCorrectOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(968)
inline void PowerPoint::AutoCorrect::PutDisplayAutoCorrectOptions ( VARIANT_BOOL DisplayAutoCorrectOptions ) {
    HRESULT _hr = put_DisplayAutoCorrectOptions(DisplayAutoCorrectOptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(969)
inline VARIANT_BOOL PowerPoint::AutoCorrect::GetDisplayAutoLayoutOptions ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayAutoLayoutOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(970)
inline void PowerPoint::AutoCorrect::PutDisplayAutoLayoutOptions ( VARIANT_BOOL DisplayAutoLayoutOptions ) {
    HRESULT _hr = put_DisplayAutoLayoutOptions(DisplayAutoLayoutOptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Options wrapper method implementations
//

#pragma implementation_key(971)
inline __missing_type__  PowerPoint::Options::GetDisplayPasteOptions ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_DisplayPasteOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(972)
inline void PowerPoint::Options::PutDisplayPasteOptions ( __missing_type__ DisplayPasteOptions ) {
    HRESULT _hr = put_DisplayPasteOptions(DisplayPasteOptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(973)
inline __missing_type__  PowerPoint::Options::GetDoNotPromptForConvert ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_DoNotPromptForConvert(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(974)
inline void PowerPoint::Options::PutDoNotPromptForConvert ( __missing_type__ DoNotPromptForConvert ) {
    HRESULT _hr = put_DoNotPromptForConvert(DoNotPromptForConvert);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(975)
inline VARIANT_BOOL PowerPoint::Options::GetShowCoauthoringMergeChanges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowCoauthoringMergeChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(976)
inline void PowerPoint::Options::PutShowCoauthoringMergeChanges ( VARIANT_BOOL ShowCoauthoringMergeChanges ) {
    HRESULT _hr = put_ShowCoauthoringMergeChanges(ShowCoauthoringMergeChanges);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CommandEffect wrapper method implementations
//

#pragma implementation_key(977)
inline PowerPoint::_ApplicationPtr PowerPoint::CommandEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(978)
inline IDispatchPtr PowerPoint::CommandEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(979)
inline enum PowerPoint::MsoAnimCommandType PowerPoint::CommandEffect::GetType ( ) {
    enum MsoAnimCommandType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(980)
inline void PowerPoint::CommandEffect::PutType ( enum MsoAnimCommandType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(981)
inline _bstr_t PowerPoint::CommandEffect::GetCommand ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Command(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(982)
inline void PowerPoint::CommandEffect::PutCommand ( _bstr_t Command ) {
    HRESULT _hr = put_Command(Command);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(983)
inline _bstr_t PowerPoint::CommandEffect::Getbookmark ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_bookmark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(984)
inline void PowerPoint::CommandEffect::Putbookmark ( _bstr_t bookmark ) {
    HRESULT _hr = put_bookmark(bookmark);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface FilterEffect wrapper method implementations
//

#pragma implementation_key(985)
inline PowerPoint::_ApplicationPtr PowerPoint::FilterEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(986)
inline IDispatchPtr PowerPoint::FilterEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(987)
inline enum PowerPoint::MsoAnimFilterEffectType PowerPoint::FilterEffect::GetType ( ) {
    enum MsoAnimFilterEffectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(988)
inline void PowerPoint::FilterEffect::PutType ( enum MsoAnimFilterEffectType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(989)
inline enum PowerPoint::MsoAnimFilterEffectSubtype PowerPoint::FilterEffect::GetSubtype ( ) {
    enum MsoAnimFilterEffectSubtype _result;
    HRESULT _hr = get_Subtype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(990)
inline void PowerPoint::FilterEffect::PutSubtype ( enum MsoAnimFilterEffectSubtype Subtype ) {
    HRESULT _hr = put_Subtype(Subtype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(991)
inline __missing_type__  PowerPoint::FilterEffect::GetReveal ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Reveal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(992)
inline void PowerPoint::FilterEffect::PutReveal ( __missing_type__ Reveal ) {
    HRESULT _hr = put_Reveal(Reveal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface SetEffect wrapper method implementations
//

#pragma implementation_key(993)
inline PowerPoint::_ApplicationPtr PowerPoint::SetEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(994)
inline IDispatchPtr PowerPoint::SetEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(995)
inline enum PowerPoint::MsoAnimProperty PowerPoint::SetEffect::GetProperty ( ) {
    enum MsoAnimProperty _result;
    HRESULT _hr = get_Property(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(996)
inline void PowerPoint::SetEffect::PutProperty ( enum MsoAnimProperty Property ) {
    HRESULT _hr = put_Property(Property);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(997)
inline _variant_t PowerPoint::SetEffect::GetTo ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_To(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(998)
inline void PowerPoint::SetEffect::PutTo ( const _variant_t & To ) {
    HRESULT _hr = put_To(To);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TableStyle wrapper method implementations
//

#pragma implementation_key(999)
inline _bstr_t PowerPoint::TableStyle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1000)
inline _bstr_t PowerPoint::TableStyle::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface CustomerData wrapper method implementations
//

#pragma implementation_key(1001)
inline PowerPoint::_ApplicationPtr PowerPoint::CustomerData::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1002)
inline IDispatchPtr PowerPoint::CustomerData::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1003)
inline __missing_type__ PowerPoint::CustomerData::Item ( _bstr_t Id ) {
    __missing_type__ * _result;
    HRESULT _hr = raw_Item(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1004)
inline __missing_type__ PowerPoint::CustomerData::Add ( ) {
    __missing_type__ * _result;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1005)
inline HRESULT PowerPoint::CustomerData::Delete ( _bstr_t Id ) {
    HRESULT _hr = raw_Delete(Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Research wrapper method implementations
//

#pragma implementation_key(1006)
inline PowerPoint::_ApplicationPtr PowerPoint::Research::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1007)
inline IDispatchPtr PowerPoint::Research::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1008)
inline HRESULT PowerPoint::Research::Query ( _bstr_t ServiceID, VARIANT * QueryString, VARIANT * QueryLanguage, VARIANT_BOOL UseSelection, VARIANT_BOOL LaunchQuery ) {
    HRESULT _hr = raw_Query(ServiceID, QueryString, QueryLanguage, UseSelection, LaunchQuery);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1009)
inline HRESULT PowerPoint::Research::SetLanguagePair ( VARIANT * Language1, VARIANT * Language2 ) {
    HRESULT _hr = raw_SetLanguagePair(Language1, Language2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1010)
inline VARIANT_BOOL PowerPoint::Research::IsResearchService ( _bstr_t ServiceID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsResearchService(ServiceID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface TableBackground wrapper method implementations
//

#pragma implementation_key(1011)
inline PowerPoint::FillFormatPtr PowerPoint::TableBackground::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(1012)
inline PowerPoint::PictureFormatPtr PowerPoint::TableBackground::GetPicture ( ) {
    struct PictureFormat * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(1013)
inline __missing_type__ PowerPoint::TableBackground::GetReflection ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Reflection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1014)
inline PowerPoint::ShadowFormatPtr PowerPoint::TableBackground::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

//
// interface TextFrame2 wrapper method implementations
//

#pragma implementation_key(1015)
inline IDispatchPtr PowerPoint::TextFrame2::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1016)
inline long PowerPoint::TextFrame2::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1017)
inline IDispatchPtr PowerPoint::TextFrame2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1018)
inline float PowerPoint::TextFrame2::GetMarginBottom ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1019)
inline void PowerPoint::TextFrame2::PutMarginBottom ( float MarginBottom ) {
    HRESULT _hr = put_MarginBottom(MarginBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1020)
inline float PowerPoint::TextFrame2::GetMarginLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1021)
inline void PowerPoint::TextFrame2::PutMarginLeft ( float MarginLeft ) {
    HRESULT _hr = put_MarginLeft(MarginLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1022)
inline float PowerPoint::TextFrame2::GetMarginRight ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1023)
inline void PowerPoint::TextFrame2::PutMarginRight ( float MarginRight ) {
    HRESULT _hr = put_MarginRight(MarginRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1024)
inline float PowerPoint::TextFrame2::GetMarginTop ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1025)
inline void PowerPoint::TextFrame2::PutMarginTop ( float MarginTop ) {
    HRESULT _hr = put_MarginTop(MarginTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1026)
inline __missing_type__  PowerPoint::TextFrame2::GetOrientation ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1027)
inline void PowerPoint::TextFrame2::PutOrientation ( __missing_type__ Orientation ) {
    HRESULT _hr = put_Orientation(Orientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1028)
inline __missing_type__  PowerPoint::TextFrame2::GetHorizontalAnchor ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HorizontalAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1029)
inline void PowerPoint::TextFrame2::PutHorizontalAnchor ( __missing_type__ HorizontalAnchor ) {
    HRESULT _hr = put_HorizontalAnchor(HorizontalAnchor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1030)
inline __missing_type__  PowerPoint::TextFrame2::GetVerticalAnchor ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_VerticalAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1031)
inline void PowerPoint::TextFrame2::PutVerticalAnchor ( __missing_type__ VerticalAnchor ) {
    HRESULT _hr = put_VerticalAnchor(VerticalAnchor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1032)
inline __missing_type__  PowerPoint::TextFrame2::GetPathFormat ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_PathFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1033)
inline void PowerPoint::TextFrame2::PutPathFormat ( __missing_type__ PathFormat ) {
    HRESULT _hr = put_PathFormat(PathFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1034)
inline __missing_type__  PowerPoint::TextFrame2::GetWarpFormat ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_WarpFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1035)
inline void PowerPoint::TextFrame2::PutWarpFormat ( __missing_type__ WarpFormat ) {
    HRESULT _hr = put_WarpFormat(WarpFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1036)
inline __missing_type__  PowerPoint::TextFrame2::GetWordArtFormat ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_WordArtFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1037)
inline void PowerPoint::TextFrame2::PutWordArtFormat ( __missing_type__ WordArtFormat ) {
    HRESULT _hr = put_WordArtFormat(WordArtFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1038)
inline __missing_type__  PowerPoint::TextFrame2::GetWordWrap ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1039)
inline void PowerPoint::TextFrame2::PutWordWrap ( __missing_type__ WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1040)
inline __missing_type__  PowerPoint::TextFrame2::GetAutoSize ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1041)
inline void PowerPoint::TextFrame2::PutAutoSize ( __missing_type__ AutoSize ) {
    HRESULT _hr = put_AutoSize(AutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1042)
inline PowerPoint::ThreeDFormatPtr PowerPoint::TextFrame2::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(1043)
inline __missing_type__  PowerPoint::TextFrame2::GetHasText ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1044)
inline __missing_type__ PowerPoint::TextFrame2::GetTextRange ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_TextRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1045)
inline __missing_type__ PowerPoint::TextFrame2::GetColumn ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Column(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1046)
inline __missing_type__ PowerPoint::TextFrame2::GetRuler ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Ruler(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1047)
inline HRESULT PowerPoint::TextFrame2::DeleteText ( ) {
    HRESULT _hr = raw_DeleteText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1048)
inline __missing_type__  PowerPoint::TextFrame2::GetNoTextRotation ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_NoTextRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1049)
inline void PowerPoint::TextFrame2::PutNoTextRotation ( __missing_type__ NoTextRotation ) {
    HRESULT _hr = put_NoTextRotation(NoTextRotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ChartBorder wrapper method implementations
//

#pragma implementation_key(1050)
inline void PowerPoint::ChartBorder::PutColor ( const _variant_t & RHS ) {
    HRESULT _hr = put_Color(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1051)
inline _variant_t PowerPoint::ChartBorder::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1052)
inline void PowerPoint::ChartBorder::PutColorIndex ( const _variant_t & RHS ) {
    HRESULT _hr = put_ColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1053)
inline _variant_t PowerPoint::ChartBorder::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1054)
inline void PowerPoint::ChartBorder::PutLineStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_LineStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1055)
inline _variant_t PowerPoint::ChartBorder::GetLineStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1056)
inline void PowerPoint::ChartBorder::PutWeight ( const _variant_t & RHS ) {
    HRESULT _hr = put_Weight(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1057)
inline _variant_t PowerPoint::ChartBorder::GetWeight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1058)
inline long PowerPoint::ChartBorder::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1059)
inline IDispatchPtr PowerPoint::ChartBorder::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1060)
inline PowerPoint::_ApplicationPtr PowerPoint::ChartBorder::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface ChartColorFormat wrapper method implementations
//

#pragma implementation_key(1061)
inline IDispatchPtr PowerPoint::ChartColorFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1062)
inline long PowerPoint::ChartColorFormat::GetSchemeColor ( ) {
    long _result = 0;
    HRESULT _hr = get_SchemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1063)
inline void PowerPoint::ChartColorFormat::PutSchemeColor ( long RHS ) {
    HRESULT _hr = put_SchemeColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1064)
inline long PowerPoint::ChartColorFormat::Get_Default ( ) {
    long _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1065)
inline long PowerPoint::ChartColorFormat::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1066)
inline long PowerPoint::ChartColorFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1067)
inline PowerPoint::_ApplicationPtr PowerPoint::ChartColorFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1068)
inline long PowerPoint::ChartColorFormat::GetRGB ( ) {
    long _result = 0;
    HRESULT _hr = get_RGB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ChartData wrapper method implementations
//

#pragma implementation_key(1069)
inline IDispatchPtr PowerPoint::ChartData::GetWorkbook ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Workbook(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1070)
inline HRESULT PowerPoint::ChartData::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1071)
inline VARIANT_BOOL PowerPoint::ChartData::GetIsLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1072)
inline HRESULT PowerPoint::ChartData::BreakLink ( ) {
    HRESULT _hr = raw_BreakLink();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1073)
inline HRESULT PowerPoint::ChartData::ActivateChartDataWindow ( ) {
    HRESULT _hr = raw_ActivateChartDataWindow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ChartFillFormat wrapper method implementations
//

#pragma implementation_key(1074)
inline HRESULT PowerPoint::ChartFillFormat::Solid ( ) {
    HRESULT _hr = raw_Solid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1075)
inline HRESULT PowerPoint::ChartFillFormat::UserTextured ( _bstr_t TextureFile ) {
    HRESULT _hr = raw_UserTextured(TextureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1076)
inline PowerPoint::ChartColorFormatPtr PowerPoint::ChartFillFormat::GetBackColor ( ) {
    struct ChartColorFormat * _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartColorFormatPtr(_result, false);
}

#pragma implementation_key(1077)
inline PowerPoint::ChartColorFormatPtr PowerPoint::ChartFillFormat::GetForeColor ( ) {
    struct ChartColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartColorFormatPtr(_result, false);
}

#pragma implementation_key(1078)
inline float PowerPoint::ChartFillFormat::GetGradientDegree ( ) {
    float _result = 0;
    HRESULT _hr = get_GradientDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1079)
inline _bstr_t PowerPoint::ChartFillFormat::GetTextureName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextureName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1080)
inline long PowerPoint::ChartFillFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1081)
inline IDispatchPtr PowerPoint::ChartFillFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1082)
inline PowerPoint::_ApplicationPtr PowerPoint::ChartFillFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1083)
inline HRESULT PowerPoint::ChartFillFormat::OneColorGradient ( __missing_type__ Style, long Variant, float Degree ) {
    HRESULT _hr = raw_OneColorGradient(Style, Variant, Degree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1084)
inline __missing_type__  PowerPoint::ChartFillFormat::GetGradientColorType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_GradientColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1085)
inline __missing_type__  PowerPoint::ChartFillFormat::GetGradientStyle ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_GradientStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1086)
inline long PowerPoint::ChartFillFormat::GetGradientVariant ( ) {
    long _result = 0;
    HRESULT _hr = get_GradientVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1087)
inline __missing_type__  PowerPoint::ChartFillFormat::GetPattern ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1088)
inline HRESULT PowerPoint::ChartFillFormat::Patterned ( __missing_type__ Pattern ) {
    HRESULT _hr = raw_Patterned(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1089)
inline HRESULT PowerPoint::ChartFillFormat::PresetGradient ( __missing_type__ Style, long Variant, __missing_type__ PresetGradientType ) {
    HRESULT _hr = raw_PresetGradient(Style, Variant, PresetGradientType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1090)
inline __missing_type__  PowerPoint::ChartFillFormat::GetPresetGradientType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_PresetGradientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1091)
inline __missing_type__  PowerPoint::ChartFillFormat::GetPresetTexture ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_PresetTexture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1092)
inline HRESULT PowerPoint::ChartFillFormat::PresetTextured ( __missing_type__ PresetTexture ) {
    HRESULT _hr = raw_PresetTextured(PresetTexture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1093)
inline __missing_type__  PowerPoint::ChartFillFormat::GetTextureType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_TextureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1094)
inline HRESULT PowerPoint::ChartFillFormat::TwoColorGradient ( __missing_type__ Style, long Variant ) {
    HRESULT _hr = raw_TwoColorGradient(Style, Variant);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1095)
inline __missing_type__  PowerPoint::ChartFillFormat::GetType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1096)
inline HRESULT PowerPoint::ChartFillFormat::UserPicture ( const _variant_t & PictureFile, const _variant_t & PictureFormat, const _variant_t & PictureStackUnit, const _variant_t & PicturePlacement ) {
    HRESULT _hr = raw_UserPicture(PictureFile, PictureFormat, PictureStackUnit, PicturePlacement);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1097)
inline __missing_type__  PowerPoint::ChartFillFormat::GetVisible ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1098)
inline void PowerPoint::ChartFillFormat::PutVisible ( __missing_type__ RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ChartFormat wrapper method implementations
//

#pragma implementation_key(1099)
inline PowerPoint::FillFormatPtr PowerPoint::ChartFormat::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(1100)
inline __missing_type__ PowerPoint::ChartFormat::GetGlow ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Glow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1101)
inline PowerPoint::LineFormatPtr PowerPoint::ChartFormat::GetLine ( ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(1102)
inline IDispatchPtr PowerPoint::ChartFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1103)
inline PowerPoint::PictureFormatPtr PowerPoint::ChartFormat::GetPictureFormat ( ) {
    struct PictureFormat * _result = 0;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(1104)
inline PowerPoint::ShadowFormatPtr PowerPoint::ChartFormat::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(1105)
inline __missing_type__ PowerPoint::ChartFormat::GetSoftEdge ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_SoftEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1106)
inline PowerPoint::TextFrame2Ptr PowerPoint::ChartFormat::GetTextFrame2 ( ) {
    struct TextFrame2 * _result = 0;
    HRESULT _hr = get_TextFrame2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFrame2Ptr(_result, false);
}

#pragma implementation_key(1107)
inline PowerPoint::ThreeDFormatPtr PowerPoint::ChartFormat::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(1108)
inline long PowerPoint::ChartFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1109)
inline PowerPoint::_ApplicationPtr PowerPoint::ChartFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1110)
inline PowerPoint::AdjustmentsPtr PowerPoint::ChartFormat::GetAdjustments ( ) {
    struct Adjustments * _result = 0;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

#pragma implementation_key(1111)
inline __missing_type__  PowerPoint::ChartFormat::GetAutoShapeType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1112)
inline void PowerPoint::ChartFormat::PutAutoShapeType ( __missing_type__ AutoShapeType ) {
    HRESULT _hr = put_AutoShapeType(AutoShapeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Corners wrapper method implementations
//

#pragma implementation_key(1113)
inline IDispatchPtr PowerPoint::Corners::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1114)
inline _bstr_t PowerPoint::Corners::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1115)
inline _variant_t PowerPoint::Corners::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1116)
inline long PowerPoint::Corners::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1117)
inline PowerPoint::_ApplicationPtr PowerPoint::Corners::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface DropLines wrapper method implementations
//

#pragma implementation_key(1118)
inline _bstr_t PowerPoint::DropLines::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1119)
inline IDispatchPtr PowerPoint::DropLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1120)
inline PowerPoint::ChartBorderPtr PowerPoint::DropLines::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1121)
inline PowerPoint::ChartFormatPtr PowerPoint::DropLines::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1122)
inline long PowerPoint::DropLines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1123)
inline PowerPoint::_ApplicationPtr PowerPoint::DropLines::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1124)
inline _variant_t PowerPoint::DropLines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1125)
inline _variant_t PowerPoint::DropLines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ErrorBars wrapper method implementations
//

#pragma implementation_key(1126)
inline IDispatchPtr PowerPoint::ErrorBars::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1127)
inline _bstr_t PowerPoint::ErrorBars::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1128)
inline _variant_t PowerPoint::ErrorBars::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1129)
inline PowerPoint::ChartBorderPtr PowerPoint::ErrorBars::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1130)
inline _variant_t PowerPoint::ErrorBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1131)
inline _variant_t PowerPoint::ErrorBars::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1132)
inline enum PowerPoint::XlEndStyleCap PowerPoint::ErrorBars::GetEndStyle ( ) {
    enum XlEndStyleCap _result;
    HRESULT _hr = get_EndStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1133)
inline void PowerPoint::ErrorBars::PutEndStyle ( enum XlEndStyleCap RHS ) {
    HRESULT _hr = put_EndStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1134)
inline PowerPoint::ChartFormatPtr PowerPoint::ErrorBars::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1135)
inline long PowerPoint::ErrorBars::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1136)
inline PowerPoint::_ApplicationPtr PowerPoint::ErrorBars::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface ChartFont wrapper method implementations
//

#pragma implementation_key(1137)
inline void PowerPoint::ChartFont::PutBackground ( const _variant_t & RHS ) {
    HRESULT _hr = put_Background(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1138)
inline _variant_t PowerPoint::ChartFont::GetBackground ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1139)
inline void PowerPoint::ChartFont::PutBold ( const _variant_t & RHS ) {
    HRESULT _hr = put_Bold(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1140)
inline _variant_t PowerPoint::ChartFont::GetBold ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1141)
inline void PowerPoint::ChartFont::PutColor ( const _variant_t & RHS ) {
    HRESULT _hr = put_Color(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1142)
inline _variant_t PowerPoint::ChartFont::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1143)
inline void PowerPoint::ChartFont::PutColorIndex ( const _variant_t & RHS ) {
    HRESULT _hr = put_ColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1144)
inline _variant_t PowerPoint::ChartFont::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1145)
inline void PowerPoint::ChartFont::PutFontStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_FontStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1146)
inline _variant_t PowerPoint::ChartFont::GetFontStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1147)
inline void PowerPoint::ChartFont::PutItalic ( const _variant_t & RHS ) {
    HRESULT _hr = put_Italic(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1148)
inline _variant_t PowerPoint::ChartFont::GetItalic ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1149)
inline void PowerPoint::ChartFont::PutName ( const _variant_t & RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1150)
inline _variant_t PowerPoint::ChartFont::GetName ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1151)
inline void PowerPoint::ChartFont::PutOutlineFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_OutlineFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1152)
inline _variant_t PowerPoint::ChartFont::GetOutlineFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_OutlineFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1153)
inline void PowerPoint::ChartFont::PutShadow ( const _variant_t & RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1154)
inline _variant_t PowerPoint::ChartFont::GetShadow ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1155)
inline void PowerPoint::ChartFont::PutSize ( const _variant_t & RHS ) {
    HRESULT _hr = put_Size(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1156)
inline _variant_t PowerPoint::ChartFont::GetSize ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1157)
inline void PowerPoint::ChartFont::PutStrikethrough ( const _variant_t & RHS ) {
    HRESULT _hr = put_Strikethrough(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1158)
inline _variant_t PowerPoint::ChartFont::GetStrikethrough ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Strikethrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1159)
inline void PowerPoint::ChartFont::PutSubscript ( const _variant_t & RHS ) {
    HRESULT _hr = put_Subscript(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1160)
inline _variant_t PowerPoint::ChartFont::GetSubscript ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Subscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1161)
inline void PowerPoint::ChartFont::PutSuperscript ( const _variant_t & RHS ) {
    HRESULT _hr = put_Superscript(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1162)
inline _variant_t PowerPoint::ChartFont::GetSuperscript ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Superscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1163)
inline void PowerPoint::ChartFont::PutUnderline ( const _variant_t & RHS ) {
    HRESULT _hr = put_Underline(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1164)
inline _variant_t PowerPoint::ChartFont::GetUnderline ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Underline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1165)
inline long PowerPoint::ChartFont::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1166)
inline IDispatchPtr PowerPoint::ChartFont::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1167)
inline PowerPoint::_ApplicationPtr PowerPoint::ChartFont::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface ChartCharacters wrapper method implementations
//

#pragma implementation_key(1168)
inline IDispatchPtr PowerPoint::ChartCharacters::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1169)
inline _bstr_t PowerPoint::ChartCharacters::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1170)
inline void PowerPoint::ChartCharacters::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1171)
inline long PowerPoint::ChartCharacters::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1172)
inline _variant_t PowerPoint::ChartCharacters::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1173)
inline PowerPoint::ChartFontPtr PowerPoint::ChartCharacters::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1174)
inline _variant_t PowerPoint::ChartCharacters::Insert ( _bstr_t String ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Insert(String, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1175)
inline _bstr_t PowerPoint::ChartCharacters::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1176)
inline void PowerPoint::ChartCharacters::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1177)
inline _bstr_t PowerPoint::ChartCharacters::GetPhoneticCharacters ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PhoneticCharacters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1178)
inline void PowerPoint::ChartCharacters::PutPhoneticCharacters ( _bstr_t RHS ) {
    HRESULT _hr = put_PhoneticCharacters(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1179)
inline long PowerPoint::ChartCharacters::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1180)
inline PowerPoint::_ApplicationPtr PowerPoint::ChartCharacters::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface DataTable wrapper method implementations
//

#pragma implementation_key(1181)
inline void PowerPoint::DataTable::PutShowLegendKey ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowLegendKey(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1182)
inline VARIANT_BOOL PowerPoint::DataTable::GetShowLegendKey ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1183)
inline void PowerPoint::DataTable::PutHasBorderHorizontal ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasBorderHorizontal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1184)
inline VARIANT_BOOL PowerPoint::DataTable::GetHasBorderHorizontal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBorderHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1185)
inline void PowerPoint::DataTable::PutHasBorderVertical ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasBorderVertical(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1186)
inline VARIANT_BOOL PowerPoint::DataTable::GetHasBorderVertical ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBorderVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1187)
inline void PowerPoint::DataTable::PutHasBorderOutline ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasBorderOutline(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1188)
inline VARIANT_BOOL PowerPoint::DataTable::GetHasBorderOutline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBorderOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1189)
inline PowerPoint::ChartBorderPtr PowerPoint::DataTable::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1190)
inline PowerPoint::ChartFontPtr PowerPoint::DataTable::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1191)
inline HRESULT PowerPoint::DataTable::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1192)
inline HRESULT PowerPoint::DataTable::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1193)
inline IDispatchPtr PowerPoint::DataTable::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1194)
inline _variant_t PowerPoint::DataTable::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1195)
inline void PowerPoint::DataTable::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1196)
inline PowerPoint::ChartFormatPtr PowerPoint::DataTable::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1197)
inline long PowerPoint::DataTable::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1198)
inline PowerPoint::_ApplicationPtr PowerPoint::DataTable::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface Gridlines wrapper method implementations
//

#pragma implementation_key(1199)
inline _bstr_t PowerPoint::Gridlines::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1200)
inline _variant_t PowerPoint::Gridlines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1201)
inline IDispatchPtr PowerPoint::Gridlines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1202)
inline PowerPoint::ChartBorderPtr PowerPoint::Gridlines::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1203)
inline _variant_t PowerPoint::Gridlines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1204)
inline PowerPoint::ChartFormatPtr PowerPoint::Gridlines::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1205)
inline long PowerPoint::Gridlines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1206)
inline PowerPoint::_ApplicationPtr PowerPoint::Gridlines::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface HiLoLines wrapper method implementations
//

#pragma implementation_key(1207)
inline IDispatchPtr PowerPoint::HiLoLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1208)
inline _bstr_t PowerPoint::HiLoLines::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1209)
inline PowerPoint::ChartBorderPtr PowerPoint::HiLoLines::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1210)
inline PowerPoint::ChartFormatPtr PowerPoint::HiLoLines::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1211)
inline long PowerPoint::HiLoLines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1212)
inline PowerPoint::_ApplicationPtr PowerPoint::HiLoLines::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1213)
inline _variant_t PowerPoint::HiLoLines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1214)
inline _variant_t PowerPoint::HiLoLines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface Interior wrapper method implementations
//

#pragma implementation_key(1215)
inline void PowerPoint::Interior::PutColor ( const _variant_t & RHS ) {
    HRESULT _hr = put_Color(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1216)
inline _variant_t PowerPoint::Interior::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1217)
inline void PowerPoint::Interior::PutColorIndex ( const _variant_t & RHS ) {
    HRESULT _hr = put_ColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1218)
inline _variant_t PowerPoint::Interior::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1219)
inline void PowerPoint::Interior::PutInvertIfNegative ( const _variant_t & RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1220)
inline _variant_t PowerPoint::Interior::GetInvertIfNegative ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1221)
inline void PowerPoint::Interior::PutPattern ( const _variant_t & RHS ) {
    HRESULT _hr = put_Pattern(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1222)
inline _variant_t PowerPoint::Interior::GetPattern ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1223)
inline void PowerPoint::Interior::PutPatternColor ( const _variant_t & RHS ) {
    HRESULT _hr = put_PatternColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1224)
inline _variant_t PowerPoint::Interior::GetPatternColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PatternColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1225)
inline void PowerPoint::Interior::PutPatternColorIndex ( const _variant_t & RHS ) {
    HRESULT _hr = put_PatternColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1226)
inline _variant_t PowerPoint::Interior::GetPatternColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PatternColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1227)
inline long PowerPoint::Interior::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1228)
inline IDispatchPtr PowerPoint::Interior::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1229)
inline PowerPoint::_ApplicationPtr PowerPoint::Interior::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface AxisTitle wrapper method implementations
//

#pragma implementation_key(1230)
inline void PowerPoint::AxisTitle::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1231)
inline _bstr_t PowerPoint::AxisTitle::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1232)
inline PowerPoint::ChartCharactersPtr PowerPoint::AxisTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct ChartCharacters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartCharactersPtr(_result, false);
}

#pragma implementation_key(1233)
inline PowerPoint::ChartFontPtr PowerPoint::AxisTitle::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1234)
inline void PowerPoint::AxisTitle::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1235)
inline _variant_t PowerPoint::AxisTitle::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1236)
inline double PowerPoint::AxisTitle::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1237)
inline void PowerPoint::AxisTitle::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1238)
inline void PowerPoint::AxisTitle::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1239)
inline _variant_t PowerPoint::AxisTitle::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1240)
inline VARIANT_BOOL PowerPoint::AxisTitle::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1241)
inline void PowerPoint::AxisTitle::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1242)
inline void PowerPoint::AxisTitle::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1243)
inline _bstr_t PowerPoint::AxisTitle::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1244)
inline double PowerPoint::AxisTitle::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1245)
inline void PowerPoint::AxisTitle::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1246)
inline void PowerPoint::AxisTitle::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1247)
inline _variant_t PowerPoint::AxisTitle::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1248)
inline void PowerPoint::AxisTitle::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1249)
inline _variant_t PowerPoint::AxisTitle::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1250)
inline PowerPoint::InteriorPtr PowerPoint::AxisTitle::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1251)
inline PowerPoint::ChartFillFormatPtr PowerPoint::AxisTitle::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1252)
inline _variant_t PowerPoint::AxisTitle::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1253)
inline PowerPoint::ChartBorderPtr PowerPoint::AxisTitle::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1254)
inline _bstr_t PowerPoint::AxisTitle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1255)
inline IDispatchPtr PowerPoint::AxisTitle::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1256)
inline _variant_t PowerPoint::AxisTitle::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1257)
inline VARIANT_BOOL PowerPoint::AxisTitle::GetIncludeInLayout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeInLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1258)
inline void PowerPoint::AxisTitle::PutIncludeInLayout ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludeInLayout(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1259)
inline enum PowerPoint::XlChartElementPosition PowerPoint::AxisTitle::GetPosition ( ) {
    enum XlChartElementPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1260)
inline void PowerPoint::AxisTitle::PutPosition ( enum XlChartElementPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1261)
inline PowerPoint::ChartFormatPtr PowerPoint::AxisTitle::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1262)
inline long PowerPoint::AxisTitle::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1263)
inline PowerPoint::_ApplicationPtr PowerPoint::AxisTitle::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1264)
inline long PowerPoint::AxisTitle::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1265)
inline void PowerPoint::AxisTitle::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1266)
inline double PowerPoint::AxisTitle::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1267)
inline double PowerPoint::AxisTitle::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1268)
inline void PowerPoint::AxisTitle::PutFormula ( _bstr_t pbstr ) {
    HRESULT _hr = put_Formula(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1269)
inline _bstr_t PowerPoint::AxisTitle::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1270)
inline void PowerPoint::AxisTitle::PutFormulaR1C1 ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1271)
inline _bstr_t PowerPoint::AxisTitle::GetFormulaR1C1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1272)
inline void PowerPoint::AxisTitle::PutFormulaLocal ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaLocal(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1273)
inline _bstr_t PowerPoint::AxisTitle::GetFormulaLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1274)
inline void PowerPoint::AxisTitle::PutFormulaR1C1Local ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1Local(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1275)
inline _bstr_t PowerPoint::AxisTitle::GetFormulaR1C1Local ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ChartArea wrapper method implementations
//

#pragma implementation_key(1276)
inline _bstr_t PowerPoint::ChartArea::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1277)
inline _variant_t PowerPoint::ChartArea::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1278)
inline IDispatchPtr PowerPoint::ChartArea::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1279)
inline PowerPoint::ChartBorderPtr PowerPoint::ChartArea::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1280)
inline _variant_t PowerPoint::ChartArea::Clear ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1281)
inline _variant_t PowerPoint::ChartArea::ClearContents ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearContents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1282)
inline _variant_t PowerPoint::ChartArea::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1283)
inline PowerPoint::ChartFontPtr PowerPoint::ChartArea::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1284)
inline VARIANT_BOOL PowerPoint::ChartArea::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1285)
inline void PowerPoint::ChartArea::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1286)
inline _variant_t PowerPoint::ChartArea::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1287)
inline double PowerPoint::ChartArea::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1288)
inline void PowerPoint::ChartArea::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1289)
inline PowerPoint::InteriorPtr PowerPoint::ChartArea::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1290)
inline PowerPoint::ChartFillFormatPtr PowerPoint::ChartArea::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1291)
inline double PowerPoint::ChartArea::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1292)
inline void PowerPoint::ChartArea::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1293)
inline double PowerPoint::ChartArea::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1294)
inline void PowerPoint::ChartArea::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1295)
inline double PowerPoint::ChartArea::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1296)
inline void PowerPoint::ChartArea::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1297)
inline _variant_t PowerPoint::ChartArea::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1298)
inline void PowerPoint::ChartArea::PutAutoScaleFont ( const _variant_t & pvar ) {
    HRESULT _hr = put_AutoScaleFont(pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1299)
inline PowerPoint::ChartFormatPtr PowerPoint::ChartArea::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1300)
inline long PowerPoint::ChartArea::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1301)
inline PowerPoint::_ApplicationPtr PowerPoint::ChartArea::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface ChartTitle wrapper method implementations
//

#pragma implementation_key(1302)
inline void PowerPoint::ChartTitle::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1303)
inline _bstr_t PowerPoint::ChartTitle::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1304)
inline PowerPoint::ChartCharactersPtr PowerPoint::ChartTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct ChartCharacters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartCharactersPtr(_result, false);
}

#pragma implementation_key(1305)
inline PowerPoint::ChartFontPtr PowerPoint::ChartTitle::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1306)
inline void PowerPoint::ChartTitle::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1307)
inline _variant_t PowerPoint::ChartTitle::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1308)
inline double PowerPoint::ChartTitle::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1309)
inline void PowerPoint::ChartTitle::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1310)
inline void PowerPoint::ChartTitle::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1311)
inline _variant_t PowerPoint::ChartTitle::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1312)
inline VARIANT_BOOL PowerPoint::ChartTitle::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1313)
inline void PowerPoint::ChartTitle::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1314)
inline void PowerPoint::ChartTitle::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1315)
inline _bstr_t PowerPoint::ChartTitle::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1316)
inline double PowerPoint::ChartTitle::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1317)
inline void PowerPoint::ChartTitle::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1318)
inline void PowerPoint::ChartTitle::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1319)
inline _variant_t PowerPoint::ChartTitle::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1320)
inline void PowerPoint::ChartTitle::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1321)
inline _variant_t PowerPoint::ChartTitle::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1322)
inline PowerPoint::InteriorPtr PowerPoint::ChartTitle::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1323)
inline PowerPoint::ChartFillFormatPtr PowerPoint::ChartTitle::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1324)
inline _variant_t PowerPoint::ChartTitle::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1325)
inline PowerPoint::ChartBorderPtr PowerPoint::ChartTitle::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1326)
inline _bstr_t PowerPoint::ChartTitle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1327)
inline IDispatchPtr PowerPoint::ChartTitle::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1328)
inline _variant_t PowerPoint::ChartTitle::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1329)
inline VARIANT_BOOL PowerPoint::ChartTitle::GetIncludeInLayout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeInLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1330)
inline void PowerPoint::ChartTitle::PutIncludeInLayout ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludeInLayout(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1331)
inline enum PowerPoint::XlChartElementPosition PowerPoint::ChartTitle::GetPosition ( ) {
    enum XlChartElementPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1332)
inline void PowerPoint::ChartTitle::PutPosition ( enum XlChartElementPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1333)
inline PowerPoint::ChartFormatPtr PowerPoint::ChartTitle::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1334)
inline long PowerPoint::ChartTitle::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1335)
inline PowerPoint::_ApplicationPtr PowerPoint::ChartTitle::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1336)
inline long PowerPoint::ChartTitle::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1337)
inline void PowerPoint::ChartTitle::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1338)
inline double PowerPoint::ChartTitle::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1339)
inline double PowerPoint::ChartTitle::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1340)
inline void PowerPoint::ChartTitle::PutFormula ( _bstr_t pbstr ) {
    HRESULT _hr = put_Formula(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1341)
inline _bstr_t PowerPoint::ChartTitle::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1342)
inline void PowerPoint::ChartTitle::PutFormulaR1C1 ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1343)
inline _bstr_t PowerPoint::ChartTitle::GetFormulaR1C1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1344)
inline void PowerPoint::ChartTitle::PutFormulaLocal ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaLocal(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1345)
inline _bstr_t PowerPoint::ChartTitle::GetFormulaLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1346)
inline void PowerPoint::ChartTitle::PutFormulaR1C1Local ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1Local(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1347)
inline _bstr_t PowerPoint::ChartTitle::GetFormulaR1C1Local ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface DataLabel wrapper method implementations
//

#pragma implementation_key(1348)
inline IDispatchPtr PowerPoint::DataLabel::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1349)
inline _bstr_t PowerPoint::DataLabel::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1350)
inline _variant_t PowerPoint::DataLabel::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1351)
inline PowerPoint::ChartBorderPtr PowerPoint::DataLabel::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1352)
inline _variant_t PowerPoint::DataLabel::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1353)
inline PowerPoint::InteriorPtr PowerPoint::DataLabel::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1354)
inline PowerPoint::ChartFillFormatPtr PowerPoint::DataLabel::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1355)
inline _bstr_t PowerPoint::DataLabel::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1356)
inline void PowerPoint::DataLabel::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1357)
inline PowerPoint::ChartCharactersPtr PowerPoint::DataLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct ChartCharacters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartCharactersPtr(_result, false);
}

#pragma implementation_key(1358)
inline PowerPoint::ChartFontPtr PowerPoint::DataLabel::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1359)
inline _variant_t PowerPoint::DataLabel::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1360)
inline void PowerPoint::DataLabel::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1361)
inline double PowerPoint::DataLabel::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1362)
inline void PowerPoint::DataLabel::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1363)
inline _variant_t PowerPoint::DataLabel::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1364)
inline void PowerPoint::DataLabel::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1365)
inline VARIANT_BOOL PowerPoint::DataLabel::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1366)
inline void PowerPoint::DataLabel::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1367)
inline _bstr_t PowerPoint::DataLabel::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1368)
inline void PowerPoint::DataLabel::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1369)
inline double PowerPoint::DataLabel::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1370)
inline void PowerPoint::DataLabel::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1371)
inline _variant_t PowerPoint::DataLabel::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1372)
inline void PowerPoint::DataLabel::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1373)
inline long PowerPoint::DataLabel::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1374)
inline void PowerPoint::DataLabel::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1375)
inline _variant_t PowerPoint::DataLabel::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1376)
inline void PowerPoint::DataLabel::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1377)
inline VARIANT_BOOL PowerPoint::DataLabel::GetAutoText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1378)
inline void PowerPoint::DataLabel::PutAutoText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1379)
inline _bstr_t PowerPoint::DataLabel::GetNumberFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1380)
inline void PowerPoint::DataLabel::PutNumberFormat ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1381)
inline VARIANT_BOOL PowerPoint::DataLabel::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NumberFormatLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1382)
inline void PowerPoint::DataLabel::PutNumberFormatLinked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NumberFormatLinked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1383)
inline _variant_t PowerPoint::DataLabel::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1384)
inline void PowerPoint::DataLabel::PutNumberFormatLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormatLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1385)
inline VARIANT_BOOL PowerPoint::DataLabel::GetShowLegendKey ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1386)
inline void PowerPoint::DataLabel::PutShowLegendKey ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowLegendKey(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1387)
inline _variant_t PowerPoint::DataLabel::GetType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1388)
inline void PowerPoint::DataLabel::PutType ( const _variant_t & RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1389)
inline enum PowerPoint::XlDataLabelPosition PowerPoint::DataLabel::GetPosition ( ) {
    enum XlDataLabelPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1390)
inline void PowerPoint::DataLabel::PutPosition ( enum XlDataLabelPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1391)
inline VARIANT_BOOL PowerPoint::DataLabel::GetShowSeriesName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowSeriesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1392)
inline void PowerPoint::DataLabel::PutShowSeriesName ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowSeriesName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1393)
inline VARIANT_BOOL PowerPoint::DataLabel::GetShowCategoryName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowCategoryName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1394)
inline void PowerPoint::DataLabel::PutShowCategoryName ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowCategoryName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1395)
inline VARIANT_BOOL PowerPoint::DataLabel::GetShowValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1396)
inline void PowerPoint::DataLabel::PutShowValue ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowValue(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1397)
inline VARIANT_BOOL PowerPoint::DataLabel::GetShowPercentage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowPercentage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1398)
inline void PowerPoint::DataLabel::PutShowPercentage ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowPercentage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1399)
inline VARIANT_BOOL PowerPoint::DataLabel::GetShowBubbleSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowBubbleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1400)
inline void PowerPoint::DataLabel::PutShowBubbleSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowBubbleSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1401)
inline _variant_t PowerPoint::DataLabel::GetSeparator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Separator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1402)
inline void PowerPoint::DataLabel::PutSeparator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Separator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1403)
inline PowerPoint::ChartFormatPtr PowerPoint::DataLabel::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1404)
inline long PowerPoint::DataLabel::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1405)
inline PowerPoint::_ApplicationPtr PowerPoint::DataLabel::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1406)
inline double PowerPoint::DataLabel::Get_Height ( ) {
    double _result = 0;
    HRESULT _hr = get__Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1407)
inline double PowerPoint::DataLabel::Get_Width ( ) {
    double _result = 0;
    HRESULT _hr = get__Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1408)
inline void PowerPoint::DataLabel::PutFormula ( _bstr_t pbstr ) {
    HRESULT _hr = put_Formula(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1409)
inline _bstr_t PowerPoint::DataLabel::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1410)
inline void PowerPoint::DataLabel::PutFormulaR1C1 ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1411)
inline _bstr_t PowerPoint::DataLabel::GetFormulaR1C1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1412)
inline void PowerPoint::DataLabel::PutFormulaLocal ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaLocal(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1413)
inline _bstr_t PowerPoint::DataLabel::GetFormulaLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1414)
inline void PowerPoint::DataLabel::PutFormulaR1C1Local ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1Local(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1415)
inline _bstr_t PowerPoint::DataLabel::GetFormulaR1C1Local ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1416)
inline VARIANT_BOOL PowerPoint::DataLabel::GetShowRange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1417)
inline void PowerPoint::DataLabel::PutShowRange ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowRange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1418)
inline double PowerPoint::DataLabel::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1419)
inline void PowerPoint::DataLabel::PutHeight ( double Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1420)
inline double PowerPoint::DataLabel::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1421)
inline void PowerPoint::DataLabel::PutWidth ( double Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface DataLabels wrapper method implementations
//

#pragma implementation_key(1422)
inline IDispatchPtr PowerPoint::DataLabels::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1423)
inline _bstr_t PowerPoint::DataLabels::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1424)
inline _variant_t PowerPoint::DataLabels::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1425)
inline PowerPoint::ChartBorderPtr PowerPoint::DataLabels::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1426)
inline _variant_t PowerPoint::DataLabels::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1427)
inline PowerPoint::InteriorPtr PowerPoint::DataLabels::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1428)
inline PowerPoint::ChartFillFormatPtr PowerPoint::DataLabels::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1429)
inline PowerPoint::ChartFontPtr PowerPoint::DataLabels::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1430)
inline _variant_t PowerPoint::DataLabels::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1431)
inline void PowerPoint::DataLabels::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1432)
inline _variant_t PowerPoint::DataLabels::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1433)
inline void PowerPoint::DataLabels::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1434)
inline VARIANT_BOOL PowerPoint::DataLabels::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1435)
inline void PowerPoint::DataLabels::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1436)
inline _variant_t PowerPoint::DataLabels::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1437)
inline void PowerPoint::DataLabels::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1438)
inline long PowerPoint::DataLabels::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1439)
inline void PowerPoint::DataLabels::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1440)
inline _variant_t PowerPoint::DataLabels::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1441)
inline void PowerPoint::DataLabels::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1442)
inline VARIANT_BOOL PowerPoint::DataLabels::GetAutoText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1443)
inline void PowerPoint::DataLabels::PutAutoText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1444)
inline _bstr_t PowerPoint::DataLabels::GetNumberFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1445)
inline void PowerPoint::DataLabels::PutNumberFormat ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1446)
inline VARIANT_BOOL PowerPoint::DataLabels::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NumberFormatLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1447)
inline void PowerPoint::DataLabels::PutNumberFormatLinked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NumberFormatLinked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1448)
inline _variant_t PowerPoint::DataLabels::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1449)
inline void PowerPoint::DataLabels::PutNumberFormatLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormatLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1450)
inline VARIANT_BOOL PowerPoint::DataLabels::GetShowLegendKey ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1451)
inline void PowerPoint::DataLabels::PutShowLegendKey ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowLegendKey(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1452)
inline _variant_t PowerPoint::DataLabels::GetType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1453)
inline void PowerPoint::DataLabels::PutType ( const _variant_t & RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1454)
inline enum PowerPoint::XlDataLabelPosition PowerPoint::DataLabels::GetPosition ( ) {
    enum XlDataLabelPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1455)
inline void PowerPoint::DataLabels::PutPosition ( enum XlDataLabelPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1456)
inline VARIANT_BOOL PowerPoint::DataLabels::GetShowSeriesName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowSeriesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1457)
inline void PowerPoint::DataLabels::PutShowSeriesName ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowSeriesName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1458)
inline VARIANT_BOOL PowerPoint::DataLabels::GetShowCategoryName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowCategoryName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1459)
inline void PowerPoint::DataLabels::PutShowCategoryName ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowCategoryName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1460)
inline VARIANT_BOOL PowerPoint::DataLabels::GetShowValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1461)
inline void PowerPoint::DataLabels::PutShowValue ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowValue(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1462)
inline VARIANT_BOOL PowerPoint::DataLabels::GetShowPercentage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowPercentage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1463)
inline void PowerPoint::DataLabels::PutShowPercentage ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowPercentage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1464)
inline VARIANT_BOOL PowerPoint::DataLabels::GetShowBubbleSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowBubbleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1465)
inline void PowerPoint::DataLabels::PutShowBubbleSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowBubbleSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1466)
inline _variant_t PowerPoint::DataLabels::GetSeparator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Separator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1467)
inline void PowerPoint::DataLabels::PutSeparator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Separator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1468)
inline long PowerPoint::DataLabels::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1469)
inline PowerPoint::DataLabelPtr PowerPoint::DataLabels::Item ( const _variant_t & Index ) {
    struct DataLabel * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DataLabelPtr(_result, false);
}

#pragma implementation_key(1470)
inline IUnknownPtr PowerPoint::DataLabels::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1471)
inline PowerPoint::ChartFormatPtr PowerPoint::DataLabels::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1472)
inline long PowerPoint::DataLabels::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1473)
inline PowerPoint::_ApplicationPtr PowerPoint::DataLabels::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1474)
inline PowerPoint::DataLabelPtr PowerPoint::DataLabels::_Default ( const _variant_t & Index ) {
    struct DataLabel * _result = 0;
    HRESULT _hr = raw__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DataLabelPtr(_result, false);
}

#pragma implementation_key(1475)
inline HRESULT PowerPoint::DataLabels::Propagate ( const _variant_t & Index ) {
    HRESULT _hr = raw_Propagate(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1476)
inline VARIANT_BOOL PowerPoint::DataLabels::GetShowRange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1477)
inline void PowerPoint::DataLabels::PutShowRange ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowRange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface DisplayUnitLabel wrapper method implementations
//

#pragma implementation_key(1478)
inline void PowerPoint::DisplayUnitLabel::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1479)
inline _bstr_t PowerPoint::DisplayUnitLabel::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1480)
inline PowerPoint::ChartCharactersPtr PowerPoint::DisplayUnitLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct ChartCharacters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartCharactersPtr(_result, false);
}

#pragma implementation_key(1481)
inline PowerPoint::ChartFontPtr PowerPoint::DisplayUnitLabel::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1482)
inline void PowerPoint::DisplayUnitLabel::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1483)
inline _variant_t PowerPoint::DisplayUnitLabel::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1484)
inline double PowerPoint::DisplayUnitLabel::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1485)
inline void PowerPoint::DisplayUnitLabel::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1486)
inline void PowerPoint::DisplayUnitLabel::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1487)
inline _variant_t PowerPoint::DisplayUnitLabel::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1488)
inline VARIANT_BOOL PowerPoint::DisplayUnitLabel::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1489)
inline void PowerPoint::DisplayUnitLabel::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1490)
inline void PowerPoint::DisplayUnitLabel::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1491)
inline _bstr_t PowerPoint::DisplayUnitLabel::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1492)
inline double PowerPoint::DisplayUnitLabel::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1493)
inline void PowerPoint::DisplayUnitLabel::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1494)
inline void PowerPoint::DisplayUnitLabel::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1495)
inline _variant_t PowerPoint::DisplayUnitLabel::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1496)
inline void PowerPoint::DisplayUnitLabel::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1497)
inline _variant_t PowerPoint::DisplayUnitLabel::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1498)
inline PowerPoint::InteriorPtr PowerPoint::DisplayUnitLabel::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1499)
inline PowerPoint::ChartFillFormatPtr PowerPoint::DisplayUnitLabel::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1500)
inline _variant_t PowerPoint::DisplayUnitLabel::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1501)
inline PowerPoint::ChartBorderPtr PowerPoint::DisplayUnitLabel::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1502)
inline _bstr_t PowerPoint::DisplayUnitLabel::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1503)
inline IDispatchPtr PowerPoint::DisplayUnitLabel::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1504)
inline _variant_t PowerPoint::DisplayUnitLabel::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1505)
inline enum PowerPoint::XlChartElementPosition PowerPoint::DisplayUnitLabel::GetPosition ( ) {
    enum XlChartElementPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1506)
inline void PowerPoint::DisplayUnitLabel::PutPosition ( enum XlChartElementPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1507)
inline PowerPoint::ChartFormatPtr PowerPoint::DisplayUnitLabel::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1508)
inline long PowerPoint::DisplayUnitLabel::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1509)
inline PowerPoint::_ApplicationPtr PowerPoint::DisplayUnitLabel::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1510)
inline long PowerPoint::DisplayUnitLabel::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1511)
inline void PowerPoint::DisplayUnitLabel::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1512)
inline double PowerPoint::DisplayUnitLabel::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1513)
inline double PowerPoint::DisplayUnitLabel::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1514)
inline void PowerPoint::DisplayUnitLabel::PutFormula ( _bstr_t pbstr ) {
    HRESULT _hr = put_Formula(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1515)
inline _bstr_t PowerPoint::DisplayUnitLabel::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1516)
inline void PowerPoint::DisplayUnitLabel::PutFormulaR1C1 ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1517)
inline _bstr_t PowerPoint::DisplayUnitLabel::GetFormulaR1C1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1518)
inline void PowerPoint::DisplayUnitLabel::PutFormulaLocal ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaLocal(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1519)
inline _bstr_t PowerPoint::DisplayUnitLabel::GetFormulaLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1520)
inline void PowerPoint::DisplayUnitLabel::PutFormulaR1C1Local ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1Local(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1521)
inline _bstr_t PowerPoint::DisplayUnitLabel::GetFormulaR1C1Local ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface DownBars wrapper method implementations
//

#pragma implementation_key(1522)
inline _bstr_t PowerPoint::DownBars::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1523)
inline _variant_t PowerPoint::DownBars::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1524)
inline IDispatchPtr PowerPoint::DownBars::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1525)
inline PowerPoint::ChartBorderPtr PowerPoint::DownBars::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1526)
inline _variant_t PowerPoint::DownBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1527)
inline PowerPoint::InteriorPtr PowerPoint::DownBars::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1528)
inline PowerPoint::ChartFillFormatPtr PowerPoint::DownBars::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1529)
inline PowerPoint::ChartFormatPtr PowerPoint::DownBars::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1530)
inline long PowerPoint::DownBars::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1531)
inline PowerPoint::_ApplicationPtr PowerPoint::DownBars::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface Floor wrapper method implementations
//

#pragma implementation_key(1532)
inline _bstr_t PowerPoint::Floor::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1533)
inline _variant_t PowerPoint::Floor::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1534)
inline IDispatchPtr PowerPoint::Floor::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1535)
inline PowerPoint::ChartBorderPtr PowerPoint::Floor::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1536)
inline _variant_t PowerPoint::Floor::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1537)
inline PowerPoint::InteriorPtr PowerPoint::Floor::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1538)
inline PowerPoint::ChartFillFormatPtr PowerPoint::Floor::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1539)
inline _variant_t PowerPoint::Floor::GetPictureType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1540)
inline void PowerPoint::Floor::PutPictureType ( const _variant_t & RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1541)
inline HRESULT PowerPoint::Floor::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1542)
inline long PowerPoint::Floor::GetThickness ( ) {
    long _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1543)
inline void PowerPoint::Floor::PutThickness ( long RHS ) {
    HRESULT _hr = put_Thickness(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1544)
inline PowerPoint::ChartFormatPtr PowerPoint::Floor::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1545)
inline long PowerPoint::Floor::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1546)
inline PowerPoint::_ApplicationPtr PowerPoint::Floor::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface LeaderLines wrapper method implementations
//

#pragma implementation_key(1547)
inline HRESULT PowerPoint::LeaderLines::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1548)
inline PowerPoint::ChartBorderPtr PowerPoint::LeaderLines::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1549)
inline HRESULT PowerPoint::LeaderLines::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1550)
inline PowerPoint::ChartFormatPtr PowerPoint::LeaderLines::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1551)
inline long PowerPoint::LeaderLines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1552)
inline IDispatchPtr PowerPoint::LeaderLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1553)
inline PowerPoint::_ApplicationPtr PowerPoint::LeaderLines::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface Legend wrapper method implementations
//

#pragma implementation_key(1554)
inline IDispatchPtr PowerPoint::Legend::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1555)
inline _bstr_t PowerPoint::Legend::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1556)
inline _variant_t PowerPoint::Legend::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1557)
inline PowerPoint::ChartBorderPtr PowerPoint::Legend::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1558)
inline _variant_t PowerPoint::Legend::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1559)
inline PowerPoint::ChartFontPtr PowerPoint::Legend::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1560)
inline IDispatchPtr PowerPoint::Legend::LegendEntries ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_LegendEntries(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1561)
inline enum PowerPoint::XlLegendPosition PowerPoint::Legend::GetPosition ( ) {
    enum XlLegendPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1562)
inline void PowerPoint::Legend::PutPosition ( enum XlLegendPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1563)
inline VARIANT_BOOL PowerPoint::Legend::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1564)
inline void PowerPoint::Legend::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1565)
inline _variant_t PowerPoint::Legend::Clear ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1566)
inline double PowerPoint::Legend::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1567)
inline void PowerPoint::Legend::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1568)
inline PowerPoint::InteriorPtr PowerPoint::Legend::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1569)
inline PowerPoint::ChartFillFormatPtr PowerPoint::Legend::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1570)
inline double PowerPoint::Legend::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1571)
inline void PowerPoint::Legend::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1572)
inline double PowerPoint::Legend::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1573)
inline void PowerPoint::Legend::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1574)
inline double PowerPoint::Legend::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1575)
inline void PowerPoint::Legend::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1576)
inline _variant_t PowerPoint::Legend::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1577)
inline void PowerPoint::Legend::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1578)
inline VARIANT_BOOL PowerPoint::Legend::GetIncludeInLayout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeInLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1579)
inline void PowerPoint::Legend::PutIncludeInLayout ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludeInLayout(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1580)
inline PowerPoint::ChartFormatPtr PowerPoint::Legend::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1581)
inline long PowerPoint::Legend::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1582)
inline PowerPoint::_ApplicationPtr PowerPoint::Legend::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface LegendKey wrapper method implementations
//

#pragma implementation_key(1583)
inline IDispatchPtr PowerPoint::LegendKey::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1584)
inline PowerPoint::ChartBorderPtr PowerPoint::LegendKey::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1585)
inline _variant_t PowerPoint::LegendKey::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1586)
inline _variant_t PowerPoint::LegendKey::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1587)
inline PowerPoint::InteriorPtr PowerPoint::LegendKey::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1588)
inline PowerPoint::ChartFillFormatPtr PowerPoint::LegendKey::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1589)
inline VARIANT_BOOL PowerPoint::LegendKey::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1590)
inline void PowerPoint::LegendKey::PutInvertIfNegative ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1591)
inline long PowerPoint::LegendKey::GetMarkerBackgroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1592)
inline void PowerPoint::LegendKey::PutMarkerBackgroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerBackgroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1593)
inline enum PowerPoint::XlColorIndex PowerPoint::LegendKey::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerBackgroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1594)
inline void PowerPoint::LegendKey::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerBackgroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1595)
inline long PowerPoint::LegendKey::GetMarkerForegroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1596)
inline void PowerPoint::LegendKey::PutMarkerForegroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerForegroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1597)
inline enum PowerPoint::XlColorIndex PowerPoint::LegendKey::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerForegroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1598)
inline void PowerPoint::LegendKey::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerForegroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1599)
inline long PowerPoint::LegendKey::GetMarkerSize ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1600)
inline void PowerPoint::LegendKey::PutMarkerSize ( long RHS ) {
    HRESULT _hr = put_MarkerSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1601)
inline enum PowerPoint::XlMarkerStyle PowerPoint::LegendKey::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1602)
inline void PowerPoint::LegendKey::PutMarkerStyle ( enum XlMarkerStyle RHS ) {
    HRESULT _hr = put_MarkerStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1603)
inline long PowerPoint::LegendKey::GetPictureType ( ) {
    long _result = 0;
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1604)
inline void PowerPoint::LegendKey::PutPictureType ( long RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1605)
inline _variant_t PowerPoint::LegendKey::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1606)
inline VARIANT_BOOL PowerPoint::LegendKey::GetSmooth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Smooth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1607)
inline void PowerPoint::LegendKey::PutSmooth ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Smooth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1608)
inline double PowerPoint::LegendKey::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1609)
inline double PowerPoint::LegendKey::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1610)
inline double PowerPoint::LegendKey::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1611)
inline double PowerPoint::LegendKey::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1612)
inline VARIANT_BOOL PowerPoint::LegendKey::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1613)
inline void PowerPoint::LegendKey::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1614)
inline PowerPoint::ChartFormatPtr PowerPoint::LegendKey::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1615)
inline long PowerPoint::LegendKey::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1616)
inline double PowerPoint::LegendKey::GetPictureUnit2 ( ) {
    double _result = 0;
    HRESULT _hr = get_PictureUnit2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1617)
inline void PowerPoint::LegendKey::PutPictureUnit2 ( double RHS ) {
    HRESULT _hr = put_PictureUnit2(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1618)
inline PowerPoint::_ApplicationPtr PowerPoint::LegendKey::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1619)
inline long PowerPoint::LegendKey::GetPictureUnit ( ) {
    long _result = 0;
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1620)
inline void PowerPoint::LegendKey::PutPictureUnit ( long RHS ) {
    HRESULT _hr = put_PictureUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface LegendEntry wrapper method implementations
//

#pragma implementation_key(1621)
inline IDispatchPtr PowerPoint::LegendEntry::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1622)
inline _variant_t PowerPoint::LegendEntry::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1623)
inline PowerPoint::ChartFontPtr PowerPoint::LegendEntry::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1624)
inline long PowerPoint::LegendEntry::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1625)
inline PowerPoint::LegendKeyPtr PowerPoint::LegendEntry::GetLegendKey ( ) {
    struct LegendKey * _result = 0;
    HRESULT _hr = get_LegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LegendKeyPtr(_result, false);
}

#pragma implementation_key(1626)
inline _variant_t PowerPoint::LegendEntry::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1627)
inline _variant_t PowerPoint::LegendEntry::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1628)
inline void PowerPoint::LegendEntry::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1629)
inline double PowerPoint::LegendEntry::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1630)
inline double PowerPoint::LegendEntry::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1631)
inline double PowerPoint::LegendEntry::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1632)
inline double PowerPoint::LegendEntry::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1633)
inline PowerPoint::ChartFormatPtr PowerPoint::LegendEntry::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1634)
inline long PowerPoint::LegendEntry::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1635)
inline PowerPoint::_ApplicationPtr PowerPoint::LegendEntry::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface LegendEntries wrapper method implementations
//

#pragma implementation_key(1636)
inline IDispatchPtr PowerPoint::LegendEntries::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1637)
inline long PowerPoint::LegendEntries::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1638)
inline PowerPoint::LegendEntryPtr PowerPoint::LegendEntries::Item ( const _variant_t & Index ) {
    struct LegendEntry * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LegendEntryPtr(_result, false);
}

#pragma implementation_key(1639)
inline IUnknownPtr PowerPoint::LegendEntries::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1640)
inline long PowerPoint::LegendEntries::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1641)
inline PowerPoint::_ApplicationPtr PowerPoint::LegendEntries::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1642)
inline PowerPoint::LegendEntryPtr PowerPoint::LegendEntries::_Default ( const _variant_t & Index ) {
    struct LegendEntry * _result = 0;
    HRESULT _hr = raw__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LegendEntryPtr(_result, false);
}

//
// interface PlotArea wrapper method implementations
//

#pragma implementation_key(1643)
inline _bstr_t PowerPoint::PlotArea::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1644)
inline _variant_t PowerPoint::PlotArea::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1645)
inline IDispatchPtr PowerPoint::PlotArea::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1646)
inline PowerPoint::ChartBorderPtr PowerPoint::PlotArea::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1647)
inline _variant_t PowerPoint::PlotArea::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1648)
inline double PowerPoint::PlotArea::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1649)
inline void PowerPoint::PlotArea::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1650)
inline PowerPoint::InteriorPtr PowerPoint::PlotArea::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1651)
inline PowerPoint::ChartFillFormatPtr PowerPoint::PlotArea::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1652)
inline double PowerPoint::PlotArea::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1653)
inline void PowerPoint::PlotArea::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1654)
inline double PowerPoint::PlotArea::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1655)
inline void PowerPoint::PlotArea::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1656)
inline double PowerPoint::PlotArea::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1657)
inline void PowerPoint::PlotArea::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1658)
inline double PowerPoint::PlotArea::GetInsideLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_InsideLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1659)
inline void PowerPoint::PlotArea::PutInsideLeft ( double RHS ) {
    HRESULT _hr = put_InsideLeft(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1660)
inline double PowerPoint::PlotArea::GetInsideTop ( ) {
    double _result = 0;
    HRESULT _hr = get_InsideTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1661)
inline void PowerPoint::PlotArea::PutInsideTop ( double RHS ) {
    HRESULT _hr = put_InsideTop(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1662)
inline double PowerPoint::PlotArea::GetInsideWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_InsideWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1663)
inline void PowerPoint::PlotArea::PutInsideWidth ( double RHS ) {
    HRESULT _hr = put_InsideWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1664)
inline double PowerPoint::PlotArea::GetInsideHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_InsideHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1665)
inline void PowerPoint::PlotArea::PutInsideHeight ( double RHS ) {
    HRESULT _hr = put_InsideHeight(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1666)
inline enum PowerPoint::XlChartElementPosition PowerPoint::PlotArea::GetPosition ( ) {
    enum XlChartElementPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1667)
inline void PowerPoint::PlotArea::PutPosition ( enum XlChartElementPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1668)
inline PowerPoint::ChartFormatPtr PowerPoint::PlotArea::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1669)
inline long PowerPoint::PlotArea::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1670)
inline PowerPoint::_ApplicationPtr PowerPoint::PlotArea::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface SeriesLines wrapper method implementations
//

#pragma implementation_key(1671)
inline _bstr_t PowerPoint::SeriesLines::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1672)
inline _variant_t PowerPoint::SeriesLines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1673)
inline IDispatchPtr PowerPoint::SeriesLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1674)
inline PowerPoint::ChartBorderPtr PowerPoint::SeriesLines::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1675)
inline _variant_t PowerPoint::SeriesLines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1676)
inline PowerPoint::ChartFormatPtr PowerPoint::SeriesLines::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1677)
inline long PowerPoint::SeriesLines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1678)
inline PowerPoint::_ApplicationPtr PowerPoint::SeriesLines::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface TickLabels wrapper method implementations
//

#pragma implementation_key(1679)
inline IDispatchPtr PowerPoint::TickLabels::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1680)
inline _variant_t PowerPoint::TickLabels::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1681)
inline PowerPoint::ChartFontPtr PowerPoint::TickLabels::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1682)
inline _bstr_t PowerPoint::TickLabels::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1683)
inline _bstr_t PowerPoint::TickLabels::GetNumberFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1684)
inline void PowerPoint::TickLabels::PutNumberFormat ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1685)
inline VARIANT_BOOL PowerPoint::TickLabels::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NumberFormatLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1686)
inline void PowerPoint::TickLabels::PutNumberFormatLinked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NumberFormatLinked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1687)
inline _variant_t PowerPoint::TickLabels::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1688)
inline void PowerPoint::TickLabels::PutNumberFormatLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormatLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1689)
inline enum PowerPoint::XlTickLabelOrientation PowerPoint::TickLabels::GetOrientation ( ) {
    enum XlTickLabelOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1690)
inline void PowerPoint::TickLabels::PutOrientation ( enum XlTickLabelOrientation RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1691)
inline _variant_t PowerPoint::TickLabels::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1692)
inline _variant_t PowerPoint::TickLabels::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1693)
inline void PowerPoint::TickLabels::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1694)
inline int PowerPoint::TickLabels::GetDepth ( ) {
    int _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1695)
inline int PowerPoint::TickLabels::GetOffset ( ) {
    int _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1696)
inline void PowerPoint::TickLabels::PutOffset ( int RHS ) {
    HRESULT _hr = put_Offset(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1697)
inline VARIANT_BOOL PowerPoint::TickLabels::GetMultiLevel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MultiLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1698)
inline void PowerPoint::TickLabels::PutMultiLevel ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MultiLevel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1699)
inline PowerPoint::ChartFormatPtr PowerPoint::TickLabels::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1700)
inline long PowerPoint::TickLabels::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1701)
inline PowerPoint::_ApplicationPtr PowerPoint::TickLabels::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1702)
inline long PowerPoint::TickLabels::GetAlignment ( ) {
    long _result = 0;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1703)
inline void PowerPoint::TickLabels::PutAlignment ( long RHS ) {
    HRESULT _hr = put_Alignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1704)
inline long PowerPoint::TickLabels::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1705)
inline void PowerPoint::TickLabels::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Axis wrapper method implementations
//

#pragma implementation_key(1706)
inline VARIANT_BOOL PowerPoint::Axis::GetAxisBetweenCategories ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AxisBetweenCategories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1707)
inline void PowerPoint::Axis::PutAxisBetweenCategories ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AxisBetweenCategories(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1708)
inline enum PowerPoint::XlAxisGroup PowerPoint::Axis::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    HRESULT _hr = get_AxisGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1709)
inline PowerPoint::AxisTitlePtr PowerPoint::Axis::GetAxisTitle ( ) {
    struct AxisTitle * _result = 0;
    HRESULT _hr = get_AxisTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AxisTitlePtr(_result, false);
}

#pragma implementation_key(1710)
inline _variant_t PowerPoint::Axis::GetCategoryNames ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CategoryNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1711)
inline void PowerPoint::Axis::PutCategoryNames ( const _variant_t & RHS ) {
    HRESULT _hr = put_CategoryNames(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1712)
inline enum PowerPoint::XlAxisCrosses PowerPoint::Axis::GetCrosses ( ) {
    enum XlAxisCrosses _result;
    HRESULT _hr = get_Crosses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1713)
inline void PowerPoint::Axis::PutCrosses ( enum XlAxisCrosses RHS ) {
    HRESULT _hr = put_Crosses(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1714)
inline double PowerPoint::Axis::GetCrossesAt ( ) {
    double _result = 0;
    HRESULT _hr = get_CrossesAt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1715)
inline void PowerPoint::Axis::PutCrossesAt ( double RHS ) {
    HRESULT _hr = put_CrossesAt(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1716)
inline _variant_t PowerPoint::Axis::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1717)
inline VARIANT_BOOL PowerPoint::Axis::GetHasMajorGridlines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasMajorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1718)
inline void PowerPoint::Axis::PutHasMajorGridlines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasMajorGridlines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1719)
inline VARIANT_BOOL PowerPoint::Axis::GetHasMinorGridlines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasMinorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1720)
inline void PowerPoint::Axis::PutHasMinorGridlines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasMinorGridlines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1721)
inline VARIANT_BOOL PowerPoint::Axis::GetHasTitle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1722)
inline void PowerPoint::Axis::PutHasTitle ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasTitle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1723)
inline PowerPoint::GridlinesPtr PowerPoint::Axis::GetMajorGridlines ( ) {
    struct Gridlines * _result = 0;
    HRESULT _hr = get_MajorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GridlinesPtr(_result, false);
}

#pragma implementation_key(1724)
inline enum PowerPoint::XlTickMark PowerPoint::Axis::GetMajorTickMark ( ) {
    enum XlTickMark _result;
    HRESULT _hr = get_MajorTickMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1725)
inline void PowerPoint::Axis::PutMajorTickMark ( enum XlTickMark RHS ) {
    HRESULT _hr = put_MajorTickMark(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1726)
inline double PowerPoint::Axis::GetMajorUnit ( ) {
    double _result = 0;
    HRESULT _hr = get_MajorUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1727)
inline void PowerPoint::Axis::PutMajorUnit ( double RHS ) {
    HRESULT _hr = put_MajorUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1728)
inline double PowerPoint::Axis::GetLogBase ( ) {
    double _result = 0;
    HRESULT _hr = get_LogBase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1729)
inline void PowerPoint::Axis::PutLogBase ( double RHS ) {
    HRESULT _hr = put_LogBase(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1730)
inline VARIANT_BOOL PowerPoint::Axis::GetTickLabelSpacingIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TickLabelSpacingIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1731)
inline void PowerPoint::Axis::PutTickLabelSpacingIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TickLabelSpacingIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1732)
inline VARIANT_BOOL PowerPoint::Axis::GetMajorUnitIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MajorUnitIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1733)
inline void PowerPoint::Axis::PutMajorUnitIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MajorUnitIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1734)
inline double PowerPoint::Axis::GetMaximumScale ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1735)
inline void PowerPoint::Axis::PutMaximumScale ( double RHS ) {
    HRESULT _hr = put_MaximumScale(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1736)
inline VARIANT_BOOL PowerPoint::Axis::GetMaximumScaleIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MaximumScaleIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1737)
inline void PowerPoint::Axis::PutMaximumScaleIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MaximumScaleIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1738)
inline double PowerPoint::Axis::GetMinimumScale ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1739)
inline void PowerPoint::Axis::PutMinimumScale ( double RHS ) {
    HRESULT _hr = put_MinimumScale(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1740)
inline VARIANT_BOOL PowerPoint::Axis::GetMinimumScaleIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MinimumScaleIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1741)
inline void PowerPoint::Axis::PutMinimumScaleIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MinimumScaleIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1742)
inline PowerPoint::GridlinesPtr PowerPoint::Axis::GetMinorGridlines ( ) {
    struct Gridlines * _result = 0;
    HRESULT _hr = get_MinorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GridlinesPtr(_result, false);
}

#pragma implementation_key(1743)
inline enum PowerPoint::XlTickMark PowerPoint::Axis::GetMinorTickMark ( ) {
    enum XlTickMark _result;
    HRESULT _hr = get_MinorTickMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1744)
inline void PowerPoint::Axis::PutMinorTickMark ( enum XlTickMark RHS ) {
    HRESULT _hr = put_MinorTickMark(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1745)
inline double PowerPoint::Axis::GetMinorUnit ( ) {
    double _result = 0;
    HRESULT _hr = get_MinorUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1746)
inline void PowerPoint::Axis::PutMinorUnit ( double RHS ) {
    HRESULT _hr = put_MinorUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1747)
inline VARIANT_BOOL PowerPoint::Axis::GetMinorUnitIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MinorUnitIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1748)
inline void PowerPoint::Axis::PutMinorUnitIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MinorUnitIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1749)
inline VARIANT_BOOL PowerPoint::Axis::GetReversePlotOrder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReversePlotOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1750)
inline void PowerPoint::Axis::PutReversePlotOrder ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ReversePlotOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1751)
inline enum PowerPoint::XlScaleType PowerPoint::Axis::GetScaleType ( ) {
    enum XlScaleType _result;
    HRESULT _hr = get_ScaleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1752)
inline void PowerPoint::Axis::PutScaleType ( enum XlScaleType RHS ) {
    HRESULT _hr = put_ScaleType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1753)
inline _variant_t PowerPoint::Axis::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1754)
inline enum PowerPoint::XlTickLabelPosition PowerPoint::Axis::GetTickLabelPosition ( ) {
    enum XlTickLabelPosition _result;
    HRESULT _hr = get_TickLabelPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1755)
inline void PowerPoint::Axis::PutTickLabelPosition ( enum XlTickLabelPosition RHS ) {
    HRESULT _hr = put_TickLabelPosition(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1756)
inline PowerPoint::TickLabelsPtr PowerPoint::Axis::GetTickLabels ( ) {
    struct TickLabels * _result = 0;
    HRESULT _hr = get_TickLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TickLabelsPtr(_result, false);
}

#pragma implementation_key(1757)
inline long PowerPoint::Axis::GetTickLabelSpacing ( ) {
    long _result = 0;
    HRESULT _hr = get_TickLabelSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1758)
inline void PowerPoint::Axis::PutTickLabelSpacing ( long RHS ) {
    HRESULT _hr = put_TickLabelSpacing(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1759)
inline long PowerPoint::Axis::GetTickMarkSpacing ( ) {
    long _result = 0;
    HRESULT _hr = get_TickMarkSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1760)
inline void PowerPoint::Axis::PutTickMarkSpacing ( long RHS ) {
    HRESULT _hr = put_TickMarkSpacing(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1761)
inline enum PowerPoint::XlAxisType PowerPoint::Axis::GetType ( ) {
    enum XlAxisType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1762)
inline void PowerPoint::Axis::PutType ( enum XlAxisType RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1763)
inline enum PowerPoint::XlTimeUnit PowerPoint::Axis::GetBaseUnit ( ) {
    enum XlTimeUnit _result;
    HRESULT _hr = get_BaseUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1764)
inline void PowerPoint::Axis::PutBaseUnit ( enum XlTimeUnit RHS ) {
    HRESULT _hr = put_BaseUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1765)
inline VARIANT_BOOL PowerPoint::Axis::GetBaseUnitIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BaseUnitIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1766)
inline void PowerPoint::Axis::PutBaseUnitIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_BaseUnitIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1767)
inline enum PowerPoint::XlTimeUnit PowerPoint::Axis::GetMajorUnitScale ( ) {
    enum XlTimeUnit _result;
    HRESULT _hr = get_MajorUnitScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1768)
inline void PowerPoint::Axis::PutMajorUnitScale ( enum XlTimeUnit RHS ) {
    HRESULT _hr = put_MajorUnitScale(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1769)
inline enum PowerPoint::XlTimeUnit PowerPoint::Axis::GetMinorUnitScale ( ) {
    enum XlTimeUnit _result;
    HRESULT _hr = get_MinorUnitScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1770)
inline void PowerPoint::Axis::PutMinorUnitScale ( enum XlTimeUnit RHS ) {
    HRESULT _hr = put_MinorUnitScale(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1771)
inline enum PowerPoint::XlCategoryType PowerPoint::Axis::GetCategoryType ( ) {
    enum XlCategoryType _result;
    HRESULT _hr = get_CategoryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1772)
inline void PowerPoint::Axis::PutCategoryType ( enum XlCategoryType RHS ) {
    HRESULT _hr = put_CategoryType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1773)
inline double PowerPoint::Axis::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1774)
inline double PowerPoint::Axis::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1775)
inline double PowerPoint::Axis::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1776)
inline double PowerPoint::Axis::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1777)
inline enum PowerPoint::XlDisplayUnit PowerPoint::Axis::GetDisplayUnit ( ) {
    enum XlDisplayUnit _result;
    HRESULT _hr = get_DisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1778)
inline void PowerPoint::Axis::PutDisplayUnit ( enum XlDisplayUnit RHS ) {
    HRESULT _hr = put_DisplayUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1779)
inline double PowerPoint::Axis::GetDisplayUnitCustom ( ) {
    double _result = 0;
    HRESULT _hr = get_DisplayUnitCustom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1780)
inline void PowerPoint::Axis::PutDisplayUnitCustom ( double RHS ) {
    HRESULT _hr = put_DisplayUnitCustom(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1781)
inline VARIANT_BOOL PowerPoint::Axis::GetHasDisplayUnitLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDisplayUnitLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1782)
inline void PowerPoint::Axis::PutHasDisplayUnitLabel ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDisplayUnitLabel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1783)
inline PowerPoint::DisplayUnitLabelPtr PowerPoint::Axis::GetDisplayUnitLabel ( ) {
    struct DisplayUnitLabel * _result = 0;
    HRESULT _hr = get_DisplayUnitLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DisplayUnitLabelPtr(_result, false);
}

#pragma implementation_key(1784)
inline PowerPoint::ChartBorderPtr PowerPoint::Axis::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1785)
inline PowerPoint::ChartFormatPtr PowerPoint::Axis::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1786)
inline long PowerPoint::Axis::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1787)
inline IDispatchPtr PowerPoint::Axis::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1788)
inline PowerPoint::_ApplicationPtr PowerPoint::Axis::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface Axes wrapper method implementations
//

#pragma implementation_key(1789)
inline long PowerPoint::Axes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1790)
inline long PowerPoint::Axes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1791)
inline IDispatchPtr PowerPoint::Axes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1792)
inline PowerPoint::_ApplicationPtr PowerPoint::Axes::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1793)
inline PowerPoint::AxisPtr PowerPoint::Axes::Item ( enum XlAxisType Type, enum XlAxisGroup AxisGroup ) {
    struct Axis * _result = 0;
    HRESULT _hr = raw_Item(Type, AxisGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AxisPtr(_result, false);
}

#pragma implementation_key(1794)
inline IUnknownPtr PowerPoint::Axes::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1795)
inline PowerPoint::AxisPtr PowerPoint::Axes::_Default ( enum XlAxisType Type, enum XlAxisGroup AxisGroup ) {
    struct Axis * _result = 0;
    HRESULT _hr = raw__Default(Type, AxisGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AxisPtr(_result, false);
}

//
// interface Trendline wrapper method implementations
//

#pragma implementation_key(1796)
inline IDispatchPtr PowerPoint::Trendline::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1797)
inline PowerPoint::ChartBorderPtr PowerPoint::Trendline::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1798)
inline _variant_t PowerPoint::Trendline::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1799)
inline PowerPoint::DataLabelPtr PowerPoint::Trendline::GetDataLabel ( ) {
    struct DataLabel * _result = 0;
    HRESULT _hr = get_DataLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DataLabelPtr(_result, false);
}

#pragma implementation_key(1800)
inline _variant_t PowerPoint::Trendline::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1801)
inline VARIANT_BOOL PowerPoint::Trendline::GetDisplayEquation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayEquation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1802)
inline void PowerPoint::Trendline::PutDisplayEquation ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayEquation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1803)
inline VARIANT_BOOL PowerPoint::Trendline::GetDisplayRSquared ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayRSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1804)
inline void PowerPoint::Trendline::PutDisplayRSquared ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayRSquared(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1805)
inline long PowerPoint::Trendline::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1806)
inline double PowerPoint::Trendline::GetIntercept ( ) {
    double _result = 0;
    HRESULT _hr = get_Intercept(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1807)
inline void PowerPoint::Trendline::PutIntercept ( double RHS ) {
    HRESULT _hr = put_Intercept(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1808)
inline VARIANT_BOOL PowerPoint::Trendline::GetInterceptIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InterceptIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1809)
inline void PowerPoint::Trendline::PutInterceptIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InterceptIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1810)
inline _bstr_t PowerPoint::Trendline::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1811)
inline void PowerPoint::Trendline::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1812)
inline VARIANT_BOOL PowerPoint::Trendline::GetNameIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NameIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1813)
inline void PowerPoint::Trendline::PutNameIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NameIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1814)
inline long PowerPoint::Trendline::GetOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_Order(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1815)
inline void PowerPoint::Trendline::PutOrder ( long RHS ) {
    HRESULT _hr = put_Order(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1816)
inline long PowerPoint::Trendline::GetPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_Period(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1817)
inline void PowerPoint::Trendline::PutPeriod ( long RHS ) {
    HRESULT _hr = put_Period(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1818)
inline _variant_t PowerPoint::Trendline::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1819)
inline enum PowerPoint::XlTrendlineType PowerPoint::Trendline::GetType ( ) {
    enum XlTrendlineType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1820)
inline void PowerPoint::Trendline::PutType ( enum XlTrendlineType RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1821)
inline PowerPoint::ChartFormatPtr PowerPoint::Trendline::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1822)
inline long PowerPoint::Trendline::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1823)
inline double PowerPoint::Trendline::GetBackward2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Backward2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1824)
inline void PowerPoint::Trendline::PutBackward2 ( double RHS ) {
    HRESULT _hr = put_Backward2(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1825)
inline double PowerPoint::Trendline::GetForward2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Forward2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1826)
inline void PowerPoint::Trendline::PutForward2 ( double RHS ) {
    HRESULT _hr = put_Forward2(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1827)
inline PowerPoint::_ApplicationPtr PowerPoint::Trendline::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1828)
inline long PowerPoint::Trendline::GetBackward ( ) {
    long _result = 0;
    HRESULT _hr = get_Backward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1829)
inline void PowerPoint::Trendline::PutBackward ( long RHS ) {
    HRESULT _hr = put_Backward(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1830)
inline long PowerPoint::Trendline::GetForward ( ) {
    long _result = 0;
    HRESULT _hr = get_Forward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1831)
inline void PowerPoint::Trendline::PutForward ( long RHS ) {
    HRESULT _hr = put_Forward(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Trendlines wrapper method implementations
//

#pragma implementation_key(1832)
inline IDispatchPtr PowerPoint::Trendlines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1833)
inline PowerPoint::TrendlinePtr PowerPoint::Trendlines::Add ( enum XlTrendlineType Type, const _variant_t & Order, const _variant_t & Period, const _variant_t & Forward, const _variant_t & Backward, const _variant_t & Intercept, const _variant_t & DisplayEquation, const _variant_t & DisplayRSquared, const _variant_t & Name ) {
    struct Trendline * _result = 0;
    HRESULT _hr = raw_Add(Type, Order, Period, Forward, Backward, Intercept, DisplayEquation, DisplayRSquared, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TrendlinePtr(_result, false);
}

#pragma implementation_key(1834)
inline long PowerPoint::Trendlines::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1835)
inline PowerPoint::TrendlinePtr PowerPoint::Trendlines::Item ( const _variant_t & Index ) {
    struct Trendline * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TrendlinePtr(_result, false);
}

#pragma implementation_key(1836)
inline IUnknownPtr PowerPoint::Trendlines::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1837)
inline long PowerPoint::Trendlines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1838)
inline PowerPoint::_ApplicationPtr PowerPoint::Trendlines::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1839)
inline PowerPoint::TrendlinePtr PowerPoint::Trendlines::_Default ( const _variant_t & Index ) {
    struct Trendline * _result = 0;
    HRESULT _hr = raw__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TrendlinePtr(_result, false);
}

//
// interface UpBars wrapper method implementations
//

#pragma implementation_key(1840)
inline _bstr_t PowerPoint::UpBars::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1841)
inline _variant_t PowerPoint::UpBars::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1842)
inline IDispatchPtr PowerPoint::UpBars::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1843)
inline PowerPoint::ChartBorderPtr PowerPoint::UpBars::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1844)
inline _variant_t PowerPoint::UpBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1845)
inline PowerPoint::InteriorPtr PowerPoint::UpBars::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1846)
inline PowerPoint::ChartFillFormatPtr PowerPoint::UpBars::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1847)
inline PowerPoint::ChartFormatPtr PowerPoint::UpBars::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1848)
inline long PowerPoint::UpBars::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1849)
inline PowerPoint::_ApplicationPtr PowerPoint::UpBars::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface Walls wrapper method implementations
//

#pragma implementation_key(1850)
inline _bstr_t PowerPoint::Walls::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1851)
inline _variant_t PowerPoint::Walls::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1852)
inline IDispatchPtr PowerPoint::Walls::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1853)
inline PowerPoint::ChartBorderPtr PowerPoint::Walls::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(1854)
inline _variant_t PowerPoint::Walls::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1855)
inline PowerPoint::InteriorPtr PowerPoint::Walls::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1856)
inline PowerPoint::ChartFillFormatPtr PowerPoint::Walls::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1857)
inline _variant_t PowerPoint::Walls::GetPictureType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1858)
inline void PowerPoint::Walls::PutPictureType ( const _variant_t & pvar ) {
    HRESULT _hr = put_PictureType(pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1859)
inline HRESULT PowerPoint::Walls::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1860)
inline _variant_t PowerPoint::Walls::GetPictureUnit ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1861)
inline void PowerPoint::Walls::PutPictureUnit ( const _variant_t & pvar ) {
    HRESULT _hr = put_PictureUnit(pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1862)
inline long PowerPoint::Walls::GetThickness ( ) {
    long _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1863)
inline void PowerPoint::Walls::PutThickness ( long RHS ) {
    HRESULT _hr = put_Thickness(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1864)
inline PowerPoint::ChartFormatPtr PowerPoint::Walls::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(1865)
inline long PowerPoint::Walls::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1866)
inline PowerPoint::_ApplicationPtr PowerPoint::Walls::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface SectionProperties wrapper method implementations
//

#pragma implementation_key(1867)
inline PowerPoint::_ApplicationPtr PowerPoint::SectionProperties::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1868)
inline IDispatchPtr PowerPoint::SectionProperties::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1869)
inline long PowerPoint::SectionProperties::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1870)
inline _bstr_t PowerPoint::SectionProperties::Name ( int sectionIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Name(sectionIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1871)
inline HRESULT PowerPoint::SectionProperties::Rename ( int sectionIndex, _bstr_t sectionName ) {
    HRESULT _hr = raw_Rename(sectionIndex, sectionName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1872)
inline long PowerPoint::SectionProperties::SlidesCount ( int sectionIndex ) {
    long _result = 0;
    HRESULT _hr = raw_SlidesCount(sectionIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1873)
inline int PowerPoint::SectionProperties::FirstSlide ( int sectionIndex ) {
    int _result = 0;
    HRESULT _hr = raw_FirstSlide(sectionIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1874)
inline int PowerPoint::SectionProperties::AddBeforeSlide ( int SlideIndex, _bstr_t sectionName ) {
    int _result = 0;
    HRESULT _hr = raw_AddBeforeSlide(SlideIndex, sectionName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1875)
inline int PowerPoint::SectionProperties::AddSection ( int sectionIndex, const _variant_t & sectionName ) {
    int _result = 0;
    HRESULT _hr = raw_AddSection(sectionIndex, sectionName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1876)
inline HRESULT PowerPoint::SectionProperties::Move ( int sectionIndex, int toPos ) {
    HRESULT _hr = raw_Move(sectionIndex, toPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1877)
inline HRESULT PowerPoint::SectionProperties::Delete ( int sectionIndex, VARIANT_BOOL deleteSlides ) {
    HRESULT _hr = raw_Delete(sectionIndex, deleteSlides);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1878)
inline _bstr_t PowerPoint::SectionProperties::SectionID ( int sectionIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SectionID(sectionIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface Player wrapper method implementations
//

#pragma implementation_key(1879)
inline PowerPoint::_ApplicationPtr PowerPoint::Player::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1880)
inline IDispatchPtr PowerPoint::Player::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1881)
inline HRESULT PowerPoint::Player::Play ( ) {
    HRESULT _hr = raw_Play();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1882)
inline HRESULT PowerPoint::Player::Pause ( ) {
    HRESULT _hr = raw_Pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1883)
inline HRESULT PowerPoint::Player::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1884)
inline HRESULT PowerPoint::Player::GoToNextBookmark ( ) {
    HRESULT _hr = raw_GoToNextBookmark();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1885)
inline HRESULT PowerPoint::Player::GoToPreviousBookmark ( ) {
    HRESULT _hr = raw_GoToPreviousBookmark();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1886)
inline long PowerPoint::Player::GetCurrentPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_CurrentPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1887)
inline void PowerPoint::Player::PutCurrentPosition ( long CurrentPosition ) {
    HRESULT _hr = put_CurrentPosition(CurrentPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1888)
inline enum PowerPoint::PpPlayerState PowerPoint::Player::GetState ( ) {
    enum PpPlayerState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface View wrapper method implementations
//

#pragma implementation_key(1889)
inline PowerPoint::_ApplicationPtr PowerPoint::View::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1890)
inline IDispatchPtr PowerPoint::View::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1891)
inline enum PowerPoint::PpViewType PowerPoint::View::GetType ( ) {
    enum PpViewType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1892)
inline int PowerPoint::View::GetZoom ( ) {
    int _result = 0;
    HRESULT _hr = get_Zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1893)
inline void PowerPoint::View::PutZoom ( int Zoom ) {
    HRESULT _hr = put_Zoom(Zoom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1894)
inline HRESULT PowerPoint::View::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1895)
inline IDispatchPtr PowerPoint::View::GetSlide ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Slide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1896)
inline void PowerPoint::View::PutSlide ( IDispatch * Slide ) {
    HRESULT _hr = put_Slide(Slide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1897)
inline HRESULT PowerPoint::View::GotoSlide ( int Index ) {
    HRESULT _hr = raw_GotoSlide(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1898)
inline __missing_type__  PowerPoint::View::GetDisplaySlideMiniature ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_DisplaySlideMiniature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1899)
inline void PowerPoint::View::PutDisplaySlideMiniature ( __missing_type__ DisplaySlideMiniature ) {
    HRESULT _hr = put_DisplaySlideMiniature(DisplaySlideMiniature);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1900)
inline __missing_type__  PowerPoint::View::GetZoomToFit ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ZoomToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1901)
inline void PowerPoint::View::PutZoomToFit ( __missing_type__ ZoomToFit ) {
    HRESULT _hr = put_ZoomToFit(ZoomToFit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1902)
inline HRESULT PowerPoint::View::PasteSpecial ( enum PpPasteDataType DataType, __missing_type__ DisplayAsIcon, _bstr_t IconFileName, int IconIndex, _bstr_t IconLabel, __missing_type__ Link ) {
    HRESULT _hr = raw_PasteSpecial(DataType, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Link);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1903)
inline PowerPoint::PrintOptionsPtr PowerPoint::View::GetPrintOptions ( ) {
    struct PrintOptions * _result = 0;
    HRESULT _hr = get_PrintOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PrintOptionsPtr(_result, false);
}

#pragma implementation_key(1904)
inline HRESULT PowerPoint::View::PrintOut ( int From, int To, _bstr_t PrintToFile, int Copies, __missing_type__ Collate ) {
    HRESULT _hr = raw_PrintOut(From, To, PrintToFile, Copies, Collate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1905)
inline PowerPoint::PlayerPtr PowerPoint::View::Player ( const _variant_t & ShapeId ) {
    struct Player * _result = 0;
    HRESULT _hr = raw_Player(ShapeId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlayerPtr(_result, false);
}

#pragma implementation_key(1906)
inline __missing_type__  PowerPoint::View::GetMediaControlsVisible ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_MediaControlsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1907)
inline float PowerPoint::View::GetMediaControlsLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_MediaControlsLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1908)
inline float PowerPoint::View::GetMediaControlsTop ( ) {
    float _result = 0;
    HRESULT _hr = get_MediaControlsTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1909)
inline float PowerPoint::View::GetMediaControlsWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_MediaControlsWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1910)
inline float PowerPoint::View::GetMediaControlsHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_MediaControlsHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SlideShowView wrapper method implementations
//

#pragma implementation_key(1911)
inline PowerPoint::_ApplicationPtr PowerPoint::SlideShowView::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1912)
inline IDispatchPtr PowerPoint::SlideShowView::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1913)
inline int PowerPoint::SlideShowView::GetZoom ( ) {
    int _result = 0;
    HRESULT _hr = get_Zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1914)
inline PowerPoint::_SlidePtr PowerPoint::SlideShowView::GetSlide ( ) {
    struct _Slide * _result = 0;
    HRESULT _hr = get_Slide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

#pragma implementation_key(1915)
inline enum PowerPoint::PpSlideShowPointerType PowerPoint::SlideShowView::GetPointerType ( ) {
    enum PpSlideShowPointerType _result;
    HRESULT _hr = get_PointerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1916)
inline void PowerPoint::SlideShowView::PutPointerType ( enum PpSlideShowPointerType PointerType ) {
    HRESULT _hr = put_PointerType(PointerType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1917)
inline enum PowerPoint::PpSlideShowState PowerPoint::SlideShowView::GetState ( ) {
    enum PpSlideShowState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1918)
inline void PowerPoint::SlideShowView::PutState ( enum PpSlideShowState State ) {
    HRESULT _hr = put_State(State);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1919)
inline __missing_type__  PowerPoint::SlideShowView::GetAcceleratorsEnabled ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AcceleratorsEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1920)
inline void PowerPoint::SlideShowView::PutAcceleratorsEnabled ( __missing_type__ AcceleratorsEnabled ) {
    HRESULT _hr = put_AcceleratorsEnabled(AcceleratorsEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1921)
inline float PowerPoint::SlideShowView::GetPresentationElapsedTime ( ) {
    float _result = 0;
    HRESULT _hr = get_PresentationElapsedTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1922)
inline float PowerPoint::SlideShowView::GetSlideElapsedTime ( ) {
    float _result = 0;
    HRESULT _hr = get_SlideElapsedTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1923)
inline void PowerPoint::SlideShowView::PutSlideElapsedTime ( float SlideElapsedTime ) {
    HRESULT _hr = put_SlideElapsedTime(SlideElapsedTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1924)
inline PowerPoint::_SlidePtr PowerPoint::SlideShowView::GetLastSlideViewed ( ) {
    struct _Slide * _result = 0;
    HRESULT _hr = get_LastSlideViewed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

#pragma implementation_key(1925)
inline enum PowerPoint::PpSlideShowAdvanceMode PowerPoint::SlideShowView::GetAdvanceMode ( ) {
    enum PpSlideShowAdvanceMode _result;
    HRESULT _hr = get_AdvanceMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1926)
inline PowerPoint::ColorFormatPtr PowerPoint::SlideShowView::GetPointerColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_PointerColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(1927)
inline __missing_type__  PowerPoint::SlideShowView::GetIsNamedShow ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_IsNamedShow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1928)
inline _bstr_t PowerPoint::SlideShowView::GetSlideShowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlideShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1929)
inline HRESULT PowerPoint::SlideShowView::DrawLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    HRESULT _hr = raw_DrawLine(BeginX, BeginY, EndX, EndY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1930)
inline HRESULT PowerPoint::SlideShowView::EraseDrawing ( ) {
    HRESULT _hr = raw_EraseDrawing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1931)
inline HRESULT PowerPoint::SlideShowView::First ( ) {
    HRESULT _hr = raw_First();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1932)
inline HRESULT PowerPoint::SlideShowView::Last ( ) {
    HRESULT _hr = raw_Last();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1933)
inline HRESULT PowerPoint::SlideShowView::Next ( ) {
    HRESULT _hr = raw_Next();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1934)
inline HRESULT PowerPoint::SlideShowView::Previous ( ) {
    HRESULT _hr = raw_Previous();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1935)
inline HRESULT PowerPoint::SlideShowView::GotoSlide ( int Index, __missing_type__ ResetSlide ) {
    HRESULT _hr = raw_GotoSlide(Index, ResetSlide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1936)
inline HRESULT PowerPoint::SlideShowView::GotoNamedShow ( _bstr_t SlideShowName ) {
    HRESULT _hr = raw_GotoNamedShow(SlideShowName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1937)
inline HRESULT PowerPoint::SlideShowView::EndNamedShow ( ) {
    HRESULT _hr = raw_EndNamedShow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1938)
inline HRESULT PowerPoint::SlideShowView::ResetSlideTime ( ) {
    HRESULT _hr = raw_ResetSlideTime();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1939)
inline HRESULT PowerPoint::SlideShowView::Exit ( ) {
    HRESULT _hr = raw_Exit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1940)
inline HRESULT PowerPoint::SlideShowView::InstallTracker ( struct MouseTracker * pTracker, __missing_type__ Presenter ) {
    HRESULT _hr = raw_InstallTracker(pTracker, Presenter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1941)
inline int PowerPoint::SlideShowView::GetCurrentShowPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_CurrentShowPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1942)
inline HRESULT PowerPoint::SlideShowView::GotoClick ( int Index ) {
    HRESULT _hr = raw_GotoClick(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1943)
inline int PowerPoint::SlideShowView::GetClickIndex ( ) {
    int _result = 0;
    HRESULT _hr = raw_GetClickIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1944)
inline int PowerPoint::SlideShowView::GetClickCount ( ) {
    int _result = 0;
    HRESULT _hr = raw_GetClickCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1945)
inline VARIANT_BOOL PowerPoint::SlideShowView::FirstAnimationIsAutomatic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_FirstAnimationIsAutomatic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1946)
inline PowerPoint::PlayerPtr PowerPoint::SlideShowView::Player ( const _variant_t & ShapeId ) {
    struct Player * _result = 0;
    HRESULT _hr = raw_Player(ShapeId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlayerPtr(_result, false);
}

#pragma implementation_key(1947)
inline __missing_type__  PowerPoint::SlideShowView::GetMediaControlsVisible ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_MediaControlsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1948)
inline float PowerPoint::SlideShowView::GetMediaControlsLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_MediaControlsLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1949)
inline float PowerPoint::SlideShowView::GetMediaControlsTop ( ) {
    float _result = 0;
    HRESULT _hr = get_MediaControlsTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1950)
inline float PowerPoint::SlideShowView::GetMediaControlsWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_MediaControlsWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1951)
inline float PowerPoint::SlideShowView::GetMediaControlsHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_MediaControlsHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1952)
inline VARIANT_BOOL PowerPoint::SlideShowView::GetLaserPointerEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LaserPointerEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1953)
inline void PowerPoint::SlideShowView::PutLaserPointerEnabled ( VARIANT_BOOL LaserPointerEnabled ) {
    HRESULT _hr = put_LaserPointerEnabled(LaserPointerEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface MediaBookmark wrapper method implementations
//

#pragma implementation_key(1954)
inline int PowerPoint::MediaBookmark::GetIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1955)
inline _bstr_t PowerPoint::MediaBookmark::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1956)
inline long PowerPoint::MediaBookmark::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1957)
inline HRESULT PowerPoint::MediaBookmark::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface MediaBookmarks wrapper method implementations
//

#pragma implementation_key(1958)
inline PowerPoint::MediaBookmarkPtr PowerPoint::MediaBookmarks::Item ( int Index ) {
    struct MediaBookmark * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MediaBookmarkPtr(_result, false);
}

#pragma implementation_key(1959)
inline PowerPoint::MediaBookmarkPtr PowerPoint::MediaBookmarks::Add ( long Position, _bstr_t Name ) {
    struct MediaBookmark * _result = 0;
    HRESULT _hr = raw_Add(Position, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MediaBookmarkPtr(_result, false);
}

//
// interface MediaFormat wrapper method implementations
//

#pragma implementation_key(1960)
inline PowerPoint::_ApplicationPtr PowerPoint::MediaFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1961)
inline IDispatchPtr PowerPoint::MediaFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1962)
inline float PowerPoint::MediaFormat::GetVolume ( ) {
    float _result = 0;
    HRESULT _hr = get_Volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1963)
inline void PowerPoint::MediaFormat::PutVolume ( float Volume ) {
    HRESULT _hr = put_Volume(Volume);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1964)
inline VARIANT_BOOL PowerPoint::MediaFormat::GetMuted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Muted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1965)
inline void PowerPoint::MediaFormat::PutMuted ( VARIANT_BOOL Muted ) {
    HRESULT _hr = put_Muted(Muted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1966)
inline long PowerPoint::MediaFormat::GetLength ( ) {
    long _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1967)
inline long PowerPoint::MediaFormat::GetStartPoint ( ) {
    long _result = 0;
    HRESULT _hr = get_StartPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1968)
inline void PowerPoint::MediaFormat::PutStartPoint ( long StartPoint ) {
    HRESULT _hr = put_StartPoint(StartPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1969)
inline long PowerPoint::MediaFormat::GetEndPoint ( ) {
    long _result = 0;
    HRESULT _hr = get_EndPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1970)
inline void PowerPoint::MediaFormat::PutEndPoint ( long EndPoint ) {
    HRESULT _hr = put_EndPoint(EndPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1971)
inline long PowerPoint::MediaFormat::GetFadeInDuration ( ) {
    long _result = 0;
    HRESULT _hr = get_FadeInDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1972)
inline void PowerPoint::MediaFormat::PutFadeInDuration ( long FadeInDuration ) {
    HRESULT _hr = put_FadeInDuration(FadeInDuration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1973)
inline long PowerPoint::MediaFormat::GetFadeOutDuration ( ) {
    long _result = 0;
    HRESULT _hr = get_FadeOutDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1974)
inline void PowerPoint::MediaFormat::PutFadeOutDuration ( long FadeOutDuration ) {
    HRESULT _hr = put_FadeOutDuration(FadeOutDuration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1975)
inline PowerPoint::MediaBookmarksPtr PowerPoint::MediaFormat::GetMediaBookmarks ( ) {
    struct MediaBookmarks * _result = 0;
    HRESULT _hr = get_MediaBookmarks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MediaBookmarksPtr(_result, false);
}

#pragma implementation_key(1976)
inline HRESULT PowerPoint::MediaFormat::SetDisplayPicture ( long Position ) {
    HRESULT _hr = raw_SetDisplayPicture(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1977)
inline HRESULT PowerPoint::MediaFormat::SetDisplayPictureFromFile ( _bstr_t FilePath ) {
    HRESULT _hr = raw_SetDisplayPictureFromFile(FilePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1978)
inline HRESULT PowerPoint::MediaFormat::Resample ( VARIANT_BOOL Trim, int SampleHeight, int SampleWidth, long VideoFrameRate, long AudioSamplingRate, long VideoBitRate ) {
    HRESULT _hr = raw_Resample(Trim, SampleHeight, SampleWidth, VideoFrameRate, AudioSamplingRate, VideoBitRate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1979)
inline HRESULT PowerPoint::MediaFormat::ResampleFromProfile ( enum PpResampleMediaProfile profile ) {
    HRESULT _hr = raw_ResampleFromProfile(profile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1980)
inline enum PowerPoint::PpMediaTaskStatus PowerPoint::MediaFormat::GetResamplingStatus ( ) {
    enum PpMediaTaskStatus _result;
    HRESULT _hr = get_ResamplingStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1981)
inline VARIANT_BOOL PowerPoint::MediaFormat::GetIsLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1982)
inline VARIANT_BOOL PowerPoint::MediaFormat::GetIsEmbedded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsEmbedded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1983)
inline long PowerPoint::MediaFormat::GetAudioSamplingRate ( ) {
    long _result = 0;
    HRESULT _hr = get_AudioSamplingRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1984)
inline long PowerPoint::MediaFormat::GetVideoFrameRate ( ) {
    long _result = 0;
    HRESULT _hr = get_VideoFrameRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1985)
inline long PowerPoint::MediaFormat::GetSampleHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_SampleHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1986)
inline long PowerPoint::MediaFormat::GetSampleWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_SampleWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1987)
inline _bstr_t PowerPoint::MediaFormat::GetVideoCompressionType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VideoCompressionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1988)
inline _bstr_t PowerPoint::MediaFormat::GetAudioCompressionType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AudioCompressionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface Coauthoring wrapper method implementations
//

#pragma implementation_key(1989)
inline PowerPoint::_ApplicationPtr PowerPoint::Coauthoring::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1990)
inline IDispatchPtr PowerPoint::Coauthoring::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1991)
inline VARIANT_BOOL PowerPoint::Coauthoring::GetMergeMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MergeMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1992)
inline VARIANT_BOOL PowerPoint::Coauthoring::GetFavorServerEditsDuringMerge ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FavorServerEditsDuringMerge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1993)
inline void PowerPoint::Coauthoring::PutFavorServerEditsDuringMerge ( VARIANT_BOOL FavorServerEditsDuringMerge ) {
    HRESULT _hr = put_FavorServerEditsDuringMerge(FavorServerEditsDuringMerge);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1994)
inline HRESULT PowerPoint::Coauthoring::EndReview ( ) {
    HRESULT _hr = raw_EndReview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1995)
inline VARIANT_BOOL PowerPoint::Coauthoring::GetPendingUpdates ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PendingUpdates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1996)
inline long PowerPoint::Coauthoring::GetCoauthorCount ( ) {
    long _result = 0;
    HRESULT _hr = get_CoauthorCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Broadcast wrapper method implementations
//

#pragma implementation_key(1997)
inline PowerPoint::_ApplicationPtr PowerPoint::Broadcast::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1998)
inline IDispatchPtr PowerPoint::Broadcast::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1999)
inline HRESULT PowerPoint::Broadcast::Start ( _bstr_t serverUrl ) {
    HRESULT _hr = raw_Start(serverUrl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2000)
inline HRESULT PowerPoint::Broadcast::End ( ) {
    HRESULT _hr = raw_End();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2001)
inline _bstr_t PowerPoint::Broadcast::GetAttendeeUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AttendeeUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2002)
inline VARIANT_BOOL PowerPoint::Broadcast::GetIsBroadcasting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsBroadcasting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2003)
inline HRESULT PowerPoint::Broadcast::Pause ( ) {
    HRESULT _hr = raw_Pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2004)
inline HRESULT PowerPoint::Broadcast::Resume ( ) {
    HRESULT _hr = raw_Resume();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2005)
inline HRESULT PowerPoint::Broadcast::AddMeetingNotes ( _bstr_t notesUrl, _bstr_t notesWacUrl ) {
    HRESULT _hr = raw_AddMeetingNotes(notesUrl, notesWacUrl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2006)
inline __missing_type__  PowerPoint::Broadcast::GetState ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2007)
inline long PowerPoint::Broadcast::GetCapabilities ( ) {
    long _result = 0;
    HRESULT _hr = get_Capabilities(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2008)
inline _bstr_t PowerPoint::Broadcast::GetSessionID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SessionID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2009)
inline _bstr_t PowerPoint::Broadcast::GetPresenterServiceUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PresenterServiceUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface Point wrapper method implementations
//

#pragma implementation_key(2010)
inline IDispatchPtr PowerPoint::Point::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2011)
inline PowerPoint::ChartBorderPtr PowerPoint::Point::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(2012)
inline _variant_t PowerPoint::Point::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2013)
inline _variant_t PowerPoint::Point::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2014)
inline PowerPoint::DataLabelPtr PowerPoint::Point::GetDataLabel ( ) {
    struct DataLabel * _result = 0;
    HRESULT _hr = get_DataLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DataLabelPtr(_result, false);
}

#pragma implementation_key(2015)
inline _variant_t PowerPoint::Point::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2016)
inline long PowerPoint::Point::GetExplosion ( ) {
    long _result = 0;
    HRESULT _hr = get_Explosion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2017)
inline void PowerPoint::Point::PutExplosion ( long RHS ) {
    HRESULT _hr = put_Explosion(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2018)
inline VARIANT_BOOL PowerPoint::Point::GetHasDataLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDataLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2019)
inline void PowerPoint::Point::PutHasDataLabel ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDataLabel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2020)
inline PowerPoint::InteriorPtr PowerPoint::Point::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(2021)
inline VARIANT_BOOL PowerPoint::Point::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2022)
inline void PowerPoint::Point::PutInvertIfNegative ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2023)
inline long PowerPoint::Point::GetMarkerBackgroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2024)
inline void PowerPoint::Point::PutMarkerBackgroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerBackgroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2025)
inline enum PowerPoint::XlColorIndex PowerPoint::Point::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerBackgroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2026)
inline void PowerPoint::Point::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerBackgroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2027)
inline long PowerPoint::Point::GetMarkerForegroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2028)
inline void PowerPoint::Point::PutMarkerForegroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerForegroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2029)
inline enum PowerPoint::XlColorIndex PowerPoint::Point::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerForegroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2030)
inline void PowerPoint::Point::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerForegroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2031)
inline long PowerPoint::Point::GetMarkerSize ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2032)
inline void PowerPoint::Point::PutMarkerSize ( long RHS ) {
    HRESULT _hr = put_MarkerSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2033)
inline enum PowerPoint::XlMarkerStyle PowerPoint::Point::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2034)
inline void PowerPoint::Point::PutMarkerStyle ( enum XlMarkerStyle RHS ) {
    HRESULT _hr = put_MarkerStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2035)
inline _variant_t PowerPoint::Point::Paste ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2036)
inline enum PowerPoint::XlChartPictureType PowerPoint::Point::GetPictureType ( ) {
    enum XlChartPictureType _result;
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2037)
inline void PowerPoint::Point::PutPictureType ( enum XlChartPictureType RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2038)
inline _variant_t PowerPoint::Point::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2039)
inline VARIANT_BOOL PowerPoint::Point::GetApplyPictToSides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToSides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2040)
inline void PowerPoint::Point::PutApplyPictToSides ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToSides(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2041)
inline VARIANT_BOOL PowerPoint::Point::GetApplyPictToFront ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2042)
inline void PowerPoint::Point::PutApplyPictToFront ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToFront(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2043)
inline VARIANT_BOOL PowerPoint::Point::GetApplyPictToEnd ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2044)
inline void PowerPoint::Point::PutApplyPictToEnd ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToEnd(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2045)
inline VARIANT_BOOL PowerPoint::Point::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2046)
inline void PowerPoint::Point::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2047)
inline VARIANT_BOOL PowerPoint::Point::GetSecondaryPlot ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SecondaryPlot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2048)
inline void PowerPoint::Point::PutSecondaryPlot ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SecondaryPlot(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2049)
inline PowerPoint::ChartFillFormatPtr PowerPoint::Point::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(2050)
inline VARIANT_BOOL PowerPoint::Point::GetHas3DEffect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Has3DEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2051)
inline void PowerPoint::Point::PutHas3DEffect ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Has3DEffect(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2052)
inline PowerPoint::ChartFormatPtr PowerPoint::Point::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(2053)
inline long PowerPoint::Point::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2054)
inline double PowerPoint::Point::GetPictureUnit2 ( ) {
    double _result = 0;
    HRESULT _hr = get_PictureUnit2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2055)
inline void PowerPoint::Point::PutPictureUnit2 ( double RHS ) {
    HRESULT _hr = put_PictureUnit2(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2056)
inline PowerPoint::_ApplicationPtr PowerPoint::Point::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2057)
inline _variant_t PowerPoint::Point::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__ApplyDataLabels(Type, LegendKey, AutoText, HasLeaderLines, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2058)
inline _variant_t PowerPoint::Point::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ApplyDataLabels(Type, LegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2059)
inline long PowerPoint::Point::GetPictureUnit ( ) {
    long _result = 0;
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2060)
inline void PowerPoint::Point::PutPictureUnit ( long RHS ) {
    HRESULT _hr = put_PictureUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2061)
inline _bstr_t PowerPoint::Point::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2062)
inline double PowerPoint::Point::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2063)
inline double PowerPoint::Point::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2064)
inline double PowerPoint::Point::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2065)
inline double PowerPoint::Point::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2066)
inline double PowerPoint::Point::PieSliceLocation ( enum XlPieSliceLocation loc, enum XlPieSliceIndex Index ) {
    double _result = 0;
    HRESULT _hr = raw_PieSliceLocation(loc, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2067)
inline VARIANT_BOOL PowerPoint::Point::GetIsTotal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTotal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2068)
inline void PowerPoint::Point::PutIsTotal ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_IsTotal(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Points wrapper method implementations
//

#pragma implementation_key(2069)
inline IDispatchPtr PowerPoint::Points::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2070)
inline long PowerPoint::Points::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2071)
inline PowerPoint::PointPtr PowerPoint::Points::Item ( long Index ) {
    struct Point * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PointPtr(_result, false);
}

#pragma implementation_key(2072)
inline IUnknownPtr PowerPoint::Points::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2073)
inline long PowerPoint::Points::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2074)
inline PowerPoint::_ApplicationPtr PowerPoint::Points::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2075)
inline PowerPoint::PointPtr PowerPoint::Points::_Default ( long Index ) {
    struct Point * _result = 0;
    HRESULT _hr = raw__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PointPtr(_result, false);
}

//
// interface ProtectedViewWindow wrapper method implementations
//

#pragma implementation_key(2076)
inline PowerPoint::_ApplicationPtr PowerPoint::ProtectedViewWindow::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2077)
inline IDispatchPtr PowerPoint::ProtectedViewWindow::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2078)
inline PowerPoint::_PresentationPtr PowerPoint::ProtectedViewWindow::GetPresentation ( ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = get_Presentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(2079)
inline __missing_type__  PowerPoint::ProtectedViewWindow::GetActive ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2080)
inline enum PowerPoint::PpWindowState PowerPoint::ProtectedViewWindow::GetWindowState ( ) {
    enum PpWindowState _result;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2081)
inline void PowerPoint::ProtectedViewWindow::PutWindowState ( enum PpWindowState WindowState ) {
    HRESULT _hr = put_WindowState(WindowState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2082)
inline _bstr_t PowerPoint::ProtectedViewWindow::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2083)
inline _bstr_t PowerPoint::ProtectedViewWindow::GetSourcePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourcePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2084)
inline _bstr_t PowerPoint::ProtectedViewWindow::GetSourceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2085)
inline float PowerPoint::ProtectedViewWindow::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2086)
inline void PowerPoint::ProtectedViewWindow::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2087)
inline float PowerPoint::ProtectedViewWindow::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2088)
inline void PowerPoint::ProtectedViewWindow::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2089)
inline float PowerPoint::ProtectedViewWindow::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2090)
inline void PowerPoint::ProtectedViewWindow::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2091)
inline float PowerPoint::ProtectedViewWindow::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2092)
inline void PowerPoint::ProtectedViewWindow::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2093)
inline HRESULT PowerPoint::ProtectedViewWindow::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2094)
inline HRESULT PowerPoint::ProtectedViewWindow::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2095)
inline PowerPoint::_PresentationPtr PowerPoint::ProtectedViewWindow::Edit ( _bstr_t ModifyPassword ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = raw_Edit(ModifyPassword, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(2096)
inline long PowerPoint::ProtectedViewWindow::GetHWND ( ) {
    long _result = 0;
    HRESULT _hr = get_HWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ProtectedViewWindows wrapper method implementations
//

#pragma implementation_key(2097)
inline PowerPoint::_ApplicationPtr PowerPoint::ProtectedViewWindows::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2098)
inline IDispatchPtr PowerPoint::ProtectedViewWindows::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2099)
inline PowerPoint::ProtectedViewWindowPtr PowerPoint::ProtectedViewWindows::Item ( int Index ) {
    struct ProtectedViewWindow * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ProtectedViewWindowPtr(_result, false);
}

#pragma implementation_key(2100)
inline PowerPoint::ProtectedViewWindowPtr PowerPoint::ProtectedViewWindows::Open ( _bstr_t FileName, _bstr_t ReadPassword, __missing_type__ OpenAndRepair ) {
    struct ProtectedViewWindow * _result = 0;
    HRESULT _hr = raw_Open(FileName, ReadPassword, OpenAndRepair, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ProtectedViewWindowPtr(_result, false);
}

//
// interface ChartCategory wrapper method implementations
//

#pragma implementation_key(2101)
inline IDispatchPtr PowerPoint::ChartCategory::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2102)
inline _bstr_t PowerPoint::ChartCategory::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2103)
inline VARIANT_BOOL PowerPoint::ChartCategory::GetIsFiltered ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsFiltered(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2104)
inline void PowerPoint::ChartCategory::PutIsFiltered ( VARIANT_BOOL pfIsFiltered ) {
    HRESULT _hr = put_IsFiltered(pfIsFiltered);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CategoryCollection wrapper method implementations
//

#pragma implementation_key(2105)
inline IDispatchPtr PowerPoint::CategoryCollection::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2106)
inline long PowerPoint::CategoryCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2107)
inline PowerPoint::ChartCategoryPtr PowerPoint::CategoryCollection::Item ( const _variant_t & Index ) {
    struct ChartCategory * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartCategoryPtr(_result, false);
}

#pragma implementation_key(2108)
inline PowerPoint::_ApplicationPtr PowerPoint::CategoryCollection::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2109)
inline long PowerPoint::CategoryCollection::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2110)
inline PowerPoint::ChartCategoryPtr PowerPoint::CategoryCollection::_Default ( const _variant_t & Index ) {
    struct ChartCategory * _result = 0;
    HRESULT _hr = raw__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartCategoryPtr(_result, false);
}

//
// interface ThemeVariant wrapper method implementations
//

#pragma implementation_key(2111)
inline PowerPoint::_ApplicationPtr PowerPoint::ThemeVariant::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2112)
inline IDispatchPtr PowerPoint::ThemeVariant::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2113)
inline _bstr_t PowerPoint::ThemeVariant::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2114)
inline long PowerPoint::ThemeVariant::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2115)
inline long PowerPoint::ThemeVariant::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2116)
inline _bstr_t PowerPoint::ThemeVariant::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ThemeVariants wrapper method implementations
//

#pragma implementation_key(2117)
inline PowerPoint::_ApplicationPtr PowerPoint::ThemeVariants::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2118)
inline IDispatchPtr PowerPoint::ThemeVariants::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2119)
inline PowerPoint::ThemeVariantPtr PowerPoint::ThemeVariants::Item ( int Index ) {
    struct ThemeVariant * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThemeVariantPtr(_result, false);
}

//
// interface Theme wrapper method implementations
//

#pragma implementation_key(2120)
inline PowerPoint::_ApplicationPtr PowerPoint::Theme::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2121)
inline IDispatchPtr PowerPoint::Theme::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2122)
inline PowerPoint::ThemeVariantsPtr PowerPoint::Theme::GetThemeVariants ( ) {
    struct ThemeVariants * _result = 0;
    HRESULT _hr = get_ThemeVariants(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThemeVariantsPtr(_result, false);
}

//
// interface SlideNavigation wrapper method implementations
//

#pragma implementation_key(2123)
inline PowerPoint::_ApplicationPtr PowerPoint::SlideNavigation::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2124)
inline IDispatchPtr PowerPoint::SlideNavigation::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2125)
inline VARIANT_BOOL PowerPoint::SlideNavigation::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2126)
inline void PowerPoint::SlideNavigation::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface SlideShowWindow wrapper method implementations
//

#pragma implementation_key(2127)
inline PowerPoint::_ApplicationPtr PowerPoint::SlideShowWindow::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2128)
inline IDispatchPtr PowerPoint::SlideShowWindow::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2129)
inline PowerPoint::SlideShowViewPtr PowerPoint::SlideShowWindow::GetView ( ) {
    struct SlideShowView * _result = 0;
    HRESULT _hr = get_View(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowViewPtr(_result, false);
}

#pragma implementation_key(2130)
inline PowerPoint::_PresentationPtr PowerPoint::SlideShowWindow::GetPresentation ( ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = get_Presentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(2131)
inline __missing_type__  PowerPoint::SlideShowWindow::GetIsFullScreen ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_IsFullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2132)
inline float PowerPoint::SlideShowWindow::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2133)
inline void PowerPoint::SlideShowWindow::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2134)
inline float PowerPoint::SlideShowWindow::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2135)
inline void PowerPoint::SlideShowWindow::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2136)
inline float PowerPoint::SlideShowWindow::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2137)
inline void PowerPoint::SlideShowWindow::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2138)
inline float PowerPoint::SlideShowWindow::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2139)
inline void PowerPoint::SlideShowWindow::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2140)
inline long PowerPoint::SlideShowWindow::GetHWND ( ) {
    long _result = 0;
    HRESULT _hr = get_HWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2141)
inline __missing_type__  PowerPoint::SlideShowWindow::GetActive ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2142)
inline HRESULT PowerPoint::SlideShowWindow::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2143)
inline PowerPoint::SlideNavigationPtr PowerPoint::SlideShowWindow::GetSlideNavigation ( ) {
    struct SlideNavigation * _result = 0;
    HRESULT _hr = get_SlideNavigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideNavigationPtr(_result, false);
}

//
// interface SlideShowWindows wrapper method implementations
//

#pragma implementation_key(2144)
inline PowerPoint::_ApplicationPtr PowerPoint::SlideShowWindows::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2145)
inline IDispatchPtr PowerPoint::SlideShowWindows::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2146)
inline PowerPoint::SlideShowWindowPtr PowerPoint::SlideShowWindows::Item ( int Index ) {
    struct SlideShowWindow * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowWindowPtr(_result, false);
}

//
// interface SlideShowSettings wrapper method implementations
//

#pragma implementation_key(2147)
inline PowerPoint::_ApplicationPtr PowerPoint::SlideShowSettings::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2148)
inline IDispatchPtr PowerPoint::SlideShowSettings::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2149)
inline PowerPoint::ColorFormatPtr PowerPoint::SlideShowSettings::GetPointerColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_PointerColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(2150)
inline PowerPoint::NamedSlideShowsPtr PowerPoint::SlideShowSettings::GetNamedSlideShows ( ) {
    struct NamedSlideShows * _result = 0;
    HRESULT _hr = get_NamedSlideShows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamedSlideShowsPtr(_result, false);
}

#pragma implementation_key(2151)
inline int PowerPoint::SlideShowSettings::GetStartingSlide ( ) {
    int _result = 0;
    HRESULT _hr = get_StartingSlide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2152)
inline void PowerPoint::SlideShowSettings::PutStartingSlide ( int StartingSlide ) {
    HRESULT _hr = put_StartingSlide(StartingSlide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2153)
inline int PowerPoint::SlideShowSettings::GetEndingSlide ( ) {
    int _result = 0;
    HRESULT _hr = get_EndingSlide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2154)
inline void PowerPoint::SlideShowSettings::PutEndingSlide ( int EndingSlide ) {
    HRESULT _hr = put_EndingSlide(EndingSlide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2155)
inline enum PowerPoint::PpSlideShowAdvanceMode PowerPoint::SlideShowSettings::GetAdvanceMode ( ) {
    enum PpSlideShowAdvanceMode _result;
    HRESULT _hr = get_AdvanceMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2156)
inline void PowerPoint::SlideShowSettings::PutAdvanceMode ( enum PpSlideShowAdvanceMode AdvanceMode ) {
    HRESULT _hr = put_AdvanceMode(AdvanceMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2157)
inline PowerPoint::SlideShowWindowPtr PowerPoint::SlideShowSettings::Run ( ) {
    struct SlideShowWindow * _result = 0;
    HRESULT _hr = raw_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowWindowPtr(_result, false);
}

#pragma implementation_key(2158)
inline __missing_type__  PowerPoint::SlideShowSettings::GetLoopUntilStopped ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_LoopUntilStopped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2159)
inline void PowerPoint::SlideShowSettings::PutLoopUntilStopped ( __missing_type__ LoopUntilStopped ) {
    HRESULT _hr = put_LoopUntilStopped(LoopUntilStopped);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2160)
inline enum PowerPoint::PpSlideShowType PowerPoint::SlideShowSettings::GetShowType ( ) {
    enum PpSlideShowType _result;
    HRESULT _hr = get_ShowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2161)
inline void PowerPoint::SlideShowSettings::PutShowType ( enum PpSlideShowType ShowType ) {
    HRESULT _hr = put_ShowType(ShowType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2162)
inline __missing_type__  PowerPoint::SlideShowSettings::GetShowWithNarration ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ShowWithNarration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2163)
inline void PowerPoint::SlideShowSettings::PutShowWithNarration ( __missing_type__ ShowWithNarration ) {
    HRESULT _hr = put_ShowWithNarration(ShowWithNarration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2164)
inline __missing_type__  PowerPoint::SlideShowSettings::GetShowWithAnimation ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ShowWithAnimation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2165)
inline void PowerPoint::SlideShowSettings::PutShowWithAnimation ( __missing_type__ ShowWithAnimation ) {
    HRESULT _hr = put_ShowWithAnimation(ShowWithAnimation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2166)
inline _bstr_t PowerPoint::SlideShowSettings::GetSlideShowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlideShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2167)
inline void PowerPoint::SlideShowSettings::PutSlideShowName ( _bstr_t SlideShowName ) {
    HRESULT _hr = put_SlideShowName(SlideShowName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2168)
inline enum PowerPoint::PpSlideShowRangeType PowerPoint::SlideShowSettings::GetRangeType ( ) {
    enum PpSlideShowRangeType _result;
    HRESULT _hr = get_RangeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2169)
inline void PowerPoint::SlideShowSettings::PutRangeType ( enum PpSlideShowRangeType RangeType ) {
    HRESULT _hr = put_RangeType(RangeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2170)
inline __missing_type__  PowerPoint::SlideShowSettings::GetShowScrollbar ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ShowScrollbar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2171)
inline void PowerPoint::SlideShowSettings::PutShowScrollbar ( __missing_type__ ShowScrollbar ) {
    HRESULT _hr = put_ShowScrollbar(ShowScrollbar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2172)
inline __missing_type__  PowerPoint::SlideShowSettings::GetShowPresenterView ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ShowPresenterView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2173)
inline void PowerPoint::SlideShowSettings::PutShowPresenterView ( __missing_type__ ShowPresenterView ) {
    HRESULT _hr = put_ShowPresenterView(ShowPresenterView);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2174)
inline __missing_type__  PowerPoint::SlideShowSettings::GetShowMediaControls ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ShowMediaControls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2175)
inline void PowerPoint::SlideShowSettings::PutShowMediaControls ( __missing_type__ ShowMediaControls ) {
    HRESULT _hr = put_ShowMediaControls(ShowMediaControls);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Guide wrapper method implementations
//

#pragma implementation_key(2176)
inline PowerPoint::_ApplicationPtr PowerPoint::Guide::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2177)
inline IDispatchPtr PowerPoint::Guide::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2178)
inline HRESULT PowerPoint::Guide::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2179)
inline enum PowerPoint::PpGuideOrientation PowerPoint::Guide::GetOrientation ( ) {
    enum PpGuideOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2180)
inline float PowerPoint::Guide::GetPosition ( ) {
    float _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2181)
inline void PowerPoint::Guide::PutPosition ( float Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2182)
inline PowerPoint::ColorFormatPtr PowerPoint::Guide::GetColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

//
// interface Guides wrapper method implementations
//

#pragma implementation_key(2183)
inline PowerPoint::_ApplicationPtr PowerPoint::Guides::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2184)
inline IDispatchPtr PowerPoint::Guides::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2185)
inline PowerPoint::GuidePtr PowerPoint::Guides::Item ( int Index ) {
    struct Guide * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GuidePtr(_result, false);
}

#pragma implementation_key(2186)
inline PowerPoint::GuidePtr PowerPoint::Guides::Add ( enum PpGuideOrientation Orientation, float Position ) {
    struct Guide * _result = 0;
    HRESULT _hr = raw_Add(Orientation, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GuidePtr(_result, false);
}

//
// interface Series wrapper method implementations
//

#pragma implementation_key(2187)
inline IDispatchPtr PowerPoint::Series::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2188)
inline enum PowerPoint::XlAxisGroup PowerPoint::Series::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    HRESULT _hr = get_AxisGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2189)
inline void PowerPoint::Series::PutAxisGroup ( enum XlAxisGroup RHS ) {
    HRESULT _hr = put_AxisGroup(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2190)
inline PowerPoint::ChartBorderPtr PowerPoint::Series::GetBorder ( ) {
    struct ChartBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartBorderPtr(_result, false);
}

#pragma implementation_key(2191)
inline _variant_t PowerPoint::Series::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2192)
inline _variant_t PowerPoint::Series::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2193)
inline IDispatchPtr PowerPoint::Series::DataLabels ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_DataLabels(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2194)
inline _variant_t PowerPoint::Series::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2195)
inline _variant_t PowerPoint::Series::ErrorBar ( enum XlErrorBarDirection Direction, enum XlErrorBarInclude Include, enum XlErrorBarType Type, const _variant_t & Amount, const _variant_t & MinusValues ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ErrorBar(Direction, Include, Type, Amount, MinusValues, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2196)
inline PowerPoint::ErrorBarsPtr PowerPoint::Series::GetErrorBars ( ) {
    struct ErrorBars * _result = 0;
    HRESULT _hr = get_ErrorBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ErrorBarsPtr(_result, false);
}

#pragma implementation_key(2197)
inline long PowerPoint::Series::GetExplosion ( ) {
    long _result = 0;
    HRESULT _hr = get_Explosion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2198)
inline void PowerPoint::Series::PutExplosion ( long RHS ) {
    HRESULT _hr = put_Explosion(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2199)
inline _bstr_t PowerPoint::Series::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2200)
inline void PowerPoint::Series::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2201)
inline _bstr_t PowerPoint::Series::GetFormulaLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2202)
inline void PowerPoint::Series::PutFormulaLocal ( _bstr_t RHS ) {
    HRESULT _hr = put_FormulaLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2203)
inline _bstr_t PowerPoint::Series::GetFormulaR1C1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2204)
inline void PowerPoint::Series::PutFormulaR1C1 ( _bstr_t RHS ) {
    HRESULT _hr = put_FormulaR1C1(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2205)
inline _bstr_t PowerPoint::Series::GetFormulaR1C1Local ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2206)
inline void PowerPoint::Series::PutFormulaR1C1Local ( _bstr_t RHS ) {
    HRESULT _hr = put_FormulaR1C1Local(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2207)
inline VARIANT_BOOL PowerPoint::Series::GetHasDataLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDataLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2208)
inline void PowerPoint::Series::PutHasDataLabels ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDataLabels(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2209)
inline VARIANT_BOOL PowerPoint::Series::GetHasErrorBars ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasErrorBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2210)
inline void PowerPoint::Series::PutHasErrorBars ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasErrorBars(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2211)
inline PowerPoint::InteriorPtr PowerPoint::Series::GetInterior ( ) {
    struct Interior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(2212)
inline PowerPoint::ChartFillFormatPtr PowerPoint::Series::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(2213)
inline VARIANT_BOOL PowerPoint::Series::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2214)
inline void PowerPoint::Series::PutInvertIfNegative ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2215)
inline long PowerPoint::Series::GetMarkerBackgroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2216)
inline void PowerPoint::Series::PutMarkerBackgroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerBackgroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2217)
inline enum PowerPoint::XlColorIndex PowerPoint::Series::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerBackgroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2218)
inline void PowerPoint::Series::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerBackgroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2219)
inline long PowerPoint::Series::GetMarkerForegroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2220)
inline void PowerPoint::Series::PutMarkerForegroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerForegroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2221)
inline enum PowerPoint::XlColorIndex PowerPoint::Series::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerForegroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2222)
inline void PowerPoint::Series::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerForegroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2223)
inline long PowerPoint::Series::GetMarkerSize ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2224)
inline void PowerPoint::Series::PutMarkerSize ( long RHS ) {
    HRESULT _hr = put_MarkerSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2225)
inline enum PowerPoint::XlMarkerStyle PowerPoint::Series::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2226)
inline void PowerPoint::Series::PutMarkerStyle ( enum XlMarkerStyle RHS ) {
    HRESULT _hr = put_MarkerStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2227)
inline _bstr_t PowerPoint::Series::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2228)
inline void PowerPoint::Series::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2229)
inline _variant_t PowerPoint::Series::Paste ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2230)
inline enum PowerPoint::XlChartPictureType PowerPoint::Series::GetPictureType ( ) {
    enum XlChartPictureType _result;
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2231)
inline void PowerPoint::Series::PutPictureType ( enum XlChartPictureType RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2232)
inline long PowerPoint::Series::GetPlotOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_PlotOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2233)
inline void PowerPoint::Series::PutPlotOrder ( long RHS ) {
    HRESULT _hr = put_PlotOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2234)
inline IDispatchPtr PowerPoint::Series::Points ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Points(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2235)
inline _variant_t PowerPoint::Series::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2236)
inline VARIANT_BOOL PowerPoint::Series::GetSmooth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Smooth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2237)
inline void PowerPoint::Series::PutSmooth ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Smooth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2238)
inline IDispatchPtr PowerPoint::Series::Trendlines ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Trendlines(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2239)
inline long PowerPoint::Series::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2240)
inline void PowerPoint::Series::PutType ( long RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2241)
inline __missing_type__  PowerPoint::Series::GetChartType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ChartType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2242)
inline void PowerPoint::Series::PutChartType ( __missing_type__ RHS ) {
    HRESULT _hr = put_ChartType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2243)
inline HRESULT PowerPoint::Series::ApplyCustomType ( __missing_type__ ChartType ) {
    HRESULT _hr = raw_ApplyCustomType(ChartType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2244)
inline _variant_t PowerPoint::Series::GetValues ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2245)
inline void PowerPoint::Series::PutValues ( const _variant_t & RHS ) {
    HRESULT _hr = put_Values(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2246)
inline _variant_t PowerPoint::Series::GetXValues ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_XValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2247)
inline void PowerPoint::Series::PutXValues ( const _variant_t & RHS ) {
    HRESULT _hr = put_XValues(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2248)
inline _variant_t PowerPoint::Series::GetBubbleSizes ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BubbleSizes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2249)
inline void PowerPoint::Series::PutBubbleSizes ( const _variant_t & RHS ) {
    HRESULT _hr = put_BubbleSizes(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2250)
inline enum PowerPoint::XlBarShape PowerPoint::Series::GetBarShape ( ) {
    enum XlBarShape _result;
    HRESULT _hr = get_BarShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2251)
inline void PowerPoint::Series::PutBarShape ( enum XlBarShape RHS ) {
    HRESULT _hr = put_BarShape(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2252)
inline VARIANT_BOOL PowerPoint::Series::GetApplyPictToSides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToSides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2253)
inline void PowerPoint::Series::PutApplyPictToSides ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToSides(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2254)
inline VARIANT_BOOL PowerPoint::Series::GetApplyPictToFront ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2255)
inline void PowerPoint::Series::PutApplyPictToFront ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToFront(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2256)
inline VARIANT_BOOL PowerPoint::Series::GetApplyPictToEnd ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2257)
inline void PowerPoint::Series::PutApplyPictToEnd ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToEnd(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2258)
inline VARIANT_BOOL PowerPoint::Series::GetHas3DEffect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Has3DEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2259)
inline void PowerPoint::Series::PutHas3DEffect ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Has3DEffect(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2260)
inline VARIANT_BOOL PowerPoint::Series::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2261)
inline void PowerPoint::Series::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2262)
inline VARIANT_BOOL PowerPoint::Series::GetHasLeaderLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasLeaderLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2263)
inline void PowerPoint::Series::PutHasLeaderLines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasLeaderLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2264)
inline PowerPoint::LeaderLinesPtr PowerPoint::Series::GetLeaderLines ( ) {
    struct LeaderLines * _result = 0;
    HRESULT _hr = get_LeaderLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LeaderLinesPtr(_result, false);
}

#pragma implementation_key(2265)
inline PowerPoint::ChartFormatPtr PowerPoint::Series::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(2266)
inline long PowerPoint::Series::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2267)
inline double PowerPoint::Series::GetPictureUnit2 ( ) {
    double _result = 0;
    HRESULT _hr = get_PictureUnit2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2268)
inline void PowerPoint::Series::PutPictureUnit2 ( double RHS ) {
    HRESULT _hr = put_PictureUnit2(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2269)
inline PowerPoint::_ApplicationPtr PowerPoint::Series::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2270)
inline _variant_t PowerPoint::Series::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__ApplyDataLabels(Type, LegendKey, AutoText, HasLeaderLines, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2271)
inline _variant_t PowerPoint::Series::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ApplyDataLabels(Type, LegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2272)
inline long PowerPoint::Series::GetPictureUnit ( ) {
    long _result = 0;
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2273)
inline void PowerPoint::Series::PutPictureUnit ( long RHS ) {
    HRESULT _hr = put_PictureUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2274)
inline long PowerPoint::Series::GetPlotColorIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_PlotColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2275)
inline long PowerPoint::Series::GetInvertColor ( ) {
    long _result = 0;
    HRESULT _hr = get_InvertColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2276)
inline void PowerPoint::Series::PutInvertColor ( long RHS ) {
    HRESULT _hr = put_InvertColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2277)
inline enum PowerPoint::XlColorIndex PowerPoint::Series::GetInvertColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_InvertColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2278)
inline void PowerPoint::Series::PutInvertColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_InvertColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2279)
inline VARIANT_BOOL PowerPoint::Series::GetIsFiltered ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsFiltered(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2280)
inline void PowerPoint::Series::PutIsFiltered ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IsFiltered(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2281)
inline enum PowerPoint::XlParentDataLabelOptions PowerPoint::Series::GetParentDataLabelOption ( ) {
    enum XlParentDataLabelOptions _result;
    HRESULT _hr = get_ParentDataLabelOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2282)
inline void PowerPoint::Series::PutParentDataLabelOption ( enum XlParentDataLabelOptions RHS ) {
    HRESULT _hr = put_ParentDataLabelOption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2283)
inline VARIANT_BOOL PowerPoint::Series::GetQuartileCalculationInclusiveMedian ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_QuartileCalculationInclusiveMedian(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2284)
inline void PowerPoint::Series::PutQuartileCalculationInclusiveMedian ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_QuartileCalculationInclusiveMedian(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface SeriesCollection wrapper method implementations
//

#pragma implementation_key(2285)
inline IDispatchPtr PowerPoint::SeriesCollection::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2286)
inline long PowerPoint::SeriesCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2287)
inline _variant_t PowerPoint::SeriesCollection::Extend ( const _variant_t & Source, const _variant_t & Rowcol, const _variant_t & CategoryLabels ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Extend(Source, Rowcol, CategoryLabels, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2288)
inline PowerPoint::SeriesPtr PowerPoint::SeriesCollection::Item ( const _variant_t & Index ) {
    struct Series * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesPtr(_result, false);
}

#pragma implementation_key(2289)
inline IUnknownPtr PowerPoint::SeriesCollection::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2290)
inline PowerPoint::SeriesPtr PowerPoint::SeriesCollection::NewSeries ( ) {
    struct Series * _result = 0;
    HRESULT _hr = raw_NewSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesPtr(_result, false);
}

#pragma implementation_key(2291)
inline long PowerPoint::SeriesCollection::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2292)
inline PowerPoint::_ApplicationPtr PowerPoint::SeriesCollection::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2293)
inline PowerPoint::SeriesPtr PowerPoint::SeriesCollection::Add ( const _variant_t & Source, enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace ) {
    struct Series * _result = 0;
    HRESULT _hr = raw_Add(Source, Rowcol, SeriesLabels, CategoryLabels, Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesPtr(_result, false);
}

#pragma implementation_key(2294)
inline PowerPoint::SeriesPtr PowerPoint::SeriesCollection::_Default ( const _variant_t & Index ) {
    struct Series * _result = 0;
    HRESULT _hr = raw__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesPtr(_result, false);
}

//
// interface FullSeriesCollection wrapper method implementations
//

#pragma implementation_key(2295)
inline IDispatchPtr PowerPoint::FullSeriesCollection::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2296)
inline long PowerPoint::FullSeriesCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2297)
inline PowerPoint::SeriesPtr PowerPoint::FullSeriesCollection::Item ( const _variant_t & Index ) {
    struct Series * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesPtr(_result, false);
}

#pragma implementation_key(2298)
inline IUnknownPtr PowerPoint::FullSeriesCollection::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2299)
inline PowerPoint::_ApplicationPtr PowerPoint::FullSeriesCollection::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2300)
inline long PowerPoint::FullSeriesCollection::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2301)
inline PowerPoint::SeriesPtr PowerPoint::FullSeriesCollection::_Default ( const _variant_t & Index ) {
    struct Series * _result = 0;
    HRESULT _hr = raw__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesPtr(_result, false);
}

//
// interface ChartGroup wrapper method implementations
//

#pragma implementation_key(2302)
inline PowerPoint::DownBarsPtr PowerPoint::ChartGroup::GetDownBars ( ) {
    struct DownBars * _result = 0;
    HRESULT _hr = get_DownBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DownBarsPtr(_result, false);
}

#pragma implementation_key(2303)
inline PowerPoint::DropLinesPtr PowerPoint::ChartGroup::GetDropLines ( ) {
    struct DropLines * _result = 0;
    HRESULT _hr = get_DropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DropLinesPtr(_result, false);
}

#pragma implementation_key(2304)
inline void PowerPoint::ChartGroup::PutHasDropLines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDropLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2305)
inline VARIANT_BOOL PowerPoint::ChartGroup::GetHasDropLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2306)
inline void PowerPoint::ChartGroup::PutHasHiLoLines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasHiLoLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2307)
inline VARIANT_BOOL PowerPoint::ChartGroup::GetHasHiLoLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasHiLoLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2308)
inline void PowerPoint::ChartGroup::PutHasRadarAxisLabels ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasRadarAxisLabels(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2309)
inline VARIANT_BOOL PowerPoint::ChartGroup::GetHasRadarAxisLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasRadarAxisLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2310)
inline void PowerPoint::ChartGroup::PutHasSeriesLines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasSeriesLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2311)
inline VARIANT_BOOL PowerPoint::ChartGroup::GetHasSeriesLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasSeriesLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2312)
inline void PowerPoint::ChartGroup::PutHasUpDownBars ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasUpDownBars(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2313)
inline VARIANT_BOOL PowerPoint::ChartGroup::GetHasUpDownBars ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasUpDownBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2314)
inline PowerPoint::HiLoLinesPtr PowerPoint::ChartGroup::GetHiLoLines ( ) {
    struct HiLoLines * _result = 0;
    HRESULT _hr = get_HiLoLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HiLoLinesPtr(_result, false);
}

#pragma implementation_key(2315)
inline IDispatchPtr PowerPoint::ChartGroup::SeriesCollection ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_SeriesCollection(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2316)
inline PowerPoint::SeriesLinesPtr PowerPoint::ChartGroup::GetSeriesLines ( ) {
    struct SeriesLines * _result = 0;
    HRESULT _hr = get_SeriesLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesLinesPtr(_result, false);
}

#pragma implementation_key(2317)
inline PowerPoint::UpBarsPtr PowerPoint::ChartGroup::GetUpBars ( ) {
    struct UpBars * _result = 0;
    HRESULT _hr = get_UpBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UpBarsPtr(_result, false);
}

#pragma implementation_key(2318)
inline void PowerPoint::ChartGroup::PutVaryByCategories ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_VaryByCategories(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2319)
inline VARIANT_BOOL PowerPoint::ChartGroup::GetVaryByCategories ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VaryByCategories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2320)
inline enum PowerPoint::XlSizeRepresents PowerPoint::ChartGroup::GetSizeRepresents ( ) {
    enum XlSizeRepresents _result;
    HRESULT _hr = get_SizeRepresents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2321)
inline void PowerPoint::ChartGroup::PutSizeRepresents ( enum XlSizeRepresents RHS ) {
    HRESULT _hr = put_SizeRepresents(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2322)
inline void PowerPoint::ChartGroup::PutShowNegativeBubbles ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowNegativeBubbles(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2323)
inline VARIANT_BOOL PowerPoint::ChartGroup::GetShowNegativeBubbles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowNegativeBubbles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2324)
inline void PowerPoint::ChartGroup::PutSplitType ( enum XlChartSplitType RHS ) {
    HRESULT _hr = put_SplitType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2325)
inline enum PowerPoint::XlChartSplitType PowerPoint::ChartGroup::GetSplitType ( ) {
    enum XlChartSplitType _result;
    HRESULT _hr = get_SplitType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2326)
inline _variant_t PowerPoint::ChartGroup::GetSplitValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SplitValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2327)
inline void PowerPoint::ChartGroup::PutSplitValue ( const _variant_t & RHS ) {
    HRESULT _hr = put_SplitValue(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2328)
inline VARIANT_BOOL PowerPoint::ChartGroup::GetHas3DShading ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Has3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2329)
inline void PowerPoint::ChartGroup::PutHas3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Has3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2330)
inline long PowerPoint::ChartGroup::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2331)
inline IDispatchPtr PowerPoint::ChartGroup::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2332)
inline PowerPoint::_ApplicationPtr PowerPoint::ChartGroup::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2333)
inline enum PowerPoint::XlAxisGroup PowerPoint::ChartGroup::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    HRESULT _hr = get_AxisGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2334)
inline void PowerPoint::ChartGroup::PutAxisGroup ( enum XlAxisGroup RHS ) {
    HRESULT _hr = put_AxisGroup(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2335)
inline long PowerPoint::ChartGroup::GetBubbleScale ( ) {
    long _result = 0;
    HRESULT _hr = get_BubbleScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2336)
inline void PowerPoint::ChartGroup::PutBubbleScale ( long RHS ) {
    HRESULT _hr = put_BubbleScale(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2337)
inline long PowerPoint::ChartGroup::GetDoughnutHoleSize ( ) {
    long _result = 0;
    HRESULT _hr = get_DoughnutHoleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2338)
inline void PowerPoint::ChartGroup::PutDoughnutHoleSize ( long RHS ) {
    HRESULT _hr = put_DoughnutHoleSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2339)
inline long PowerPoint::ChartGroup::GetFirstSliceAngle ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstSliceAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2340)
inline void PowerPoint::ChartGroup::PutFirstSliceAngle ( long RHS ) {
    HRESULT _hr = put_FirstSliceAngle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2341)
inline long PowerPoint::ChartGroup::GetGapWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_GapWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2342)
inline void PowerPoint::ChartGroup::PutGapWidth ( long RHS ) {
    HRESULT _hr = put_GapWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2343)
inline long PowerPoint::ChartGroup::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2344)
inline long PowerPoint::ChartGroup::GetOverlap ( ) {
    long _result = 0;
    HRESULT _hr = get_Overlap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2345)
inline void PowerPoint::ChartGroup::PutOverlap ( long RHS ) {
    HRESULT _hr = put_Overlap(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2346)
inline PowerPoint::TickLabelsPtr PowerPoint::ChartGroup::GetRadarAxisLabels ( ) {
    struct TickLabels * _result = 0;
    HRESULT _hr = get_RadarAxisLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TickLabelsPtr(_result, false);
}

#pragma implementation_key(2347)
inline long PowerPoint::ChartGroup::GetSubtype ( ) {
    long _result = 0;
    HRESULT _hr = get_Subtype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2348)
inline void PowerPoint::ChartGroup::PutSubtype ( long RHS ) {
    HRESULT _hr = put_Subtype(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2349)
inline long PowerPoint::ChartGroup::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2350)
inline void PowerPoint::ChartGroup::PutType ( long RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2351)
inline long PowerPoint::ChartGroup::GetSecondPlotSize ( ) {
    long _result = 0;
    HRESULT _hr = get_SecondPlotSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2352)
inline void PowerPoint::ChartGroup::PutSecondPlotSize ( long RHS ) {
    HRESULT _hr = put_SecondPlotSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2353)
inline IDispatchPtr PowerPoint::ChartGroup::CategoryCollection ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_CategoryCollection(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2354)
inline IDispatchPtr PowerPoint::ChartGroup::FullCategoryCollection ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_FullCategoryCollection(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2355)
inline enum PowerPoint::XlBinsType PowerPoint::ChartGroup::GetBinsType ( ) {
    enum XlBinsType _result;
    HRESULT _hr = get_BinsType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2356)
inline void PowerPoint::ChartGroup::PutBinsType ( enum XlBinsType RHS ) {
    HRESULT _hr = put_BinsType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2357)
inline double PowerPoint::ChartGroup::GetBinWidthValue ( ) {
    double _result = 0;
    HRESULT _hr = get_BinWidthValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2358)
inline void PowerPoint::ChartGroup::PutBinWidthValue ( double pval ) {
    HRESULT _hr = put_BinWidthValue(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2359)
inline int PowerPoint::ChartGroup::GetBinsCountValue ( ) {
    int _result = 0;
    HRESULT _hr = get_BinsCountValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2360)
inline void PowerPoint::ChartGroup::PutBinsCountValue ( int pval ) {
    HRESULT _hr = put_BinsCountValue(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2361)
inline VARIANT_BOOL PowerPoint::ChartGroup::GetBinsOverflowEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BinsOverflowEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2362)
inline void PowerPoint::ChartGroup::PutBinsOverflowEnabled ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_BinsOverflowEnabled(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2363)
inline double PowerPoint::ChartGroup::GetBinsOverflowValue ( ) {
    double _result = 0;
    HRESULT _hr = get_BinsOverflowValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2364)
inline void PowerPoint::ChartGroup::PutBinsOverflowValue ( double pval ) {
    HRESULT _hr = put_BinsOverflowValue(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2365)
inline VARIANT_BOOL PowerPoint::ChartGroup::GetBinsUnderflowEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BinsUnderflowEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2366)
inline void PowerPoint::ChartGroup::PutBinsUnderflowEnabled ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_BinsUnderflowEnabled(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2367)
inline double PowerPoint::ChartGroup::GetBinsUnderflowValue ( ) {
    double _result = 0;
    HRESULT _hr = get_BinsUnderflowValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2368)
inline void PowerPoint::ChartGroup::PutBinsUnderflowValue ( double pval ) {
    HRESULT _hr = put_BinsUnderflowValue(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ChartGroups wrapper method implementations
//

#pragma implementation_key(2369)
inline IDispatchPtr PowerPoint::ChartGroups::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2370)
inline long PowerPoint::ChartGroups::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2371)
inline PowerPoint::ChartGroupPtr PowerPoint::ChartGroups::Item ( const _variant_t & Index ) {
    struct ChartGroup * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(2372)
inline IUnknownPtr PowerPoint::ChartGroups::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2373)
inline long PowerPoint::ChartGroups::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2374)
inline PowerPoint::_ApplicationPtr PowerPoint::ChartGroups::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

//
// interface _Application wrapper method implementations
//

#pragma implementation_key(2375)
inline PowerPoint::PresentationsPtr PowerPoint::_Application::GetPresentations ( ) {
    struct Presentations * _result = 0;
    HRESULT _hr = get_Presentations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PresentationsPtr(_result, false);
}

#pragma implementation_key(2376)
inline PowerPoint::DocumentWindowsPtr PowerPoint::_Application::GetWindows ( ) {
    struct DocumentWindows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowsPtr(_result, false);
}

#pragma implementation_key(2377)
inline IUnknownPtr PowerPoint::_Application::GetDialogs ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Dialogs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2378)
inline PowerPoint::DocumentWindowPtr PowerPoint::_Application::GetActiveWindow ( ) {
    struct DocumentWindow * _result = 0;
    HRESULT _hr = get_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowPtr(_result, false);
}

#pragma implementation_key(2379)
inline PowerPoint::_PresentationPtr PowerPoint::_Application::GetActivePresentation ( ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = get_ActivePresentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(2380)
inline PowerPoint::SlideShowWindowsPtr PowerPoint::_Application::GetSlideShowWindows ( ) {
    struct SlideShowWindows * _result = 0;
    HRESULT _hr = get_SlideShowWindows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowWindowsPtr(_result, false);
}

#pragma implementation_key(2381)
inline __missing_type__ PowerPoint::_Application::GetCommandBars ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2382)
inline _bstr_t PowerPoint::_Application::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2383)
inline _bstr_t PowerPoint::_Application::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2384)
inline _bstr_t PowerPoint::_Application::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2385)
inline void PowerPoint::_Application::PutCaption ( _bstr_t Caption ) {
    HRESULT _hr = put_Caption(Caption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2386)
inline __missing_type__ PowerPoint::_Application::GetAssistant ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Assistant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2387)
inline __missing_type__ PowerPoint::_Application::GetFileSearch ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_FileSearch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2388)
inline __missing_type__ PowerPoint::_Application::GetFileFind ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_FileFind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2389)
inline _bstr_t PowerPoint::_Application::GetBuild ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Build(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2390)
inline _bstr_t PowerPoint::_Application::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2391)
inline _bstr_t PowerPoint::_Application::GetOperatingSystem ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OperatingSystem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2392)
inline _bstr_t PowerPoint::_Application::GetActivePrinter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivePrinter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2393)
inline long PowerPoint::_Application::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2394)
inline PowerPoint::AddInsPtr PowerPoint::_Application::GetAddIns ( ) {
    struct AddIns * _result = 0;
    HRESULT _hr = get_AddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInsPtr(_result, false);
}

#pragma implementation_key(2395)
inline VBEPtr PowerPoint::_Application::GetVBE ( ) {
    struct VBE * _result = 0;
    HRESULT _hr = get_VBE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VBEPtr(_result, false);
}

#pragma implementation_key(2396)
inline HRESULT PowerPoint::_Application::Help ( _bstr_t HelpFile, int ContextID ) {
    HRESULT _hr = raw_Help(HelpFile, ContextID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2397)
inline HRESULT PowerPoint::_Application::Quit ( ) {
    HRESULT _hr = raw_Quit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2398)
inline _variant_t PowerPoint::_Application::Run ( _bstr_t MacroName, SAFEARRAY * * safeArrayOfParams ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Run(MacroName, safeArrayOfParams, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2399)
inline IUnknownPtr PowerPoint::_Application::PPFileDialog ( enum PpFileDialogType Type ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_PPFileDialog(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2400)
inline HRESULT PowerPoint::_Application::LaunchSpelling ( struct DocumentWindow * pWindow ) {
    HRESULT _hr = raw_LaunchSpelling(pWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2401)
inline float PowerPoint::_Application::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2402)
inline void PowerPoint::_Application::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2403)
inline float PowerPoint::_Application::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2404)
inline void PowerPoint::_Application::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2405)
inline float PowerPoint::_Application::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2406)
inline void PowerPoint::_Application::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2407)
inline float PowerPoint::_Application::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2408)
inline void PowerPoint::_Application::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2409)
inline enum PowerPoint::PpWindowState PowerPoint::_Application::GetWindowState ( ) {
    enum PpWindowState _result;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2410)
inline void PowerPoint::_Application::PutWindowState ( enum PpWindowState WindowState ) {
    HRESULT _hr = put_WindowState(WindowState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2411)
inline __missing_type__  PowerPoint::_Application::GetVisible ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2412)
inline void PowerPoint::_Application::PutVisible ( __missing_type__ Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2413)
inline long PowerPoint::_Application::GetHWND ( ) {
    long _result = 0;
    HRESULT _hr = get_HWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2414)
inline __missing_type__  PowerPoint::_Application::GetActive ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2415)
inline HRESULT PowerPoint::_Application::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2416)
inline __missing_type__ PowerPoint::_Application::GetAnswerWizard ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_AnswerWizard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2417)
inline __missing_type__ PowerPoint::_Application::GetCOMAddIns ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_COMAddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2418)
inline _bstr_t PowerPoint::_Application::GetProductCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProductCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2419)
inline PowerPoint::DefaultWebOptionsPtr PowerPoint::_Application::GetDefaultWebOptions ( ) {
    struct DefaultWebOptions * _result = 0;
    HRESULT _hr = get_DefaultWebOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DefaultWebOptionsPtr(_result, false);
}

#pragma implementation_key(2420)
inline __missing_type__ PowerPoint::_Application::GetLanguageSettings ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_LanguageSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2421)
inline __missing_type__ PowerPoint::_Application::GetMsoDebugOptions ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_MsoDebugOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2422)
inline __missing_type__  PowerPoint::_Application::GetShowWindowsInTaskbar ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ShowWindowsInTaskbar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2423)
inline void PowerPoint::_Application::PutShowWindowsInTaskbar ( __missing_type__ ShowWindowsInTaskbar ) {
    HRESULT _hr = put_ShowWindowsInTaskbar(ShowWindowsInTaskbar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2424)
inline IUnknownPtr PowerPoint::_Application::GetMarker ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Marker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2425)
inline __missing_type__  PowerPoint::_Application::GetFeatureInstall ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_FeatureInstall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2426)
inline void PowerPoint::_Application::PutFeatureInstall ( __missing_type__ FeatureInstall ) {
    HRESULT _hr = put_FeatureInstall(FeatureInstall);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2427)
inline VARIANT_BOOL PowerPoint::_Application::GetOptionFlag ( long Option, VARIANT_BOOL Persist ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetOptionFlag(Option, Persist, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2428)
inline HRESULT PowerPoint::_Application::SetOptionFlag ( long Option, VARIANT_BOOL State, VARIANT_BOOL Persist ) {
    HRESULT _hr = raw_SetOptionFlag(Option, State, Persist);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2429)
inline __missing_type__ PowerPoint::_Application::GetFileDialog ( __missing_type__ Type ) {
    __missing_type__ * _result;
    HRESULT _hr = get_FileDialog(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2430)
inline __missing_type__  PowerPoint::_Application::GetDisplayGridLines ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_DisplayGridLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2431)
inline void PowerPoint::_Application::PutDisplayGridLines ( __missing_type__ DisplayGridLines ) {
    HRESULT _hr = put_DisplayGridLines(DisplayGridLines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2432)
inline __missing_type__  PowerPoint::_Application::GetAutomationSecurity ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AutomationSecurity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2433)
inline void PowerPoint::_Application::PutAutomationSecurity ( __missing_type__ AutomationSecurity ) {
    HRESULT _hr = put_AutomationSecurity(AutomationSecurity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2434)
inline __missing_type__ PowerPoint::_Application::GetNewPresentation ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_NewPresentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2435)
inline enum PowerPoint::PpAlertLevel PowerPoint::_Application::GetDisplayAlerts ( ) {
    enum PpAlertLevel _result;
    HRESULT _hr = get_DisplayAlerts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2436)
inline void PowerPoint::_Application::PutDisplayAlerts ( enum PpAlertLevel DisplayAlerts ) {
    HRESULT _hr = put_DisplayAlerts(DisplayAlerts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2437)
inline __missing_type__  PowerPoint::_Application::GetShowStartupDialog ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ShowStartupDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2438)
inline void PowerPoint::_Application::PutShowStartupDialog ( __missing_type__ ShowStartupDialog ) {
    HRESULT _hr = put_ShowStartupDialog(ShowStartupDialog);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2439)
inline HRESULT PowerPoint::_Application::SetPerfMarker ( int Marker ) {
    HRESULT _hr = raw_SetPerfMarker(Marker);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2440)
inline PowerPoint::AutoCorrectPtr PowerPoint::_Application::GetAutoCorrect ( ) {
    struct AutoCorrect * _result = 0;
    HRESULT _hr = get_AutoCorrect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoCorrectPtr(_result, false);
}

#pragma implementation_key(2441)
inline PowerPoint::OptionsPtr PowerPoint::_Application::GetOptions ( ) {
    struct Options * _result = 0;
    HRESULT _hr = get_Options(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OptionsPtr(_result, false);
}

#pragma implementation_key(2442)
inline HRESULT PowerPoint::_Application::LaunchPublishSlidesDialog ( _bstr_t SlideLibraryUrl ) {
    HRESULT _hr = raw_LaunchPublishSlidesDialog(SlideLibraryUrl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2443)
inline HRESULT PowerPoint::_Application::LaunchSendToPPTDialog ( VARIANT * SlideUrls ) {
    HRESULT _hr = raw_LaunchSendToPPTDialog(SlideUrls);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2444)
inline VARIANT_BOOL PowerPoint::_Application::GetDisplayDocumentInformationPanel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayDocumentInformationPanel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2445)
inline void PowerPoint::_Application::PutDisplayDocumentInformationPanel ( VARIANT_BOOL DisplayDocumentInformationPanel ) {
    HRESULT _hr = put_DisplayDocumentInformationPanel(DisplayDocumentInformationPanel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2446)
inline __missing_type__ PowerPoint::_Application::GetAssistance ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Assistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2447)
inline long PowerPoint::_Application::GetActiveEncryptionSession ( ) {
    long _result = 0;
    HRESULT _hr = get_ActiveEncryptionSession(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2448)
inline PowerPoint::FileConvertersPtr PowerPoint::_Application::GetFileConverters ( ) {
    struct FileConverters * _result = 0;
    HRESULT _hr = get_FileConverters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileConvertersPtr(_result, false);
}

#pragma implementation_key(2449)
inline __missing_type__ PowerPoint::_Application::GetSmartArtLayouts ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_SmartArtLayouts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2450)
inline __missing_type__ PowerPoint::_Application::GetSmartArtQuickStyles ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_SmartArtQuickStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2451)
inline __missing_type__ PowerPoint::_Application::GetSmartArtColors ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_SmartArtColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2452)
inline PowerPoint::ProtectedViewWindowsPtr PowerPoint::_Application::GetProtectedViewWindows ( ) {
    struct ProtectedViewWindows * _result = 0;
    HRESULT _hr = get_ProtectedViewWindows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ProtectedViewWindowsPtr(_result, false);
}

#pragma implementation_key(2453)
inline PowerPoint::ProtectedViewWindowPtr PowerPoint::_Application::GetActiveProtectedViewWindow ( ) {
    struct ProtectedViewWindow * _result = 0;
    HRESULT _hr = get_ActiveProtectedViewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ProtectedViewWindowPtr(_result, false);
}

#pragma implementation_key(2454)
inline VARIANT_BOOL PowerPoint::_Application::GetIsSandboxed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSandboxed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2455)
inline PowerPoint::ResampleMediaTasksPtr PowerPoint::_Application::GetResampleMediaTasks ( ) {
    struct ResampleMediaTasks * _result = 0;
    HRESULT _hr = get_ResampleMediaTasks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ResampleMediaTasksPtr(_result, false);
}

#pragma implementation_key(2456)
inline HRESULT PowerPoint::_Application::StartNewUndoEntry ( ) {
    HRESULT _hr = raw_StartNewUndoEntry();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2457)
inline __missing_type__  PowerPoint::_Application::GetFileValidation ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_FileValidation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2458)
inline void PowerPoint::_Application::PutFileValidation ( __missing_type__ FileValidation ) {
    HRESULT _hr = put_FileValidation(FileValidation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2459)
inline PowerPoint::ThemePtr PowerPoint::_Application::OpenThemeFile ( _bstr_t themeFileName ) {
    struct Theme * _result = 0;
    HRESULT _hr = raw_OpenThemeFile(themeFileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThemePtr(_result, false);
}

#pragma implementation_key(2460)
inline VARIANT_BOOL PowerPoint::_Application::GetChartDataPointTrack ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ChartDataPointTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2461)
inline void PowerPoint::_Application::PutChartDataPointTrack ( VARIANT_BOOL pfChartDataPointTrack ) {
    HRESULT _hr = put_ChartDataPointTrack(pfChartDataPointTrack);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2462)
inline __missing_type__  PowerPoint::_Application::GetDisplayGuides ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_DisplayGuides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2463)
inline void PowerPoint::_Application::PutDisplayGuides ( __missing_type__ DisplayGridLines ) {
    HRESULT _hr = put_DisplayGuides(DisplayGridLines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _Global wrapper method implementations
//

#pragma implementation_key(2464)
inline PowerPoint::_PresentationPtr PowerPoint::_Global::GetActivePresentation ( ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = get_ActivePresentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(2465)
inline PowerPoint::DocumentWindowPtr PowerPoint::_Global::GetActiveWindow ( ) {
    struct DocumentWindow * _result = 0;
    HRESULT _hr = get_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowPtr(_result, false);
}

#pragma implementation_key(2466)
inline PowerPoint::AddInsPtr PowerPoint::_Global::GetAddIns ( ) {
    struct AddIns * _result = 0;
    HRESULT _hr = get_AddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInsPtr(_result, false);
}

#pragma implementation_key(2467)
inline PowerPoint::_ApplicationPtr PowerPoint::_Global::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2468)
inline __missing_type__ PowerPoint::_Global::GetAssistant ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Assistant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2469)
inline IUnknownPtr PowerPoint::_Global::GetDialogs ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Dialogs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2470)
inline PowerPoint::PresentationsPtr PowerPoint::_Global::GetPresentations ( ) {
    struct Presentations * _result = 0;
    HRESULT _hr = get_Presentations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PresentationsPtr(_result, false);
}

#pragma implementation_key(2471)
inline PowerPoint::SlideShowWindowsPtr PowerPoint::_Global::GetSlideShowWindows ( ) {
    struct SlideShowWindows * _result = 0;
    HRESULT _hr = get_SlideShowWindows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowWindowsPtr(_result, false);
}

#pragma implementation_key(2472)
inline PowerPoint::DocumentWindowsPtr PowerPoint::_Global::GetWindows ( ) {
    struct DocumentWindows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowsPtr(_result, false);
}

#pragma implementation_key(2473)
inline __missing_type__ PowerPoint::_Global::GetCommandBars ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2474)
inline __missing_type__ PowerPoint::_Global::GetAnswerWizard ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_AnswerWizard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2475)
inline PowerPoint::FileConvertersPtr PowerPoint::_Global::GetFileConverters ( ) {
    struct FileConverters * _result = 0;
    HRESULT _hr = get_FileConverters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileConvertersPtr(_result, false);
}

#pragma implementation_key(2476)
inline PowerPoint::ProtectedViewWindowsPtr PowerPoint::_Global::GetProtectedViewWindows ( ) {
    struct ProtectedViewWindows * _result = 0;
    HRESULT _hr = get_ProtectedViewWindows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ProtectedViewWindowsPtr(_result, false);
}

#pragma implementation_key(2477)
inline PowerPoint::ProtectedViewWindowPtr PowerPoint::_Global::GetActiveProtectedViewWindow ( ) {
    struct ProtectedViewWindow * _result = 0;
    HRESULT _hr = get_ActiveProtectedViewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ProtectedViewWindowPtr(_result, false);
}

#pragma implementation_key(2478)
inline VARIANT_BOOL PowerPoint::_Global::GetIsSandboxed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSandboxed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Selection wrapper method implementations
//

#pragma implementation_key(2479)
inline PowerPoint::_ApplicationPtr PowerPoint::Selection::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2480)
inline IDispatchPtr PowerPoint::Selection::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2481)
inline HRESULT PowerPoint::Selection::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2482)
inline HRESULT PowerPoint::Selection::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2483)
inline HRESULT PowerPoint::Selection::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2484)
inline HRESULT PowerPoint::Selection::Unselect ( ) {
    HRESULT _hr = raw_Unselect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2485)
inline enum PowerPoint::PpSelectionType PowerPoint::Selection::GetType ( ) {
    enum PpSelectionType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2486)
inline PowerPoint::SlideRangePtr PowerPoint::Selection::GetSlideRange ( ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = get_SlideRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

#pragma implementation_key(2487)
inline PowerPoint::ShapeRangePtr PowerPoint::Selection::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2488)
inline PowerPoint::TextRangePtr PowerPoint::Selection::GetTextRange ( ) {
    struct TextRange * _result = 0;
    HRESULT _hr = get_TextRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(2489)
inline PowerPoint::ShapeRangePtr PowerPoint::Selection::GetChildShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ChildShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2490)
inline VARIANT_BOOL PowerPoint::Selection::GetHasChildShapeRange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2491)
inline __missing_type__ PowerPoint::Selection::GetTextRange2 ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_TextRange2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface DocumentWindow wrapper method implementations
//

#pragma implementation_key(2492)
inline PowerPoint::_ApplicationPtr PowerPoint::DocumentWindow::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2493)
inline IDispatchPtr PowerPoint::DocumentWindow::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2494)
inline PowerPoint::SelectionPtr PowerPoint::DocumentWindow::GetSelection ( ) {
    struct Selection * _result = 0;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SelectionPtr(_result, false);
}

#pragma implementation_key(2495)
inline PowerPoint::ViewPtr PowerPoint::DocumentWindow::GetView ( ) {
    struct View * _result = 0;
    HRESULT _hr = get_View(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

#pragma implementation_key(2496)
inline PowerPoint::_PresentationPtr PowerPoint::DocumentWindow::GetPresentation ( ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = get_Presentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(2497)
inline enum PowerPoint::PpViewType PowerPoint::DocumentWindow::GetViewType ( ) {
    enum PpViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2498)
inline void PowerPoint::DocumentWindow::PutViewType ( enum PpViewType ViewType ) {
    HRESULT _hr = put_ViewType(ViewType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2499)
inline __missing_type__  PowerPoint::DocumentWindow::GetBlackAndWhite ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_BlackAndWhite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2500)
inline void PowerPoint::DocumentWindow::PutBlackAndWhite ( __missing_type__ BlackAndWhite ) {
    HRESULT _hr = put_BlackAndWhite(BlackAndWhite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2501)
inline __missing_type__  PowerPoint::DocumentWindow::GetActive ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2502)
inline enum PowerPoint::PpWindowState PowerPoint::DocumentWindow::GetWindowState ( ) {
    enum PpWindowState _result;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2503)
inline void PowerPoint::DocumentWindow::PutWindowState ( enum PpWindowState WindowState ) {
    HRESULT _hr = put_WindowState(WindowState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2504)
inline _bstr_t PowerPoint::DocumentWindow::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2505)
inline float PowerPoint::DocumentWindow::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2506)
inline void PowerPoint::DocumentWindow::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2507)
inline float PowerPoint::DocumentWindow::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2508)
inline void PowerPoint::DocumentWindow::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2509)
inline float PowerPoint::DocumentWindow::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2510)
inline void PowerPoint::DocumentWindow::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2511)
inline float PowerPoint::DocumentWindow::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2512)
inline void PowerPoint::DocumentWindow::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2513)
inline HRESULT PowerPoint::DocumentWindow::FitToPage ( ) {
    HRESULT _hr = raw_FitToPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2514)
inline HRESULT PowerPoint::DocumentWindow::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2515)
inline HRESULT PowerPoint::DocumentWindow::LargeScroll ( int Down, int Up, int ToRight, int ToLeft ) {
    HRESULT _hr = raw_LargeScroll(Down, Up, ToRight, ToLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2516)
inline HRESULT PowerPoint::DocumentWindow::SmallScroll ( int Down, int Up, int ToRight, int ToLeft ) {
    HRESULT _hr = raw_SmallScroll(Down, Up, ToRight, ToLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2517)
inline PowerPoint::DocumentWindowPtr PowerPoint::DocumentWindow::NewWindow ( ) {
    struct DocumentWindow * _result = 0;
    HRESULT _hr = raw_NewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowPtr(_result, false);
}

#pragma implementation_key(2518)
inline HRESULT PowerPoint::DocumentWindow::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2519)
inline long PowerPoint::DocumentWindow::GetHWND ( ) {
    long _result = 0;
    HRESULT _hr = get_HWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2520)
inline PowerPoint::PanePtr PowerPoint::DocumentWindow::GetActivePane ( ) {
    struct Pane * _result = 0;
    HRESULT _hr = get_ActivePane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanePtr(_result, false);
}

#pragma implementation_key(2521)
inline PowerPoint::PanesPtr PowerPoint::DocumentWindow::GetPanes ( ) {
    struct Panes * _result = 0;
    HRESULT _hr = get_Panes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanesPtr(_result, false);
}

#pragma implementation_key(2522)
inline long PowerPoint::DocumentWindow::GetSplitVertical ( ) {
    long _result = 0;
    HRESULT _hr = get_SplitVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2523)
inline void PowerPoint::DocumentWindow::PutSplitVertical ( long SplitVertical ) {
    HRESULT _hr = put_SplitVertical(SplitVertical);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2524)
inline long PowerPoint::DocumentWindow::GetSplitHorizontal ( ) {
    long _result = 0;
    HRESULT _hr = get_SplitHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2525)
inline void PowerPoint::DocumentWindow::PutSplitHorizontal ( long SplitHorizontal ) {
    HRESULT _hr = put_SplitHorizontal(SplitHorizontal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2526)
inline IDispatchPtr PowerPoint::DocumentWindow::RangeFromPoint ( int X, int Y ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_RangeFromPoint(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2527)
inline int PowerPoint::DocumentWindow::PointsToScreenPixelsX ( float Points ) {
    int _result = 0;
    HRESULT _hr = raw_PointsToScreenPixelsX(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2528)
inline int PowerPoint::DocumentWindow::PointsToScreenPixelsY ( float Points ) {
    int _result = 0;
    HRESULT _hr = raw_PointsToScreenPixelsY(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2529)
inline HRESULT PowerPoint::DocumentWindow::ScrollIntoView ( float Left, float Top, float Width, float Height, __missing_type__ Start ) {
    HRESULT _hr = raw_ScrollIntoView(Left, Top, Width, Height, Start);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2530)
inline VARIANT_BOOL PowerPoint::DocumentWindow::IsSectionExpanded ( int sectionIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSectionExpanded(sectionIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2531)
inline HRESULT PowerPoint::DocumentWindow::ExpandSection ( int sectionIndex, VARIANT_BOOL Expand ) {
    HRESULT _hr = raw_ExpandSection(sectionIndex, Expand);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2532)
inline HRESULT PowerPoint::DocumentWindow::ShowInsertAppDialog ( int Filter ) {
    HRESULT _hr = raw_ShowInsertAppDialog(Filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface DocumentWindows wrapper method implementations
//

#pragma implementation_key(2533)
inline PowerPoint::_ApplicationPtr PowerPoint::DocumentWindows::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2534)
inline IDispatchPtr PowerPoint::DocumentWindows::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2535)
inline PowerPoint::DocumentWindowPtr PowerPoint::DocumentWindows::Item ( int Index ) {
    struct DocumentWindow * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowPtr(_result, false);
}

#pragma implementation_key(2536)
inline HRESULT PowerPoint::DocumentWindows::Arrange ( enum PpArrangeStyle arrangeStyle ) {
    HRESULT _hr = raw_Arrange(arrangeStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Slides wrapper method implementations
//

#pragma implementation_key(2537)
inline PowerPoint::_ApplicationPtr PowerPoint::Slides::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2538)
inline IDispatchPtr PowerPoint::Slides::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2539)
inline PowerPoint::_SlidePtr PowerPoint::Slides::Item ( const _variant_t & Index ) {
    struct _Slide * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

#pragma implementation_key(2540)
inline PowerPoint::_SlidePtr PowerPoint::Slides::FindBySlideID ( long SlideID ) {
    struct _Slide * _result = 0;
    HRESULT _hr = raw_FindBySlideID(SlideID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

#pragma implementation_key(2541)
inline PowerPoint::_SlidePtr PowerPoint::Slides::Add ( int Index, enum PpSlideLayout Layout ) {
    struct _Slide * _result = 0;
    HRESULT _hr = raw_Add(Index, Layout, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

#pragma implementation_key(2542)
inline int PowerPoint::Slides::InsertFromFile ( _bstr_t FileName, int Index, int SlideStart, int SlideEnd ) {
    int _result = 0;
    HRESULT _hr = raw_InsertFromFile(FileName, Index, SlideStart, SlideEnd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2543)
inline PowerPoint::SlideRangePtr PowerPoint::Slides::Range ( const _variant_t & Index ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

#pragma implementation_key(2544)
inline PowerPoint::SlideRangePtr PowerPoint::Slides::Paste ( int Index ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = raw_Paste(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

#pragma implementation_key(2545)
inline PowerPoint::_SlidePtr PowerPoint::Slides::AddSlide ( int Index, struct CustomLayout * pCustomLayout ) {
    struct _Slide * _result = 0;
    HRESULT _hr = raw_AddSlide(Index, pCustomLayout, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

//
// interface _Slide wrapper method implementations
//

#pragma implementation_key(2546)
inline PowerPoint::_ApplicationPtr PowerPoint::_Slide::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2547)
inline IDispatchPtr PowerPoint::_Slide::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2548)
inline PowerPoint::ShapesPtr PowerPoint::_Slide::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

#pragma implementation_key(2549)
inline PowerPoint::HeadersFootersPtr PowerPoint::_Slide::GetHeadersFooters ( ) {
    struct HeadersFooters * _result = 0;
    HRESULT _hr = get_HeadersFooters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeadersFootersPtr(_result, false);
}

#pragma implementation_key(2550)
inline PowerPoint::SlideShowTransitionPtr PowerPoint::_Slide::GetSlideShowTransition ( ) {
    struct SlideShowTransition * _result = 0;
    HRESULT _hr = get_SlideShowTransition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowTransitionPtr(_result, false);
}

#pragma implementation_key(2551)
inline PowerPoint::ColorSchemePtr PowerPoint::_Slide::GetColorScheme ( ) {
    struct ColorScheme * _result = 0;
    HRESULT _hr = get_ColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemePtr(_result, false);
}

#pragma implementation_key(2552)
inline void PowerPoint::_Slide::PutColorScheme ( struct ColorScheme * ColorScheme ) {
    HRESULT _hr = put_ColorScheme(ColorScheme);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2553)
inline PowerPoint::ShapeRangePtr PowerPoint::_Slide::GetBackground ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2554)
inline _bstr_t PowerPoint::_Slide::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2555)
inline void PowerPoint::_Slide::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2556)
inline long PowerPoint::_Slide::GetSlideID ( ) {
    long _result = 0;
    HRESULT _hr = get_SlideID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2557)
inline int PowerPoint::_Slide::GetPrintSteps ( ) {
    int _result = 0;
    HRESULT _hr = get_PrintSteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2558)
inline HRESULT PowerPoint::_Slide::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2559)
inline HRESULT PowerPoint::_Slide::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2560)
inline HRESULT PowerPoint::_Slide::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2561)
inline enum PowerPoint::PpSlideLayout PowerPoint::_Slide::GetLayout ( ) {
    enum PpSlideLayout _result;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2562)
inline void PowerPoint::_Slide::PutLayout ( enum PpSlideLayout Layout ) {
    HRESULT _hr = put_Layout(Layout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2563)
inline PowerPoint::SlideRangePtr PowerPoint::_Slide::Duplicate ( ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

#pragma implementation_key(2564)
inline HRESULT PowerPoint::_Slide::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2565)
inline PowerPoint::TagsPtr PowerPoint::_Slide::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

#pragma implementation_key(2566)
inline int PowerPoint::_Slide::GetSlideIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_SlideIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2567)
inline int PowerPoint::_Slide::GetSlideNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_SlideNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2568)
inline __missing_type__  PowerPoint::_Slide::GetDisplayMasterShapes ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_DisplayMasterShapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2569)
inline void PowerPoint::_Slide::PutDisplayMasterShapes ( __missing_type__ DisplayMasterShapes ) {
    HRESULT _hr = put_DisplayMasterShapes(DisplayMasterShapes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2570)
inline __missing_type__  PowerPoint::_Slide::GetFollowMasterBackground ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_FollowMasterBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2571)
inline void PowerPoint::_Slide::PutFollowMasterBackground ( __missing_type__ FollowMasterBackground ) {
    HRESULT _hr = put_FollowMasterBackground(FollowMasterBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2572)
inline PowerPoint::SlideRangePtr PowerPoint::_Slide::GetNotesPage ( ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = get_NotesPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

#pragma implementation_key(2573)
inline PowerPoint::_MasterPtr PowerPoint::_Slide::GetMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_Master(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(2574)
inline PowerPoint::HyperlinksPtr PowerPoint::_Slide::GetHyperlinks ( ) {
    struct Hyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

#pragma implementation_key(2575)
inline HRESULT PowerPoint::_Slide::Export ( _bstr_t FileName, _bstr_t FilterName, int ScaleWidth, int ScaleHeight ) {
    HRESULT _hr = raw_Export(FileName, FilterName, ScaleWidth, ScaleHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2576)
inline __missing_type__ PowerPoint::_Slide::GetScripts ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Scripts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2577)
inline PowerPoint::CommentsPtr PowerPoint::_Slide::GetComments ( ) {
    struct Comments * _result = 0;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentsPtr(_result, false);
}

#pragma implementation_key(2578)
inline PowerPoint::DesignPtr PowerPoint::_Slide::GetDesign ( ) {
    struct Design * _result = 0;
    HRESULT _hr = get_Design(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

#pragma implementation_key(2579)
inline void PowerPoint::_Slide::PutDesign ( struct Design * Design ) {
    HRESULT _hr = put_Design(Design);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2580)
inline HRESULT PowerPoint::_Slide::MoveTo ( int toPos ) {
    HRESULT _hr = raw_MoveTo(toPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2581)
inline PowerPoint::TimeLinePtr PowerPoint::_Slide::GetTimeLine ( ) {
    struct TimeLine * _result = 0;
    HRESULT _hr = get_TimeLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TimeLinePtr(_result, false);
}

#pragma implementation_key(2582)
inline HRESULT PowerPoint::_Slide::ApplyTemplate ( _bstr_t FileName ) {
    HRESULT _hr = raw_ApplyTemplate(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2583)
inline int PowerPoint::_Slide::GetSectionNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_SectionNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2584)
inline PowerPoint::CustomLayoutPtr PowerPoint::_Slide::GetCustomLayout ( ) {
    struct CustomLayout * _result = 0;
    HRESULT _hr = get_CustomLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLayoutPtr(_result, false);
}

#pragma implementation_key(2585)
inline void PowerPoint::_Slide::PutCustomLayout ( struct CustomLayout * CustomLayout ) {
    HRESULT _hr = put_CustomLayout(CustomLayout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2586)
inline HRESULT PowerPoint::_Slide::ApplyTheme ( _bstr_t themeName ) {
    HRESULT _hr = raw_ApplyTheme(themeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2587)
inline __missing_type__ PowerPoint::_Slide::GetThemeColorScheme ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_ThemeColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2588)
inline HRESULT PowerPoint::_Slide::ApplyThemeColorScheme ( _bstr_t themeColorSchemeName ) {
    HRESULT _hr = raw_ApplyThemeColorScheme(themeColorSchemeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2589)
inline __missing_type__  PowerPoint::_Slide::GetBackgroundStyle ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_BackgroundStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2590)
inline void PowerPoint::_Slide::PutBackgroundStyle ( __missing_type__ BackgroundStyle ) {
    HRESULT _hr = put_BackgroundStyle(BackgroundStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2591)
inline PowerPoint::CustomerDataPtr PowerPoint::_Slide::GetCustomerData ( ) {
    struct CustomerData * _result = 0;
    HRESULT _hr = get_CustomerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomerDataPtr(_result, false);
}

#pragma implementation_key(2592)
inline HRESULT PowerPoint::_Slide::PublishSlides ( _bstr_t SlideLibraryUrl, VARIANT_BOOL Overwrite, VARIANT_BOOL UseSlideOrder ) {
    HRESULT _hr = raw_PublishSlides(SlideLibraryUrl, Overwrite, UseSlideOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2593)
inline HRESULT PowerPoint::_Slide::MoveToSectionStart ( int toSection ) {
    HRESULT _hr = raw_MoveToSectionStart(toSection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2594)
inline int PowerPoint::_Slide::GetsectionIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_sectionIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2595)
inline __missing_type__  PowerPoint::_Slide::GetHasNotesPage ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasNotesPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2596)
inline HRESULT PowerPoint::_Slide::ApplyTemplate2 ( _bstr_t FileName, _bstr_t VariantGUID ) {
    HRESULT _hr = raw_ApplyTemplate2(FileName, VariantGUID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SlideRange wrapper method implementations
//

#pragma implementation_key(2597)
inline PowerPoint::_ApplicationPtr PowerPoint::SlideRange::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2598)
inline IDispatchPtr PowerPoint::SlideRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2599)
inline PowerPoint::ShapesPtr PowerPoint::SlideRange::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

#pragma implementation_key(2600)
inline PowerPoint::HeadersFootersPtr PowerPoint::SlideRange::GetHeadersFooters ( ) {
    struct HeadersFooters * _result = 0;
    HRESULT _hr = get_HeadersFooters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeadersFootersPtr(_result, false);
}

#pragma implementation_key(2601)
inline PowerPoint::SlideShowTransitionPtr PowerPoint::SlideRange::GetSlideShowTransition ( ) {
    struct SlideShowTransition * _result = 0;
    HRESULT _hr = get_SlideShowTransition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowTransitionPtr(_result, false);
}

#pragma implementation_key(2602)
inline PowerPoint::ColorSchemePtr PowerPoint::SlideRange::GetColorScheme ( ) {
    struct ColorScheme * _result = 0;
    HRESULT _hr = get_ColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemePtr(_result, false);
}

#pragma implementation_key(2603)
inline void PowerPoint::SlideRange::PutColorScheme ( struct ColorScheme * ColorScheme ) {
    HRESULT _hr = put_ColorScheme(ColorScheme);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2604)
inline PowerPoint::ShapeRangePtr PowerPoint::SlideRange::GetBackground ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2605)
inline _bstr_t PowerPoint::SlideRange::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2606)
inline void PowerPoint::SlideRange::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2607)
inline long PowerPoint::SlideRange::GetSlideID ( ) {
    long _result = 0;
    HRESULT _hr = get_SlideID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2608)
inline int PowerPoint::SlideRange::GetPrintSteps ( ) {
    int _result = 0;
    HRESULT _hr = get_PrintSteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2609)
inline HRESULT PowerPoint::SlideRange::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2610)
inline HRESULT PowerPoint::SlideRange::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2611)
inline HRESULT PowerPoint::SlideRange::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2612)
inline enum PowerPoint::PpSlideLayout PowerPoint::SlideRange::GetLayout ( ) {
    enum PpSlideLayout _result;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2613)
inline void PowerPoint::SlideRange::PutLayout ( enum PpSlideLayout Layout ) {
    HRESULT _hr = put_Layout(Layout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2614)
inline PowerPoint::SlideRangePtr PowerPoint::SlideRange::Duplicate ( ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

#pragma implementation_key(2615)
inline HRESULT PowerPoint::SlideRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2616)
inline PowerPoint::TagsPtr PowerPoint::SlideRange::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

#pragma implementation_key(2617)
inline int PowerPoint::SlideRange::GetSlideIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_SlideIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2618)
inline int PowerPoint::SlideRange::GetSlideNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_SlideNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2619)
inline __missing_type__  PowerPoint::SlideRange::GetDisplayMasterShapes ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_DisplayMasterShapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2620)
inline void PowerPoint::SlideRange::PutDisplayMasterShapes ( __missing_type__ DisplayMasterShapes ) {
    HRESULT _hr = put_DisplayMasterShapes(DisplayMasterShapes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2621)
inline __missing_type__  PowerPoint::SlideRange::GetFollowMasterBackground ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_FollowMasterBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2622)
inline void PowerPoint::SlideRange::PutFollowMasterBackground ( __missing_type__ FollowMasterBackground ) {
    HRESULT _hr = put_FollowMasterBackground(FollowMasterBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2623)
inline PowerPoint::SlideRangePtr PowerPoint::SlideRange::GetNotesPage ( ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = get_NotesPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

#pragma implementation_key(2624)
inline PowerPoint::_MasterPtr PowerPoint::SlideRange::GetMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_Master(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(2625)
inline PowerPoint::HyperlinksPtr PowerPoint::SlideRange::GetHyperlinks ( ) {
    struct Hyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

#pragma implementation_key(2626)
inline HRESULT PowerPoint::SlideRange::Export ( _bstr_t FileName, _bstr_t FilterName, int ScaleWidth, int ScaleHeight ) {
    HRESULT _hr = raw_Export(FileName, FilterName, ScaleWidth, ScaleHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2627)
inline PowerPoint::_SlidePtr PowerPoint::SlideRange::Item ( const _variant_t & Index ) {
    struct _Slide * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

#pragma implementation_key(2628)
inline IUnknownPtr PowerPoint::SlideRange::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2629)
inline _variant_t PowerPoint::SlideRange::_Index ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Index(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2630)
inline long PowerPoint::SlideRange::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2631)
inline __missing_type__ PowerPoint::SlideRange::GetScripts ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Scripts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2632)
inline PowerPoint::CommentsPtr PowerPoint::SlideRange::GetComments ( ) {
    struct Comments * _result = 0;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentsPtr(_result, false);
}

#pragma implementation_key(2633)
inline PowerPoint::DesignPtr PowerPoint::SlideRange::GetDesign ( ) {
    struct Design * _result = 0;
    HRESULT _hr = get_Design(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

#pragma implementation_key(2634)
inline void PowerPoint::SlideRange::PutDesign ( struct Design * Design ) {
    HRESULT _hr = put_Design(Design);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2635)
inline HRESULT PowerPoint::SlideRange::MoveTo ( int toPos ) {
    HRESULT _hr = raw_MoveTo(toPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2636)
inline PowerPoint::TimeLinePtr PowerPoint::SlideRange::GetTimeLine ( ) {
    struct TimeLine * _result = 0;
    HRESULT _hr = get_TimeLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TimeLinePtr(_result, false);
}

#pragma implementation_key(2637)
inline HRESULT PowerPoint::SlideRange::ApplyTemplate ( _bstr_t FileName ) {
    HRESULT _hr = raw_ApplyTemplate(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2638)
inline int PowerPoint::SlideRange::GetSectionNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_SectionNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2639)
inline PowerPoint::CustomLayoutPtr PowerPoint::SlideRange::GetCustomLayout ( ) {
    struct CustomLayout * _result = 0;
    HRESULT _hr = get_CustomLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLayoutPtr(_result, false);
}

#pragma implementation_key(2640)
inline void PowerPoint::SlideRange::PutCustomLayout ( struct CustomLayout * CustomLayout ) {
    HRESULT _hr = put_CustomLayout(CustomLayout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2641)
inline HRESULT PowerPoint::SlideRange::ApplyTheme ( _bstr_t themeName ) {
    HRESULT _hr = raw_ApplyTheme(themeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2642)
inline __missing_type__ PowerPoint::SlideRange::GetThemeColorScheme ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_ThemeColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2643)
inline HRESULT PowerPoint::SlideRange::ApplyThemeColorScheme ( _bstr_t themeColorSchemeName ) {
    HRESULT _hr = raw_ApplyThemeColorScheme(themeColorSchemeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2644)
inline __missing_type__  PowerPoint::SlideRange::GetBackgroundStyle ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_BackgroundStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2645)
inline void PowerPoint::SlideRange::PutBackgroundStyle ( __missing_type__ BackgroundStyle ) {
    HRESULT _hr = put_BackgroundStyle(BackgroundStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2646)
inline PowerPoint::CustomerDataPtr PowerPoint::SlideRange::GetCustomerData ( ) {
    struct CustomerData * _result = 0;
    HRESULT _hr = get_CustomerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomerDataPtr(_result, false);
}

#pragma implementation_key(2647)
inline HRESULT PowerPoint::SlideRange::PublishSlides ( _bstr_t SlideLibraryUrl, VARIANT_BOOL Overwrite, VARIANT_BOOL UseSlideOrder ) {
    HRESULT _hr = raw_PublishSlides(SlideLibraryUrl, Overwrite, UseSlideOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2648)
inline HRESULT PowerPoint::SlideRange::MoveToSectionStart ( int toSection ) {
    HRESULT _hr = raw_MoveToSectionStart(toSection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2649)
inline int PowerPoint::SlideRange::GetsectionIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_sectionIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2650)
inline __missing_type__  PowerPoint::SlideRange::GetHasNotesPage ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasNotesPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2651)
inline HRESULT PowerPoint::SlideRange::ApplyTemplate2 ( _bstr_t FileName, _bstr_t VariantGUID ) {
    HRESULT _hr = raw_ApplyTemplate2(FileName, VariantGUID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _Master wrapper method implementations
//

#pragma implementation_key(2652)
inline PowerPoint::_ApplicationPtr PowerPoint::_Master::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2653)
inline IDispatchPtr PowerPoint::_Master::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2654)
inline PowerPoint::ShapesPtr PowerPoint::_Master::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

#pragma implementation_key(2655)
inline PowerPoint::HeadersFootersPtr PowerPoint::_Master::GetHeadersFooters ( ) {
    struct HeadersFooters * _result = 0;
    HRESULT _hr = get_HeadersFooters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeadersFootersPtr(_result, false);
}

#pragma implementation_key(2656)
inline PowerPoint::ColorSchemePtr PowerPoint::_Master::GetColorScheme ( ) {
    struct ColorScheme * _result = 0;
    HRESULT _hr = get_ColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemePtr(_result, false);
}

#pragma implementation_key(2657)
inline void PowerPoint::_Master::PutColorScheme ( struct ColorScheme * ColorScheme ) {
    HRESULT _hr = put_ColorScheme(ColorScheme);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2658)
inline PowerPoint::ShapeRangePtr PowerPoint::_Master::GetBackground ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2659)
inline _bstr_t PowerPoint::_Master::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2660)
inline void PowerPoint::_Master::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2661)
inline HRESULT PowerPoint::_Master::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2662)
inline float PowerPoint::_Master::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2663)
inline float PowerPoint::_Master::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2664)
inline PowerPoint::TextStylesPtr PowerPoint::_Master::GetTextStyles ( ) {
    struct TextStyles * _result = 0;
    HRESULT _hr = get_TextStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextStylesPtr(_result, false);
}

#pragma implementation_key(2665)
inline PowerPoint::HyperlinksPtr PowerPoint::_Master::GetHyperlinks ( ) {
    struct Hyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

#pragma implementation_key(2666)
inline __missing_type__ PowerPoint::_Master::GetScripts ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Scripts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2667)
inline PowerPoint::DesignPtr PowerPoint::_Master::GetDesign ( ) {
    struct Design * _result = 0;
    HRESULT _hr = get_Design(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

#pragma implementation_key(2668)
inline PowerPoint::TimeLinePtr PowerPoint::_Master::GetTimeLine ( ) {
    struct TimeLine * _result = 0;
    HRESULT _hr = get_TimeLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TimeLinePtr(_result, false);
}

#pragma implementation_key(2669)
inline PowerPoint::SlideShowTransitionPtr PowerPoint::_Master::GetSlideShowTransition ( ) {
    struct SlideShowTransition * _result = 0;
    HRESULT _hr = get_SlideShowTransition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowTransitionPtr(_result, false);
}

#pragma implementation_key(2670)
inline PowerPoint::CustomLayoutsPtr PowerPoint::_Master::GetCustomLayouts ( ) {
    struct CustomLayouts * _result = 0;
    HRESULT _hr = get_CustomLayouts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLayoutsPtr(_result, false);
}

#pragma implementation_key(2671)
inline __missing_type__ PowerPoint::_Master::GetTheme ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Theme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2672)
inline HRESULT PowerPoint::_Master::ApplyTheme ( _bstr_t themeName ) {
    HRESULT _hr = raw_ApplyTheme(themeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2673)
inline __missing_type__  PowerPoint::_Master::GetBackgroundStyle ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_BackgroundStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2674)
inline void PowerPoint::_Master::PutBackgroundStyle ( __missing_type__ BackgroundStyle ) {
    HRESULT _hr = put_BackgroundStyle(BackgroundStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2675)
inline PowerPoint::CustomerDataPtr PowerPoint::_Master::GetCustomerData ( ) {
    struct CustomerData * _result = 0;
    HRESULT _hr = get_CustomerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomerDataPtr(_result, false);
}

#pragma implementation_key(2676)
inline PowerPoint::GuidesPtr PowerPoint::_Master::GetGuides ( ) {
    struct Guides * _result = 0;
    HRESULT _hr = get_Guides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GuidesPtr(_result, false);
}

//
// interface Design wrapper method implementations
//

#pragma implementation_key(2677)
inline PowerPoint::_ApplicationPtr PowerPoint::Design::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2678)
inline IDispatchPtr PowerPoint::Design::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2679)
inline PowerPoint::_MasterPtr PowerPoint::Design::GetSlideMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_SlideMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(2680)
inline PowerPoint::_MasterPtr PowerPoint::Design::GetTitleMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_TitleMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(2681)
inline __missing_type__  PowerPoint::Design::GetHasTitleMaster ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasTitleMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2682)
inline PowerPoint::_MasterPtr PowerPoint::Design::AddTitleMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = raw_AddTitleMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(2683)
inline int PowerPoint::Design::GetIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2684)
inline _bstr_t PowerPoint::Design::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2685)
inline void PowerPoint::Design::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2686)
inline __missing_type__  PowerPoint::Design::GetPreserved ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Preserved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2687)
inline void PowerPoint::Design::PutPreserved ( __missing_type__ Preserved ) {
    HRESULT _hr = put_Preserved(Preserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2688)
inline HRESULT PowerPoint::Design::MoveTo ( int toPos ) {
    HRESULT _hr = raw_MoveTo(toPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2689)
inline HRESULT PowerPoint::Design::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Designs wrapper method implementations
//

#pragma implementation_key(2690)
inline PowerPoint::_ApplicationPtr PowerPoint::Designs::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2691)
inline IDispatchPtr PowerPoint::Designs::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2692)
inline PowerPoint::DesignPtr PowerPoint::Designs::Item ( const _variant_t & Index ) {
    struct Design * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

#pragma implementation_key(2693)
inline PowerPoint::DesignPtr PowerPoint::Designs::Add ( _bstr_t designName, int Index ) {
    struct Design * _result = 0;
    HRESULT _hr = raw_Add(designName, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

#pragma implementation_key(2694)
inline PowerPoint::DesignPtr PowerPoint::Designs::Load ( _bstr_t TemplateName, int Index ) {
    struct Design * _result = 0;
    HRESULT _hr = raw_Load(TemplateName, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

#pragma implementation_key(2695)
inline PowerPoint::DesignPtr PowerPoint::Designs::Clone ( struct Design * pOriginal, int Index ) {
    struct Design * _result = 0;
    HRESULT _hr = raw_Clone(pOriginal, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

//
// interface Shapes wrapper method implementations
//

#pragma implementation_key(2696)
inline IDispatchPtr PowerPoint::Shapes::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2697)
inline long PowerPoint::Shapes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2698)
inline IDispatchPtr PowerPoint::Shapes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2699)
inline int PowerPoint::Shapes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2700)
inline PowerPoint::ShapePtr PowerPoint::Shapes::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2701)
inline IUnknownPtr PowerPoint::Shapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2702)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddCallout ( __missing_type__ Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCallout(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2703)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddConnector ( __missing_type__ Type, float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddConnector(Type, BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2704)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddCurve ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCurve(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2705)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddLabel ( __missing_type__ Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddLabel(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2706)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddLine(BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2707)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddPicture ( _bstr_t FileName, __missing_type__ LinkToFile, __missing_type__ SaveWithDocument, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2708)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddPolyline ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPolyline(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2709)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddShape ( __missing_type__ Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddShape(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2710)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddTextEffect ( __missing_type__ PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, __missing_type__ FontBold, __missing_type__ FontItalic, float Left, float Top ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2711)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddTextbox ( __missing_type__ Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTextbox(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2712)
inline PowerPoint::FreeformBuilderPtr PowerPoint::Shapes::BuildFreeform ( __missing_type__ EditingType, float X1, float Y1 ) {
    struct FreeformBuilder * _result = 0;
    HRESULT _hr = raw_BuildFreeform(EditingType, X1, Y1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FreeformBuilderPtr(_result, false);
}

#pragma implementation_key(2713)
inline HRESULT PowerPoint::Shapes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2714)
inline PowerPoint::ShapeRangePtr PowerPoint::Shapes::Range ( const _variant_t & Index ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2715)
inline __missing_type__  PowerPoint::Shapes::GetHasTitle ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2716)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddTitle ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2717)
inline PowerPoint::ShapePtr PowerPoint::Shapes::GetTitle ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2718)
inline PowerPoint::PlaceholdersPtr PowerPoint::Shapes::GetPlaceholders ( ) {
    struct Placeholders * _result = 0;
    HRESULT _hr = get_Placeholders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlaceholdersPtr(_result, false);
}

#pragma implementation_key(2719)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddOLEObject ( float Left, float Top, float Width, float Height, _bstr_t ClassName, _bstr_t FileName, __missing_type__ DisplayAsIcon, _bstr_t IconFileName, int IconIndex, _bstr_t IconLabel, __missing_type__ Link ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddOLEObject(Left, Top, Width, Height, ClassName, FileName, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Link, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2720)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddComment ( float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddComment(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2721)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddPlaceholder ( enum PpPlaceholderType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPlaceholder(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2722)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddMediaObject ( _bstr_t FileName, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddMediaObject(FileName, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2723)
inline PowerPoint::ShapeRangePtr PowerPoint::Shapes::Paste ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2724)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddTable ( int NumRows, int NumColumns, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTable(NumRows, NumColumns, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2725)
inline PowerPoint::ShapeRangePtr PowerPoint::Shapes::PasteSpecial ( enum PpPasteDataType DataType, __missing_type__ DisplayAsIcon, _bstr_t IconFileName, int IconIndex, _bstr_t IconLabel, __missing_type__ Link ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_PasteSpecial(DataType, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Link, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2726)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddDiagram ( __missing_type__ Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddDiagram(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2727)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddCanvas ( float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCanvas(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2728)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddChart ( __missing_type__ Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddChart(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2729)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddMediaObject2 ( _bstr_t FileName, __missing_type__ LinkToFile, __missing_type__ SaveWithDocument, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddMediaObject2(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2730)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddMediaObjectFromEmbedTag ( _bstr_t EmbedTag, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddMediaObjectFromEmbedTag(EmbedTag, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2731)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddSmartArt ( __missing_type__ * Layout, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddSmartArt(Layout, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2732)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddChart2 ( int Style, __missing_type__ Type, float Left, float Top, float Width, float Height, VARIANT_BOOL NewLayout ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddChart2(Style, Type, Left, Top, Width, Height, NewLayout, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2733)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddPicture2 ( _bstr_t FileName, __missing_type__ LinkToFile, __missing_type__ SaveWithDocument, float Left, float Top, float Width, float Height, __missing_type__ compress ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPicture2(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, compress, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2734)
inline PowerPoint::ShapePtr PowerPoint::Shapes::AddInkShapeFromXML ( _bstr_t InkXML, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddInkShapeFromXML(InkXML, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface Chart wrapper method implementations
//

#pragma implementation_key(2735)
inline IDispatchPtr PowerPoint::Chart::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2736)
inline HRESULT PowerPoint::Chart::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator ) {
    HRESULT _hr = raw_ApplyDataLabels(Type, LegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2737)
inline __missing_type__  PowerPoint::Chart::GetChartType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ChartType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2738)
inline void PowerPoint::Chart::PutChartType ( __missing_type__ RHS ) {
    HRESULT _hr = put_ChartType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2739)
inline VARIANT_BOOL PowerPoint::Chart::GetHasDataTable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDataTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2740)
inline void PowerPoint::Chart::PutHasDataTable ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDataTable(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2741)
inline HRESULT PowerPoint::Chart::ApplyCustomType ( __missing_type__ ChartType, const _variant_t & TypeName ) {
    HRESULT _hr = raw_ApplyCustomType(ChartType, TypeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2742)
inline HRESULT PowerPoint::Chart::GetChartElement ( long X, long Y, long * ElementID, long * Arg1, long * Arg2 ) {
    HRESULT _hr = raw_GetChartElement(X, Y, ElementID, Arg1, Arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2743)
inline HRESULT PowerPoint::Chart::SetSourceData ( _bstr_t Source, const _variant_t & PlotBy ) {
    HRESULT _hr = raw_SetSourceData(Source, PlotBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2744)
inline enum PowerPoint::XlRowCol PowerPoint::Chart::GetPlotBy ( ) {
    enum XlRowCol _result;
    HRESULT _hr = get_PlotBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2745)
inline void PowerPoint::Chart::PutPlotBy ( enum XlRowCol PlotBy ) {
    HRESULT _hr = put_PlotBy(PlotBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2746)
inline HRESULT PowerPoint::Chart::AutoFormat ( long Gallery, const _variant_t & Format ) {
    HRESULT _hr = raw_AutoFormat(Gallery, Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2747)
inline HRESULT PowerPoint::Chart::SetBackgroundPicture ( _bstr_t FileName ) {
    HRESULT _hr = raw_SetBackgroundPicture(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2748)
inline PowerPoint::DataTablePtr PowerPoint::Chart::GetDataTable ( ) {
    struct DataTable * _result = 0;
    HRESULT _hr = get_DataTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DataTablePtr(_result, false);
}

#pragma implementation_key(2749)
inline HRESULT PowerPoint::Chart::Paste ( const _variant_t & Type, long lcid ) {
    HRESULT _hr = raw_Paste(Type, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2750)
inline enum PowerPoint::XlBarShape PowerPoint::Chart::GetBarShape ( ) {
    enum XlBarShape _result;
    HRESULT _hr = get_BarShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2751)
inline void PowerPoint::Chart::PutBarShape ( enum XlBarShape RHS ) {
    HRESULT _hr = put_BarShape(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2752)
inline HRESULT PowerPoint::Chart::SetDefaultChart ( const _variant_t & Name ) {
    HRESULT _hr = raw_SetDefaultChart(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2753)
inline HRESULT PowerPoint::Chart::ApplyChartTemplate ( _bstr_t FileName ) {
    HRESULT _hr = raw_ApplyChartTemplate(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2754)
inline HRESULT PowerPoint::Chart::SaveChartTemplate ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveChartTemplate(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2755)
inline PowerPoint::WallsPtr PowerPoint::Chart::GetSideWall ( ) {
    struct Walls * _result = 0;
    HRESULT _hr = get_SideWall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WallsPtr(_result, false);
}

#pragma implementation_key(2756)
inline PowerPoint::WallsPtr PowerPoint::Chart::GetBackWall ( ) {
    struct Walls * _result = 0;
    HRESULT _hr = get_BackWall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WallsPtr(_result, false);
}

#pragma implementation_key(2757)
inline _variant_t PowerPoint::Chart::GetChartStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChartStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2758)
inline void PowerPoint::Chart::PutChartStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_ChartStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2759)
inline HRESULT PowerPoint::Chart::ClearToMatchStyle ( ) {
    HRESULT _hr = raw_ClearToMatchStyle();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2760)
inline VARIANT_BOOL PowerPoint::Chart::GetHasPivotFields ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasPivotFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2761)
inline void PowerPoint::Chart::PutHasPivotFields ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasPivotFields(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2762)
inline void PowerPoint::Chart::PutShowDataLabelsOverMaximum ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowDataLabelsOverMaximum(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2763)
inline VARIANT_BOOL PowerPoint::Chart::GetShowDataLabelsOverMaximum ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowDataLabelsOverMaximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2764)
inline HRESULT PowerPoint::Chart::ApplyLayout ( long Layout, const _variant_t & ChartType ) {
    HRESULT _hr = raw_ApplyLayout(Layout, ChartType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2765)
inline HRESULT PowerPoint::Chart::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2766)
inline PowerPoint::ChartDataPtr PowerPoint::Chart::GetChartData ( ) {
    struct ChartData * _result = 0;
    HRESULT _hr = get_ChartData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartDataPtr(_result, false);
}

#pragma implementation_key(2767)
inline PowerPoint::ShapesPtr PowerPoint::Chart::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

#pragma implementation_key(2768)
inline long PowerPoint::Chart::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2769)
inline PowerPoint::ChartGroupPtr PowerPoint::Chart::GetArea3DGroup ( long lcid ) {
    struct ChartGroup * _result = 0;
    HRESULT _hr = get_Area3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(2770)
inline IDispatchPtr PowerPoint::Chart::AreaGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_AreaGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2771)
inline PowerPoint::ChartGroupPtr PowerPoint::Chart::GetBar3DGroup ( long lcid ) {
    struct ChartGroup * _result = 0;
    HRESULT _hr = get_Bar3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(2772)
inline IDispatchPtr PowerPoint::Chart::BarGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_BarGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2773)
inline PowerPoint::ChartGroupPtr PowerPoint::Chart::GetColumn3DGroup ( long lcid ) {
    struct ChartGroup * _result = 0;
    HRESULT _hr = get_Column3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(2774)
inline IDispatchPtr PowerPoint::Chart::ColumnGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_ColumnGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2775)
inline PowerPoint::ChartGroupPtr PowerPoint::Chart::GetLine3DGroup ( long lcid ) {
    struct ChartGroup * _result = 0;
    HRESULT _hr = get_Line3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(2776)
inline IDispatchPtr PowerPoint::Chart::LineGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_LineGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2777)
inline PowerPoint::ChartGroupPtr PowerPoint::Chart::GetPie3DGroup ( long lcid ) {
    struct ChartGroup * _result = 0;
    HRESULT _hr = get_Pie3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(2778)
inline IDispatchPtr PowerPoint::Chart::PieGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_PieGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2779)
inline IDispatchPtr PowerPoint::Chart::DoughnutGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_DoughnutGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2780)
inline IDispatchPtr PowerPoint::Chart::RadarGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_RadarGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2781)
inline PowerPoint::ChartGroupPtr PowerPoint::Chart::GetSurfaceGroup ( long lcid ) {
    struct ChartGroup * _result = 0;
    HRESULT _hr = get_SurfaceGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(2782)
inline IDispatchPtr PowerPoint::Chart::XYGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_XYGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2783)
inline PowerPoint::_ApplicationPtr PowerPoint::Chart::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2784)
inline HRESULT PowerPoint::Chart::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, long lcid ) {
    HRESULT _hr = raw__ApplyDataLabels(Type, LegendKey, AutoText, HasLeaderLines, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2785)
inline void PowerPoint::Chart::PutAutoScaling ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoScaling(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2786)
inline VARIANT_BOOL PowerPoint::Chart::GetAutoScaling ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoScaling(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2787)
inline IDispatchPtr PowerPoint::Chart::Axes ( const _variant_t & Type, enum XlAxisGroup AxisGroup, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Axes(Type, AxisGroup, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2788)
inline PowerPoint::ChartAreaPtr PowerPoint::Chart::GetChartArea ( long lcid ) {
    struct ChartArea * _result = 0;
    HRESULT _hr = get_ChartArea(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartAreaPtr(_result, false);
}

#pragma implementation_key(2789)
inline IDispatchPtr PowerPoint::Chart::ChartGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_ChartGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2790)
inline PowerPoint::ChartTitlePtr PowerPoint::Chart::GetChartTitle ( long lcid ) {
    struct ChartTitle * _result = 0;
    HRESULT _hr = get_ChartTitle(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartTitlePtr(_result, false);
}

#pragma implementation_key(2791)
inline HRESULT PowerPoint::Chart::ChartWizard ( const _variant_t & Source, const _variant_t & Gallery, const _variant_t & Format, const _variant_t & PlotBy, const _variant_t & CategoryLabels, const _variant_t & SeriesLabels, const _variant_t & HasLegend, const _variant_t & Title, const _variant_t & CategoryTitle, const _variant_t & ValueTitle, const _variant_t & ExtraTitle, long lcid ) {
    HRESULT _hr = raw_ChartWizard(Source, Gallery, Format, PlotBy, CategoryLabels, SeriesLabels, HasLegend, Title, CategoryTitle, ValueTitle, ExtraTitle, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2792)
inline HRESULT PowerPoint::Chart::Copy ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Copy(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2793)
inline HRESULT PowerPoint::Chart::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format, enum XlPictureAppearance Size, long LocaleID ) {
    HRESULT _hr = raw_CopyPicture(Appearance, Format, Size, LocaleID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2794)
inline PowerPoint::CornersPtr PowerPoint::Chart::GetCorners ( long lcid ) {
    struct Corners * _result = 0;
    HRESULT _hr = get_Corners(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CornersPtr(_result, false);
}

#pragma implementation_key(2795)
inline HRESULT PowerPoint::Chart::Delete ( long lcid ) {
    HRESULT _hr = raw_Delete(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2796)
inline long PowerPoint::Chart::GetDepthPercent ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_DepthPercent(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2797)
inline void PowerPoint::Chart::PutDepthPercent ( long lcid, long RHS ) {
    HRESULT _hr = put_DepthPercent(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2798)
inline enum PowerPoint::XlDisplayBlanksAs PowerPoint::Chart::GetDisplayBlanksAs ( long lcid ) {
    enum XlDisplayBlanksAs _result;
    HRESULT _hr = get_DisplayBlanksAs(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2799)
inline void PowerPoint::Chart::PutDisplayBlanksAs ( long lcid, enum XlDisplayBlanksAs RHS ) {
    HRESULT _hr = put_DisplayBlanksAs(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2800)
inline long PowerPoint::Chart::GetElevation ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_Elevation(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2801)
inline void PowerPoint::Chart::PutElevation ( long lcid, long RHS ) {
    HRESULT _hr = put_Elevation(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2802)
inline VARIANT_BOOL PowerPoint::Chart::Export ( _bstr_t FileName, const _variant_t & FilterName, const _variant_t & Interactive ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Export(FileName, FilterName, Interactive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2803)
inline PowerPoint::FloorPtr PowerPoint::Chart::GetFloor ( long lcid ) {
    struct Floor * _result = 0;
    HRESULT _hr = get_Floor(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FloorPtr(_result, false);
}

#pragma implementation_key(2804)
inline long PowerPoint::Chart::GetGapDepth ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_GapDepth(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2805)
inline void PowerPoint::Chart::PutGapDepth ( long lcid, long RHS ) {
    HRESULT _hr = put_GapDepth(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2806)
inline _variant_t PowerPoint::Chart::GetHasAxis ( const _variant_t & Index1, const _variant_t & Index2, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HasAxis(Index1, Index2, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2807)
inline void PowerPoint::Chart::PutHasAxis ( const _variant_t & Index1, const _variant_t & Index2, long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_HasAxis(Index1, Index2, lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2808)
inline VARIANT_BOOL PowerPoint::Chart::GetHasLegend ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasLegend(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2809)
inline void PowerPoint::Chart::PutHasLegend ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasLegend(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2810)
inline VARIANT_BOOL PowerPoint::Chart::GetHasTitle ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasTitle(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2811)
inline void PowerPoint::Chart::PutHasTitle ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasTitle(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2812)
inline long PowerPoint::Chart::GetHeightPercent ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_HeightPercent(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2813)
inline void PowerPoint::Chart::PutHeightPercent ( long lcid, long RHS ) {
    HRESULT _hr = put_HeightPercent(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2814)
inline PowerPoint::LegendPtr PowerPoint::Chart::GetLegend ( long lcid ) {
    struct Legend * _result = 0;
    HRESULT _hr = get_Legend(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LegendPtr(_result, false);
}

#pragma implementation_key(2815)
inline _bstr_t PowerPoint::Chart::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2816)
inline void PowerPoint::Chart::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2817)
inline long PowerPoint::Chart::GetPerspective ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_Perspective(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2818)
inline void PowerPoint::Chart::PutPerspective ( long lcid, long RHS ) {
    HRESULT _hr = put_Perspective(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2819)
inline PowerPoint::PlotAreaPtr PowerPoint::Chart::GetPlotArea ( long lcid ) {
    struct PlotArea * _result = 0;
    HRESULT _hr = get_PlotArea(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlotAreaPtr(_result, false);
}

#pragma implementation_key(2820)
inline VARIANT_BOOL PowerPoint::Chart::GetPlotVisibleOnly ( long lcid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PlotVisibleOnly(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2821)
inline void PowerPoint::Chart::PutPlotVisibleOnly ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PlotVisibleOnly(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2822)
inline _variant_t PowerPoint::Chart::GetRightAngleAxes ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RightAngleAxes(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2823)
inline void PowerPoint::Chart::PutRightAngleAxes ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_RightAngleAxes(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2824)
inline _variant_t PowerPoint::Chart::GetRotation ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Rotation(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2825)
inline void PowerPoint::Chart::PutRotation ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Rotation(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2826)
inline HRESULT PowerPoint::Chart::Select ( const _variant_t & Replace, long lcid ) {
    HRESULT _hr = raw_Select(Replace, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2827)
inline IDispatchPtr PowerPoint::Chart::SeriesCollection ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_SeriesCollection(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2828)
inline HRESULT PowerPoint::Chart::SetElement ( __missing_type__ Element ) {
    HRESULT _hr = raw_SetElement(Element);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2829)
inline long PowerPoint::Chart::GetSubtype ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_Subtype(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2830)
inline void PowerPoint::Chart::PutSubtype ( long lcid, long RHS ) {
    HRESULT _hr = put_Subtype(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2831)
inline long PowerPoint::Chart::GetType ( long lcid ) {
    long _result = 0;
    HRESULT _hr = get_Type(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2832)
inline void PowerPoint::Chart::PutType ( long lcid, long RHS ) {
    HRESULT _hr = put_Type(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2833)
inline PowerPoint::WallsPtr PowerPoint::Chart::GetWalls ( long lcid ) {
    struct Walls * _result = 0;
    HRESULT _hr = get_Walls(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WallsPtr(_result, false);
}

#pragma implementation_key(2834)
inline PowerPoint::ChartFormatPtr PowerPoint::Chart::GetFormat ( ) {
    struct ChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFormatPtr(_result, false);
}

#pragma implementation_key(2835)
inline VARIANT_BOOL PowerPoint::Chart::GetShowReportFilterFieldButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowReportFilterFieldButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2836)
inline void PowerPoint::Chart::PutShowReportFilterFieldButtons ( VARIANT_BOOL res ) {
    HRESULT _hr = put_ShowReportFilterFieldButtons(res);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2837)
inline VARIANT_BOOL PowerPoint::Chart::GetShowLegendFieldButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLegendFieldButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2838)
inline void PowerPoint::Chart::PutShowLegendFieldButtons ( VARIANT_BOOL res ) {
    HRESULT _hr = put_ShowLegendFieldButtons(res);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2839)
inline VARIANT_BOOL PowerPoint::Chart::GetShowAxisFieldButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowAxisFieldButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2840)
inline void PowerPoint::Chart::PutShowAxisFieldButtons ( VARIANT_BOOL res ) {
    HRESULT _hr = put_ShowAxisFieldButtons(res);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2841)
inline VARIANT_BOOL PowerPoint::Chart::GetShowValueFieldButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowValueFieldButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2842)
inline void PowerPoint::Chart::PutShowValueFieldButtons ( VARIANT_BOOL res ) {
    HRESULT _hr = put_ShowValueFieldButtons(res);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2843)
inline VARIANT_BOOL PowerPoint::Chart::GetShowAllFieldButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowAllFieldButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2844)
inline void PowerPoint::Chart::PutShowAllFieldButtons ( VARIANT_BOOL res ) {
    HRESULT _hr = put_ShowAllFieldButtons(res);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2845)
inline _bstr_t PowerPoint::Chart::GetAlternativeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2846)
inline void PowerPoint::Chart::PutAlternativeText ( _bstr_t AlternativeText ) {
    HRESULT _hr = put_AlternativeText(AlternativeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2847)
inline _bstr_t PowerPoint::Chart::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2848)
inline void PowerPoint::Chart::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2849)
inline IDispatchPtr PowerPoint::Chart::FullSeriesCollection ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_FullSeriesCollection(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2850)
inline enum PowerPoint::XlCategoryLabelLevel PowerPoint::Chart::GetCategoryLabelLevel ( ) {
    enum XlCategoryLabelLevel _result;
    HRESULT _hr = get_CategoryLabelLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2851)
inline void PowerPoint::Chart::PutCategoryLabelLevel ( enum XlCategoryLabelLevel plevel ) {
    HRESULT _hr = put_CategoryLabelLevel(plevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2852)
inline enum PowerPoint::XlSeriesNameLevel PowerPoint::Chart::GetSeriesNameLevel ( ) {
    enum XlSeriesNameLevel _result;
    HRESULT _hr = get_SeriesNameLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2853)
inline void PowerPoint::Chart::PutSeriesNameLevel ( enum XlSeriesNameLevel plevel ) {
    HRESULT _hr = put_SeriesNameLevel(plevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2854)
inline VARIANT_BOOL PowerPoint::Chart::GetHasHiddenContent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasHiddenContent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2855)
inline HRESULT PowerPoint::Chart::DeleteHiddenContent ( ) {
    HRESULT _hr = raw_DeleteHiddenContent();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2856)
inline _variant_t PowerPoint::Chart::GetChartColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChartColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2857)
inline void PowerPoint::Chart::PutChartColor ( const _variant_t & pColor ) {
    HRESULT _hr = put_ChartColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2858)
inline HRESULT PowerPoint::Chart::ClearToMatchColorStyle ( ) {
    HRESULT _hr = raw_ClearToMatchColorStyle();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Placeholders wrapper method implementations
//

#pragma implementation_key(2859)
inline PowerPoint::_ApplicationPtr PowerPoint::Placeholders::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2860)
inline IDispatchPtr PowerPoint::Placeholders::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2861)
inline PowerPoint::ShapePtr PowerPoint::Placeholders::Item ( int Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2862)
inline PowerPoint::ShapePtr PowerPoint::Placeholders::FindByName ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_FindByName(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface FreeformBuilder wrapper method implementations
//

#pragma implementation_key(2863)
inline IDispatchPtr PowerPoint::FreeformBuilder::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2864)
inline long PowerPoint::FreeformBuilder::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2865)
inline IDispatchPtr PowerPoint::FreeformBuilder::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2866)
inline HRESULT PowerPoint::FreeformBuilder::AddNodes ( __missing_type__ SegmentType, __missing_type__ EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 ) {
    HRESULT _hr = raw_AddNodes(SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2867)
inline PowerPoint::ShapePtr PowerPoint::FreeformBuilder::ConvertToShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_ConvertToShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface Shape wrapper method implementations
//

#pragma implementation_key(2868)
inline IDispatchPtr PowerPoint::Shape::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2869)
inline long PowerPoint::Shape::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2870)
inline IDispatchPtr PowerPoint::Shape::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2871)
inline HRESULT PowerPoint::Shape::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2872)
inline HRESULT PowerPoint::Shape::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2873)
inline HRESULT PowerPoint::Shape::Flip ( __missing_type__ FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2874)
inline HRESULT PowerPoint::Shape::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2875)
inline HRESULT PowerPoint::Shape::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2876)
inline HRESULT PowerPoint::Shape::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2877)
inline HRESULT PowerPoint::Shape::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2878)
inline HRESULT PowerPoint::Shape::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2879)
inline HRESULT PowerPoint::Shape::ScaleHeight ( float Factor, __missing_type__ RelativeToOriginalSize, __missing_type__ fScale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2880)
inline HRESULT PowerPoint::Shape::ScaleWidth ( float Factor, __missing_type__ RelativeToOriginalSize, __missing_type__ fScale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2881)
inline HRESULT PowerPoint::Shape::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2882)
inline PowerPoint::ShapeRangePtr PowerPoint::Shape::Ungroup ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2883)
inline HRESULT PowerPoint::Shape::ZOrder ( __missing_type__ ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2884)
inline PowerPoint::AdjustmentsPtr PowerPoint::Shape::GetAdjustments ( ) {
    struct Adjustments * _result = 0;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

#pragma implementation_key(2885)
inline __missing_type__  PowerPoint::Shape::GetAutoShapeType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2886)
inline void PowerPoint::Shape::PutAutoShapeType ( __missing_type__ AutoShapeType ) {
    HRESULT _hr = put_AutoShapeType(AutoShapeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2887)
inline __missing_type__  PowerPoint::Shape::GetBlackWhiteMode ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_BlackWhiteMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2888)
inline void PowerPoint::Shape::PutBlackWhiteMode ( __missing_type__ BlackWhiteMode ) {
    HRESULT _hr = put_BlackWhiteMode(BlackWhiteMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2889)
inline PowerPoint::CalloutFormatPtr PowerPoint::Shape::GetCallout ( ) {
    struct CalloutFormat * _result = 0;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

#pragma implementation_key(2890)
inline int PowerPoint::Shape::GetConnectionSiteCount ( ) {
    int _result = 0;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2891)
inline __missing_type__  PowerPoint::Shape::GetConnector ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2892)
inline PowerPoint::ConnectorFormatPtr PowerPoint::Shape::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result = 0;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

#pragma implementation_key(2893)
inline PowerPoint::FillFormatPtr PowerPoint::Shape::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(2894)
inline PowerPoint::GroupShapesPtr PowerPoint::Shape::GetGroupItems ( ) {
    struct GroupShapes * _result = 0;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

#pragma implementation_key(2895)
inline float PowerPoint::Shape::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2896)
inline void PowerPoint::Shape::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2897)
inline __missing_type__  PowerPoint::Shape::GetHorizontalFlip ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2898)
inline float PowerPoint::Shape::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2899)
inline void PowerPoint::Shape::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2900)
inline PowerPoint::LineFormatPtr PowerPoint::Shape::GetLine ( ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(2901)
inline __missing_type__  PowerPoint::Shape::GetLockAspectRatio ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2902)
inline void PowerPoint::Shape::PutLockAspectRatio ( __missing_type__ LockAspectRatio ) {
    HRESULT _hr = put_LockAspectRatio(LockAspectRatio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2903)
inline _bstr_t PowerPoint::Shape::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2904)
inline void PowerPoint::Shape::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2905)
inline PowerPoint::ShapeNodesPtr PowerPoint::Shape::GetNodes ( ) {
    struct ShapeNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

#pragma implementation_key(2906)
inline float PowerPoint::Shape::GetRotation ( ) {
    float _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2907)
inline void PowerPoint::Shape::PutRotation ( float Rotation ) {
    HRESULT _hr = put_Rotation(Rotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2908)
inline PowerPoint::PictureFormatPtr PowerPoint::Shape::GetPictureFormat ( ) {
    struct PictureFormat * _result = 0;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(2909)
inline PowerPoint::ShadowFormatPtr PowerPoint::Shape::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(2910)
inline PowerPoint::TextEffectFormatPtr PowerPoint::Shape::GetTextEffect ( ) {
    struct TextEffectFormat * _result = 0;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

#pragma implementation_key(2911)
inline PowerPoint::TextFramePtr PowerPoint::Shape::GetTextFrame ( ) {
    struct TextFrame * _result = 0;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(2912)
inline PowerPoint::ThreeDFormatPtr PowerPoint::Shape::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(2913)
inline float PowerPoint::Shape::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2914)
inline void PowerPoint::Shape::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2915)
inline __missing_type__  PowerPoint::Shape::GetType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2916)
inline __missing_type__  PowerPoint::Shape::GetVerticalFlip ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2917)
inline _variant_t PowerPoint::Shape::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2918)
inline __missing_type__  PowerPoint::Shape::GetVisible ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2919)
inline void PowerPoint::Shape::PutVisible ( __missing_type__ Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2920)
inline float PowerPoint::Shape::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2921)
inline void PowerPoint::Shape::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2922)
inline int PowerPoint::Shape::GetZOrderPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2923)
inline PowerPoint::OLEFormatPtr PowerPoint::Shape::GetOLEFormat ( ) {
    struct OLEFormat * _result = 0;
    HRESULT _hr = get_OLEFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OLEFormatPtr(_result, false);
}

#pragma implementation_key(2924)
inline PowerPoint::LinkFormatPtr PowerPoint::Shape::GetLinkFormat ( ) {
    struct LinkFormat * _result = 0;
    HRESULT _hr = get_LinkFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinkFormatPtr(_result, false);
}

#pragma implementation_key(2925)
inline PowerPoint::PlaceholderFormatPtr PowerPoint::Shape::GetPlaceholderFormat ( ) {
    struct PlaceholderFormat * _result = 0;
    HRESULT _hr = get_PlaceholderFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlaceholderFormatPtr(_result, false);
}

#pragma implementation_key(2926)
inline PowerPoint::AnimationSettingsPtr PowerPoint::Shape::GetAnimationSettings ( ) {
    struct AnimationSettings * _result = 0;
    HRESULT _hr = get_AnimationSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationSettingsPtr(_result, false);
}

#pragma implementation_key(2927)
inline PowerPoint::ActionSettingsPtr PowerPoint::Shape::GetActionSettings ( ) {
    struct ActionSettings * _result = 0;
    HRESULT _hr = get_ActionSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionSettingsPtr(_result, false);
}

#pragma implementation_key(2928)
inline PowerPoint::TagsPtr PowerPoint::Shape::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

#pragma implementation_key(2929)
inline HRESULT PowerPoint::Shape::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2930)
inline HRESULT PowerPoint::Shape::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2931)
inline HRESULT PowerPoint::Shape::Select ( __missing_type__ Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2932)
inline PowerPoint::ShapeRangePtr PowerPoint::Shape::Duplicate ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2933)
inline enum PowerPoint::PpMediaType PowerPoint::Shape::GetMediaType ( ) {
    enum PpMediaType _result;
    HRESULT _hr = get_MediaType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2934)
inline __missing_type__  PowerPoint::Shape::GetHasTextFrame ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasTextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2935)
inline PowerPoint::SoundFormatPtr PowerPoint::Shape::GetSoundFormat ( ) {
    struct SoundFormat * _result = 0;
    HRESULT _hr = get_SoundFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundFormatPtr(_result, false);
}

#pragma implementation_key(2936)
inline __missing_type__ PowerPoint::Shape::GetScript ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Script(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2937)
inline _bstr_t PowerPoint::Shape::GetAlternativeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2938)
inline void PowerPoint::Shape::PutAlternativeText ( _bstr_t AlternativeText ) {
    HRESULT _hr = put_AlternativeText(AlternativeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2939)
inline __missing_type__  PowerPoint::Shape::GetHasTable ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2940)
inline PowerPoint::TablePtr PowerPoint::Shape::GetTable ( ) {
    struct Table * _result = 0;
    HRESULT _hr = get_Table(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablePtr(_result, false);
}

#pragma implementation_key(2941)
inline HRESULT PowerPoint::Shape::Export ( _bstr_t PathName, enum PpShapeFormat Filter, int ScaleWidth, int ScaleHeight, enum PpExportMode ExportMode ) {
    HRESULT _hr = raw_Export(PathName, Filter, ScaleWidth, ScaleHeight, ExportMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2942)
inline __missing_type__  PowerPoint::Shape::GetHasDiagram ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasDiagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2943)
inline PowerPoint::DiagramPtr PowerPoint::Shape::GetDiagram ( ) {
    struct Diagram * _result = 0;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramPtr(_result, false);
}

#pragma implementation_key(2944)
inline __missing_type__  PowerPoint::Shape::GetHasDiagramNode ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasDiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2945)
inline PowerPoint::DiagramNodePtr PowerPoint::Shape::GetDiagramNode ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_DiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(2946)
inline __missing_type__  PowerPoint::Shape::GetChild ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Child(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2947)
inline PowerPoint::ShapePtr PowerPoint::Shape::GetParentGroup ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_ParentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2948)
inline PowerPoint::CanvasShapesPtr PowerPoint::Shape::GetCanvasItems ( ) {
    struct CanvasShapes * _result = 0;
    HRESULT _hr = get_CanvasItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CanvasShapesPtr(_result, false);
}

#pragma implementation_key(2949)
inline int PowerPoint::Shape::GetId ( ) {
    int _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2950)
inline HRESULT PowerPoint::Shape::CanvasCropLeft ( float Increment ) {
    HRESULT _hr = raw_CanvasCropLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2951)
inline HRESULT PowerPoint::Shape::CanvasCropTop ( float Increment ) {
    HRESULT _hr = raw_CanvasCropTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2952)
inline HRESULT PowerPoint::Shape::CanvasCropRight ( float Increment ) {
    HRESULT _hr = raw_CanvasCropRight(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2953)
inline HRESULT PowerPoint::Shape::CanvasCropBottom ( float Increment ) {
    HRESULT _hr = raw_CanvasCropBottom(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2954)
inline void PowerPoint::Shape::PutRTF ( _bstr_t _arg1 ) {
    HRESULT _hr = put_RTF(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2955)
inline PowerPoint::CustomerDataPtr PowerPoint::Shape::GetCustomerData ( ) {
    struct CustomerData * _result = 0;
    HRESULT _hr = get_CustomerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomerDataPtr(_result, false);
}

#pragma implementation_key(2956)
inline PowerPoint::TextFrame2Ptr PowerPoint::Shape::GetTextFrame2 ( ) {
    struct TextFrame2 * _result = 0;
    HRESULT _hr = get_TextFrame2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFrame2Ptr(_result, false);
}

#pragma implementation_key(2957)
inline __missing_type__  PowerPoint::Shape::GetHasChart ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2958)
inline __missing_type__  PowerPoint::Shape::GetShapeStyle ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ShapeStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2959)
inline void PowerPoint::Shape::PutShapeStyle ( __missing_type__ ShapeStyle ) {
    HRESULT _hr = put_ShapeStyle(ShapeStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2960)
inline __missing_type__  PowerPoint::Shape::GetBackgroundStyle ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_BackgroundStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2961)
inline void PowerPoint::Shape::PutBackgroundStyle ( __missing_type__ BackgroundStyle ) {
    HRESULT _hr = put_BackgroundStyle(BackgroundStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2962)
inline __missing_type__ PowerPoint::Shape::GetSoftEdge ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_SoftEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2963)
inline __missing_type__ PowerPoint::Shape::GetGlow ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Glow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2964)
inline __missing_type__ PowerPoint::Shape::GetReflection ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Reflection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2965)
inline PowerPoint::ChartPtr PowerPoint::Shape::GetChart ( ) {
    struct Chart * _result = 0;
    HRESULT _hr = get_Chart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartPtr(_result, false);
}

#pragma implementation_key(2966)
inline __missing_type__  PowerPoint::Shape::GetHasSmartArt ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasSmartArt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2967)
inline __missing_type__ PowerPoint::Shape::GetSmartArt ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_SmartArt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2968)
inline HRESULT PowerPoint::Shape::ConvertTextToSmartArt ( __missing_type__ * Layout ) {
    HRESULT _hr = raw_ConvertTextToSmartArt(Layout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2969)
inline _bstr_t PowerPoint::Shape::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2970)
inline void PowerPoint::Shape::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2971)
inline PowerPoint::MediaFormatPtr PowerPoint::Shape::GetMediaFormat ( ) {
    struct MediaFormat * _result = 0;
    HRESULT _hr = get_MediaFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MediaFormatPtr(_result, false);
}

#pragma implementation_key(2972)
inline HRESULT PowerPoint::Shape::PickupAnimation ( ) {
    HRESULT _hr = raw_PickupAnimation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2973)
inline HRESULT PowerPoint::Shape::ApplyAnimation ( ) {
    HRESULT _hr = raw_ApplyAnimation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2974)
inline HRESULT PowerPoint::Shape::UpgradeMedia ( ) {
    HRESULT _hr = raw_UpgradeMedia();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2975)
inline __missing_type__  PowerPoint::Shape::GetIsNarration ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_IsNarration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2976)
inline void PowerPoint::Shape::PutIsNarration ( __missing_type__ IsNarration ) {
    HRESULT _hr = put_IsNarration(IsNarration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2977)
inline _bstr_t PowerPoint::Shape::GetInkXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InkXML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2978)
inline __missing_type__  PowerPoint::Shape::GetHasInkXML ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasInkXML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2979)
inline __missing_type__  PowerPoint::Shape::GetHasSectionLink ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasSectionLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ConnectorFormat wrapper method implementations
//

#pragma implementation_key(2980)
inline IDispatchPtr PowerPoint::ConnectorFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2981)
inline long PowerPoint::ConnectorFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2982)
inline IDispatchPtr PowerPoint::ConnectorFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2983)
inline HRESULT PowerPoint::ConnectorFormat::BeginConnect ( struct Shape * ConnectedShape, int ConnectionSite ) {
    HRESULT _hr = raw_BeginConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2984)
inline HRESULT PowerPoint::ConnectorFormat::BeginDisconnect ( ) {
    HRESULT _hr = raw_BeginDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2985)
inline HRESULT PowerPoint::ConnectorFormat::EndConnect ( struct Shape * ConnectedShape, int ConnectionSite ) {
    HRESULT _hr = raw_EndConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2986)
inline HRESULT PowerPoint::ConnectorFormat::EndDisconnect ( ) {
    HRESULT _hr = raw_EndDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2987)
inline __missing_type__  PowerPoint::ConnectorFormat::GetBeginConnected ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_BeginConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2988)
inline PowerPoint::ShapePtr PowerPoint::ConnectorFormat::GetBeginConnectedShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_BeginConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2989)
inline int PowerPoint::ConnectorFormat::GetBeginConnectionSite ( ) {
    int _result = 0;
    HRESULT _hr = get_BeginConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2990)
inline __missing_type__  PowerPoint::ConnectorFormat::GetEndConnected ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_EndConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2991)
inline PowerPoint::ShapePtr PowerPoint::ConnectorFormat::GetEndConnectedShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_EndConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2992)
inline int PowerPoint::ConnectorFormat::GetEndConnectionSite ( ) {
    int _result = 0;
    HRESULT _hr = get_EndConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2993)
inline __missing_type__  PowerPoint::ConnectorFormat::GetType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2994)
inline void PowerPoint::ConnectorFormat::PutType ( __missing_type__ Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _Presentation wrapper method implementations
//

#pragma implementation_key(2995)
inline PowerPoint::_ApplicationPtr PowerPoint::_Presentation::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2996)
inline IDispatchPtr PowerPoint::_Presentation::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2997)
inline PowerPoint::_MasterPtr PowerPoint::_Presentation::GetSlideMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_SlideMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(2998)
inline PowerPoint::_MasterPtr PowerPoint::_Presentation::GetTitleMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_TitleMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(2999)
inline __missing_type__  PowerPoint::_Presentation::GetHasTitleMaster ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasTitleMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3000)
inline PowerPoint::_MasterPtr PowerPoint::_Presentation::AddTitleMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = raw_AddTitleMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(3001)
inline HRESULT PowerPoint::_Presentation::ApplyTemplate ( _bstr_t FileName ) {
    HRESULT _hr = raw_ApplyTemplate(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3002)
inline _bstr_t PowerPoint::_Presentation::GetTemplateName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TemplateName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3003)
inline PowerPoint::_MasterPtr PowerPoint::_Presentation::GetNotesMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_NotesMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(3004)
inline PowerPoint::_MasterPtr PowerPoint::_Presentation::GetHandoutMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_HandoutMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(3005)
inline PowerPoint::SlidesPtr PowerPoint::_Presentation::GetSlides ( ) {
    struct Slides * _result = 0;
    HRESULT _hr = get_Slides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlidesPtr(_result, false);
}

#pragma implementation_key(3006)
inline PowerPoint::PageSetupPtr PowerPoint::_Presentation::GetPageSetup ( ) {
    struct PageSetup * _result = 0;
    HRESULT _hr = get_PageSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PageSetupPtr(_result, false);
}

#pragma implementation_key(3007)
inline PowerPoint::ColorSchemesPtr PowerPoint::_Presentation::GetColorSchemes ( ) {
    struct ColorSchemes * _result = 0;
    HRESULT _hr = get_ColorSchemes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemesPtr(_result, false);
}

#pragma implementation_key(3008)
inline PowerPoint::ExtraColorsPtr PowerPoint::_Presentation::GetExtraColors ( ) {
    struct ExtraColors * _result = 0;
    HRESULT _hr = get_ExtraColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ExtraColorsPtr(_result, false);
}

#pragma implementation_key(3009)
inline PowerPoint::SlideShowSettingsPtr PowerPoint::_Presentation::GetSlideShowSettings ( ) {
    struct SlideShowSettings * _result = 0;
    HRESULT _hr = get_SlideShowSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowSettingsPtr(_result, false);
}

#pragma implementation_key(3010)
inline PowerPoint::FontsPtr PowerPoint::_Presentation::GetFonts ( ) {
    struct Fonts * _result = 0;
    HRESULT _hr = get_Fonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontsPtr(_result, false);
}

#pragma implementation_key(3011)
inline PowerPoint::DocumentWindowsPtr PowerPoint::_Presentation::GetWindows ( ) {
    struct DocumentWindows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowsPtr(_result, false);
}

#pragma implementation_key(3012)
inline PowerPoint::TagsPtr PowerPoint::_Presentation::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

#pragma implementation_key(3013)
inline PowerPoint::ShapePtr PowerPoint::_Presentation::GetDefaultShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_DefaultShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3014)
inline IDispatchPtr PowerPoint::_Presentation::GetBuiltInDocumentProperties ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_BuiltInDocumentProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3015)
inline IDispatchPtr PowerPoint::_Presentation::GetCustomDocumentProperties ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_CustomDocumentProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3016)
inline _VBProjectPtr PowerPoint::_Presentation::GetVBProject ( ) {
    struct _VBProject * _result = 0;
    HRESULT _hr = get_VBProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _VBProjectPtr(_result, false);
}

#pragma implementation_key(3017)
inline __missing_type__  PowerPoint::_Presentation::GetReadOnly ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3018)
inline _bstr_t PowerPoint::_Presentation::GetFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3019)
inline _bstr_t PowerPoint::_Presentation::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3020)
inline _bstr_t PowerPoint::_Presentation::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3021)
inline __missing_type__  PowerPoint::_Presentation::GetSaved ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3022)
inline void PowerPoint::_Presentation::PutSaved ( __missing_type__ Saved ) {
    HRESULT _hr = put_Saved(Saved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3023)
inline enum PowerPoint::PpDirection PowerPoint::_Presentation::GetLayoutDirection ( ) {
    enum PpDirection _result;
    HRESULT _hr = get_LayoutDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3024)
inline void PowerPoint::_Presentation::PutLayoutDirection ( enum PpDirection LayoutDirection ) {
    HRESULT _hr = put_LayoutDirection(LayoutDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3025)
inline PowerPoint::DocumentWindowPtr PowerPoint::_Presentation::NewWindow ( ) {
    struct DocumentWindow * _result = 0;
    HRESULT _hr = raw_NewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowPtr(_result, false);
}

#pragma implementation_key(3026)
inline HRESULT PowerPoint::_Presentation::FollowHyperlink ( _bstr_t Address, _bstr_t SubAddress, VARIANT_BOOL NewWindow, VARIANT_BOOL AddHistory, _bstr_t ExtraInfo, __missing_type__ Method, _bstr_t HeaderInfo ) {
    HRESULT _hr = raw_FollowHyperlink(Address, SubAddress, NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3027)
inline HRESULT PowerPoint::_Presentation::AddToFavorites ( ) {
    HRESULT _hr = raw_AddToFavorites();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3028)
inline HRESULT PowerPoint::_Presentation::Unused ( ) {
    HRESULT _hr = raw_Unused();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3029)
inline PowerPoint::PrintOptionsPtr PowerPoint::_Presentation::GetPrintOptions ( ) {
    struct PrintOptions * _result = 0;
    HRESULT _hr = get_PrintOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PrintOptionsPtr(_result, false);
}

#pragma implementation_key(3030)
inline HRESULT PowerPoint::_Presentation::PrintOut ( int From, int To, _bstr_t PrintToFile, int Copies, __missing_type__ Collate ) {
    HRESULT _hr = raw_PrintOut(From, To, PrintToFile, Copies, Collate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3031)
inline HRESULT PowerPoint::_Presentation::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3032)
inline HRESULT PowerPoint::_Presentation::SaveAs ( _bstr_t FileName, enum PpSaveAsFileType FileFormat, __missing_type__ EmbedTrueTypeFonts ) {
    HRESULT _hr = raw_SaveAs(FileName, FileFormat, EmbedTrueTypeFonts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3033)
inline HRESULT PowerPoint::_Presentation::SaveCopyAs ( _bstr_t FileName, enum PpSaveAsFileType FileFormat, __missing_type__ EmbedTrueTypeFonts ) {
    HRESULT _hr = raw_SaveCopyAs(FileName, FileFormat, EmbedTrueTypeFonts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3034)
inline HRESULT PowerPoint::_Presentation::Export ( _bstr_t Path, _bstr_t FilterName, int ScaleWidth, int ScaleHeight ) {
    HRESULT _hr = raw_Export(Path, FilterName, ScaleWidth, ScaleHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3035)
inline HRESULT PowerPoint::_Presentation::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3036)
inline HRESULT PowerPoint::_Presentation::SetUndoText ( _bstr_t Text ) {
    HRESULT _hr = raw_SetUndoText(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3037)
inline IDispatchPtr PowerPoint::_Presentation::GetContainer ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Container(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3038)
inline __missing_type__  PowerPoint::_Presentation::GetDisplayComments ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_DisplayComments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3039)
inline void PowerPoint::_Presentation::PutDisplayComments ( __missing_type__ DisplayComments ) {
    HRESULT _hr = put_DisplayComments(DisplayComments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3040)
inline enum PowerPoint::PpFarEastLineBreakLevel PowerPoint::_Presentation::GetFarEastLineBreakLevel ( ) {
    enum PpFarEastLineBreakLevel _result;
    HRESULT _hr = get_FarEastLineBreakLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3041)
inline void PowerPoint::_Presentation::PutFarEastLineBreakLevel ( enum PpFarEastLineBreakLevel FarEastLineBreakLevel ) {
    HRESULT _hr = put_FarEastLineBreakLevel(FarEastLineBreakLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3042)
inline _bstr_t PowerPoint::_Presentation::GetNoLineBreakBefore ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NoLineBreakBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3043)
inline void PowerPoint::_Presentation::PutNoLineBreakBefore ( _bstr_t NoLineBreakBefore ) {
    HRESULT _hr = put_NoLineBreakBefore(NoLineBreakBefore);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3044)
inline _bstr_t PowerPoint::_Presentation::GetNoLineBreakAfter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NoLineBreakAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3045)
inline void PowerPoint::_Presentation::PutNoLineBreakAfter ( _bstr_t NoLineBreakAfter ) {
    HRESULT _hr = put_NoLineBreakAfter(NoLineBreakAfter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3046)
inline HRESULT PowerPoint::_Presentation::UpdateLinks ( ) {
    HRESULT _hr = raw_UpdateLinks();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3047)
inline PowerPoint::SlideShowWindowPtr PowerPoint::_Presentation::GetSlideShowWindow ( ) {
    struct SlideShowWindow * _result = 0;
    HRESULT _hr = get_SlideShowWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowWindowPtr(_result, false);
}

#pragma implementation_key(3048)
inline __missing_type__  PowerPoint::_Presentation::GetFarEastLineBreakLanguage ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_FarEastLineBreakLanguage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3049)
inline void PowerPoint::_Presentation::PutFarEastLineBreakLanguage ( __missing_type__ FarEastLineBreakLanguage ) {
    HRESULT _hr = put_FarEastLineBreakLanguage(FarEastLineBreakLanguage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3050)
inline HRESULT PowerPoint::_Presentation::WebPagePreview ( ) {
    HRESULT _hr = raw_WebPagePreview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3051)
inline __missing_type__  PowerPoint::_Presentation::GetDefaultLanguageID ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_DefaultLanguageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3052)
inline void PowerPoint::_Presentation::PutDefaultLanguageID ( __missing_type__ DefaultLanguageID ) {
    HRESULT _hr = put_DefaultLanguageID(DefaultLanguageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3053)
inline __missing_type__ PowerPoint::_Presentation::GetCommandBars ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3054)
inline PowerPoint::PublishObjectsPtr PowerPoint::_Presentation::GetPublishObjects ( ) {
    struct PublishObjects * _result = 0;
    HRESULT _hr = get_PublishObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PublishObjectsPtr(_result, false);
}

#pragma implementation_key(3055)
inline PowerPoint::WebOptionsPtr PowerPoint::_Presentation::GetWebOptions ( ) {
    struct WebOptions * _result = 0;
    HRESULT _hr = get_WebOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WebOptionsPtr(_result, false);
}

#pragma implementation_key(3056)
inline __missing_type__ PowerPoint::_Presentation::GetHTMLProject ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_HTMLProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3057)
inline HRESULT PowerPoint::_Presentation::ReloadAs ( __missing_type__ cp ) {
    HRESULT _hr = raw_ReloadAs(cp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3058)
inline HRESULT PowerPoint::_Presentation::MakeIntoTemplate ( __missing_type__ IsDesignTemplate ) {
    HRESULT _hr = raw_MakeIntoTemplate(IsDesignTemplate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3059)
inline __missing_type__  PowerPoint::_Presentation::GetEnvelopeVisible ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_EnvelopeVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3060)
inline void PowerPoint::_Presentation::PutEnvelopeVisible ( __missing_type__ EnvelopeVisible ) {
    HRESULT _hr = put_EnvelopeVisible(EnvelopeVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3061)
inline HRESULT PowerPoint::_Presentation::sblt ( _bstr_t s ) {
    HRESULT _hr = raw_sblt(s);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3062)
inline __missing_type__  PowerPoint::_Presentation::GetVBASigned ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_VBASigned(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3063)
inline __missing_type__  PowerPoint::_Presentation::GetSnapToGrid ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_SnapToGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3064)
inline void PowerPoint::_Presentation::PutSnapToGrid ( __missing_type__ SnapToGrid ) {
    HRESULT _hr = put_SnapToGrid(SnapToGrid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3065)
inline float PowerPoint::_Presentation::GetGridDistance ( ) {
    float _result = 0;
    HRESULT _hr = get_GridDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3066)
inline void PowerPoint::_Presentation::PutGridDistance ( float GridDistance ) {
    HRESULT _hr = put_GridDistance(GridDistance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3067)
inline PowerPoint::DesignsPtr PowerPoint::_Presentation::GetDesigns ( ) {
    struct Designs * _result = 0;
    HRESULT _hr = get_Designs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignsPtr(_result, false);
}

#pragma implementation_key(3068)
inline HRESULT PowerPoint::_Presentation::Merge ( _bstr_t Path ) {
    HRESULT _hr = raw_Merge(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3069)
inline HRESULT PowerPoint::_Presentation::CheckIn ( VARIANT_BOOL SaveChanges, const _variant_t & Comments, const _variant_t & MakePublic ) {
    HRESULT _hr = raw_CheckIn(SaveChanges, Comments, MakePublic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3070)
inline VARIANT_BOOL PowerPoint::_Presentation::CanCheckIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanCheckIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3071)
inline __missing_type__ PowerPoint::_Presentation::GetSignatures ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Signatures(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3072)
inline __missing_type__  PowerPoint::_Presentation::GetRemovePersonalInformation ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_RemovePersonalInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3073)
inline void PowerPoint::_Presentation::PutRemovePersonalInformation ( __missing_type__ RemovePersonalInformation ) {
    HRESULT _hr = put_RemovePersonalInformation(RemovePersonalInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3074)
inline HRESULT PowerPoint::_Presentation::SendForReview ( _bstr_t Recipients, _bstr_t Subject, VARIANT_BOOL ShowMessage, const _variant_t & IncludeAttachment ) {
    HRESULT _hr = raw_SendForReview(Recipients, Subject, ShowMessage, IncludeAttachment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3075)
inline HRESULT PowerPoint::_Presentation::ReplyWithChanges ( VARIANT_BOOL ShowMessage ) {
    HRESULT _hr = raw_ReplyWithChanges(ShowMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3076)
inline HRESULT PowerPoint::_Presentation::EndReview ( ) {
    HRESULT _hr = raw_EndReview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3077)
inline enum PowerPoint::PpRevisionInfo PowerPoint::_Presentation::GetHasRevisionInfo ( ) {
    enum PpRevisionInfo _result;
    HRESULT _hr = get_HasRevisionInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3078)
inline HRESULT PowerPoint::_Presentation::AddBaseline ( _bstr_t FileName ) {
    HRESULT _hr = raw_AddBaseline(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3079)
inline HRESULT PowerPoint::_Presentation::RemoveBaseline ( ) {
    HRESULT _hr = raw_RemoveBaseline();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3080)
inline _bstr_t PowerPoint::_Presentation::GetPasswordEncryptionProvider ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PasswordEncryptionProvider(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3081)
inline _bstr_t PowerPoint::_Presentation::GetPasswordEncryptionAlgorithm ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PasswordEncryptionAlgorithm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3082)
inline int PowerPoint::_Presentation::GetPasswordEncryptionKeyLength ( ) {
    int _result = 0;
    HRESULT _hr = get_PasswordEncryptionKeyLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3083)
inline VARIANT_BOOL PowerPoint::_Presentation::GetPasswordEncryptionFileProperties ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PasswordEncryptionFileProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3084)
inline HRESULT PowerPoint::_Presentation::SetPasswordEncryptionOptions ( _bstr_t PasswordEncryptionProvider, _bstr_t PasswordEncryptionAlgorithm, int PasswordEncryptionKeyLength, VARIANT_BOOL PasswordEncryptionFileProperties ) {
    HRESULT _hr = raw_SetPasswordEncryptionOptions(PasswordEncryptionProvider, PasswordEncryptionAlgorithm, PasswordEncryptionKeyLength, PasswordEncryptionFileProperties);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3085)
inline _bstr_t PowerPoint::_Presentation::GetPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Password(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3086)
inline void PowerPoint::_Presentation::PutPassword ( _bstr_t Password ) {
    HRESULT _hr = put_Password(Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3087)
inline _bstr_t PowerPoint::_Presentation::GetWritePassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WritePassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3088)
inline void PowerPoint::_Presentation::PutWritePassword ( _bstr_t WritePassword ) {
    HRESULT _hr = put_WritePassword(WritePassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3089)
inline __missing_type__ PowerPoint::_Presentation::GetPermission ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Permission(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3090)
inline __missing_type__ PowerPoint::_Presentation::GetSharedWorkspace ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_SharedWorkspace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3091)
inline __missing_type__ PowerPoint::_Presentation::GetSync ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Sync(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3092)
inline HRESULT PowerPoint::_Presentation::SendFaxOverInternet ( _bstr_t Recipients, _bstr_t Subject, VARIANT_BOOL ShowMessage ) {
    HRESULT _hr = raw_SendFaxOverInternet(Recipients, Subject, ShowMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3093)
inline __missing_type__ PowerPoint::_Presentation::GetDocumentLibraryVersions ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_DocumentLibraryVersions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3094)
inline __missing_type__ PowerPoint::_Presentation::GetContentTypeProperties ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_ContentTypeProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3095)
inline int PowerPoint::_Presentation::GetSectionCount ( ) {
    int _result = 0;
    HRESULT _hr = get_SectionCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3096)
inline VARIANT_BOOL PowerPoint::_Presentation::GetHasSections ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasSections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3097)
inline HRESULT PowerPoint::_Presentation::NewSectionAfter ( int Index, VARIANT_BOOL AfterSlide, _bstr_t sectionTitle, int * newSectionIndex ) {
    HRESULT _hr = raw_NewSectionAfter(Index, AfterSlide, sectionTitle, newSectionIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3098)
inline HRESULT PowerPoint::_Presentation::DeleteSection ( int Index ) {
    HRESULT _hr = raw_DeleteSection(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3099)
inline HRESULT PowerPoint::_Presentation::DisableSections ( ) {
    HRESULT _hr = raw_DisableSections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3100)
inline _bstr_t PowerPoint::_Presentation::sectionTitle ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_sectionTitle(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3101)
inline HRESULT PowerPoint::_Presentation::RemoveDocumentInformation ( enum PpRemoveDocInfoType Type ) {
    HRESULT _hr = raw_RemoveDocumentInformation(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3102)
inline HRESULT PowerPoint::_Presentation::CheckInWithVersion ( VARIANT_BOOL SaveChanges, const _variant_t & Comments, const _variant_t & MakePublic, const _variant_t & VersionType ) {
    HRESULT _hr = raw_CheckInWithVersion(SaveChanges, Comments, MakePublic, VersionType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3103)
inline HRESULT PowerPoint::_Presentation::ExportAsFixedFormat ( _bstr_t Path, enum PpFixedFormatType FixedFormatType, enum PpFixedFormatIntent Intent, __missing_type__ FrameSlides, enum PpPrintHandoutOrder HandoutOrder, enum PpPrintOutputType OutputType, __missing_type__ PrintHiddenSlides, struct PrintRange * PrintRange, enum PpPrintRangeType RangeType, _bstr_t SlideShowName, VARIANT_BOOL IncludeDocProperties, VARIANT_BOOL KeepIRMSettings, VARIANT_BOOL DocStructureTags, VARIANT_BOOL BitmapMissingFonts, VARIANT_BOOL UseISO19005_1, const _variant_t & ExternalExporter ) {
    HRESULT _hr = raw_ExportAsFixedFormat(Path, FixedFormatType, Intent, FrameSlides, HandoutOrder, OutputType, PrintHiddenSlides, PrintRange, RangeType, SlideShowName, IncludeDocProperties, KeepIRMSettings, DocStructureTags, BitmapMissingFonts, UseISO19005_1, ExternalExporter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3104)
inline __missing_type__ PowerPoint::_Presentation::GetServerPolicy ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_ServerPolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3105)
inline __missing_type__ PowerPoint::_Presentation::GetWorkflowTasks ( ) {
    __missing_type__ * _result;
    HRESULT _hr = raw_GetWorkflowTasks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3106)
inline __missing_type__ PowerPoint::_Presentation::GetWorkflowTemplates ( ) {
    __missing_type__ * _result;
    HRESULT _hr = raw_GetWorkflowTemplates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3107)
inline HRESULT PowerPoint::_Presentation::LockServerFile ( ) {
    HRESULT _hr = raw_LockServerFile();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3108)
inline __missing_type__ PowerPoint::_Presentation::GetDocumentInspectors ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_DocumentInspectors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3109)
inline VARIANT_BOOL PowerPoint::_Presentation::GetHasVBProject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasVBProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3110)
inline __missing_type__ PowerPoint::_Presentation::GetCustomXMLParts ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_CustomXMLParts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3111)
inline VARIANT_BOOL PowerPoint::_Presentation::GetFinal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Final(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3112)
inline void PowerPoint::_Presentation::PutFinal ( VARIANT_BOOL Final ) {
    HRESULT _hr = put_Final(Final);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3113)
inline HRESULT PowerPoint::_Presentation::ApplyTheme ( _bstr_t themeName ) {
    HRESULT _hr = raw_ApplyTheme(themeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3114)
inline PowerPoint::CustomerDataPtr PowerPoint::_Presentation::GetCustomerData ( ) {
    struct CustomerData * _result = 0;
    HRESULT _hr = get_CustomerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomerDataPtr(_result, false);
}

#pragma implementation_key(3115)
inline PowerPoint::ResearchPtr PowerPoint::_Presentation::GetResearch ( ) {
    struct Research * _result = 0;
    HRESULT _hr = get_Research(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ResearchPtr(_result, false);
}

#pragma implementation_key(3116)
inline HRESULT PowerPoint::_Presentation::PublishSlides ( _bstr_t SlideLibraryUrl, VARIANT_BOOL Overwrite, VARIANT_BOOL UseSlideOrder ) {
    HRESULT _hr = raw_PublishSlides(SlideLibraryUrl, Overwrite, UseSlideOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3117)
inline _bstr_t PowerPoint::_Presentation::GetEncryptionProvider ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EncryptionProvider(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3118)
inline void PowerPoint::_Presentation::PutEncryptionProvider ( _bstr_t EncryptionProvider ) {
    HRESULT _hr = put_EncryptionProvider(EncryptionProvider);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3119)
inline HRESULT PowerPoint::_Presentation::Convert ( ) {
    HRESULT _hr = raw_Convert();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3120)
inline PowerPoint::SectionPropertiesPtr PowerPoint::_Presentation::GetSectionProperties ( ) {
    struct SectionProperties * _result = 0;
    HRESULT _hr = get_SectionProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SectionPropertiesPtr(_result, false);
}

#pragma implementation_key(3121)
inline PowerPoint::CoauthoringPtr PowerPoint::_Presentation::GetCoauthoring ( ) {
    struct Coauthoring * _result = 0;
    HRESULT _hr = get_Coauthoring(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CoauthoringPtr(_result, false);
}

#pragma implementation_key(3122)
inline HRESULT PowerPoint::_Presentation::MergeWithBaseline ( _bstr_t withPresentation, _bstr_t baselinePresentation ) {
    HRESULT _hr = raw_MergeWithBaseline(withPresentation, baselinePresentation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3123)
inline VARIANT_BOOL PowerPoint::_Presentation::GetInMergeMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InMergeMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3124)
inline HRESULT PowerPoint::_Presentation::AcceptAll ( ) {
    HRESULT _hr = raw_AcceptAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3125)
inline HRESULT PowerPoint::_Presentation::RejectAll ( ) {
    HRESULT _hr = raw_RejectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3126)
inline HRESULT PowerPoint::_Presentation::EnsureAllMediaUpgraded ( ) {
    HRESULT _hr = raw_EnsureAllMediaUpgraded();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3127)
inline PowerPoint::BroadcastPtr PowerPoint::_Presentation::GetBroadcast ( ) {
    struct Broadcast * _result = 0;
    HRESULT _hr = get_Broadcast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BroadcastPtr(_result, false);
}

#pragma implementation_key(3128)
inline VARIANT_BOOL PowerPoint::_Presentation::GetHasNotesMaster ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasNotesMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3129)
inline VARIANT_BOOL PowerPoint::_Presentation::GetHasHandoutMaster ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasHandoutMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3130)
inline HRESULT PowerPoint::_Presentation::Convert2 ( _bstr_t FileName ) {
    HRESULT _hr = raw_Convert2(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3131)
inline enum PowerPoint::PpMediaTaskStatus PowerPoint::_Presentation::GetCreateVideoStatus ( ) {
    enum PpMediaTaskStatus _result;
    HRESULT _hr = get_CreateVideoStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3132)
inline HRESULT PowerPoint::_Presentation::CreateVideo ( _bstr_t FileName, VARIANT_BOOL UseTimingsAndNarrations, int DefaultSlideDuration, int VertResolution, int FramesPerSecond, int Quality ) {
    HRESULT _hr = raw_CreateVideo(FileName, UseTimingsAndNarrations, DefaultSlideDuration, VertResolution, FramesPerSecond, Quality);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3133)
inline HRESULT PowerPoint::_Presentation::ApplyTemplate2 ( _bstr_t FileName, _bstr_t VariantGUID ) {
    HRESULT _hr = raw_ApplyTemplate2(FileName, VariantGUID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3134)
inline VARIANT_BOOL PowerPoint::_Presentation::GetChartDataPointTrack ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ChartDataPointTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3135)
inline void PowerPoint::_Presentation::PutChartDataPointTrack ( VARIANT_BOOL pfChartDataPointTrack ) {
    HRESULT _hr = put_ChartDataPointTrack(pfChartDataPointTrack);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3136)
inline HRESULT PowerPoint::_Presentation::ExportAsFixedFormat2 ( _bstr_t Path, enum PpFixedFormatType FixedFormatType, enum PpFixedFormatIntent Intent, __missing_type__ FrameSlides, enum PpPrintHandoutOrder HandoutOrder, enum PpPrintOutputType OutputType, __missing_type__ PrintHiddenSlides, struct PrintRange * PrintRange, enum PpPrintRangeType RangeType, _bstr_t SlideShowName, VARIANT_BOOL IncludeDocProperties, VARIANT_BOOL KeepIRMSettings, VARIANT_BOOL DocStructureTags, VARIANT_BOOL BitmapMissingFonts, VARIANT_BOOL UseISO19005_1, VARIANT_BOOL IncludeMarkup, const _variant_t & ExternalExporter ) {
    HRESULT _hr = raw_ExportAsFixedFormat2(Path, FixedFormatType, Intent, FrameSlides, HandoutOrder, OutputType, PrintHiddenSlides, PrintRange, RangeType, SlideShowName, IncludeDocProperties, KeepIRMSettings, DocStructureTags, BitmapMissingFonts, UseISO19005_1, IncludeMarkup, ExternalExporter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3137)
inline PowerPoint::GuidesPtr PowerPoint::_Presentation::GetGuides ( ) {
    struct Guides * _result = 0;
    HRESULT _hr = get_Guides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GuidesPtr(_result, false);
}

//
// interface Cell wrapper method implementations
//

#pragma implementation_key(3138)
inline PowerPoint::_ApplicationPtr PowerPoint::Cell::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3139)
inline IDispatchPtr PowerPoint::Cell::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3140)
inline PowerPoint::ShapePtr PowerPoint::Cell::GetShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3141)
inline PowerPoint::BordersPtr PowerPoint::Cell::GetBorders ( ) {
    struct Borders * _result = 0;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(3142)
inline HRESULT PowerPoint::Cell::Merge ( struct Cell * MergeTo ) {
    HRESULT _hr = raw_Merge(MergeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3143)
inline HRESULT PowerPoint::Cell::Split ( int NumRows, int NumColumns ) {
    HRESULT _hr = raw_Split(NumRows, NumColumns);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3144)
inline HRESULT PowerPoint::Cell::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3145)
inline VARIANT_BOOL PowerPoint::Cell::GetSelected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Selected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface CellRange wrapper method implementations
//

#pragma implementation_key(3146)
inline PowerPoint::_ApplicationPtr PowerPoint::CellRange::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3147)
inline IDispatchPtr PowerPoint::CellRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3148)
inline PowerPoint::CellPtr PowerPoint::CellRange::Item ( int Index ) {
    struct Cell * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellPtr(_result, false);
}

#pragma implementation_key(3149)
inline PowerPoint::BordersPtr PowerPoint::CellRange::GetBorders ( ) {
    struct Borders * _result = 0;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

//
// interface Column wrapper method implementations
//

#pragma implementation_key(3150)
inline PowerPoint::_ApplicationPtr PowerPoint::Column::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3151)
inline IDispatchPtr PowerPoint::Column::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3152)
inline PowerPoint::CellRangePtr PowerPoint::Column::GetCells ( ) {
    struct CellRange * _result = 0;
    HRESULT _hr = get_Cells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellRangePtr(_result, false);
}

#pragma implementation_key(3153)
inline HRESULT PowerPoint::Column::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3154)
inline HRESULT PowerPoint::Column::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3155)
inline float PowerPoint::Column::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3156)
inline void PowerPoint::Column::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Columns wrapper method implementations
//

#pragma implementation_key(3157)
inline PowerPoint::_ApplicationPtr PowerPoint::Columns::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3158)
inline IDispatchPtr PowerPoint::Columns::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3159)
inline PowerPoint::ColumnPtr PowerPoint::Columns::Item ( int Index ) {
    struct Column * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnPtr(_result, false);
}

#pragma implementation_key(3160)
inline PowerPoint::ColumnPtr PowerPoint::Columns::Add ( int BeforeColumn ) {
    struct Column * _result = 0;
    HRESULT _hr = raw_Add(BeforeColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnPtr(_result, false);
}

//
// interface Row wrapper method implementations
//

#pragma implementation_key(3161)
inline PowerPoint::_ApplicationPtr PowerPoint::Row::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3162)
inline IDispatchPtr PowerPoint::Row::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3163)
inline PowerPoint::CellRangePtr PowerPoint::Row::GetCells ( ) {
    struct CellRange * _result = 0;
    HRESULT _hr = get_Cells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellRangePtr(_result, false);
}

#pragma implementation_key(3164)
inline HRESULT PowerPoint::Row::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3165)
inline HRESULT PowerPoint::Row::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3166)
inline float PowerPoint::Row::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3167)
inline void PowerPoint::Row::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Rows wrapper method implementations
//

#pragma implementation_key(3168)
inline PowerPoint::_ApplicationPtr PowerPoint::Rows::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3169)
inline IDispatchPtr PowerPoint::Rows::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3170)
inline PowerPoint::RowPtr PowerPoint::Rows::Item ( int Index ) {
    struct Row * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowPtr(_result, false);
}

#pragma implementation_key(3171)
inline PowerPoint::RowPtr PowerPoint::Rows::Add ( int BeforeRow ) {
    struct Row * _result = 0;
    HRESULT _hr = raw_Add(BeforeRow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowPtr(_result, false);
}

//
// interface Table wrapper method implementations
//

#pragma implementation_key(3172)
inline PowerPoint::_ApplicationPtr PowerPoint::Table::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3173)
inline IDispatchPtr PowerPoint::Table::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3174)
inline PowerPoint::ColumnsPtr PowerPoint::Table::GetColumns ( ) {
    struct Columns * _result = 0;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnsPtr(_result, false);
}

#pragma implementation_key(3175)
inline PowerPoint::RowsPtr PowerPoint::Table::GetRows ( ) {
    struct Rows * _result = 0;
    HRESULT _hr = get_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowsPtr(_result, false);
}

#pragma implementation_key(3176)
inline PowerPoint::CellPtr PowerPoint::Table::Cell ( int Row, int Column ) {
    struct Cell * _result = 0;
    HRESULT _hr = raw_Cell(Row, Column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellPtr(_result, false);
}

#pragma implementation_key(3177)
inline enum PowerPoint::PpDirection PowerPoint::Table::GetTableDirection ( ) {
    enum PpDirection _result;
    HRESULT _hr = get_TableDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3178)
inline void PowerPoint::Table::PutTableDirection ( enum PpDirection TableDirection ) {
    HRESULT _hr = put_TableDirection(TableDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3179)
inline HRESULT PowerPoint::Table::MergeBorders ( ) {
    HRESULT _hr = raw_MergeBorders();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3180)
inline VARIANT_BOOL PowerPoint::Table::GetFirstRow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FirstRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3181)
inline void PowerPoint::Table::PutFirstRow ( VARIANT_BOOL FirstRow ) {
    HRESULT _hr = put_FirstRow(FirstRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3182)
inline VARIANT_BOOL PowerPoint::Table::GetLastRow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LastRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3183)
inline void PowerPoint::Table::PutLastRow ( VARIANT_BOOL LastRow ) {
    HRESULT _hr = put_LastRow(LastRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3184)
inline VARIANT_BOOL PowerPoint::Table::GetFirstCol ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FirstCol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3185)
inline void PowerPoint::Table::PutFirstCol ( VARIANT_BOOL FirstCol ) {
    HRESULT _hr = put_FirstCol(FirstCol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3186)
inline VARIANT_BOOL PowerPoint::Table::GetLastCol ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LastCol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3187)
inline void PowerPoint::Table::PutLastCol ( VARIANT_BOOL LastCol ) {
    HRESULT _hr = put_LastCol(LastCol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3188)
inline VARIANT_BOOL PowerPoint::Table::GetHorizBanding ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HorizBanding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3189)
inline void PowerPoint::Table::PutHorizBanding ( VARIANT_BOOL HorizBanding ) {
    HRESULT _hr = put_HorizBanding(HorizBanding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3190)
inline VARIANT_BOOL PowerPoint::Table::GetVertBanding ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VertBanding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3191)
inline void PowerPoint::Table::PutVertBanding ( VARIANT_BOOL VertBanding ) {
    HRESULT _hr = put_VertBanding(VertBanding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3192)
inline PowerPoint::TableStylePtr PowerPoint::Table::GetStyle ( ) {
    struct TableStyle * _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TableStylePtr(_result, false);
}

#pragma implementation_key(3193)
inline PowerPoint::TableBackgroundPtr PowerPoint::Table::GetBackground ( ) {
    struct TableBackground * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TableBackgroundPtr(_result, false);
}

#pragma implementation_key(3194)
inline HRESULT PowerPoint::Table::ScaleProportionally ( float scale ) {
    HRESULT _hr = raw_ScaleProportionally(scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3195)
inline HRESULT PowerPoint::Table::ApplyStyle ( _bstr_t StyleID, VARIANT_BOOL SaveFormatting ) {
    HRESULT _hr = raw_ApplyStyle(StyleID, SaveFormatting);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3196)
inline _bstr_t PowerPoint::Table::GetAlternativeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3197)
inline void PowerPoint::Table::PutAlternativeText ( _bstr_t AlternativeText ) {
    HRESULT _hr = put_AlternativeText(AlternativeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3198)
inline _bstr_t PowerPoint::Table::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3199)
inline void PowerPoint::Table::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Timing wrapper method implementations
//

#pragma implementation_key(3200)
inline PowerPoint::_ApplicationPtr PowerPoint::Timing::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3201)
inline IDispatchPtr PowerPoint::Timing::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3202)
inline float PowerPoint::Timing::GetDuration ( ) {
    float _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3203)
inline void PowerPoint::Timing::PutDuration ( float Duration ) {
    HRESULT _hr = put_Duration(Duration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3204)
inline enum PowerPoint::MsoAnimTriggerType PowerPoint::Timing::GetTriggerType ( ) {
    enum MsoAnimTriggerType _result;
    HRESULT _hr = get_TriggerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3205)
inline void PowerPoint::Timing::PutTriggerType ( enum MsoAnimTriggerType TriggerType ) {
    HRESULT _hr = put_TriggerType(TriggerType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3206)
inline float PowerPoint::Timing::GetTriggerDelayTime ( ) {
    float _result = 0;
    HRESULT _hr = get_TriggerDelayTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3207)
inline void PowerPoint::Timing::PutTriggerDelayTime ( float TriggerDelayTime ) {
    HRESULT _hr = put_TriggerDelayTime(TriggerDelayTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3208)
inline PowerPoint::ShapePtr PowerPoint::Timing::GetTriggerShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_TriggerShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3209)
inline void PowerPoint::Timing::PutTriggerShape ( struct Shape * TriggerShape ) {
    HRESULT _hr = put_TriggerShape(TriggerShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3210)
inline int PowerPoint::Timing::GetRepeatCount ( ) {
    int _result = 0;
    HRESULT _hr = get_RepeatCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3211)
inline void PowerPoint::Timing::PutRepeatCount ( int RepeatCount ) {
    HRESULT _hr = put_RepeatCount(RepeatCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3212)
inline float PowerPoint::Timing::GetRepeatDuration ( ) {
    float _result = 0;
    HRESULT _hr = get_RepeatDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3213)
inline void PowerPoint::Timing::PutRepeatDuration ( float RepeatDuration ) {
    HRESULT _hr = put_RepeatDuration(RepeatDuration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3214)
inline float PowerPoint::Timing::GetSpeed ( ) {
    float _result = 0;
    HRESULT _hr = get_Speed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3215)
inline void PowerPoint::Timing::PutSpeed ( float Speed ) {
    HRESULT _hr = put_Speed(Speed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3216)
inline float PowerPoint::Timing::GetAccelerate ( ) {
    float _result = 0;
    HRESULT _hr = get_Accelerate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3217)
inline void PowerPoint::Timing::PutAccelerate ( float Accelerate ) {
    HRESULT _hr = put_Accelerate(Accelerate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3218)
inline float PowerPoint::Timing::GetDecelerate ( ) {
    float _result = 0;
    HRESULT _hr = get_Decelerate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3219)
inline void PowerPoint::Timing::PutDecelerate ( float Decelerate ) {
    HRESULT _hr = put_Decelerate(Decelerate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3220)
inline __missing_type__  PowerPoint::Timing::GetAutoReverse ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AutoReverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3221)
inline void PowerPoint::Timing::PutAutoReverse ( __missing_type__ AutoReverse ) {
    HRESULT _hr = put_AutoReverse(AutoReverse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3222)
inline __missing_type__  PowerPoint::Timing::GetSmoothStart ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_SmoothStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3223)
inline void PowerPoint::Timing::PutSmoothStart ( __missing_type__ SmoothStart ) {
    HRESULT _hr = put_SmoothStart(SmoothStart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3224)
inline __missing_type__  PowerPoint::Timing::GetSmoothEnd ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_SmoothEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3225)
inline void PowerPoint::Timing::PutSmoothEnd ( __missing_type__ SmoothEnd ) {
    HRESULT _hr = put_SmoothEnd(SmoothEnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3226)
inline __missing_type__  PowerPoint::Timing::GetRewindAtEnd ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_RewindAtEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3227)
inline void PowerPoint::Timing::PutRewindAtEnd ( __missing_type__ RewindAtEnd ) {
    HRESULT _hr = put_RewindAtEnd(RewindAtEnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3228)
inline enum PowerPoint::MsoAnimEffectRestart PowerPoint::Timing::GetRestart ( ) {
    enum MsoAnimEffectRestart _result;
    HRESULT _hr = get_Restart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3229)
inline void PowerPoint::Timing::PutRestart ( enum MsoAnimEffectRestart Restart ) {
    HRESULT _hr = put_Restart(Restart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3230)
inline __missing_type__  PowerPoint::Timing::GetBounceEnd ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_BounceEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3231)
inline void PowerPoint::Timing::PutBounceEnd ( __missing_type__ BounceEnd ) {
    HRESULT _hr = put_BounceEnd(BounceEnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3232)
inline float PowerPoint::Timing::GetBounceEndIntensity ( ) {
    float _result = 0;
    HRESULT _hr = get_BounceEndIntensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3233)
inline void PowerPoint::Timing::PutBounceEndIntensity ( float BounceEndIntensity ) {
    HRESULT _hr = put_BounceEndIntensity(BounceEndIntensity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3234)
inline _bstr_t PowerPoint::Timing::GetTriggerBookmark ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TriggerBookmark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3235)
inline void PowerPoint::Timing::PutTriggerBookmark ( _bstr_t TriggerBookmark ) {
    HRESULT _hr = put_TriggerBookmark(TriggerBookmark);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AnimationBehavior wrapper method implementations
//

#pragma implementation_key(3236)
inline PowerPoint::_ApplicationPtr PowerPoint::AnimationBehavior::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3237)
inline IDispatchPtr PowerPoint::AnimationBehavior::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3238)
inline enum PowerPoint::MsoAnimAdditive PowerPoint::AnimationBehavior::GetAdditive ( ) {
    enum MsoAnimAdditive _result;
    HRESULT _hr = get_Additive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3239)
inline void PowerPoint::AnimationBehavior::PutAdditive ( enum MsoAnimAdditive Additive ) {
    HRESULT _hr = put_Additive(Additive);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3240)
inline enum PowerPoint::MsoAnimAccumulate PowerPoint::AnimationBehavior::GetAccumulate ( ) {
    enum MsoAnimAccumulate _result;
    HRESULT _hr = get_Accumulate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3241)
inline void PowerPoint::AnimationBehavior::PutAccumulate ( enum MsoAnimAccumulate Accumulate ) {
    HRESULT _hr = put_Accumulate(Accumulate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3242)
inline enum PowerPoint::MsoAnimType PowerPoint::AnimationBehavior::GetType ( ) {
    enum MsoAnimType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3243)
inline void PowerPoint::AnimationBehavior::PutType ( enum MsoAnimType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3244)
inline PowerPoint::MotionEffectPtr PowerPoint::AnimationBehavior::GetMotionEffect ( ) {
    struct MotionEffect * _result = 0;
    HRESULT _hr = get_MotionEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MotionEffectPtr(_result, false);
}

#pragma implementation_key(3245)
inline PowerPoint::ColorEffectPtr PowerPoint::AnimationBehavior::GetColorEffect ( ) {
    struct ColorEffect * _result = 0;
    HRESULT _hr = get_ColorEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorEffectPtr(_result, false);
}

#pragma implementation_key(3246)
inline PowerPoint::ScaleEffectPtr PowerPoint::AnimationBehavior::GetScaleEffect ( ) {
    struct ScaleEffect * _result = 0;
    HRESULT _hr = get_ScaleEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScaleEffectPtr(_result, false);
}

#pragma implementation_key(3247)
inline PowerPoint::RotationEffectPtr PowerPoint::AnimationBehavior::GetRotationEffect ( ) {
    struct RotationEffect * _result = 0;
    HRESULT _hr = get_RotationEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RotationEffectPtr(_result, false);
}

#pragma implementation_key(3248)
inline PowerPoint::PropertyEffectPtr PowerPoint::AnimationBehavior::GetPropertyEffect ( ) {
    struct PropertyEffect * _result = 0;
    HRESULT _hr = get_PropertyEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PropertyEffectPtr(_result, false);
}

#pragma implementation_key(3249)
inline PowerPoint::TimingPtr PowerPoint::AnimationBehavior::GetTiming ( ) {
    struct Timing * _result = 0;
    HRESULT _hr = get_Timing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TimingPtr(_result, false);
}

#pragma implementation_key(3250)
inline HRESULT PowerPoint::AnimationBehavior::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3251)
inline PowerPoint::CommandEffectPtr PowerPoint::AnimationBehavior::GetCommandEffect ( ) {
    struct CommandEffect * _result = 0;
    HRESULT _hr = get_CommandEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandEffectPtr(_result, false);
}

#pragma implementation_key(3252)
inline PowerPoint::FilterEffectPtr PowerPoint::AnimationBehavior::GetFilterEffect ( ) {
    struct FilterEffect * _result = 0;
    HRESULT _hr = get_FilterEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FilterEffectPtr(_result, false);
}

#pragma implementation_key(3253)
inline PowerPoint::SetEffectPtr PowerPoint::AnimationBehavior::GetSetEffect ( ) {
    struct SetEffect * _result = 0;
    HRESULT _hr = get_SetEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SetEffectPtr(_result, false);
}

//
// interface AnimationBehaviors wrapper method implementations
//

#pragma implementation_key(3254)
inline PowerPoint::_ApplicationPtr PowerPoint::AnimationBehaviors::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3255)
inline IDispatchPtr PowerPoint::AnimationBehaviors::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3256)
inline PowerPoint::AnimationBehaviorPtr PowerPoint::AnimationBehaviors::Item ( int Index ) {
    struct AnimationBehavior * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationBehaviorPtr(_result, false);
}

#pragma implementation_key(3257)
inline PowerPoint::AnimationBehaviorPtr PowerPoint::AnimationBehaviors::Add ( enum MsoAnimType Type, int Index ) {
    struct AnimationBehavior * _result = 0;
    HRESULT _hr = raw_Add(Type, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationBehaviorPtr(_result, false);
}

//
// interface Effect wrapper method implementations
//

#pragma implementation_key(3258)
inline PowerPoint::_ApplicationPtr PowerPoint::Effect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3259)
inline IDispatchPtr PowerPoint::Effect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3260)
inline PowerPoint::ShapePtr PowerPoint::Effect::GetShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3261)
inline void PowerPoint::Effect::PutShape ( struct Shape * Shape ) {
    HRESULT _hr = put_Shape(Shape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3262)
inline HRESULT PowerPoint::Effect::MoveTo ( int toPos ) {
    HRESULT _hr = raw_MoveTo(toPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3263)
inline HRESULT PowerPoint::Effect::MoveBefore ( struct Effect * Effect ) {
    HRESULT _hr = raw_MoveBefore(Effect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3264)
inline HRESULT PowerPoint::Effect::MoveAfter ( struct Effect * Effect ) {
    HRESULT _hr = raw_MoveAfter(Effect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3265)
inline HRESULT PowerPoint::Effect::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3266)
inline int PowerPoint::Effect::GetIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3267)
inline PowerPoint::TimingPtr PowerPoint::Effect::GetTiming ( ) {
    struct Timing * _result = 0;
    HRESULT _hr = get_Timing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TimingPtr(_result, false);
}

#pragma implementation_key(3268)
inline enum PowerPoint::MsoAnimEffect PowerPoint::Effect::GetEffectType ( ) {
    enum MsoAnimEffect _result;
    HRESULT _hr = get_EffectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3269)
inline void PowerPoint::Effect::PutEffectType ( enum MsoAnimEffect EffectType ) {
    HRESULT _hr = put_EffectType(EffectType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3270)
inline PowerPoint::EffectParametersPtr PowerPoint::Effect::GetEffectParameters ( ) {
    struct EffectParameters * _result = 0;
    HRESULT _hr = get_EffectParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectParametersPtr(_result, false);
}

#pragma implementation_key(3271)
inline int PowerPoint::Effect::GetTextRangeStart ( ) {
    int _result = 0;
    HRESULT _hr = get_TextRangeStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3272)
inline int PowerPoint::Effect::GetTextRangeLength ( ) {
    int _result = 0;
    HRESULT _hr = get_TextRangeLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3273)
inline int PowerPoint::Effect::GetParagraph ( ) {
    int _result = 0;
    HRESULT _hr = get_Paragraph(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3274)
inline void PowerPoint::Effect::PutParagraph ( int Paragraph ) {
    HRESULT _hr = put_Paragraph(Paragraph);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3275)
inline _bstr_t PowerPoint::Effect::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3276)
inline __missing_type__  PowerPoint::Effect::GetExit ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Exit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3277)
inline void PowerPoint::Effect::PutExit ( __missing_type__ Exit ) {
    HRESULT _hr = put_Exit(Exit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3278)
inline PowerPoint::AnimationBehaviorsPtr PowerPoint::Effect::GetBehaviors ( ) {
    struct AnimationBehaviors * _result = 0;
    HRESULT _hr = get_Behaviors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationBehaviorsPtr(_result, false);
}

#pragma implementation_key(3279)
inline PowerPoint::EffectInformationPtr PowerPoint::Effect::GetEffectInformation ( ) {
    struct EffectInformation * _result = 0;
    HRESULT _hr = get_EffectInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectInformationPtr(_result, false);
}

//
// interface EApplication wrapper method implementations
//

#pragma implementation_key(3280)
inline HRESULT PowerPoint::EApplication::WindowSelectionChange ( struct Selection * Sel ) {
    HRESULT _hr = raw_WindowSelectionChange(Sel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3281)
inline HRESULT PowerPoint::EApplication::WindowBeforeRightClick ( struct Selection * Sel, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_WindowBeforeRightClick(Sel, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3282)
inline HRESULT PowerPoint::EApplication::WindowBeforeDoubleClick ( struct Selection * Sel, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_WindowBeforeDoubleClick(Sel, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3283)
inline HRESULT PowerPoint::EApplication::PresentationClose ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_PresentationClose(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3284)
inline HRESULT PowerPoint::EApplication::PresentationSave ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_PresentationSave(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3285)
inline HRESULT PowerPoint::EApplication::PresentationOpen ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_PresentationOpen(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3286)
inline HRESULT PowerPoint::EApplication::NewPresentation ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_NewPresentation(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3287)
inline HRESULT PowerPoint::EApplication::PresentationNewSlide ( struct _Slide * Sld ) {
    HRESULT _hr = raw_PresentationNewSlide(Sld);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3288)
inline HRESULT PowerPoint::EApplication::WindowActivate ( struct _Presentation * Pres, struct DocumentWindow * Wn ) {
    HRESULT _hr = raw_WindowActivate(Pres, Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3289)
inline HRESULT PowerPoint::EApplication::WindowDeactivate ( struct _Presentation * Pres, struct DocumentWindow * Wn ) {
    HRESULT _hr = raw_WindowDeactivate(Pres, Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3290)
inline HRESULT PowerPoint::EApplication::SlideShowBegin ( struct SlideShowWindow * Wn ) {
    HRESULT _hr = raw_SlideShowBegin(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3291)
inline HRESULT PowerPoint::EApplication::SlideShowNextBuild ( struct SlideShowWindow * Wn ) {
    HRESULT _hr = raw_SlideShowNextBuild(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3292)
inline HRESULT PowerPoint::EApplication::SlideShowNextSlide ( struct SlideShowWindow * Wn ) {
    HRESULT _hr = raw_SlideShowNextSlide(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3293)
inline HRESULT PowerPoint::EApplication::SlideShowEnd ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_SlideShowEnd(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3294)
inline HRESULT PowerPoint::EApplication::PresentationPrint ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_PresentationPrint(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3295)
inline HRESULT PowerPoint::EApplication::SlideSelectionChanged ( struct SlideRange * SldRange ) {
    HRESULT _hr = raw_SlideSelectionChanged(SldRange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3296)
inline HRESULT PowerPoint::EApplication::ColorSchemeChanged ( struct SlideRange * SldRange ) {
    HRESULT _hr = raw_ColorSchemeChanged(SldRange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3297)
inline HRESULT PowerPoint::EApplication::PresentationBeforeSave ( struct _Presentation * Pres, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_PresentationBeforeSave(Pres, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3298)
inline HRESULT PowerPoint::EApplication::SlideShowNextClick ( struct SlideShowWindow * Wn, struct Effect * nEffect ) {
    HRESULT _hr = raw_SlideShowNextClick(Wn, nEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3299)
inline HRESULT PowerPoint::EApplication::AfterNewPresentation ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_AfterNewPresentation(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3300)
inline HRESULT PowerPoint::EApplication::AfterPresentationOpen ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_AfterPresentationOpen(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3301)
inline HRESULT PowerPoint::EApplication::PresentationSync ( struct _Presentation * Pres, __missing_type__ SyncEventType ) {
    HRESULT _hr = raw_PresentationSync(Pres, SyncEventType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3302)
inline HRESULT PowerPoint::EApplication::SlideShowOnNext ( struct SlideShowWindow * Wn ) {
    HRESULT _hr = raw_SlideShowOnNext(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3303)
inline HRESULT PowerPoint::EApplication::SlideShowOnPrevious ( struct SlideShowWindow * Wn ) {
    HRESULT _hr = raw_SlideShowOnPrevious(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3304)
inline HRESULT PowerPoint::EApplication::PresentationBeforeClose ( struct _Presentation * Pres, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_PresentationBeforeClose(Pres, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3305)
inline HRESULT PowerPoint::EApplication::ProtectedViewWindowOpen ( struct ProtectedViewWindow * ProtViewWindow ) {
    HRESULT _hr = raw_ProtectedViewWindowOpen(ProtViewWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3306)
inline HRESULT PowerPoint::EApplication::ProtectedViewWindowBeforeEdit ( struct ProtectedViewWindow * ProtViewWindow, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_ProtectedViewWindowBeforeEdit(ProtViewWindow, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3307)
inline HRESULT PowerPoint::EApplication::ProtectedViewWindowBeforeClose ( struct ProtectedViewWindow * ProtViewWindow, enum PpProtectedViewCloseReason ProtectedViewCloseReason, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_ProtectedViewWindowBeforeClose(ProtViewWindow, ProtectedViewCloseReason, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3308)
inline HRESULT PowerPoint::EApplication::ProtectedViewWindowActivate ( struct ProtectedViewWindow * ProtViewWindow ) {
    HRESULT _hr = raw_ProtectedViewWindowActivate(ProtViewWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3309)
inline HRESULT PowerPoint::EApplication::ProtectedViewWindowDeactivate ( struct ProtectedViewWindow * ProtViewWindow ) {
    HRESULT _hr = raw_ProtectedViewWindowDeactivate(ProtViewWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3310)
inline HRESULT PowerPoint::EApplication::PresentationCloseFinal ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_PresentationCloseFinal(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3311)
inline HRESULT PowerPoint::EApplication::AfterDragDropOnSlide ( struct _Slide * Sld, float X, float Y ) {
    HRESULT _hr = raw_AfterDragDropOnSlide(Sld, X, Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3312)
inline HRESULT PowerPoint::EApplication::AfterShapeSizeChange ( struct Shape * shp ) {
    HRESULT _hr = raw_AfterShapeSizeChange(shp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Sequence wrapper method implementations
//

#pragma implementation_key(3313)
inline PowerPoint::_ApplicationPtr PowerPoint::Sequence::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3314)
inline IDispatchPtr PowerPoint::Sequence::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3315)
inline PowerPoint::EffectPtr PowerPoint::Sequence::Item ( int Index ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

#pragma implementation_key(3316)
inline PowerPoint::EffectPtr PowerPoint::Sequence::AddEffect ( struct Shape * Shape, enum MsoAnimEffect effectId, enum MsoAnimateByLevel Level, enum MsoAnimTriggerType trigger, int Index ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_AddEffect(Shape, effectId, Level, trigger, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

#pragma implementation_key(3317)
inline PowerPoint::EffectPtr PowerPoint::Sequence::Clone ( struct Effect * Effect, int Index ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_Clone(Effect, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

#pragma implementation_key(3318)
inline PowerPoint::EffectPtr PowerPoint::Sequence::FindFirstAnimationFor ( struct Shape * Shape ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_FindFirstAnimationFor(Shape, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

#pragma implementation_key(3319)
inline PowerPoint::EffectPtr PowerPoint::Sequence::FindFirstAnimationForClick ( int click ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_FindFirstAnimationForClick(click, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

#pragma implementation_key(3320)
inline PowerPoint::EffectPtr PowerPoint::Sequence::ConvertToBuildLevel ( struct Effect * Effect, enum MsoAnimateByLevel Level ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_ConvertToBuildLevel(Effect, Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

#pragma implementation_key(3321)
inline PowerPoint::EffectPtr PowerPoint::Sequence::ConvertToAfterEffect ( struct Effect * Effect, enum MsoAnimAfterEffect After, __missing_type__ DimColor, enum PpColorSchemeIndex DimSchemeColor ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_ConvertToAfterEffect(Effect, After, DimColor, DimSchemeColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

#pragma implementation_key(3322)
inline PowerPoint::EffectPtr PowerPoint::Sequence::ConvertToAnimateBackground ( struct Effect * Effect, __missing_type__ AnimateBackground ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_ConvertToAnimateBackground(Effect, AnimateBackground, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

#pragma implementation_key(3323)
inline PowerPoint::EffectPtr PowerPoint::Sequence::ConvertToAnimateInReverse ( struct Effect * Effect, __missing_type__ animateInReverse ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_ConvertToAnimateInReverse(Effect, animateInReverse, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

#pragma implementation_key(3324)
inline PowerPoint::EffectPtr PowerPoint::Sequence::ConvertToTextUnitEffect ( struct Effect * Effect, enum MsoAnimTextUnitEffect unitEffect ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_ConvertToTextUnitEffect(Effect, unitEffect, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

#pragma implementation_key(3325)
inline PowerPoint::EffectPtr PowerPoint::Sequence::AddTriggerEffect ( struct Shape * pShape, enum MsoAnimEffect effectId, enum MsoAnimTriggerType trigger, struct Shape * pTriggerShape, _bstr_t bookmark, enum MsoAnimateByLevel Level ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_AddTriggerEffect(pShape, effectId, trigger, pTriggerShape, bookmark, Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

//
// interface Sequences wrapper method implementations
//

#pragma implementation_key(3326)
inline PowerPoint::_ApplicationPtr PowerPoint::Sequences::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3327)
inline IDispatchPtr PowerPoint::Sequences::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3328)
inline PowerPoint::SequencePtr PowerPoint::Sequences::Item ( int Index ) {
    struct Sequence * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SequencePtr(_result, false);
}

#pragma implementation_key(3329)
inline PowerPoint::SequencePtr PowerPoint::Sequences::Add ( int Index ) {
    struct Sequence * _result = 0;
    HRESULT _hr = raw_Add(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SequencePtr(_result, false);
}

//
// interface TimeLine wrapper method implementations
//

#pragma implementation_key(3330)
inline PowerPoint::_ApplicationPtr PowerPoint::TimeLine::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3331)
inline IDispatchPtr PowerPoint::TimeLine::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3332)
inline PowerPoint::SequencePtr PowerPoint::TimeLine::GetMainSequence ( ) {
    struct Sequence * _result = 0;
    HRESULT _hr = get_MainSequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SequencePtr(_result, false);
}

#pragma implementation_key(3333)
inline PowerPoint::SequencesPtr PowerPoint::TimeLine::GetInteractiveSequences ( ) {
    struct Sequences * _result = 0;
    HRESULT _hr = get_InteractiveSequences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SequencesPtr(_result, false);
}

//
// interface ResampleMediaTask wrapper method implementations
//

#pragma implementation_key(3334)
inline enum PowerPoint::PpResampleMediaProfile PowerPoint::ResampleMediaTask::Getprofile ( ) {
    enum PpResampleMediaProfile _result;
    HRESULT _hr = get_profile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3335)
inline VARIANT_BOOL PowerPoint::ResampleMediaTask::GetIsLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3336)
inline VARIANT_BOOL PowerPoint::ResampleMediaTask::GetIsEmbedded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsEmbedded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3337)
inline long PowerPoint::ResampleMediaTask::GetAudioSamplingRate ( ) {
    long _result = 0;
    HRESULT _hr = get_AudioSamplingRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3338)
inline long PowerPoint::ResampleMediaTask::GetVideoFrameRate ( ) {
    long _result = 0;
    HRESULT _hr = get_VideoFrameRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3339)
inline long PowerPoint::ResampleMediaTask::GetSampleHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_SampleHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3340)
inline long PowerPoint::ResampleMediaTask::GetSampleWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_SampleWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3341)
inline _bstr_t PowerPoint::ResampleMediaTask::GetContainerType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ContainerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3342)
inline _bstr_t PowerPoint::ResampleMediaTask::GetVideoCompressionType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VideoCompressionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3343)
inline _bstr_t PowerPoint::ResampleMediaTask::GetAudioCompressionType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AudioCompressionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3344)
inline PowerPoint::ShapePtr PowerPoint::ResampleMediaTask::GetShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface ResampleMediaTasks wrapper method implementations
//

#pragma implementation_key(3345)
inline PowerPoint::ResampleMediaTaskPtr PowerPoint::ResampleMediaTasks::Item ( int Index ) {
    struct ResampleMediaTask * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ResampleMediaTaskPtr(_result, false);
}

#pragma implementation_key(3346)
inline HRESULT PowerPoint::ResampleMediaTasks::Pause ( ) {
    HRESULT _hr = raw_Pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3347)
inline HRESULT PowerPoint::ResampleMediaTasks::Cancel ( ) {
    HRESULT _hr = raw_Cancel();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3348)
inline HRESULT PowerPoint::ResampleMediaTasks::Resume ( ) {
    HRESULT _hr = raw_Resume();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3349)
inline long PowerPoint::ResampleMediaTasks::GetPercentComplete ( ) {
    long _result = 0;
    HRESULT _hr = get_PercentComplete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ShapeRange wrapper method implementations
//

#pragma implementation_key(3350)
inline IDispatchPtr PowerPoint::ShapeRange::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3351)
inline long PowerPoint::ShapeRange::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3352)
inline IDispatchPtr PowerPoint::ShapeRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3353)
inline HRESULT PowerPoint::ShapeRange::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3354)
inline HRESULT PowerPoint::ShapeRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3355)
inline HRESULT PowerPoint::ShapeRange::Flip ( __missing_type__ FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3356)
inline HRESULT PowerPoint::ShapeRange::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3357)
inline HRESULT PowerPoint::ShapeRange::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3358)
inline HRESULT PowerPoint::ShapeRange::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3359)
inline HRESULT PowerPoint::ShapeRange::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3360)
inline HRESULT PowerPoint::ShapeRange::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3361)
inline HRESULT PowerPoint::ShapeRange::ScaleHeight ( float Factor, __missing_type__ RelativeToOriginalSize, __missing_type__ fScale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3362)
inline HRESULT PowerPoint::ShapeRange::ScaleWidth ( float Factor, __missing_type__ RelativeToOriginalSize, __missing_type__ fScale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3363)
inline HRESULT PowerPoint::ShapeRange::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3364)
inline PowerPoint::ShapeRangePtr PowerPoint::ShapeRange::Ungroup ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3365)
inline HRESULT PowerPoint::ShapeRange::ZOrder ( __missing_type__ ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3366)
inline PowerPoint::AdjustmentsPtr PowerPoint::ShapeRange::GetAdjustments ( ) {
    struct Adjustments * _result = 0;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

#pragma implementation_key(3367)
inline __missing_type__  PowerPoint::ShapeRange::GetAutoShapeType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3368)
inline void PowerPoint::ShapeRange::PutAutoShapeType ( __missing_type__ AutoShapeType ) {
    HRESULT _hr = put_AutoShapeType(AutoShapeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3369)
inline __missing_type__  PowerPoint::ShapeRange::GetBlackWhiteMode ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_BlackWhiteMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3370)
inline void PowerPoint::ShapeRange::PutBlackWhiteMode ( __missing_type__ BlackWhiteMode ) {
    HRESULT _hr = put_BlackWhiteMode(BlackWhiteMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3371)
inline PowerPoint::CalloutFormatPtr PowerPoint::ShapeRange::GetCallout ( ) {
    struct CalloutFormat * _result = 0;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

#pragma implementation_key(3372)
inline int PowerPoint::ShapeRange::GetConnectionSiteCount ( ) {
    int _result = 0;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3373)
inline __missing_type__  PowerPoint::ShapeRange::GetConnector ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3374)
inline PowerPoint::ConnectorFormatPtr PowerPoint::ShapeRange::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result = 0;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

#pragma implementation_key(3375)
inline PowerPoint::FillFormatPtr PowerPoint::ShapeRange::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(3376)
inline PowerPoint::GroupShapesPtr PowerPoint::ShapeRange::GetGroupItems ( ) {
    struct GroupShapes * _result = 0;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

#pragma implementation_key(3377)
inline float PowerPoint::ShapeRange::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3378)
inline void PowerPoint::ShapeRange::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3379)
inline __missing_type__  PowerPoint::ShapeRange::GetHorizontalFlip ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3380)
inline float PowerPoint::ShapeRange::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3381)
inline void PowerPoint::ShapeRange::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3382)
inline PowerPoint::LineFormatPtr PowerPoint::ShapeRange::GetLine ( ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(3383)
inline __missing_type__  PowerPoint::ShapeRange::GetLockAspectRatio ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3384)
inline void PowerPoint::ShapeRange::PutLockAspectRatio ( __missing_type__ LockAspectRatio ) {
    HRESULT _hr = put_LockAspectRatio(LockAspectRatio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3385)
inline _bstr_t PowerPoint::ShapeRange::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3386)
inline void PowerPoint::ShapeRange::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3387)
inline PowerPoint::ShapeNodesPtr PowerPoint::ShapeRange::GetNodes ( ) {
    struct ShapeNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

#pragma implementation_key(3388)
inline float PowerPoint::ShapeRange::GetRotation ( ) {
    float _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3389)
inline void PowerPoint::ShapeRange::PutRotation ( float Rotation ) {
    HRESULT _hr = put_Rotation(Rotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3390)
inline PowerPoint::PictureFormatPtr PowerPoint::ShapeRange::GetPictureFormat ( ) {
    struct PictureFormat * _result = 0;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(3391)
inline PowerPoint::ShadowFormatPtr PowerPoint::ShapeRange::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(3392)
inline PowerPoint::TextEffectFormatPtr PowerPoint::ShapeRange::GetTextEffect ( ) {
    struct TextEffectFormat * _result = 0;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

#pragma implementation_key(3393)
inline PowerPoint::TextFramePtr PowerPoint::ShapeRange::GetTextFrame ( ) {
    struct TextFrame * _result = 0;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(3394)
inline PowerPoint::ThreeDFormatPtr PowerPoint::ShapeRange::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(3395)
inline float PowerPoint::ShapeRange::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3396)
inline void PowerPoint::ShapeRange::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3397)
inline __missing_type__  PowerPoint::ShapeRange::GetType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3398)
inline __missing_type__  PowerPoint::ShapeRange::GetVerticalFlip ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3399)
inline _variant_t PowerPoint::ShapeRange::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3400)
inline __missing_type__  PowerPoint::ShapeRange::GetVisible ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3401)
inline void PowerPoint::ShapeRange::PutVisible ( __missing_type__ Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3402)
inline float PowerPoint::ShapeRange::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3403)
inline void PowerPoint::ShapeRange::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3404)
inline int PowerPoint::ShapeRange::GetZOrderPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3405)
inline PowerPoint::OLEFormatPtr PowerPoint::ShapeRange::GetOLEFormat ( ) {
    struct OLEFormat * _result = 0;
    HRESULT _hr = get_OLEFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OLEFormatPtr(_result, false);
}

#pragma implementation_key(3406)
inline PowerPoint::LinkFormatPtr PowerPoint::ShapeRange::GetLinkFormat ( ) {
    struct LinkFormat * _result = 0;
    HRESULT _hr = get_LinkFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinkFormatPtr(_result, false);
}

#pragma implementation_key(3407)
inline PowerPoint::PlaceholderFormatPtr PowerPoint::ShapeRange::GetPlaceholderFormat ( ) {
    struct PlaceholderFormat * _result = 0;
    HRESULT _hr = get_PlaceholderFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlaceholderFormatPtr(_result, false);
}

#pragma implementation_key(3408)
inline PowerPoint::AnimationSettingsPtr PowerPoint::ShapeRange::GetAnimationSettings ( ) {
    struct AnimationSettings * _result = 0;
    HRESULT _hr = get_AnimationSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationSettingsPtr(_result, false);
}

#pragma implementation_key(3409)
inline PowerPoint::ActionSettingsPtr PowerPoint::ShapeRange::GetActionSettings ( ) {
    struct ActionSettings * _result = 0;
    HRESULT _hr = get_ActionSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionSettingsPtr(_result, false);
}

#pragma implementation_key(3410)
inline PowerPoint::TagsPtr PowerPoint::ShapeRange::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

#pragma implementation_key(3411)
inline HRESULT PowerPoint::ShapeRange::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3412)
inline HRESULT PowerPoint::ShapeRange::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3413)
inline HRESULT PowerPoint::ShapeRange::Select ( __missing_type__ Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3414)
inline PowerPoint::ShapeRangePtr PowerPoint::ShapeRange::Duplicate ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3415)
inline enum PowerPoint::PpMediaType PowerPoint::ShapeRange::GetMediaType ( ) {
    enum PpMediaType _result;
    HRESULT _hr = get_MediaType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3416)
inline __missing_type__  PowerPoint::ShapeRange::GetHasTextFrame ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasTextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3417)
inline PowerPoint::SoundFormatPtr PowerPoint::ShapeRange::GetSoundFormat ( ) {
    struct SoundFormat * _result = 0;
    HRESULT _hr = get_SoundFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundFormatPtr(_result, false);
}

#pragma implementation_key(3418)
inline PowerPoint::ShapePtr PowerPoint::ShapeRange::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3419)
inline IUnknownPtr PowerPoint::ShapeRange::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3420)
inline _variant_t PowerPoint::ShapeRange::_Index ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Index(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3421)
inline long PowerPoint::ShapeRange::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3422)
inline PowerPoint::ShapePtr PowerPoint::ShapeRange::Group ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3423)
inline PowerPoint::ShapePtr PowerPoint::ShapeRange::Regroup ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Regroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3424)
inline HRESULT PowerPoint::ShapeRange::Align ( __missing_type__ AlignCmd, __missing_type__ RelativeTo ) {
    HRESULT _hr = raw_Align(AlignCmd, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3425)
inline HRESULT PowerPoint::ShapeRange::Distribute ( __missing_type__ DistributeCmd, __missing_type__ RelativeTo ) {
    HRESULT _hr = raw_Distribute(DistributeCmd, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3426)
inline HRESULT PowerPoint::ShapeRange::GetPolygonalRepresentation ( unsigned long maxPointsInBuffer, float * pPoints, unsigned long * numPointsInPolygon, __missing_type__ * IsOpen ) {
    HRESULT _hr = raw_GetPolygonalRepresentation(maxPointsInBuffer, pPoints, numPointsInPolygon, IsOpen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3427)
inline __missing_type__ PowerPoint::ShapeRange::GetScript ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Script(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3428)
inline _bstr_t PowerPoint::ShapeRange::GetAlternativeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3429)
inline void PowerPoint::ShapeRange::PutAlternativeText ( _bstr_t AlternativeText ) {
    HRESULT _hr = put_AlternativeText(AlternativeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3430)
inline __missing_type__  PowerPoint::ShapeRange::GetHasTable ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3431)
inline PowerPoint::TablePtr PowerPoint::ShapeRange::GetTable ( ) {
    struct Table * _result = 0;
    HRESULT _hr = get_Table(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablePtr(_result, false);
}

#pragma implementation_key(3432)
inline HRESULT PowerPoint::ShapeRange::Export ( _bstr_t PathName, enum PpShapeFormat Filter, int ScaleWidth, int ScaleHeight, enum PpExportMode ExportMode ) {
    HRESULT _hr = raw_Export(PathName, Filter, ScaleWidth, ScaleHeight, ExportMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3433)
inline __missing_type__  PowerPoint::ShapeRange::GetHasDiagram ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasDiagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3434)
inline PowerPoint::DiagramPtr PowerPoint::ShapeRange::GetDiagram ( ) {
    struct Diagram * _result = 0;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramPtr(_result, false);
}

#pragma implementation_key(3435)
inline __missing_type__  PowerPoint::ShapeRange::GetHasDiagramNode ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasDiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3436)
inline PowerPoint::DiagramNodePtr PowerPoint::ShapeRange::GetDiagramNode ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_DiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3437)
inline __missing_type__  PowerPoint::ShapeRange::GetChild ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Child(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3438)
inline PowerPoint::ShapePtr PowerPoint::ShapeRange::GetParentGroup ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_ParentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3439)
inline PowerPoint::CanvasShapesPtr PowerPoint::ShapeRange::GetCanvasItems ( ) {
    struct CanvasShapes * _result = 0;
    HRESULT _hr = get_CanvasItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CanvasShapesPtr(_result, false);
}

#pragma implementation_key(3440)
inline int PowerPoint::ShapeRange::GetId ( ) {
    int _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3441)
inline HRESULT PowerPoint::ShapeRange::CanvasCropLeft ( float Increment ) {
    HRESULT _hr = raw_CanvasCropLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3442)
inline HRESULT PowerPoint::ShapeRange::CanvasCropTop ( float Increment ) {
    HRESULT _hr = raw_CanvasCropTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3443)
inline HRESULT PowerPoint::ShapeRange::CanvasCropRight ( float Increment ) {
    HRESULT _hr = raw_CanvasCropRight(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3444)
inline HRESULT PowerPoint::ShapeRange::CanvasCropBottom ( float Increment ) {
    HRESULT _hr = raw_CanvasCropBottom(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3445)
inline void PowerPoint::ShapeRange::PutRTF ( _bstr_t _arg1 ) {
    HRESULT _hr = put_RTF(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3446)
inline PowerPoint::CustomerDataPtr PowerPoint::ShapeRange::GetCustomerData ( ) {
    struct CustomerData * _result = 0;
    HRESULT _hr = get_CustomerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomerDataPtr(_result, false);
}

#pragma implementation_key(3447)
inline PowerPoint::TextFrame2Ptr PowerPoint::ShapeRange::GetTextFrame2 ( ) {
    struct TextFrame2 * _result = 0;
    HRESULT _hr = get_TextFrame2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFrame2Ptr(_result, false);
}

#pragma implementation_key(3448)
inline __missing_type__  PowerPoint::ShapeRange::GetHasChart ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3449)
inline __missing_type__  PowerPoint::ShapeRange::GetShapeStyle ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_ShapeStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3450)
inline void PowerPoint::ShapeRange::PutShapeStyle ( __missing_type__ ShapeStyle ) {
    HRESULT _hr = put_ShapeStyle(ShapeStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3451)
inline __missing_type__  PowerPoint::ShapeRange::GetBackgroundStyle ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_BackgroundStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3452)
inline void PowerPoint::ShapeRange::PutBackgroundStyle ( __missing_type__ BackgroundStyle ) {
    HRESULT _hr = put_BackgroundStyle(BackgroundStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3453)
inline __missing_type__ PowerPoint::ShapeRange::GetSoftEdge ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_SoftEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3454)
inline __missing_type__ PowerPoint::ShapeRange::GetGlow ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Glow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3455)
inline __missing_type__ PowerPoint::ShapeRange::GetReflection ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_Reflection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3456)
inline PowerPoint::ChartPtr PowerPoint::ShapeRange::GetChart ( ) {
    struct Chart * _result = 0;
    HRESULT _hr = get_Chart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartPtr(_result, false);
}

#pragma implementation_key(3457)
inline __missing_type__  PowerPoint::ShapeRange::GetHasSmartArt ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasSmartArt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3458)
inline __missing_type__ PowerPoint::ShapeRange::GetSmartArt ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_SmartArt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3459)
inline HRESULT PowerPoint::ShapeRange::ConvertTextToSmartArt ( __missing_type__ * Layout ) {
    HRESULT _hr = raw_ConvertTextToSmartArt(Layout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3460)
inline _bstr_t PowerPoint::ShapeRange::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3461)
inline void PowerPoint::ShapeRange::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3462)
inline PowerPoint::MediaFormatPtr PowerPoint::ShapeRange::GetMediaFormat ( ) {
    struct MediaFormat * _result = 0;
    HRESULT _hr = get_MediaFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MediaFormatPtr(_result, false);
}

#pragma implementation_key(3463)
inline HRESULT PowerPoint::ShapeRange::PickupAnimation ( ) {
    HRESULT _hr = raw_PickupAnimation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3464)
inline HRESULT PowerPoint::ShapeRange::ApplyAnimation ( ) {
    HRESULT _hr = raw_ApplyAnimation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3465)
inline HRESULT PowerPoint::ShapeRange::UpgradeMedia ( ) {
    HRESULT _hr = raw_UpgradeMedia();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3466)
inline HRESULT PowerPoint::ShapeRange::MergeShapes ( __missing_type__ MergeCmd, struct Shape * PrimaryShape ) {
    HRESULT _hr = raw_MergeShapes(MergeCmd, PrimaryShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3467)
inline __missing_type__  PowerPoint::ShapeRange::GetIsNarration ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_IsNarration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3468)
inline void PowerPoint::ShapeRange::PutIsNarration ( __missing_type__ IsNarration ) {
    HRESULT _hr = put_IsNarration(IsNarration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3469)
inline _bstr_t PowerPoint::ShapeRange::GetInkXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InkXML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3470)
inline __missing_type__  PowerPoint::ShapeRange::GetHasInkXML ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasInkXML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3471)
inline __missing_type__  PowerPoint::ShapeRange::GetHasSectionLink ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_HasSectionLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface GroupShapes wrapper method implementations
//

#pragma implementation_key(3472)
inline IDispatchPtr PowerPoint::GroupShapes::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3473)
inline long PowerPoint::GroupShapes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3474)
inline IDispatchPtr PowerPoint::GroupShapes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3475)
inline int PowerPoint::GroupShapes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3476)
inline PowerPoint::ShapePtr PowerPoint::GroupShapes::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3477)
inline IUnknownPtr PowerPoint::GroupShapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3478)
inline PowerPoint::ShapeRangePtr PowerPoint::GroupShapes::Range ( const _variant_t & Index ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

//
// interface CanvasShapes wrapper method implementations
//

#pragma implementation_key(3479)
inline IDispatchPtr PowerPoint::CanvasShapes::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3480)
inline long PowerPoint::CanvasShapes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3481)
inline IDispatchPtr PowerPoint::CanvasShapes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3482)
inline int PowerPoint::CanvasShapes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3483)
inline PowerPoint::ShapePtr PowerPoint::CanvasShapes::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3484)
inline IUnknownPtr PowerPoint::CanvasShapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3485)
inline PowerPoint::ShapePtr PowerPoint::CanvasShapes::AddCallout ( __missing_type__ Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCallout(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3486)
inline PowerPoint::ShapePtr PowerPoint::CanvasShapes::AddConnector ( __missing_type__ Type, float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddConnector(Type, BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3487)
inline PowerPoint::ShapePtr PowerPoint::CanvasShapes::AddCurve ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCurve(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3488)
inline PowerPoint::ShapePtr PowerPoint::CanvasShapes::AddLabel ( __missing_type__ Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddLabel(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3489)
inline PowerPoint::ShapePtr PowerPoint::CanvasShapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddLine(BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3490)
inline PowerPoint::ShapePtr PowerPoint::CanvasShapes::AddPicture ( _bstr_t FileName, __missing_type__ LinkToFile, __missing_type__ SaveWithDocument, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3491)
inline PowerPoint::ShapePtr PowerPoint::CanvasShapes::AddPolyline ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPolyline(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3492)
inline PowerPoint::ShapePtr PowerPoint::CanvasShapes::AddShape ( __missing_type__ Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddShape(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3493)
inline PowerPoint::ShapePtr PowerPoint::CanvasShapes::AddTextEffect ( __missing_type__ PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, __missing_type__ FontBold, __missing_type__ FontItalic, float Left, float Top ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3494)
inline PowerPoint::ShapePtr PowerPoint::CanvasShapes::AddTextbox ( __missing_type__ Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTextbox(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3495)
inline PowerPoint::FreeformBuilderPtr PowerPoint::CanvasShapes::BuildFreeform ( __missing_type__ EditingType, float X1, float Y1 ) {
    struct FreeformBuilder * _result = 0;
    HRESULT _hr = raw_BuildFreeform(EditingType, X1, Y1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FreeformBuilderPtr(_result, false);
}

#pragma implementation_key(3496)
inline PowerPoint::ShapeRangePtr PowerPoint::CanvasShapes::Range ( const _variant_t & Index ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3497)
inline HRESULT PowerPoint::CanvasShapes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3498)
inline PowerPoint::ShapePtr PowerPoint::CanvasShapes::GetBackground ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface CustomLayout wrapper method implementations
//

#pragma implementation_key(3499)
inline PowerPoint::_ApplicationPtr PowerPoint::CustomLayout::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3500)
inline IDispatchPtr PowerPoint::CustomLayout::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3501)
inline PowerPoint::ShapesPtr PowerPoint::CustomLayout::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

#pragma implementation_key(3502)
inline PowerPoint::HeadersFootersPtr PowerPoint::CustomLayout::GetHeadersFooters ( ) {
    struct HeadersFooters * _result = 0;
    HRESULT _hr = get_HeadersFooters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeadersFootersPtr(_result, false);
}

#pragma implementation_key(3503)
inline PowerPoint::ShapeRangePtr PowerPoint::CustomLayout::GetBackground ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3504)
inline _bstr_t PowerPoint::CustomLayout::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3505)
inline void PowerPoint::CustomLayout::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3506)
inline HRESULT PowerPoint::CustomLayout::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3507)
inline float PowerPoint::CustomLayout::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3508)
inline float PowerPoint::CustomLayout::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3509)
inline PowerPoint::HyperlinksPtr PowerPoint::CustomLayout::GetHyperlinks ( ) {
    struct Hyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

#pragma implementation_key(3510)
inline PowerPoint::DesignPtr PowerPoint::CustomLayout::GetDesign ( ) {
    struct Design * _result = 0;
    HRESULT _hr = get_Design(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

#pragma implementation_key(3511)
inline PowerPoint::TimeLinePtr PowerPoint::CustomLayout::GetTimeLine ( ) {
    struct TimeLine * _result = 0;
    HRESULT _hr = get_TimeLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TimeLinePtr(_result, false);
}

#pragma implementation_key(3512)
inline PowerPoint::SlideShowTransitionPtr PowerPoint::CustomLayout::GetSlideShowTransition ( ) {
    struct SlideShowTransition * _result = 0;
    HRESULT _hr = get_SlideShowTransition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowTransitionPtr(_result, false);
}

#pragma implementation_key(3513)
inline _bstr_t PowerPoint::CustomLayout::GetMatchingName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MatchingName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3514)
inline void PowerPoint::CustomLayout::PutMatchingName ( _bstr_t MatchingName ) {
    HRESULT _hr = put_MatchingName(MatchingName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3515)
inline __missing_type__  PowerPoint::CustomLayout::GetPreserved ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Preserved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3516)
inline void PowerPoint::CustomLayout::PutPreserved ( __missing_type__ Preserved ) {
    HRESULT _hr = put_Preserved(Preserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3517)
inline int PowerPoint::CustomLayout::GetIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3518)
inline HRESULT PowerPoint::CustomLayout::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3519)
inline HRESULT PowerPoint::CustomLayout::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3520)
inline HRESULT PowerPoint::CustomLayout::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3521)
inline PowerPoint::CustomLayoutPtr PowerPoint::CustomLayout::Duplicate ( ) {
    struct CustomLayout * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLayoutPtr(_result, false);
}

#pragma implementation_key(3522)
inline HRESULT PowerPoint::CustomLayout::MoveTo ( int toPos ) {
    HRESULT _hr = raw_MoveTo(toPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3523)
inline __missing_type__  PowerPoint::CustomLayout::GetDisplayMasterShapes ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_DisplayMasterShapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3524)
inline void PowerPoint::CustomLayout::PutDisplayMasterShapes ( __missing_type__ DisplayMasterShapes ) {
    HRESULT _hr = put_DisplayMasterShapes(DisplayMasterShapes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3525)
inline __missing_type__  PowerPoint::CustomLayout::GetFollowMasterBackground ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_FollowMasterBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3526)
inline void PowerPoint::CustomLayout::PutFollowMasterBackground ( __missing_type__ FollowMasterBackground ) {
    HRESULT _hr = put_FollowMasterBackground(FollowMasterBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3527)
inline __missing_type__ PowerPoint::CustomLayout::GetThemeColorScheme ( ) {
    __missing_type__ * _result;
    HRESULT _hr = get_ThemeColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3528)
inline PowerPoint::CustomerDataPtr PowerPoint::CustomLayout::GetCustomerData ( ) {
    struct CustomerData * _result = 0;
    HRESULT _hr = get_CustomerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomerDataPtr(_result, false);
}

#pragma implementation_key(3529)
inline PowerPoint::GuidesPtr PowerPoint::CustomLayout::GetGuides ( ) {
    struct Guides * _result = 0;
    HRESULT _hr = get_Guides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GuidesPtr(_result, false);
}

//
// interface CustomLayouts wrapper method implementations
//

#pragma implementation_key(3530)
inline PowerPoint::_ApplicationPtr PowerPoint::CustomLayouts::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3531)
inline IDispatchPtr PowerPoint::CustomLayouts::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3532)
inline PowerPoint::CustomLayoutPtr PowerPoint::CustomLayouts::Item ( const _variant_t & Index ) {
    struct CustomLayout * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLayoutPtr(_result, false);
}

#pragma implementation_key(3533)
inline PowerPoint::CustomLayoutPtr PowerPoint::CustomLayouts::Add ( int Index ) {
    struct CustomLayout * _result = 0;
    HRESULT _hr = raw_Add(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLayoutPtr(_result, false);
}

#pragma implementation_key(3534)
inline PowerPoint::CustomLayoutPtr PowerPoint::CustomLayouts::Paste ( int Index ) {
    struct CustomLayout * _result = 0;
    HRESULT _hr = raw_Paste(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLayoutPtr(_result, false);
}

//
// interface Comments wrapper method implementations
//

#pragma implementation_key(3535)
inline PowerPoint::_ApplicationPtr PowerPoint::Comments::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3536)
inline IDispatchPtr PowerPoint::Comments::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3537)
inline PowerPoint::CommentPtr PowerPoint::Comments::Item ( int Index ) {
    struct Comment * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

#pragma implementation_key(3538)
inline PowerPoint::CommentPtr PowerPoint::Comments::Add ( float Left, float Top, _bstr_t Author, _bstr_t AuthorInitials, _bstr_t Text ) {
    struct Comment * _result = 0;
    HRESULT _hr = raw_Add(Left, Top, Author, AuthorInitials, Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

#pragma implementation_key(3539)
inline PowerPoint::CommentPtr PowerPoint::Comments::Add2 ( float Left, float Top, _bstr_t Author, _bstr_t AuthorInitials, _bstr_t Text, _bstr_t ProviderID, _bstr_t UserID ) {
    struct Comment * _result = 0;
    HRESULT _hr = raw_Add2(Left, Top, Author, AuthorInitials, Text, ProviderID, UserID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

//
// interface Comment wrapper method implementations
//

#pragma implementation_key(3540)
inline PowerPoint::_ApplicationPtr PowerPoint::Comment::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3541)
inline IDispatchPtr PowerPoint::Comment::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3542)
inline _bstr_t PowerPoint::Comment::GetAuthor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3543)
inline _bstr_t PowerPoint::Comment::GetAuthorInitials ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AuthorInitials(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3544)
inline _bstr_t PowerPoint::Comment::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3545)
inline DATE PowerPoint::Comment::GetDateTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_DateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3546)
inline int PowerPoint::Comment::GetAuthorIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_AuthorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3547)
inline float PowerPoint::Comment::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3548)
inline float PowerPoint::Comment::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3549)
inline HRESULT PowerPoint::Comment::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3550)
inline _bstr_t PowerPoint::Comment::GetProviderID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProviderID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3551)
inline _bstr_t PowerPoint::Comment::GetUserID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3552)
inline int PowerPoint::Comment::GetTimeZoneBias ( ) {
    int _result = 0;
    HRESULT _hr = get_TimeZoneBias(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3553)
inline PowerPoint::CommentsPtr PowerPoint::Comment::GetReplies ( ) {
    struct Comments * _result = 0;
    HRESULT _hr = get_Replies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentsPtr(_result, false);
}

#pragma implementation_key(3554)
inline VARIANT_BOOL PowerPoint::Comment::GetCollapsed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Collapsed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface DiagramNode wrapper method implementations
//

#pragma implementation_key(3555)
inline IDispatchPtr PowerPoint::DiagramNode::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3556)
inline long PowerPoint::DiagramNode::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3557)
inline PowerPoint::DiagramNodePtr PowerPoint::DiagramNode::AddNode ( __missing_type__ Pos, __missing_type__ NodeType ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_AddNode(Pos, NodeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3558)
inline HRESULT PowerPoint::DiagramNode::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3559)
inline HRESULT PowerPoint::DiagramNode::MoveNode ( struct DiagramNode * TargetNode, __missing_type__ Pos ) {
    HRESULT _hr = raw_MoveNode(TargetNode, Pos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3560)
inline HRESULT PowerPoint::DiagramNode::ReplaceNode ( struct DiagramNode * TargetNode ) {
    HRESULT _hr = raw_ReplaceNode(TargetNode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3561)
inline HRESULT PowerPoint::DiagramNode::SwapNode ( struct DiagramNode * TargetNode, VARIANT_BOOL SwapChildren ) {
    HRESULT _hr = raw_SwapNode(TargetNode, SwapChildren);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3562)
inline PowerPoint::DiagramNodePtr PowerPoint::DiagramNode::CloneNode ( VARIANT_BOOL CopyChildren, struct DiagramNode * TargetNode, __missing_type__ Pos ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_CloneNode(CopyChildren, TargetNode, Pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3563)
inline HRESULT PowerPoint::DiagramNode::TransferChildren ( struct DiagramNode * ReceivingNode ) {
    HRESULT _hr = raw_TransferChildren(ReceivingNode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3564)
inline PowerPoint::DiagramNodePtr PowerPoint::DiagramNode::NextNode ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_NextNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3565)
inline PowerPoint::DiagramNodePtr PowerPoint::DiagramNode::PrevNode ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_PrevNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3566)
inline IDispatchPtr PowerPoint::DiagramNode::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3567)
inline PowerPoint::DiagramNodeChildrenPtr PowerPoint::DiagramNode::GetChildren ( ) {
    struct DiagramNodeChildren * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodeChildrenPtr(_result, false);
}

#pragma implementation_key(3568)
inline PowerPoint::ShapePtr PowerPoint::DiagramNode::GetShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3569)
inline PowerPoint::DiagramNodePtr PowerPoint::DiagramNode::GetRoot ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3570)
inline PowerPoint::DiagramPtr PowerPoint::DiagramNode::GetDiagram ( ) {
    struct Diagram * _result = 0;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramPtr(_result, false);
}

#pragma implementation_key(3571)
inline __missing_type__  PowerPoint::DiagramNode::GetLayout ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3572)
inline void PowerPoint::DiagramNode::PutLayout ( __missing_type__ Type ) {
    HRESULT _hr = put_Layout(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3573)
inline PowerPoint::ShapePtr PowerPoint::DiagramNode::GetTextShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_TextShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface DiagramNodeChildren wrapper method implementations
//

#pragma implementation_key(3574)
inline IDispatchPtr PowerPoint::DiagramNodeChildren::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3575)
inline long PowerPoint::DiagramNodeChildren::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3576)
inline IUnknownPtr PowerPoint::DiagramNodeChildren::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3577)
inline PowerPoint::DiagramNodePtr PowerPoint::DiagramNodeChildren::Item ( const _variant_t & Index ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3578)
inline PowerPoint::DiagramNodePtr PowerPoint::DiagramNodeChildren::AddNode ( const _variant_t & Index, __missing_type__ NodeType ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_AddNode(Index, NodeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3579)
inline HRESULT PowerPoint::DiagramNodeChildren::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3580)
inline IDispatchPtr PowerPoint::DiagramNodeChildren::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3581)
inline int PowerPoint::DiagramNodeChildren::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3582)
inline PowerPoint::DiagramNodePtr PowerPoint::DiagramNodeChildren::GetFirstChild ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_FirstChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3583)
inline PowerPoint::DiagramNodePtr PowerPoint::DiagramNodeChildren::GetLastChild ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_LastChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

//
// interface DiagramNodes wrapper method implementations
//

#pragma implementation_key(3584)
inline IDispatchPtr PowerPoint::DiagramNodes::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3585)
inline long PowerPoint::DiagramNodes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3586)
inline IUnknownPtr PowerPoint::DiagramNodes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3587)
inline PowerPoint::DiagramNodePtr PowerPoint::DiagramNodes::Item ( const _variant_t & Index ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3588)
inline HRESULT PowerPoint::DiagramNodes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3589)
inline IDispatchPtr PowerPoint::DiagramNodes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3590)
inline int PowerPoint::DiagramNodes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Diagram wrapper method implementations
//

#pragma implementation_key(3591)
inline IDispatchPtr PowerPoint::Diagram::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3592)
inline long PowerPoint::Diagram::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3593)
inline IDispatchPtr PowerPoint::Diagram::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3594)
inline PowerPoint::DiagramNodesPtr PowerPoint::Diagram::GetNodes ( ) {
    struct DiagramNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodesPtr(_result, false);
}

#pragma implementation_key(3595)
inline __missing_type__  PowerPoint::Diagram::GetType ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3596)
inline __missing_type__  PowerPoint::Diagram::GetAutoLayout ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AutoLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3597)
inline void PowerPoint::Diagram::PutAutoLayout ( __missing_type__ AutoLayout ) {
    HRESULT _hr = put_AutoLayout(AutoLayout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3598)
inline __missing_type__  PowerPoint::Diagram::GetReverse ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_Reverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3599)
inline void PowerPoint::Diagram::PutReverse ( __missing_type__ Reverse ) {
    HRESULT _hr = put_Reverse(Reverse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3600)
inline __missing_type__  PowerPoint::Diagram::GetAutoFormat ( ) {
    __missing_type__ _result;
    HRESULT _hr = get_AutoFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3601)
inline void PowerPoint::Diagram::PutAutoFormat ( __missing_type__ AutoFormat ) {
    HRESULT _hr = put_AutoFormat(AutoFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3602)
inline HRESULT PowerPoint::Diagram::Convert ( __missing_type__ Type ) {
    HRESULT _hr = raw_Convert(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3603)
inline HRESULT PowerPoint::Diagram::FitText ( ) {
    HRESULT _hr = raw_FitText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface FileConverters wrapper method implementations
//

#pragma implementation_key(3604)
inline PowerPoint::FileConverterPtr PowerPoint::FileConverters::Item ( const _variant_t & Index ) {
    struct FileConverter * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileConverterPtr(_result, false);
}

//
// interface FileConverter wrapper method implementations
//

#pragma implementation_key(3605)
inline PowerPoint::_ApplicationPtr PowerPoint::FileConverter::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3606)
inline VARIANT_BOOL PowerPoint::FileConverter::GetCanOpen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanOpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3607)
inline VARIANT_BOOL PowerPoint::FileConverter::GetCanSave ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanSave(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3608)
inline _bstr_t PowerPoint::FileConverter::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3609)
inline PowerPoint::FileConvertersPtr PowerPoint::FileConverter::GetCreator ( ) {
    struct FileConverters * _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileConvertersPtr(_result, false);
}

#pragma implementation_key(3610)
inline _bstr_t PowerPoint::FileConverter::GetExtensions ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3611)
inline _bstr_t PowerPoint::FileConverter::GetFormatName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormatName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3612)
inline _bstr_t PowerPoint::FileConverter::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3613)
inline PowerPoint::FileConvertersPtr PowerPoint::FileConverter::GetParent ( ) {
    struct FileConverters * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileConvertersPtr(_result, false);
}

#pragma implementation_key(3614)
inline _bstr_t PowerPoint::FileConverter::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3615)
inline long PowerPoint::FileConverter::GetOpenFormat ( ) {
    long _result = 0;
    HRESULT _hr = get_OpenFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3616)
inline long PowerPoint::FileConverter::GetSaveFormat ( ) {
    long _result = 0;
    HRESULT _hr = get_SaveFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}
