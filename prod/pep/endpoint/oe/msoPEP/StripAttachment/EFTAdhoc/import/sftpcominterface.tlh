// Created by Microsoft (R) C/C++ Compiler Version 15.00.21022.08 (47fdbe2c).
//
// c:\source\import\debug\sftpcominterface.tlh
//
// C++ source equivalent of Win32 type library SFTPCOMInterface.tlb
// compiler-generated file created 06/29/11 at 15:24:16 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace SFTPCOMINTERFACELib {

//
// Forward references and typedefs
//

struct __declspec(uuid("5873fc2d-be4a-4f01-8d66-4eaa337046ee"))
/* LIBID */ __SFTPCOMINTERFACELib;
enum EventReason;
struct __declspec(uuid("cb0e4ec0-8e54-4c0e-a81a-9b87213cc318"))
/* dual interface */ ICIIPAccessRule;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0054_0001;
struct __declspec(uuid("f321ffcf-5689-4f12-9fa2-bfa8dbbd9b8e"))
/* dual interface */ ICIManualIPAccessRule;
struct __declspec(uuid("04563da4-3a56-47cf-a634-bc132b41ea19"))
/* dual interface */ ICIAutobanIPAccessRule;
struct __declspec(uuid("88bf8625-6155-4ba0-9c9e-beca90fa3acc"))
/* dual interface */ ICIBannedIP;
struct /* coclass */ CIServer;
struct __declspec(uuid("2518c8c6-d5b8-44bb-bdc4-1513da9ad8bc"))
/* dual interface */ ICIServer;
struct __declspec(uuid("93e30fb4-41fd-4fa3-807b-9eb6a50779a1"))
/* dual interface */ ICISites;
struct __declspec(uuid("3eece91b-7f0f-4745-8144-e3b47a71b663"))
/* dual interface */ ICISite;
struct __declspec(uuid("fb2d04f0-5842-4568-8637-d30e3e42c86d"))
/* dual interface */ IPermission;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0002_0008;
struct __declspec(uuid("5d0ece92-ae7b-4076-99bf-361d423d3c51"))
/* dual interface */ ICIClientSettings;
struct __declspec(uuid("f2919303-5ad3-4dbf-8b07-786960263d06"))
/* dual interface */ ICIComplexPasswordSettings;
struct __declspec(uuid("23382684-822e-4f62-9007-a7aa76d36287"))
/* dual interface */ ICIResetPasswordSettings;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0007;
struct __declspec(uuid("e59a3d73-0365-4312-83a8-2daac99074a6"))
/* dual interface */ ICIAS2OutboundSettings;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0008;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0009;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0010;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0049_0001;
struct __declspec(uuid("077b1c9a-618a-4e8f-9eb6-533dabc4caad"))
/* dual interface */ ICIAS2InboundSettings;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0001;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0002;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0003;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0004;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0005;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0006;
struct __declspec(uuid("86fd1ebe-92e2-40f3-9c03-e5f0ca55f8ab"))
/* dual interface */ ICICommandSettings;
struct __declspec(uuid("b8562c98-012e-4fef-9732-33a34aa01a18"))
/* dual interface */ ICICertInfo;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0002_0002;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0002_0003;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0002_0007;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0002_0004;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0002_0005;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0002_0006;
struct __declspec(uuid("6e0ee722-f040-4f2e-980e-2afd593a0908"))
/* dual interface */ ICIDMZGateway;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0004;
struct __declspec(uuid("af5973bf-eed9-4941-8671-625c062b8975"))
/* dual interface */ ICIAudit;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0001;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0002;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0003;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0007;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0009;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0008;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0010;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0011;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0006;
struct /* coclass */ CISites;
struct /* coclass */ CISite;
struct /* coclass */ Permission;
struct /* coclass */ CIClientSettings;
struct /* coclass */ CICommandSettings;
struct /* coclass */ CICertInfo;
struct /* coclass */ CIPgpActionParams;
struct __declspec(uuid("88cd614d-5467-460c-9885-cd6c5064a325"))
/* dual interface */ ICIPgpActionParams;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0001;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0002;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0003;
struct /* coclass */ CIMailActionParams;
struct __declspec(uuid("7cee64b2-4c60-4fe0-8ddb-aaf31e59e24a"))
/* dual interface */ ICIMailActionParams;
struct /* coclass */ CIUploadActionParams;
struct __declspec(uuid("0f141c5f-7bab-4fea-bd22-d91170304ed3"))
/* dual interface */ ICIUploadActionParams;
struct __declspec(uuid("43c12faf-8c8f-4b1a-934c-8ebae708b83c"))
/* dual interface */ ICITransferActionParams;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0006;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0011_0001;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0011_0002;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0011_0003;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0011_0004;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0011_0005;
struct /* coclass */ CIDownloadActionParams;
struct __declspec(uuid("1a5d0780-694f-4bed-a2ec-5ce9c58d2876"))
/* dual interface */ ICIDownloadActionParams;
struct /* coclass */ CICleanupActionParams;
struct __declspec(uuid("c4b3c609-9488-41a5-b895-def37000fe06"))
/* dual interface */ ICICleanupActionParams;
struct /* coclass */ CIReportActionParams;
struct __declspec(uuid("c9d24368-c4de-442f-9961-4014ff442698"))
/* dual interface */ ICIReportActionParams;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0017;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0018;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0019;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0020;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0021;
struct /* coclass */ CICommandActionParams;
struct __declspec(uuid("7b4a979f-f9d7-413c-8ecd-7a5ce4b2aa3e"))
/* dual interface */ ICICommandActionParams;
struct /* coclass */ CIStopActionParams;
struct __declspec(uuid("d302ccd1-447c-4256-8957-c97aae42914c"))
/* dual interface */ ICIStopActionParams;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0014;
struct /* coclass */ CIBackupActionParams;
struct __declspec(uuid("763d7a3d-acbe-41d5-a866-5a211847fd9c"))
/* dual interface */ ICIBackupActionParams;
struct /* coclass */ CIAWTaskActionParams;
struct __declspec(uuid("12799f36-fb77-4244-bf0e-fac73113a049"))
/* dual interface */ ICIAWTaskActionParams;
struct /* coclass */ CIAS2SendActionParams;
struct __declspec(uuid("a1a482f7-a86c-4805-8179-5e585320c96b"))
/* dual interface */ ICIAS2SendActionParams;
struct /* coclass */ CIWindowsEventLogActionParams;
struct __declspec(uuid("4166dfc2-e3e4-421a-af75-8c23aa346dc1"))
/* dual interface */ ICIWindowsEventLogActionParams;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0020_0001;
struct /* coclass */ CIEventRules;
struct __declspec(uuid("46cc85df-420f-4586-a68b-a3f92cb353ab"))
/* dual interface */ ICIEventRules;
struct /* coclass */ CIEventRule;
struct __declspec(uuid("1dda5e8d-ec07-413b-8c49-db5ccc46f0ea"))
/* dual interface */ ICIEventRule;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0013;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0007;
struct /* coclass */ CIIfStatement;
struct __declspec(uuid("42679a64-3760-4943-9bc3-dc2a42842e98"))
/* dual interface */ ICIIfStatement;
struct __declspec(uuid("98e28e5e-332b-40f5-b840-48f9bfe5e153"))
/* dual interface */ ICIEventRuleStatement;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0004;
struct /* coclass */ CIActionStatement;
struct __declspec(uuid("3d8aabc7-0729-4868-8428-3d2c447ec3bf"))
/* dual interface */ ICIActionStatement;
struct /* coclass */ CIActionStatements;
struct __declspec(uuid("7bf321ce-b641-4d57-a109-76edc8708c4c"))
/* dual interface */ ICIActionStatements;
struct /* coclass */ CIEventAction;
struct __declspec(uuid("5c38f400-cee1-4cef-ae27-db1f6a8dccd7"))
/* dual interface */ ICIEventAction;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0005;
struct /* coclass */ CIEventActions;
struct __declspec(uuid("1e7376d6-5003-47fe-ada7-9b0a6bfbf888"))
/* dual interface */ ICIEventActions;
struct /* coclass */ CICompoundCondition;
struct __declspec(uuid("f649f52b-6923-40a3-86f2-50c9e5986f32"))
/* dual interface */ ICICompoundCondition;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0008;
struct /* coclass */ CISimpleCondition;
struct __declspec(uuid("68d1009e-a670-4d46-bb0b-b034ccd870f5"))
/* dual interface */ ICISimpleCondition;
struct /* coclass */ CIEventRuleParams;
struct __declspec(uuid("71ba2e98-c6ff-4e8e-9dcb-ec45cf674b68"))
/* dual interface */ ICIEventRuleParams;
struct /* coclass */ CITimerEventRuleParams;
struct __declspec(uuid("b8b64b3c-7b5c-4324-acd6-99622da0f411"))
/* dual interface */ ICITimerEventRuleParams;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0010;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0011;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0012;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0016;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0009;
struct /* coclass */ CIFolderMonitorEventRuleParams;
struct __declspec(uuid("5dff0c88-9ffa-4946-b088-199cbad101ba"))
/* dual interface */ ICIFolderMonitorEventRuleParams;
struct /* coclass */ CIAudit;
struct /* coclass */ CIPGPKeyInfo;
struct __declspec(uuid("5704f3a9-73f9-4f0b-9676-77b9cb2c00f2"))
/* dual interface */ ICIPGPKeyInfo;
struct /* coclass */ CIReportInfo;
struct __declspec(uuid("835c05c4-47c2-4d57-bf62-ae4b02db3dd3"))
/* dual interface */ ICIReportInfo;
struct /* coclass */ CIEventInfo;
struct __declspec(uuid("7f60dc98-112e-413e-8ebc-4889cb55c2ca"))
/* dual interface */ ICIEventInfo;
struct /* coclass */ CISSHKeyInfo;
struct __declspec(uuid("f5a7c625-31f8-4d32-94e8-49cbbd4e3bb4"))
/* dual interface */ ICISSHKeyInfo;
struct /* coclass */ CIADAuthManagerSettings;
struct __declspec(uuid("b11722e6-0208-4f19-ad99-3bad0be56a66"))
/* dual interface */ ICIADAuthManagerSettings;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0039_0001;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0039_0002;
struct /* coclass */ CIGSAuthManagerSettings;
struct __declspec(uuid("79108808-03a1-4f55-9650-773659ee8ea0"))
/* dual interface */ ICIGSAuthManagerSettings;
struct /* coclass */ CIODBCAuthManagerSettings;
struct __declspec(uuid("3cf0bffd-3cdc-4369-9d6d-98f27b308d8e"))
/* dual interface */ ICIODBCAuthManagerSettings;
struct /* coclass */ CILDAPAuthManagerSettings;
struct __declspec(uuid("ee766472-322a-443e-b7f2-b83eb33f0984"))
/* dual interface */ ICILDAPAuthManagerSettings;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0042_0001;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0042_0002;
struct /* coclass */ CIDMZGateway;
struct /* coclass */ CIAS2TransactionInfo;
struct __declspec(uuid("34afd242-d3ff-431f-a949-3ae7f6d0c03c"))
/* dual interface */ ICIAS2TransactionInfo;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0044_0001;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0044_0002;
struct /* coclass */ CIAdminAccount;
struct __declspec(uuid("dfaf4d38-3e26-494b-97a3-50e4bb235e13"))
/* dual interface */ ICIAdminAccount;
struct /* coclass */ CIAdminPermission;
struct __declspec(uuid("f0dc728c-3bd1-4250-8c94-d85ec06a0962"))
/* dual interface */ ICIAdminPermission;
enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0005;
struct /* coclass */ CIResetPasswordSettings;
struct /* coclass */ CIComplexPasswordSettings;
struct /* coclass */ CIAS2OutboundSettings;
struct /* coclass */ CIBackupArchiveInfo;
struct __declspec(uuid("e39bff57-0cdc-46dc-96be-54ffdc0d3ec2"))
/* dual interface */ ICIBackupArchiveInfo;
struct __declspec(uuid("4eeaef69-66a3-4f29-97b1-c3d9df533b29"))
/* dual interface */ ICISiteBackupInfo;
struct /* coclass */ CISiteBackupInfo;
struct /* coclass */ CIAS2InboundSettings;
struct /* coclass */ CIConnectedUser;
struct __declspec(uuid("f7eb8459-d3c8-4677-911f-5e03bb12791c"))
/* dual interface */ ICIConnectedUser;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0054_0001 IPAccessRuleType;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0002_0008 SFTPAdvBool;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0007 AS2OutboundProfileStatus;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0008 AS2ContentType;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0009 AS2ReceiptPolicy;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0010 AS2ReceiptDelivery;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0049_0001 AS2ProxyType;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0001 AS2IDMismatchPolicy;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0002 AS2DoubleMsgIDPolicy;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0003 AS2DoubleContentPolicy;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0004 AS2AuthenticationType;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0005 AS2SignatureMissingPolicy;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0006 AS2EncryptMissingPolicy;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0002_0002 EventType;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0002_0003 AutobanSensitivity;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0002_0007 TwoFactorAuthenticationMode;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0002_0004 DataSanitizationMethod;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0002_0005 PGPLogLevel;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0002_0006 EMailLoginCredentialsMode;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0004 AdminAccountType;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0001 ServerModule;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0002 RegistrationState;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0003 AdminLoginType;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0007 LogMode;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0009 ARMDatabaseType;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0008 ARMAuthenticationType;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0010 PGPKeyType;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0011 PGPKeyCipher;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0006 CertificateFormat;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0001 PGPOperation;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0002 PGPCompressionLevel;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0003 PGPSigningHash;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0006 NetworkProtocol;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0011_0001 FTPDataConnectionMode;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0011_0002 ProxyType;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0011_0003 ProxyAuthenticationType;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0011_0004 SOCKSType;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0011_0005 TransferOverwriteType;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0017 ReportPeriodType;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0018 PredefinedReportPeriod;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0019 ReportFormat;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0020 ReportFilterOperator;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0021 ReportFiltersCombiningOperator;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0014 StopType;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0020_0001 EventLogType;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0013 EventProperty;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0007 ConditionOperator;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0004 EventRuleStatementType;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0005 EventActionType;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0008 LogicalOperator;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0010 Relation;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0011 Weekday;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0012 Month;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0016 RepeatPattern;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0009 Recurrence;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0039_0001 ADAuthManagerType;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0039_0002 ADAuthManagerLogonAttribute;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0042_0001 LDAPSearchScope;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0042_0002 LDAPVersion;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0044_0001 AS2TransactionStatus;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0044_0002 AS2TransactionDirection;
typedef enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0005 AdminPermissionsPolicy;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(ICIIPAccessRule, __uuidof(ICIIPAccessRule));
_COM_SMARTPTR_TYPEDEF(ICIManualIPAccessRule, __uuidof(ICIManualIPAccessRule));
_COM_SMARTPTR_TYPEDEF(ICIAutobanIPAccessRule, __uuidof(ICIAutobanIPAccessRule));
_COM_SMARTPTR_TYPEDEF(ICIBannedIP, __uuidof(ICIBannedIP));
_COM_SMARTPTR_TYPEDEF(IPermission, __uuidof(IPermission));
_COM_SMARTPTR_TYPEDEF(ICIComplexPasswordSettings, __uuidof(ICIComplexPasswordSettings));
_COM_SMARTPTR_TYPEDEF(ICIResetPasswordSettings, __uuidof(ICIResetPasswordSettings));
_COM_SMARTPTR_TYPEDEF(ICIAS2OutboundSettings, __uuidof(ICIAS2OutboundSettings));
_COM_SMARTPTR_TYPEDEF(ICIAS2InboundSettings, __uuidof(ICIAS2InboundSettings));
_COM_SMARTPTR_TYPEDEF(ICIClientSettings, __uuidof(ICIClientSettings));
_COM_SMARTPTR_TYPEDEF(ICICommandSettings, __uuidof(ICICommandSettings));
_COM_SMARTPTR_TYPEDEF(ICICertInfo, __uuidof(ICICertInfo));
_COM_SMARTPTR_TYPEDEF(ICIDMZGateway, __uuidof(ICIDMZGateway));
_COM_SMARTPTR_TYPEDEF(ICISite, __uuidof(ICISite));
_COM_SMARTPTR_TYPEDEF(ICISites, __uuidof(ICISites));
_COM_SMARTPTR_TYPEDEF(ICIAudit, __uuidof(ICIAudit));
_COM_SMARTPTR_TYPEDEF(ICIServer, __uuidof(ICIServer));
_COM_SMARTPTR_TYPEDEF(ICIPgpActionParams, __uuidof(ICIPgpActionParams));
_COM_SMARTPTR_TYPEDEF(ICIMailActionParams, __uuidof(ICIMailActionParams));
_COM_SMARTPTR_TYPEDEF(ICITransferActionParams, __uuidof(ICITransferActionParams));
_COM_SMARTPTR_TYPEDEF(ICIUploadActionParams, __uuidof(ICIUploadActionParams));
_COM_SMARTPTR_TYPEDEF(ICIDownloadActionParams, __uuidof(ICIDownloadActionParams));
_COM_SMARTPTR_TYPEDEF(ICICleanupActionParams, __uuidof(ICICleanupActionParams));
_COM_SMARTPTR_TYPEDEF(ICIReportActionParams, __uuidof(ICIReportActionParams));
_COM_SMARTPTR_TYPEDEF(ICICommandActionParams, __uuidof(ICICommandActionParams));
_COM_SMARTPTR_TYPEDEF(ICIStopActionParams, __uuidof(ICIStopActionParams));
_COM_SMARTPTR_TYPEDEF(ICIBackupActionParams, __uuidof(ICIBackupActionParams));
_COM_SMARTPTR_TYPEDEF(ICIAWTaskActionParams, __uuidof(ICIAWTaskActionParams));
_COM_SMARTPTR_TYPEDEF(ICIAS2SendActionParams, __uuidof(ICIAS2SendActionParams));
_COM_SMARTPTR_TYPEDEF(ICIWindowsEventLogActionParams, __uuidof(ICIWindowsEventLogActionParams));
_COM_SMARTPTR_TYPEDEF(ICIEventRules, __uuidof(ICIEventRules));
_COM_SMARTPTR_TYPEDEF(ICIEventRule, __uuidof(ICIEventRule));
_COM_SMARTPTR_TYPEDEF(ICIEventRuleStatement, __uuidof(ICIEventRuleStatement));
_COM_SMARTPTR_TYPEDEF(ICIIfStatement, __uuidof(ICIIfStatement));
_COM_SMARTPTR_TYPEDEF(ICIActionStatement, __uuidof(ICIActionStatement));
_COM_SMARTPTR_TYPEDEF(ICIActionStatements, __uuidof(ICIActionStatements));
_COM_SMARTPTR_TYPEDEF(ICIEventAction, __uuidof(ICIEventAction));
_COM_SMARTPTR_TYPEDEF(ICIEventActions, __uuidof(ICIEventActions));
_COM_SMARTPTR_TYPEDEF(ICICompoundCondition, __uuidof(ICICompoundCondition));
_COM_SMARTPTR_TYPEDEF(ICISimpleCondition, __uuidof(ICISimpleCondition));
_COM_SMARTPTR_TYPEDEF(ICIEventRuleParams, __uuidof(ICIEventRuleParams));
_COM_SMARTPTR_TYPEDEF(ICITimerEventRuleParams, __uuidof(ICITimerEventRuleParams));
_COM_SMARTPTR_TYPEDEF(ICIFolderMonitorEventRuleParams, __uuidof(ICIFolderMonitorEventRuleParams));
_COM_SMARTPTR_TYPEDEF(ICIPGPKeyInfo, __uuidof(ICIPGPKeyInfo));
_COM_SMARTPTR_TYPEDEF(ICIReportInfo, __uuidof(ICIReportInfo));
_COM_SMARTPTR_TYPEDEF(ICIEventInfo, __uuidof(ICIEventInfo));
_COM_SMARTPTR_TYPEDEF(ICISSHKeyInfo, __uuidof(ICISSHKeyInfo));
_COM_SMARTPTR_TYPEDEF(ICIADAuthManagerSettings, __uuidof(ICIADAuthManagerSettings));
_COM_SMARTPTR_TYPEDEF(ICIGSAuthManagerSettings, __uuidof(ICIGSAuthManagerSettings));
_COM_SMARTPTR_TYPEDEF(ICIODBCAuthManagerSettings, __uuidof(ICIODBCAuthManagerSettings));
_COM_SMARTPTR_TYPEDEF(ICILDAPAuthManagerSettings, __uuidof(ICILDAPAuthManagerSettings));
_COM_SMARTPTR_TYPEDEF(ICIAS2TransactionInfo, __uuidof(ICIAS2TransactionInfo));
_COM_SMARTPTR_TYPEDEF(ICIAdminAccount, __uuidof(ICIAdminAccount));
_COM_SMARTPTR_TYPEDEF(ICIAdminPermission, __uuidof(ICIAdminPermission));
_COM_SMARTPTR_TYPEDEF(ICISiteBackupInfo, __uuidof(ICISiteBackupInfo));
_COM_SMARTPTR_TYPEDEF(ICIBackupArchiveInfo, __uuidof(ICIBackupArchiveInfo));
_COM_SMARTPTR_TYPEDEF(ICIConnectedUser, __uuidof(ICIConnectedUser));

//
// Type library items
//

enum EventReason
{
    LoginFailedPasswordNotAcceped = 1,
    LoginFailedAccountDisabled = 2,
    LoginFailedTooManyConnectionsPerSite = 3,
    LoginFailedTooManyConnectionPerUser = 4,
    LoginFailedTooManyConnectionsPerIP = 5,
    LoginFailedProtocolNotSupported = 6,
    LoginFailedRestrictedIP = 7,
    ConnectFailedTooManyConnectionsPerSite = 8,
    ConnectFailedTooManyConnectionsPerIP = 9,
    ConnectFailedRestrictedIP = 10,
    ConnectFailedBannedIP = 11,
    DisconnectedByConnection = 12,
    DisconnectedByRequest = 13,
    DisconnectedByTimeout = 14,
    DisconnectedByError = 15,
    DisconnectedByIPBan = 16,
    DisconnectedByPasswordRetry = 17,
    DisconnectedByAdmin = 18,
    TransferFailedBannedFile = 19,
    TransferFailedAccessDenied = 20,
    TransferFailedAborted = 21,
    TransferFailedConnectionClosed = 22,
    TransferFailedFileNotFound = 23,
    TransferFailedQuotaExceeded = 24,
    FolderMonitorHealthFailed = 25,
    TransferFailedXCRCCheckFailed = 26,
    LoginFailedAccoundLocked = 27,
    IPBannedDOS = 28,
    IPBannedInvalidPassword = 29,
    IPBannedInvalidUsername = 30
};

struct __declspec(uuid("cb0e4ec0-8e54-4c0e-a81a-9b87213cc318"))
ICIIPAccessRule : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettype))
    IPAccessRuleType type;

    //
    // Wrapper methods for error-handling
    //

    IPAccessRuleType Gettype ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_type (
        /*[out,retval]*/ IPAccessRuleType * pVal ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0054_0001
{
    AutobanIPRule = 0,
    ManualIPRule = 1
};

struct __declspec(uuid("f321ffcf-5689-4f12-9fa2-bfa8dbbd9b8e"))
ICIManualIPAccessRule : ICIIPAccessRule
{
    //
    // Property data
    //

    __declspec(property(get=GetAllow))
    VARIANT_BOOL Allow;
    __declspec(property(get=GetAddress))
    _bstr_t Address;
    __declspec(property(get=GetAdded))
    DATE Added;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAllow ( );
    _bstr_t GetAddress ( );
    DATE GetAdded ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Allow (
        /*[out,retval]*/ VARIANT_BOOL * pbAllow ) = 0;
      virtual HRESULT __stdcall get_Address (
        /*[out,retval]*/ BSTR * pbzAddress ) = 0;
      virtual HRESULT __stdcall get_Added (
        /*[out,retval]*/ DATE * pdAdded ) = 0;
};

struct __declspec(uuid("04563da4-3a56-47cf-a634-bc132b41ea19"))
ICIAutobanIPAccessRule : ICIIPAccessRule
{
    //
    // Property data
    //

    __declspec(property(get=GetBannedIPs))
    _variant_t BannedIPs;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetBannedIPs ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BannedIPs (
        /*[out,retval]*/ VARIANT * pvarBannedIPs ) = 0;
};

struct __declspec(uuid("88bf8625-6155-4ba0-9c9e-beca90fa3acc"))
ICIBannedIP : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAddress))
    _bstr_t Address;
    __declspec(property(get=GetBanned))
    DATE Banned;
    __declspec(property(get=GetPermanently))
    VARIANT_BOOL Permanently;
    __declspec(property(get=GetExpires))
    DATE Expires;
    __declspec(property(get=GetReason))
    _bstr_t Reason;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetAddress ( );
    DATE GetBanned ( );
    VARIANT_BOOL GetPermanently ( );
    DATE GetExpires ( );
    _bstr_t GetReason ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Address (
        /*[out,retval]*/ BSTR * pbzAddress ) = 0;
      virtual HRESULT __stdcall get_Banned (
        /*[out,retval]*/ DATE * pdBanned ) = 0;
      virtual HRESULT __stdcall get_Permanently (
        /*[out,retval]*/ VARIANT_BOOL * pbPermanently ) = 0;
      virtual HRESULT __stdcall get_Expires (
        /*[out,retval]*/ DATE * pdExpires ) = 0;
      virtual HRESULT __stdcall get_Reason (
        /*[out,retval]*/ BSTR * pbzReason ) = 0;
};

struct __declspec(uuid("a59e7747-3284-435b-8947-4e004361a6ac"))
CIServer;
    // [ default ] interface ICIServer

struct __declspec(uuid("fb2d04f0-5842-4568-8637-d30e3e42c86d"))
IPermission : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFileUpload,put=PutFileUpload))
    VARIANT_BOOL FileUpload;
    __declspec(property(get=GetFileDelete,put=PutFileDelete))
    VARIANT_BOOL FileDelete;
    __declspec(property(get=GetFileRename,put=PutFileRename))
    VARIANT_BOOL FileRename;
    __declspec(property(get=GetFileAppend,put=PutFileAppend))
    VARIANT_BOOL FileAppend;
    __declspec(property(get=GetFileDownload,put=PutFileDownload))
    VARIANT_BOOL FileDownload;
    __declspec(property(get=GetDirCreate,put=PutDirCreate))
    VARIANT_BOOL DirCreate;
    __declspec(property(get=GetDirDelete,put=PutDirDelete))
    VARIANT_BOOL DirDelete;
    __declspec(property(get=GetDirList,put=PutDirList))
    VARIANT_BOOL DirList;
    __declspec(property(get=GetDirShowHidden,put=PutDirShowHidden))
    VARIANT_BOOL DirShowHidden;
    __declspec(property(get=GetDirShowReadOnly,put=PutDirShowReadOnly))
    VARIANT_BOOL DirShowReadOnly;
    __declspec(property(get=GetDirShowInList,put=PutDirShowInList))
    VARIANT_BOOL DirShowInList;
    __declspec(property(get=GetInheritedFrom))
    _bstr_t InheritedFrom;
    __declspec(property(get=GetFolder))
    _bstr_t Folder;
    __declspec(property(get=GetClient))
    _bstr_t Client;
    __declspec(property(get=GetIsGroup))
    VARIANT_BOOL IsGroup;
    __declspec(property(get=GetIsInherited))
    VARIANT_BOOL IsInherited;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetFileUpload ( );
    void PutFileUpload (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetFileDelete ( );
    void PutFileDelete (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetFileRename ( );
    void PutFileRename (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetFileAppend ( );
    void PutFileAppend (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetFileDownload ( );
    void PutFileDownload (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetDirCreate ( );
    void PutDirCreate (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetDirDelete ( );
    void PutDirDelete (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetDirList ( );
    void PutDirList (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetDirShowHidden ( );
    void PutDirShowHidden (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetDirShowReadOnly ( );
    void PutDirShowReadOnly (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetDirShowInList ( );
    void PutDirShowInList (
        VARIANT_BOOL pVal );
    _bstr_t GetInheritedFrom ( );
    _bstr_t GetFolder ( );
    _bstr_t GetClient ( );
    VARIANT_BOOL GetIsGroup ( );
    VARIANT_BOOL GetIsInherited ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FileUpload (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FileUpload (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FileDelete (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FileDelete (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FileRename (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FileRename (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FileAppend (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FileAppend (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FileDownload (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FileDownload (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DirCreate (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DirCreate (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DirDelete (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DirDelete (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DirList (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DirList (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DirShowHidden (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DirShowHidden (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DirShowReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DirShowReadOnly (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DirShowInList (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DirShowInList (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_InheritedFrom (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Folder (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Client (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IsGroup (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsInherited (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0002_0008
{
    abFalse = 0,
    abTrue = 1,
    abInherited = -2
};

struct __declspec(uuid("f2919303-5ad3-4dbf-8b07-786960263d06"))
ICIComplexPasswordSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMinPasswordLength,put=PutMinPasswordLength))
    long MinPasswordLength;
    __declspec(property(get=GetMinCharCategoriesInPassword,put=PutMinCharCategoriesInPassword))
    long MinCharCategoriesInPassword;
    __declspec(property(get=GetRequireUpperCaseInPassword,put=PutRequireUpperCaseInPassword))
    VARIANT_BOOL RequireUpperCaseInPassword;
    __declspec(property(get=GetRequireLowerCaseInPassword,put=PutRequireLowerCaseInPassword))
    VARIANT_BOOL RequireLowerCaseInPassword;
    __declspec(property(get=GetRequireDigitsInPassword,put=PutRequireDigitsInPassword))
    VARIANT_BOOL RequireDigitsInPassword;
    __declspec(property(get=GetRequireNonAlphaNumericInPassword,put=PutRequireNonAlphaNumericInPassword))
    VARIANT_BOOL RequireNonAlphaNumericInPassword;
    __declspec(property(get=GetMaxUsernameCharactersInPassword,put=PutMaxUsernameCharactersInPassword))
    long MaxUsernameCharactersInPassword;
    __declspec(property(get=GetMaxRepeatingCharacters,put=PutMaxRepeatingCharacters))
    long MaxRepeatingCharacters;
    __declspec(property(get=GetProhibitDictionaryWordsInPassword,put=PutProhibitDictionaryWordsInPassword))
    VARIANT_BOOL ProhibitDictionaryWordsInPassword;
    __declspec(property(get=GetProhibitReverseDictionaryWordsInPassword,put=PutProhibitReverseDictionaryWordsInPassword))
    VARIANT_BOOL ProhibitReverseDictionaryWordsInPassword;
    __declspec(property(get=GetPasswordDictionaryPath,put=PutPasswordDictionaryPath))
    _bstr_t PasswordDictionaryPath;

    //
    // Wrapper methods for error-handling
    //

    long GetMinPasswordLength ( );
    void PutMinPasswordLength (
        long pVal );
    long GetMinCharCategoriesInPassword ( );
    void PutMinCharCategoriesInPassword (
        long pVal );
    VARIANT_BOOL GetRequireUpperCaseInPassword ( );
    void PutRequireUpperCaseInPassword (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRequireLowerCaseInPassword ( );
    void PutRequireLowerCaseInPassword (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRequireDigitsInPassword ( );
    void PutRequireDigitsInPassword (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRequireNonAlphaNumericInPassword ( );
    void PutRequireNonAlphaNumericInPassword (
        VARIANT_BOOL pVal );
    long GetMaxUsernameCharactersInPassword ( );
    void PutMaxUsernameCharactersInPassword (
        long pVal );
    long GetMaxRepeatingCharacters ( );
    void PutMaxRepeatingCharacters (
        long pVal );
    VARIANT_BOOL GetProhibitDictionaryWordsInPassword ( );
    void PutProhibitDictionaryWordsInPassword (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetProhibitReverseDictionaryWordsInPassword ( );
    void PutProhibitReverseDictionaryWordsInPassword (
        VARIANT_BOOL pVal );
    _bstr_t GetPasswordDictionaryPath ( );
    void PutPasswordDictionaryPath (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinPasswordLength (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MinPasswordLength (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MinCharCategoriesInPassword (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MinCharCategoriesInPassword (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RequireUpperCaseInPassword (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RequireUpperCaseInPassword (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RequireLowerCaseInPassword (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RequireLowerCaseInPassword (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RequireDigitsInPassword (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RequireDigitsInPassword (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RequireNonAlphaNumericInPassword (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RequireNonAlphaNumericInPassword (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MaxUsernameCharactersInPassword (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxUsernameCharactersInPassword (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaxRepeatingCharacters (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxRepeatingCharacters (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ProhibitDictionaryWordsInPassword (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ProhibitDictionaryWordsInPassword (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ProhibitReverseDictionaryWordsInPassword (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ProhibitReverseDictionaryWordsInPassword (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PasswordDictionaryPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PasswordDictionaryPath (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("23382684-822e-4f62-9007-a7aa76d36287"))
ICIResetPasswordSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMaxPasswordAgeDays,put=PutMaxPasswordAgeDays))
    long MaxPasswordAgeDays;
    __declspec(property(get=GetDaysPriorPasswordExpirationToRemindUser,put=PutDaysPriorPasswordExpirationToRemindUser))
    long DaysPriorPasswordExpirationToRemindUser;
    __declspec(property(get=GetSendEMailBeforeExpiration,put=PutSendEMailBeforeExpiration))
    VARIANT_BOOL SendEMailBeforeExpiration;
    __declspec(property(get=GetSendEMailUponExpiration,put=PutSendEMailUponExpiration))
    VARIANT_BOOL SendEMailUponExpiration;

    //
    // Wrapper methods for error-handling
    //

    long GetMaxPasswordAgeDays ( );
    void PutMaxPasswordAgeDays (
        long pVal );
    long GetDaysPriorPasswordExpirationToRemindUser ( );
    void PutDaysPriorPasswordExpirationToRemindUser (
        long pVal );
    VARIANT_BOOL GetSendEMailBeforeExpiration ( );
    void PutSendEMailBeforeExpiration (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSendEMailUponExpiration ( );
    void PutSendEMailUponExpiration (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaxPasswordAgeDays (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxPasswordAgeDays (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_DaysPriorPasswordExpirationToRemindUser (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DaysPriorPasswordExpirationToRemindUser (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SendEMailBeforeExpiration (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SendEMailBeforeExpiration (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SendEMailUponExpiration (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SendEMailUponExpiration (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0007
{
    AS2StatusOk = 0,
    AS2StatusNotRegistered = 1,
    AS2StatusCreateRequestFailed = 2,
    AS2StatusSendDataFailed = 3,
    AS2StatusVerifyMDNFailed = 4,
    AS2StatusDatabaseFailure = 5,
    AS2StatusUnexpectedError = 6
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0008
{
    X12 = 0,
    EDIFACT = 1,
    XML = 2,
    EDIConsent = 3,
    Binary = 4,
    Plaintext = 5
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0009
{
    NoReceipt = 0,
    UnsignedReceipt = 1,
    SignedReceipt = 2
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0010
{
    Sync = 0,
    Async = 1
};

struct __declspec(uuid("e59a3d73-0365-4312-83a8-2daac99074a6"))
ICIAS2OutboundSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMonitoredHotFolder,put=PutMonitoredHotFolder))
    _bstr_t MonitoredHotFolder;
    __declspec(property(get=GetFileIncludeMask,put=PutFileIncludeMask))
    _bstr_t FileIncludeMask;
    __declspec(property(get=GetFileExcludeMask,put=PutFileExcludeMask))
    _bstr_t FileExcludeMask;
    __declspec(property(get=GetDeleteSourceAfterOffload,put=PutDeleteSourceAfterOffload))
    VARIANT_BOOL DeleteSourceAfterOffload;
    __declspec(property(get=GetHost,put=PutHost))
    _bstr_t Host;
    __declspec(property(get=GetPort,put=PutPort))
    long Port;
    __declspec(property(get=GetMailboxPath,put=PutMailboxPath))
    _bstr_t MailboxPath;
    __declspec(property(get=GetUsername,put=PutUsername))
    _bstr_t Username;
    __declspec(property(get=GetPassword,put=PutPassword))
    _bstr_t Password;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetContentType,put=PutContentType))
    AS2ContentType ContentType;
    __declspec(property(get=GetCompress,put=PutCompress))
    VARIANT_BOOL Compress;
    __declspec(property(get=GetEncrypt,put=PutEncrypt))
    VARIANT_BOOL Encrypt;
    __declspec(property(get=GetSign,put=PutSign))
    VARIANT_BOOL Sign;
    __declspec(property(get=GetPartnerCertificate,put=PutPartnerCertificate))
    _bstr_t PartnerCertificate;
    __declspec(property(get=GetID,put=PutID))
    _bstr_t ID;
    __declspec(property(get=GetPartnerID,put=PutPartnerID))
    _bstr_t PartnerID;
    __declspec(property(get=GetReceiptPolicy,put=PutReceiptPolicy))
    AS2ReceiptPolicy ReceiptPolicy;
    __declspec(property(get=GetReceiptDelivery,put=PutReceiptDelivery))
    AS2ReceiptDelivery ReceiptDelivery;
    __declspec(property(get=GetMessageSendAttemptTimeout,put=PutMessageSendAttemptTimeout))
    long MessageSendAttemptTimeout;
    __declspec(property(get=GetMessageSendAttemptRetries,put=PutMessageSendAttemptRetries))
    long MessageSendAttemptRetries;
    __declspec(property(get=GetSendAttemptDelayBetweenRetries,put=PutSendAttemptDelayBetweenRetries))
    long SendAttemptDelayBetweenRetries;
    __declspec(property(get=GetAsyncReceiptTimeout,put=PutAsyncReceiptTimeout))
    long AsyncReceiptTimeout;
    __declspec(property(get=GetUseProxy,put=PutUseProxy))
    VARIANT_BOOL UseProxy;
    __declspec(property(get=GetProxyType,put=PutProxyType))
    AS2ProxyType ProxyType;
    __declspec(property(get=GetProxyPort,put=PutProxyPort))
    long ProxyPort;
    __declspec(property(get=GetProxyHostName,put=PutProxyHostName))
    _bstr_t ProxyHostName;
    __declspec(property(get=GetProxyUserName,put=PutProxyUserName))
    _bstr_t ProxyUserName;
    __declspec(property(get=GetProxyPassword,put=PutProxyPassword))
    _bstr_t ProxyPassword;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetMonitoredHotFolder ( );
    void PutMonitoredHotFolder (
        _bstr_t pVal );
    _bstr_t GetFileIncludeMask ( );
    void PutFileIncludeMask (
        _bstr_t pVal );
    _bstr_t GetFileExcludeMask ( );
    void PutFileExcludeMask (
        _bstr_t pVal );
    VARIANT_BOOL GetDeleteSourceAfterOffload ( );
    void PutDeleteSourceAfterOffload (
        VARIANT_BOOL pVal );
    _bstr_t GetHost ( );
    void PutHost (
        _bstr_t pVal );
    long GetPort ( );
    void PutPort (
        long pVal );
    _bstr_t GetMailboxPath ( );
    void PutMailboxPath (
        _bstr_t pVal );
    _bstr_t GetUsername ( );
    void PutUsername (
        _bstr_t pVal );
    _bstr_t GetPassword ( );
    void PutPassword (
        _bstr_t pVal );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t pVal );
    AS2ContentType GetContentType ( );
    void PutContentType (
        AS2ContentType pVal );
    VARIANT_BOOL GetCompress ( );
    void PutCompress (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEncrypt ( );
    void PutEncrypt (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSign ( );
    void PutSign (
        VARIANT_BOOL pVal );
    _bstr_t GetPartnerCertificate ( );
    void PutPartnerCertificate (
        _bstr_t pVal );
    _bstr_t GetID ( );
    void PutID (
        _bstr_t pVal );
    _bstr_t GetPartnerID ( );
    void PutPartnerID (
        _bstr_t pVal );
    AS2ReceiptPolicy GetReceiptPolicy ( );
    void PutReceiptPolicy (
        AS2ReceiptPolicy pVal );
    AS2ReceiptDelivery GetReceiptDelivery ( );
    void PutReceiptDelivery (
        AS2ReceiptDelivery pVal );
    long GetMessageSendAttemptTimeout ( );
    void PutMessageSendAttemptTimeout (
        long pVal );
    long GetMessageSendAttemptRetries ( );
    void PutMessageSendAttemptRetries (
        long pVal );
    long GetSendAttemptDelayBetweenRetries ( );
    void PutSendAttemptDelayBetweenRetries (
        long pVal );
    long GetAsyncReceiptTimeout ( );
    void PutAsyncReceiptTimeout (
        long pVal );
    VARIANT_BOOL GetUseProxy ( );
    void PutUseProxy (
        VARIANT_BOOL pVal );
    AS2ProxyType GetProxyType ( );
    void PutProxyType (
        AS2ProxyType pVal );
    long GetProxyPort ( );
    void PutProxyPort (
        long pVal );
    _bstr_t GetProxyHostName ( );
    void PutProxyHostName (
        _bstr_t pVal );
    _bstr_t GetProxyUserName ( );
    void PutProxyUserName (
        _bstr_t pVal );
    _bstr_t GetProxyPassword ( );
    void PutProxyPassword (
        _bstr_t pVal );
    IDispatchPtr GetFailureCommand ( );
    HRESULT SetFailureCommand (
        IDispatch * pdispCommandParams );
    IDispatchPtr GetSuccessCommand ( );
    HRESULT SetSuccessCommand (
        IDispatch * pdispCommandParams );
    IDispatchPtr GetFailureEmail ( );
    HRESULT SetFailureEmail (
        IDispatch * pdispEmailParams );
    IDispatchPtr GetSuccessEmail ( );
    HRESULT SetSuccessEmail (
        IDispatch * pdispEmailParams );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MonitoredHotFolder (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MonitoredHotFolder (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FileIncludeMask (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FileIncludeMask (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FileExcludeMask (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FileExcludeMask (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DeleteSourceAfterOffload (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DeleteSourceAfterOffload (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Host (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Host (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Port (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Port (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MailboxPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MailboxPath (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Username (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Username (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Password (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Password (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Subject (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ContentType (
        /*[out,retval]*/ AS2ContentType * pVal ) = 0;
      virtual HRESULT __stdcall put_ContentType (
        /*[in]*/ AS2ContentType pVal ) = 0;
      virtual HRESULT __stdcall get_Compress (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Compress (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Encrypt (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Encrypt (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Sign (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Sign (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PartnerCertificate (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PartnerCertificate (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PartnerID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PartnerID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ReceiptPolicy (
        /*[out,retval]*/ AS2ReceiptPolicy * pVal ) = 0;
      virtual HRESULT __stdcall put_ReceiptPolicy (
        /*[in]*/ AS2ReceiptPolicy pVal ) = 0;
      virtual HRESULT __stdcall get_ReceiptDelivery (
        /*[out,retval]*/ AS2ReceiptDelivery * pVal ) = 0;
      virtual HRESULT __stdcall put_ReceiptDelivery (
        /*[in]*/ AS2ReceiptDelivery pVal ) = 0;
      virtual HRESULT __stdcall get_MessageSendAttemptTimeout (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MessageSendAttemptTimeout (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MessageSendAttemptRetries (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MessageSendAttemptRetries (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SendAttemptDelayBetweenRetries (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SendAttemptDelayBetweenRetries (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AsyncReceiptTimeout (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_AsyncReceiptTimeout (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_UseProxy (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseProxy (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ProxyType (
        /*[out,retval]*/ AS2ProxyType * pVal ) = 0;
      virtual HRESULT __stdcall put_ProxyType (
        /*[in]*/ AS2ProxyType pVal ) = 0;
      virtual HRESULT __stdcall get_ProxyPort (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ProxyPort (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ProxyHostName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ProxyHostName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ProxyUserName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ProxyUserName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ProxyPassword (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ProxyPassword (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFailureCommand (
        /*[out,retval]*/ IDispatch * * ppdispCommandParams ) = 0;
      virtual HRESULT __stdcall raw_SetFailureCommand (
        IDispatch * pdispCommandParams ) = 0;
      virtual HRESULT __stdcall raw_GetSuccessCommand (
        /*[out,retval]*/ IDispatch * * ppdispCommandParams ) = 0;
      virtual HRESULT __stdcall raw_SetSuccessCommand (
        IDispatch * pdispCommandParams ) = 0;
      virtual HRESULT __stdcall raw_GetFailureEmail (
        /*[out,retval]*/ IDispatch * * ppdispEmailParams ) = 0;
      virtual HRESULT __stdcall raw_SetFailureEmail (
        IDispatch * pdispEmailParams ) = 0;
      virtual HRESULT __stdcall raw_GetSuccessEmail (
        /*[out,retval]*/ IDispatch * * ppdispEmailParams ) = 0;
      virtual HRESULT __stdcall raw_SetSuccessEmail (
        IDispatch * pdispEmailParams ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0049_0001
{
    AS2ProxyDMZ = 0,
    AS2ProxyHTTP = 1
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0001
{
    AS2IDMismatchPolicyAccept = 0,
    AS2IDMismatchPolicyReject = 1
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0002
{
    AS2DoubleMsgIDPolicyAccept = 0,
    AS2DoubleMsgIDPolicyReject = 1
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0003
{
    AS2DoubleContentPolicyOverwrite = 0,
    AS2DoubleContentPolicyNumerate = 1,
    AS2DoubleContentPolicyReject = 2
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0004
{
    AS2AuthTypeUsernameAndPassword = 0,
    AS2AuthTypeMsgLevelSecurity = 1
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0005
{
    AS2SignatureMissingPolicyAccept = 0,
    AS2SignatureMissingPolicyReject = 1
};

struct __declspec(uuid("077b1c9a-618a-4e8f-9eb6-533dabc4caad"))
ICIAS2InboundSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPartnerCertificate,put=PutPartnerCertificate))
    _bstr_t PartnerCertificate;
    __declspec(property(get=GetID,put=PutID))
    _bstr_t ID;
    __declspec(property(get=GetPartnerID,put=PutPartnerID))
    _bstr_t PartnerID;
    __declspec(property(get=GetPartnerIDMismatchPolicy,put=PutPartnerIDMismatchPolicy))
    AS2IDMismatchPolicy PartnerIDMismatchPolicy;
    __declspec(property(get=GetEFTIDMismatchPolicy,put=PutEFTIDMismatchPolicy))
    AS2IDMismatchPolicy EFTIDMismatchPolicy;
    __declspec(property(get=GetDoubleMsgIDPolicy,put=PutDoubleMsgIDPolicy))
    AS2DoubleMsgIDPolicy DoubleMsgIDPolicy;
    __declspec(property(get=GetDoubleContentPolicy,put=PutDoubleContentPolicy))
    AS2DoubleContentPolicy DoubleContentPolicy;
    __declspec(property(get=GetMDNSendTimeout,put=PutMDNSendTimeout))
    long MDNSendTimeout;
    __declspec(property(get=GetMDNSendAttemptRetries,put=PutMDNSendAttemptRetries))
    long MDNSendAttemptRetries;
    __declspec(property(get=GetMDNSendAttemptDelayBetweenRetries,put=PutMDNSendAttemptDelayBetweenRetries))
    long MDNSendAttemptDelayBetweenRetries;
    __declspec(property(get=GetMoveReceivedDataToFolder,put=PutMoveReceivedDataToFolder))
    _bstr_t MoveReceivedDataToFolder;
    __declspec(property(get=GetRenameFilesTo,put=PutRenameFilesTo))
    _bstr_t RenameFilesTo;
    __declspec(property(get=GetSkipHTTPContinue,put=PutSkipHTTPContinue))
    VARIANT_BOOL SkipHTTPContinue;
    __declspec(property(get=GetAuthenticationType,put=PutAuthenticationType))
    AS2AuthenticationType AuthenticationType;
    __declspec(property(get=GetSignatureMissingPolicy,put=PutSignatureMissingPolicy))
    AS2SignatureMissingPolicy SignatureMissingPolicy;
    __declspec(property(get=GetEncryptMissingPolicy,put=PutEncryptMissingPolicy))
    AS2EncryptMissingPolicy EncryptMissingPolicy;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPartnerCertificate ( );
    void PutPartnerCertificate (
        _bstr_t pVal );
    _bstr_t GetID ( );
    void PutID (
        _bstr_t pVal );
    _bstr_t GetPartnerID ( );
    void PutPartnerID (
        _bstr_t pVal );
    AS2IDMismatchPolicy GetPartnerIDMismatchPolicy ( );
    void PutPartnerIDMismatchPolicy (
        AS2IDMismatchPolicy pVal );
    AS2IDMismatchPolicy GetEFTIDMismatchPolicy ( );
    void PutEFTIDMismatchPolicy (
        AS2IDMismatchPolicy pVal );
    AS2DoubleMsgIDPolicy GetDoubleMsgIDPolicy ( );
    void PutDoubleMsgIDPolicy (
        AS2DoubleMsgIDPolicy pVal );
    AS2DoubleContentPolicy GetDoubleContentPolicy ( );
    void PutDoubleContentPolicy (
        AS2DoubleContentPolicy pVal );
    long GetMDNSendTimeout ( );
    void PutMDNSendTimeout (
        long pVal );
    long GetMDNSendAttemptRetries ( );
    void PutMDNSendAttemptRetries (
        long pVal );
    long GetMDNSendAttemptDelayBetweenRetries ( );
    void PutMDNSendAttemptDelayBetweenRetries (
        long pVal );
    _bstr_t GetMoveReceivedDataToFolder ( );
    void PutMoveReceivedDataToFolder (
        _bstr_t pVal );
    _bstr_t GetRenameFilesTo ( );
    void PutRenameFilesTo (
        _bstr_t pVal );
    VARIANT_BOOL GetSkipHTTPContinue ( );
    void PutSkipHTTPContinue (
        VARIANT_BOOL pVal );
    AS2AuthenticationType GetAuthenticationType ( );
    void PutAuthenticationType (
        AS2AuthenticationType pVal );
    AS2SignatureMissingPolicy GetSignatureMissingPolicy ( );
    void PutSignatureMissingPolicy (
        AS2SignatureMissingPolicy pVal );
    AS2EncryptMissingPolicy GetEncryptMissingPolicy ( );
    void PutEncryptMissingPolicy (
        AS2EncryptMissingPolicy pVal );
    IDispatchPtr GetFailureCommand ( );
    HRESULT SetFailureCommand (
        IDispatch * pdispCommandParams );
    IDispatchPtr GetSuccessCommand ( );
    HRESULT SetSuccessCommand (
        IDispatch * pdispCommandParams );
    IDispatchPtr GetFailureEmail ( );
    HRESULT SetFailureEmail (
        IDispatch * pdispEmailParams );
    IDispatchPtr GetSuccessEmail ( );
    HRESULT SetSuccessEmail (
        IDispatch * pdispEmailParams );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PartnerCertificate (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PartnerCertificate (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PartnerID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PartnerID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PartnerIDMismatchPolicy (
        /*[out,retval]*/ AS2IDMismatchPolicy * pVal ) = 0;
      virtual HRESULT __stdcall put_PartnerIDMismatchPolicy (
        /*[in]*/ AS2IDMismatchPolicy pVal ) = 0;
      virtual HRESULT __stdcall get_EFTIDMismatchPolicy (
        /*[out,retval]*/ AS2IDMismatchPolicy * pVal ) = 0;
      virtual HRESULT __stdcall put_EFTIDMismatchPolicy (
        /*[in]*/ AS2IDMismatchPolicy pVal ) = 0;
      virtual HRESULT __stdcall get_DoubleMsgIDPolicy (
        /*[out,retval]*/ AS2DoubleMsgIDPolicy * pVal ) = 0;
      virtual HRESULT __stdcall put_DoubleMsgIDPolicy (
        /*[in]*/ AS2DoubleMsgIDPolicy pVal ) = 0;
      virtual HRESULT __stdcall get_DoubleContentPolicy (
        /*[out,retval]*/ AS2DoubleContentPolicy * pVal ) = 0;
      virtual HRESULT __stdcall put_DoubleContentPolicy (
        /*[in]*/ AS2DoubleContentPolicy pVal ) = 0;
      virtual HRESULT __stdcall get_MDNSendTimeout (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MDNSendTimeout (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MDNSendAttemptRetries (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MDNSendAttemptRetries (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MDNSendAttemptDelayBetweenRetries (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MDNSendAttemptDelayBetweenRetries (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MoveReceivedDataToFolder (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MoveReceivedDataToFolder (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RenameFilesTo (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RenameFilesTo (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SkipHTTPContinue (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SkipHTTPContinue (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AuthenticationType (
        /*[out,retval]*/ AS2AuthenticationType * pVal ) = 0;
      virtual HRESULT __stdcall put_AuthenticationType (
        /*[in]*/ AS2AuthenticationType pVal ) = 0;
      virtual HRESULT __stdcall get_SignatureMissingPolicy (
        /*[out,retval]*/ AS2SignatureMissingPolicy * pVal ) = 0;
      virtual HRESULT __stdcall put_SignatureMissingPolicy (
        /*[in]*/ AS2SignatureMissingPolicy pVal ) = 0;
      virtual HRESULT __stdcall get_EncryptMissingPolicy (
        /*[out,retval]*/ AS2EncryptMissingPolicy * pVal ) = 0;
      virtual HRESULT __stdcall put_EncryptMissingPolicy (
        /*[in]*/ AS2EncryptMissingPolicy pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFailureCommand (
        /*[out,retval]*/ IDispatch * * ppdispCommandParams ) = 0;
      virtual HRESULT __stdcall raw_SetFailureCommand (
        IDispatch * pdispCommandParams ) = 0;
      virtual HRESULT __stdcall raw_GetSuccessCommand (
        /*[out,retval]*/ IDispatch * * ppdispCommandParams ) = 0;
      virtual HRESULT __stdcall raw_SetSuccessCommand (
        IDispatch * pdispCommandParams ) = 0;
      virtual HRESULT __stdcall raw_GetFailureEmail (
        /*[out,retval]*/ IDispatch * * ppdispEmailParams ) = 0;
      virtual HRESULT __stdcall raw_SetFailureEmail (
        IDispatch * pdispEmailParams ) = 0;
      virtual HRESULT __stdcall raw_GetSuccessEmail (
        /*[out,retval]*/ IDispatch * * ppdispEmailParams ) = 0;
      virtual HRESULT __stdcall raw_SetSuccessEmail (
        IDispatch * pdispEmailParams ) = 0;
};

struct __declspec(uuid("5d0ece92-ae7b-4076-99bf-361d423d3c51"))
ICIClientSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLastConnectionTime))
    DATE LastConnectionTime;
    __declspec(property(get=GetAccountCreationTime))
    DATE AccountCreationTime;
    __declspec(property(get=GetLastModifiedBy))
    _bstr_t LastModifiedBy;
    __declspec(property(get=GetLastModificationTime))
    DATE LastModificationTime;
    __declspec(property(get=GetCustom1,put=PutCustom1))
    _bstr_t Custom1;
    __declspec(property(get=GetCustom2,put=PutCustom2))
    _bstr_t Custom2;
    __declspec(property(get=GetCustom3,put=PutCustom3))
    _bstr_t Custom3;
    __declspec(property(get=GetAS2OutboundSettings))
    ICIAS2OutboundSettingsPtr AS2OutboundSettings;
    __declspec(property(get=GetIPAccessAllowedDefault,put=PutIPAccessAllowedDefault))
    VARIANT_BOOL IPAccessAllowedDefault;
    __declspec(property(get=GetFullName,put=PutFullName))
    _bstr_t FullName;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetEmail,put=PutEmail))
    _bstr_t Email;
    __declspec(property(get=GetFax,put=PutFax))
    _bstr_t Fax;
    __declspec(property(get=GetPhone,put=PutPhone))
    _bstr_t Phone;
    __declspec(property(get=GetPager,put=PutPager))
    _bstr_t Pager;
    __declspec(property(get=GetMaxInvalidLoginAttempts,put=PutMaxInvalidLoginAttempts))
    long MaxInvalidLoginAttempts;
    __declspec(property(get=GetLockoutPeriod,put=PutLockoutPeriod))
    long LockoutPeriod;
    __declspec(property(get=GetInvalidAttemptsPeriod,put=PutInvalidAttemptsPeriod))
    long InvalidAttemptsPeriod;
    __declspec(property(get=GetAS2InboundSettings))
    ICIAS2InboundSettingsPtr AS2InboundSettings;
    __declspec(property(get=GetID))
    long ID;
    __declspec(property(get=GetMaxInactivePeriod,put=PutMaxInactivePeriod))
    long MaxInactivePeriod;
    __declspec(property(get=GetIsLocked))
    VARIANT_BOOL IsLocked;
    __declspec(property(get=GetIsConnected))
    VARIANT_BOOL IsConnected;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnableAccount (
        VARIANT * pInherited );
    HRESULT SetEnableAccount (
        SFTPAdvBool val );
    VARIANT_BOOL GetHomeDirIsRoot (
        VARIANT * pInherited );
    HRESULT SetHomeDirIsRoot (
        SFTPAdvBool val );
    VARIANT_BOOL GetAllowNoop (
        VARIANT * pInherited );
    HRESULT SetAllowNoop (
        SFTPAdvBool val );
    VARIANT_BOOL GetAllowXCRC (
        VARIANT * pInherited );
    HRESULT SetAllowXCRC (
        SFTPAdvBool val );
    VARIANT_BOOL GetChangePwd (
        VARIANT * pInherited );
    HRESULT SetChangePwd (
        SFTPAdvBool val );
    VARIANT_BOOL GetEnableTimeOut (
        VARIANT * pInherited );
    HRESULT SetEnableTimeOut (
        SFTPAdvBool val );
    VARIANT_BOOL GetHasMaxSpeed (
        VARIANT * pInherited );
    HRESULT SetHasMaxSpeed (
        SFTPAdvBool val );
    VARIANT_BOOL GetHasMaxUsers (
        VARIANT * pInherited );
    HRESULT SetHasMaxUsers (
        SFTPAdvBool val );
    VARIANT_BOOL GetHasPwdRetries (
        VARIANT * pInherited );
    HRESULT SetHasPwdRetries (
        SFTPAdvBool val );
    VARIANT_BOOL GetClearFTP (
        VARIANT * pInherited );
    HRESULT SetClearFTP (
        SFTPAdvBool val );
    VARIANT_BOOL GetEnableDiskQuota (
        VARIANT * pInherited );
    HRESULT SetEnableDiskQuota (
        SFTPAdvBool val );
    long GetMaxIPs (
        VARIANT * pInherited );
    HRESULT SetMaxIPs (
        long val );
    long GetMaxSpeed (
        VARIANT * pInherited );
    HRESULT SetMaxSpeed (
        long val );
    long GetMaxUsers (
        VARIANT * pInherited );
    HRESULT SetMaxUsers (
        long val );
    long GetPwdRetries (
        VARIANT * pInherited );
    HRESULT SetPwdRetries (
        long val );
    long GetTimeOut (
        VARIANT * pInherited );
    HRESULT SetTimeOut (
        long val );
    long GetDownloadsPerSession (
        VARIANT * pInherited );
    HRESULT SetDownloadsPerSession (
        long val );
    long GetUploadsPerSession (
        VARIANT * pInherited );
    HRESULT SetUploadsPerSession (
        long val );
    long GetLoginMsg ( );
    HRESULT SetLoginMsg (
        long val );
    VARIANT_BOOL GetHomeDir (
        VARIANT * pInherited );
    HRESULT SetHomeDir (
        SFTPAdvBool val );
    long GetIncorrectPasswordAttempts ( );
    long GetMaxDownloadSize (
        VARIANT * pInherited );
    HRESULT SetMaxDownloadSize (
        long val );
    long GetMaxSpace (
        VARIANT * pInherited );
    HRESULT SetMaxSpace (
        long val );
    long GetMaxUploadSize (
        VARIANT * pInherited );
    HRESULT SetMaxUploadSize (
        long val );
    long GetUsedSpace ( );
    _bstr_t GetDescription ( );
    HRESULT SetDescription (
        _bstr_t bstrVal );
    _bstr_t GetHomeDirString ( );
    HRESULT SetHomeDirString (
        _bstr_t bstrVal );
    _bstr_t GetLoginMsgString ( );
    HRESULT SetLoginMsgString (
        _bstr_t bstrVal );
    _bstr_t GetFullName ( );
    void PutFullName (
        _bstr_t pVal );
    _bstr_t GetComment ( );
    void PutComment (
        _bstr_t pVal );
    _bstr_t GetEmail ( );
    void PutEmail (
        _bstr_t pVal );
    _bstr_t GetFax ( );
    void PutFax (
        _bstr_t pVal );
    _bstr_t GetPhone ( );
    void PutPhone (
        _bstr_t pVal );
    _bstr_t GetPager ( );
    void PutPager (
        _bstr_t pVal );
    _bstr_t GetSftpAuthenticationType (
        VARIANT * pInherited );
    HRESULT SetSftpAuthenticationType (
        _bstr_t val );
    long GetSSHKeyID (
        VARIANT * pInherited );
    HRESULT SetSSHKeyID (
        long val );
    VARIANT_BOOL GetExpirationDate (
        VARIANT * dDate );
    HRESULT SetExpirationDate (
        VARIANT * dDate,
        VARIANT_BOOL bEnable );
    VARIANT_BOOL GetHasMaxIPs (
        VARIANT * pInherited );
    HRESULT SetHasMaxIPs (
        SFTPAdvBool val );
    VARIANT_BOOL GetHasDownloadsPerSession (
        VARIANT * pInherited );
    HRESULT SetHasDownloadsPerSession (
        SFTPAdvBool val );
    VARIANT_BOOL GetHasUploadsPerSession (
        VARIANT * pInherited );
    HRESULT SetHasUploadsPerSession (
        SFTPAdvBool val );
    VARIANT_BOOL GetHasMaxDownloadSize (
        VARIANT * pInherited );
    HRESULT SetHasMaxDownloadSize (
        SFTPAdvBool val );
    VARIANT_BOOL GetHasMaxUploadSize (
        VARIANT * pInherited );
    HRESULT SetHasMaxUploadSize (
        SFTPAdvBool val );
    VARIANT_BOOL GetSFTP (
        VARIANT * pInherited );
    HRESULT SetSFTP (
        SFTPAdvBool val );
    HRESULT SetAllowMODEZ (
        SFTPAdvBool val );
    VARIANT_BOOL GetAllowMODEZ (
        VARIANT * pInherited );
    VARIANT_BOOL GetAppletEnabled (
        VARIANT * pInherited );
    HRESULT SetAppletEnabled (
        SFTPAdvBool val );
    _bstr_t GetCustom1 ( );
    void PutCustom1 (
        _bstr_t pVal );
    _bstr_t GetCustom2 ( );
    void PutCustom2 (
        _bstr_t pVal );
    _bstr_t GetCustom3 ( );
    void PutCustom3 (
        _bstr_t pVal );
    _variant_t GetExpirationDateAsVariant ( );
    _bstr_t GetSSLAuthenticationType (
        VARIANT * pInherited );
    HRESULT SetSSLAuthenticationType (
        _bstr_t val );
    long GetSSLKeyID (
        VARIANT * pInherited );
    HRESULT SetSSLKeyID (
        long val );
    VARIANT_BOOL GetClearHTTP (
        VARIANT * pInherited );
    HRESULT SetClearHTTP (
        SFTPAdvBool val );
    _variant_t GetIPAccessRules ( );
    HRESULT AddIPAccessRule (
        _bstr_t bstrMask,
        VARIANT_BOOL bAllow,
        long nRulePos );
    HRESULT RemoveIPAccessRule (
        long nRulePos );
    VARIANT_BOOL GetIPAccessAllowedDefault ( );
    void PutIPAccessAllowedDefault (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetLimitLoginAttempts (
        VARIANT * pInherited );
    HRESULT SetLimitLoginAttempts (
        SFTPAdvBool val );
    VARIANT_BOOL GetLockoutNotDisable (
        VARIANT * pInherited );
    HRESULT SetLockoutNotDisable (
        VARIANT_BOOL val );
    long GetMaxInvalidLoginAttempts ( );
    void PutMaxInvalidLoginAttempts (
        long pVal );
    long GetLockoutPeriod ( );
    void PutLockoutPeriod (
        long pVal );
    long GetInvalidAttemptsPeriod ( );
    void PutInvalidAttemptsPeriod (
        long pVal );
    VARIANT_BOOL GetFTPS (
        VARIANT * pInherited );
    HRESULT SetFTPS (
        SFTPAdvBool val );
    VARIANT_BOOL GetHTTPS (
        VARIANT * pInherited );
    HRESULT SetHTTPS (
        SFTPAdvBool val );
    HRESULT ForcePasswordChange ( );
    VARIANT_BOOL GetLimitAccessByIP (
        VARIANT * pInherited );
    HRESULT SetLimitAccessByIP (
        SFTPAdvBool val );
    VARIANT_BOOL IsPasswordAgeLimited (
        VARIANT * pDate );
    VARIANT_BOOL IsInactivityPeriodLimited (
        VARIANT * pDate );
    VARIANT_BOOL GetForcePasswordResetOnInitialLogin (
        VARIANT * pInherited );
    HRESULT SetForcePasswordResetOnInitialLogin (
        VARIANT_BOOL val );
    VARIANT_BOOL GetTwoFactorAuthentication (
        VARIANT * pInherited );
    HRESULT SetTwoFactorAuthentication (
        SFTPAdvBool val );
    VARIANT_BOOL GetIsLocked ( );
    VARIANT_BOOL GetIsConnected ( );
    DATE GetLastConnectionTime ( );
    DATE GetAccountCreationTime ( );
    _bstr_t GetLastModifiedBy ( );
    DATE GetLastModificationTime ( );
    VARIANT_BOOL GetAS2Inbound (
        VARIANT * pInherited );
    HRESULT SetAS2Inbound (
        SFTPAdvBool val );
    VARIANT_BOOL GetAS2Outbound (
        VARIANT * pInherited );
    HRESULT SetAS2Outbound (
        SFTPAdvBool val );
    VARIANT_BOOL GetRequireStrongPasswords (
        VARIANT * pInherited );
    HRESULT SetRequireStrongPasswords (
        SFTPAdvBool val );
    ICIComplexPasswordSettingsPtr GetComplexPasswordSettings ( );
    HRESULT SetComplexPasswordSettings (
        struct ICIComplexPasswordSettings * pIComplexPasswordSettings );
    ICIResetPasswordSettingsPtr GetResetPasswordSettings ( );
    HRESULT SetResetPasswordSettings (
        struct ICIResetPasswordSettings * pIResetPasswordSettings );
    VARIANT_BOOL GetEnablePasswordHistory (
        VARIANT * pInherited );
    HRESULT SetEnablePasswordHistory (
        SFTPAdvBool val );
    long GetPasswordHistorySize ( );
    void PutPasswordHistorySize (
        long pVal );
    VARIANT_BOOL GetInactiveAccountsMonitoring (
        VARIANT * pInherited );
    HRESULT SetInactiveAccountsMonitoring (
        SFTPAdvBool val );
    VARIANT_BOOL GetRemoveInactiveAccounts ( );
    void PutRemoveInactiveAccounts (
        VARIANT_BOOL pVal );
    long GetMaxInactivePeriod ( );
    void PutMaxInactivePeriod (
        long pVal );
    VARIANT_BOOL ResetPassword ( );
    VARIANT_BOOL GetAllowCOMB (
        VARIANT * pInherited );
    HRESULT SetAllowCOMB (
        SFTPAdvBool val );
    VARIANT_BOOL GetAllowFXP (
        VARIANT * pInherited );
    HRESULT SetAllowFXP (
        SFTPAdvBool val );
    AS2OutboundProfileStatus AS2TestOutboundProfile ( );
    HRESULT MoveIPAccessRule (
        long nRulePosFrom,
        long nRulePosTo );
    ICIAS2OutboundSettingsPtr GetAS2OutboundSettings ( );
    ICIAS2InboundSettingsPtr GetAS2InboundSettings ( );
    long GetID ( );
    _variant_t GetSSHKeyIDs (
        VARIANT * pInherited );
    HRESULT SetSSHKeyIDs (
        const _variant_t & val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnableAccount (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetEnableAccount (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetHomeDirIsRoot (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetHomeDirIsRoot (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetAllowNoop (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAllowNoop (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetAllowXCRC (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAllowXCRC (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetChangePwd (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetChangePwd (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetEnableTimeOut (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetEnableTimeOut (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetHasMaxSpeed (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetHasMaxSpeed (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetHasMaxUsers (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetHasMaxUsers (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetHasPwdRetries (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetHasPwdRetries (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetClearFTP (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetClearFTP (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetEnableDiskQuota (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetEnableDiskQuota (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetMaxIPs (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetMaxIPs (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall raw_GetMaxSpeed (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetMaxSpeed (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall raw_GetMaxUsers (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetMaxUsers (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall raw_GetPwdRetries (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPwdRetries (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall raw_GetTimeOut (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTimeOut (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall raw_GetDownloadsPerSession (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetDownloadsPerSession (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall raw_GetUploadsPerSession (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetUploadsPerSession (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall raw_GetLoginMsg (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetLoginMsg (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall raw_GetHomeDir (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetHomeDir (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetIncorrectPasswordAttempts (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetMaxDownloadSize (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetMaxDownloadSize (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall raw_GetMaxSpace (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetMaxSpace (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall raw_GetMaxUploadSize (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetMaxUploadSize (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall raw_GetUsedSpace (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetDescription (
        /*[out,retval]*/ BSTR * prop ) = 0;
      virtual HRESULT __stdcall raw_SetDescription (
        /*[in]*/ BSTR bstrVal ) = 0;
      virtual HRESULT __stdcall raw_GetHomeDirString (
        /*[out,retval]*/ BSTR * prop ) = 0;
      virtual HRESULT __stdcall raw_SetHomeDirString (
        /*[in]*/ BSTR bstrVal ) = 0;
      virtual HRESULT __stdcall raw_GetLoginMsgString (
        /*[out,retval]*/ BSTR * prop ) = 0;
      virtual HRESULT __stdcall raw_SetLoginMsgString (
        /*[in]*/ BSTR bstrVal ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FullName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Email (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Email (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Fax (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Fax (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Phone (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Phone (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Pager (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Pager (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSftpAuthenticationType (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetSftpAuthenticationType (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_GetSSHKeyID (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetSSHKeyID (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall raw_GetExpirationDate (
        /*[out]*/ VARIANT * dDate,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetExpirationDate (
        /*[in]*/ VARIANT * dDate,
        /*[in]*/ VARIANT_BOOL bEnable ) = 0;
      virtual HRESULT __stdcall raw_GetHasMaxIPs (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetHasMaxIPs (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetHasDownloadsPerSession (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetHasDownloadsPerSession (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetHasUploadsPerSession (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetHasUploadsPerSession (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetHasMaxDownloadSize (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetHasMaxDownloadSize (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetHasMaxUploadSize (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetHasMaxUploadSize (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetSFTP (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetSFTP (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_SetAllowMODEZ (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetAllowMODEZ (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAppletEnabled (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAppletEnabled (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall get_Custom1 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Custom1 (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Custom2 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Custom2 (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Custom3 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Custom3 (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetExpirationDateAsVariant (
        /*[out,retval]*/ VARIANT * dDate ) = 0;
      virtual HRESULT __stdcall raw_GetSSLAuthenticationType (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetSSLAuthenticationType (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_GetSSLKeyID (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetSSLKeyID (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall raw_GetClearHTTP (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetClearHTTP (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetIPAccessRules (
        /*[out,retval]*/ VARIANT * aMasks ) = 0;
      virtual HRESULT __stdcall raw_AddIPAccessRule (
        /*[in]*/ BSTR bstrMask,
        /*[in]*/ VARIANT_BOOL bAllow,
        /*[in]*/ long nRulePos ) = 0;
      virtual HRESULT __stdcall raw_RemoveIPAccessRule (
        /*[in]*/ long nRulePos ) = 0;
      virtual HRESULT __stdcall get_IPAccessAllowedDefault (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IPAccessAllowedDefault (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_GetLimitLoginAttempts (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetLimitLoginAttempts (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetLockoutNotDisable (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetLockoutNotDisable (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_MaxInvalidLoginAttempts (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxInvalidLoginAttempts (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LockoutPeriod (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_LockoutPeriod (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_InvalidAttemptsPeriod (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_InvalidAttemptsPeriod (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFTPS (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetFTPS (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetHTTPS (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetHTTPS (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_ForcePasswordChange ( ) = 0;
      virtual HRESULT __stdcall raw_GetLimitAccessByIP (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetLimitAccessByIP (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_IsPasswordAgeLimited (
        /*[out]*/ VARIANT * pDate,
        /*[out,retval]*/ VARIANT_BOOL * pLimited ) = 0;
      virtual HRESULT __stdcall raw_IsInactivityPeriodLimited (
        /*[out]*/ VARIANT * pDate,
        /*[out,retval]*/ VARIANT_BOOL * pLimited ) = 0;
      virtual HRESULT __stdcall raw_GetForcePasswordResetOnInitialLogin (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetForcePasswordResetOnInitialLogin (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_GetTwoFactorAuthentication (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTwoFactorAuthentication (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall get_IsLocked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsConnected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_LastConnectionTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_AccountCreationTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_LastModifiedBy (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LastModificationTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAS2Inbound (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAS2Inbound (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetAS2Outbound (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAS2Outbound (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetRequireStrongPasswords (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetRequireStrongPasswords (
        /*[in]*/ SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetComplexPasswordSettings (
        /*[out,retval]*/ struct ICIComplexPasswordSettings * * ppIComplexPasswordSettings ) = 0;
      virtual HRESULT __stdcall raw_SetComplexPasswordSettings (
        /*[in]*/ struct ICIComplexPasswordSettings * pIComplexPasswordSettings ) = 0;
      virtual HRESULT __stdcall raw_GetResetPasswordSettings (
        /*[out,retval]*/ struct ICIResetPasswordSettings * * ppIResetPasswordSettings ) = 0;
      virtual HRESULT __stdcall raw_SetResetPasswordSettings (
        /*[in]*/ struct ICIResetPasswordSettings * pIResetPasswordSettings ) = 0;
      virtual HRESULT __stdcall raw_GetEnablePasswordHistory (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetEnablePasswordHistory (
        SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall get_PasswordHistorySize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PasswordHistorySize (
        long pVal ) = 0;
      virtual HRESULT __stdcall raw_GetInactiveAccountsMonitoring (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetInactiveAccountsMonitoring (
        SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall get_RemoveInactiveAccounts (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RemoveInactiveAccounts (
        VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MaxInactivePeriod (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxInactivePeriod (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_ResetPassword (
        /*[out,retval]*/ VARIANT_BOOL * pbSuccess ) = 0;
      virtual HRESULT __stdcall raw_GetAllowCOMB (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAllowCOMB (
        SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_GetAllowFXP (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAllowFXP (
        SFTPAdvBool val ) = 0;
      virtual HRESULT __stdcall raw_AS2TestOutboundProfile (
        /*[out,retval]*/ AS2OutboundProfileStatus * pVal ) = 0;
      virtual HRESULT __stdcall raw_MoveIPAccessRule (
        /*[in]*/ long nRulePosFrom,
        /*[in]*/ long nRulePosTo ) = 0;
      virtual HRESULT __stdcall get_AS2OutboundSettings (
        /*[out,retval]*/ struct ICIAS2OutboundSettings * * pSttg ) = 0;
      virtual HRESULT __stdcall get_AS2InboundSettings (
        /*[out,retval]*/ struct ICIAS2InboundSettings * * pSttg ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ long * pID ) = 0;
      virtual HRESULT __stdcall raw_GetSSHKeyIDs (
        /*[out]*/ VARIANT * pInherited,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetSSHKeyIDs (
        /*[in]*/ VARIANT val ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0004_0006
{
    AS2EncryptMissingPolicyAccept = 0,
    AS2EncryptMissingPolicyReject = 1
};

struct __declspec(uuid("86fd1ebe-92e2-40f3-9c03-e5f0ca55f8ab"))
ICICommandSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetExecutable,put=PutExecutable))
    _bstr_t Executable;
    __declspec(property(get=GetParameters,put=PutParameters))
    _bstr_t Parameters;
    __declspec(property(get=GetMinNumOfParamsMsg,put=PutMinNumOfParamsMsg))
    _bstr_t MinNumOfParamsMsg;
    __declspec(property(get=GetIsEnabled,put=PutIsEnabled))
    VARIANT_BOOL IsEnabled;
    __declspec(property(get=GetRequireParams,put=PutRequireParams))
    VARIANT_BOOL RequireParams;
    __declspec(property(get=GetRedirectOutputToClient,put=PutRedirectOutputToClient))
    VARIANT_BOOL RedirectOutputToClient;
    __declspec(property(get=GetRedirectOutputToLog,put=PutRedirectOutputToLog))
    VARIANT_BOOL RedirectOutputToLog;
    __declspec(property(get=GetLogPath,put=PutLogPath))
    _bstr_t LogPath;
    __declspec(property(get=GetEnableProcessTimeOut,put=PutEnableProcessTimeOut))
    VARIANT_BOOL EnableProcessTimeOut;
    __declspec(property(get=GetMinNumOfParams,put=PutMinNumOfParams))
    long MinNumOfParams;
    __declspec(property(get=GetProcessTimeOut,put=PutProcessTimeOut))
    long ProcessTimeOut;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );
    _bstr_t GetExecutable ( );
    void PutExecutable (
        _bstr_t pVal );
    _bstr_t GetParameters ( );
    void PutParameters (
        _bstr_t pVal );
    _bstr_t GetMinNumOfParamsMsg ( );
    void PutMinNumOfParamsMsg (
        _bstr_t pVal );
    VARIANT_BOOL GetIsEnabled ( );
    void PutIsEnabled (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRequireParams ( );
    void PutRequireParams (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRedirectOutputToClient ( );
    void PutRedirectOutputToClient (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRedirectOutputToLog ( );
    void PutRedirectOutputToLog (
        VARIANT_BOOL pVal );
    _bstr_t GetLogPath ( );
    void PutLogPath (
        _bstr_t pVal );
    VARIANT_BOOL GetEnableProcessTimeOut ( );
    void PutEnableProcessTimeOut (
        VARIANT_BOOL pVal );
    long GetMinNumOfParams ( );
    void PutMinNumOfParams (
        long pVal );
    long GetProcessTimeOut ( );
    void PutProcessTimeOut (
        long pVal );
    _variant_t GetUserPermissions ( );
    HRESULT AddUserPermission (
        _bstr_t bstrUser );
    HRESULT RemoveUserPermission (
        _bstr_t bstrUser );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Executable (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Executable (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Parameters (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Parameters (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_MinNumOfParamsMsg (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MinNumOfParamsMsg (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RequireParams (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RequireParams (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RedirectOutputToClient (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RedirectOutputToClient (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RedirectOutputToLog (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RedirectOutputToLog (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LogPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LogPath (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EnableProcessTimeOut (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableProcessTimeOut (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MinNumOfParams (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MinNumOfParams (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ProcessTimeOut (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ProcessTimeOut (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_GetUserPermissions (
        /*[out,retval]*/ VARIANT * aUsers ) = 0;
      virtual HRESULT __stdcall raw_AddUserPermission (
        /*[in]*/ BSTR bstrUser ) = 0;
      virtual HRESULT __stdcall raw_RemoveUserPermission (
        /*[in]*/ BSTR bstrUser ) = 0;
};

struct __declspec(uuid("b8562c98-012e-4fef-9732-33a34aa01a18"))
ICICertInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetID))
    long ID;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetIssuerOneLine))
    _bstr_t IssuerOneLine;
    __declspec(property(get=GetIssuerUnit))
    _bstr_t IssuerUnit;
    __declspec(property(get=GetIssuerOrg))
    _bstr_t IssuerOrg;
    __declspec(property(get=GetIssuerCountry))
    _bstr_t IssuerCountry;
    __declspec(property(get=GetIssuerCName))
    _bstr_t IssuerCName;
    __declspec(property(get=GetSubjectOneLine))
    _bstr_t SubjectOneLine;
    __declspec(property(get=GetSubjectUnit))
    _bstr_t SubjectUnit;
    __declspec(property(get=GetSubjectOrg))
    _bstr_t SubjectOrg;
    __declspec(property(get=GetSubjectCountry))
    _bstr_t SubjectCountry;
    __declspec(property(get=GetSubjectCName))
    _bstr_t SubjectCName;
    __declspec(property(get=GetNotBefore))
    _bstr_t NotBefore;
    __declspec(property(get=GetNotAfter))
    _bstr_t NotAfter;

    //
    // Wrapper methods for error-handling
    //

    long GetID ( );
    _bstr_t GetDescription ( );
    _bstr_t GetIssuerOneLine ( );
    _bstr_t GetIssuerUnit ( );
    _bstr_t GetIssuerOrg ( );
    _bstr_t GetIssuerCountry ( );
    _bstr_t GetIssuerCName ( );
    _bstr_t GetSubjectOneLine ( );
    _bstr_t GetSubjectUnit ( );
    _bstr_t GetSubjectOrg ( );
    _bstr_t GetSubjectCountry ( );
    _bstr_t GetSubjectCName ( );
    _bstr_t GetNotBefore ( );
    _bstr_t GetNotAfter ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IssuerOneLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IssuerUnit (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IssuerOrg (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IssuerCountry (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IssuerCName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SubjectOneLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SubjectUnit (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SubjectOrg (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SubjectCountry (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SubjectCName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_NotBefore (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_NotAfter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0002_0002
{
    OnTimer = 4097,
    OnLogRotate = 4098,
    OnServiceStopped = 4099,
    OnServiceStarted = 4100,
    MonitorFolder = 4101,
    OnMonitorFolderFailed = 4102,
    OnSiteStarted = 8193,
    OnSiteStopped = 8194,
    OnIPAddedToBanList = 8195,
    OnClientConnected = 12289,
    OnClientConnectionFailed = 12290,
    OnClientDisconnected = 12291,
    OnClientDisabled = 16385,
    OnClientQuotaExceeded = 16386,
    OnClientLoggedOut = 16387,
    OnClientLoggedIn = 16388,
    OnClientLoginFailed = 16389,
    OnClientPasswordChanged = 16390,
    OnClientCreated = 16391,
    OnClientLocked = 16392,
    OnFileDeleted = 20481,
    OnFileUpload = 20482,
    BeforeFileDownload = 20483,
    OnFileDownload = 20484,
    OnFileRenamed = 20485,
    OnFolderCreated = 20486,
    OnFolderDeleted = 20487,
    OnUploadFailed = 20489,
    OnDownloadFailed = 20490,
    OnChangeFolder = 20491,
    OnFileMoved = 20492,
    OnVerifiedUploadSuccess = 20493,
    OnVerifiedUploadFailure = 20494,
    OnVerifiedDownloadSuccess = 20495,
    OnVerifiedDownloadFailure = 20496,
    AS2InboundTransactionSucceeded = 24577,
    AS2InboundTransactionFailed = 24578,
    AS2OutboundTransactionSucceeded = 24579,
    AS2OutboundTransactionFailed = 24580
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0002_0003
{
    SensitivityOff = 0,
    SensitivityVeryLow = 1,
    SensitivityLow = 2,
    SensitivityMedium = 3,
    SensitivityHigh = 4,
    SensitivityVeryHigh = 5
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0002_0007
{
    TwoFactorAuth_None = 0,
    TwoFactorAuth_RADIUS = 1,
    TwoFactorAuth_RSA = 2
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0002_0004
{
    DataSanitizationNoWipe = 0,
    DataSanitizationPseudorandomData = 1,
    DataSanitization3PassDoD = 2
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0002_0005
{
    PGPLogLevelStandard = 0,
    PGPLogLevelVerbose = 1
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0002_0006
{
    EMailCredentialsBoth = 0,
    EMailCredentialsSeparate = 1,
    EMailCredentialsUsernameOnly = 2
};

struct __declspec(uuid("6e0ee722-f040-4f2e-980e-2afd593a0908"))
ICIDMZGateway : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnable,put=PutEnable))
    VARIANT_BOOL Enable;
    __declspec(property(get=GetGatewayIP,put=PutGatewayIP))
    _bstr_t GatewayIP;
    __declspec(property(get=GetGatewayPort,put=PutGatewayPort))
    long GatewayPort;
    __declspec(property(get=GetRouteFTP,put=PutRouteFTP))
    VARIANT_BOOL RouteFTP;
    __declspec(property(get=GetRouteFTPSExpl,put=PutRouteFTPSExpl))
    VARIANT_BOOL RouteFTPSExpl;
    __declspec(property(get=GetRouteFTPSImpl,put=PutRouteFTPSImpl))
    VARIANT_BOOL RouteFTPSImpl;
    __declspec(property(get=GetRouteSFTP,put=PutRouteSFTP))
    VARIANT_BOOL RouteSFTP;
    __declspec(property(get=GetRouteHTTP,put=PutRouteHTTP))
    VARIANT_BOOL RouteHTTP;
    __declspec(property(get=GetRouteHTTPS,put=PutRouteHTTPS))
    VARIANT_BOOL RouteHTTPS;
    __declspec(property(get=GetFTPPort,put=PutFTPPort))
    long FTPPort;
    __declspec(property(get=GetFTPSExplPort,put=PutFTPSExplPort))
    long FTPSExplPort;
    __declspec(property(get=GetFTPSImplPort,put=PutFTPSImplPort))
    long FTPSImplPort;
    __declspec(property(get=GetSFTPPort,put=PutSFTPPort))
    long SFTPPort;
    __declspec(property(get=GetHTTPPort,put=PutHTTPPort))
    long HTTPPort;
    __declspec(property(get=GetHTTPSPort,put=PutHTTPSPort))
    long HTTPSPort;
    __declspec(property(get=GetPASVListenIP,put=PutPASVListenIP))
    long PASVListenIP;
    __declspec(property(get=GetPASVPortMin,put=PutPASVPortMin))
    long PASVPortMin;
    __declspec(property(get=GetPASVPortMax,put=PutPASVPortMax))
    long PASVPortMax;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnable ( );
    void PutEnable (
        VARIANT_BOOL pVal );
    _bstr_t GetGatewayIP ( );
    void PutGatewayIP (
        _bstr_t pVal );
    long GetGatewayPort ( );
    void PutGatewayPort (
        long pVal );
    VARIANT_BOOL GetRouteFTP ( );
    void PutRouteFTP (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRouteFTPSExpl ( );
    void PutRouteFTPSExpl (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRouteFTPSImpl ( );
    void PutRouteFTPSImpl (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRouteSFTP ( );
    void PutRouteSFTP (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRouteHTTP ( );
    void PutRouteHTTP (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRouteHTTPS ( );
    void PutRouteHTTPS (
        VARIANT_BOOL pVal );
    long GetFTPPort ( );
    void PutFTPPort (
        long pVal );
    long GetFTPSExplPort ( );
    void PutFTPSExplPort (
        long pVal );
    long GetFTPSImplPort ( );
    void PutFTPSImplPort (
        long pVal );
    long GetSFTPPort ( );
    void PutSFTPPort (
        long pVal );
    long GetHTTPPort ( );
    void PutHTTPPort (
        long pVal );
    long GetHTTPSPort ( );
    void PutHTTPSPort (
        long pVal );
    VARIANT_BOOL GetAssignPASVMode ( );
    void PutAssignPASVMode (
        VARIANT_BOOL pVal );
    long GetPASVListenIP ( );
    void PutPASVListenIP (
        long pVal );
    long GetPASVPortMin ( );
    void PutPASVPortMin (
        long pVal );
    long GetPASVPortMax ( );
    void PutPASVPortMax (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Enable (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GatewayIP (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_GatewayIP (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_GatewayPort (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_GatewayPort (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RouteFTP (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RouteFTP (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RouteFTPSExpl (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RouteFTPSExpl (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RouteFTPSImpl (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RouteFTPSImpl (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RouteSFTP (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RouteSFTP (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RouteHTTP (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RouteHTTP (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RouteHTTPS (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RouteHTTPS (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FTPPort (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FTPPort (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_FTPSExplPort (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FTPSExplPort (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_FTPSImplPort (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FTPSImplPort (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SFTPPort (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SFTPPort (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_HTTPPort (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HTTPPort (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_HTTPSPort (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HTTPSPort (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AssignPASVMode (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AssignPASVMode (
        VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PASVListenIP (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PASVListenIP (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PASVPortMin (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PASVPortMin (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PASVPortMax (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PASVPortMax (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("3eece91b-7f0f-4745-8144-e3b47a71b663"))
ICISite : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadiusServerName,put=PutRadiusServerName))
    _bstr_t RadiusServerName;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetID))
    long ID;
    __declspec(property(get=GetRadiusServerPort,put=PutRadiusServerPort))
    long RadiusServerPort;
    __declspec(property(get=GetRadiusNasIdentifier,put=PutRadiusNasIdentifier))
    _bstr_t RadiusNasIdentifier;
    __declspec(property(get=GetRadiusSharedSecret,put=PutRadiusSharedSecret))
    _bstr_t RadiusSharedSecret;
    __declspec(property(get=GetRadiusConnectionRetriesCount,put=PutRadiusConnectionRetriesCount))
    long RadiusConnectionRetriesCount;
    __declspec(property(get=GetRadiusTimeout,put=PutRadiusTimeout))
    long RadiusTimeout;
    __declspec(property(get=GetLastModifiedTime))
    DATE LastModifiedTime;
    __declspec(property(get=GetLastModifiedBy))
    _bstr_t LastModifiedBy;
    __declspec(property(get=GetAverageSpeed))
    long AverageSpeed;
    __declspec(property(get=GetUsersDefined))
    long UsersDefined;
    __declspec(property(get=GetWTCSessionsActive))
    long WTCSessionsActive;
    __declspec(property(get=GetWTCSessionsRemaining))
    long WTCSessionsRemaining;
    __declspec(property(get=GetHTTPDomain,put=PutHTTPDomain))
    _bstr_t HTTPDomain;
    __declspec(property(get=GetFTPSExplicitPort,put=PutFTPSExplicitPort))
    long FTPSExplicitPort;
    __declspec(property(get=GetFTPSImplicitPort,put=PutFTPSImplicitPort))
    long FTPSImplicitPort;
    __declspec(property(get=GetSFTPPort,put=PutSFTPPort))
    long SFTPPort;
    __declspec(property(get=GetEnableWebServices,put=PutEnableWebServices))
    VARIANT_BOOL EnableWebServices;
    __declspec(property(get=GetRedirectHTTPtoHTTPS,put=PutRedirectHTTPtoHTTPS))
    VARIANT_BOOL RedirectHTTPtoHTTPS;
    __declspec(property(get=GetEnableAccountManagementOverHTTPS,put=PutEnableAccountManagementOverHTTPS))
    VARIANT_BOOL EnableAccountManagementOverHTTPS;
    __declspec(property(get=GetAccountManagementPath))
    _bstr_t AccountManagementPath;
    __declspec(property(get=GetRequireStrongPasswords,put=PutRequireStrongPasswords))
    VARIANT_BOOL RequireStrongPasswords;
    __declspec(property(get=GetDataSanitizationMethod,put=PutDataSanitizationMethod))
    DataSanitizationMethod _DataSanitizationMethod;
    __declspec(property(get=GetEnablePGPLogging,put=PutEnablePGPLogging))
    VARIANT_BOOL EnablePGPLogging;
    __declspec(property(get=GetPGPLogLevel,put=PutPGPLogLevel))
    PGPLogLevel _PGPLogLevel;
    __declspec(property(get=GetUseDynamicPGPLogFile,put=PutUseDynamicPGPLogFile))
    VARIANT_BOOL UseDynamicPGPLogFile;
    __declspec(property(get=GetIsStarted))
    VARIANT_BOOL IsStarted;
    __declspec(property(get=GetPGPLogFilePath,put=PutPGPLogFilePath))
    _bstr_t PGPLogFilePath;
    __declspec(property(get=GetEnablePasswordHistory,put=PutEnablePasswordHistory))
    VARIANT_BOOL EnablePasswordHistory;
    __declspec(property(get=GetPasswordHistorySize,put=PutPasswordHistorySize))
    long PasswordHistorySize;
    __declspec(property(get=GetAllowUPVariables,put=PutAllowUPVariables))
    VARIANT_BOOL AllowUPVariables;
    __declspec(property(get=GetAllowEmailLoginCredentials,put=PutAllowEmailLoginCredentials))
    VARIANT_BOOL AllowEmailLoginCredentials;
    __declspec(property(get=GetEMailLoginCredentialsMode,put=PutEMailLoginCredentialsMode))
    EMailLoginCredentialsMode _EMailLoginCredentialsMode;
    __declspec(property(get=GetInactiveAccountsMonitoring,put=PutInactiveAccountsMonitoring))
    VARIANT_BOOL InactiveAccountsMonitoring;
    __declspec(property(get=GetRemoveInactiveAccounts,put=PutRemoveInactiveAccounts))
    VARIANT_BOOL RemoveInactiveAccounts;
    __declspec(property(get=GetMaxInactivePeriod,put=PutMaxInactivePeriod))
    long MaxInactivePeriod;
    __declspec(property(get=GetAS2Identifier,put=PutAS2Identifier))
    _bstr_t AS2Identifier;
    __declspec(property(get=GetAS2Certificate,put=PutAS2Certificate))
    _bstr_t AS2Certificate;
    __declspec(property(get=GetAS2PrivateKey,put=PutAS2PrivateKey))
    _bstr_t AS2PrivateKey;
    __declspec(property(get=GetAS2Passphrase,put=PutAS2Passphrase))
    _bstr_t AS2Passphrase;
    __declspec(property(get=GetAS2AccountManagementPath))
    _bstr_t AS2AccountManagementPath;
    __declspec(property(get=GetEnableAS2,put=PutEnableAS2))
    VARIANT_BOOL EnableAS2;
    __declspec(property(get=GetDMZConnected))
    VARIANT_BOOL DMZConnected;
    __declspec(property(get=GetSFTPKeyFile,put=PutSFTPKeyFile))
    _bstr_t SFTPKeyFile;
    __declspec(property(get=GetSFTPKeyPassphrase,put=PutSFTPKeyPassphrase))
    _bstr_t SFTPKeyPassphrase;
    __declspec(property(get=GetSFTPEncodingAlgorithms,put=PutSFTPEncodingAlgorithms))
    _bstr_t SFTPEncodingAlgorithms;
    __declspec(property(get=GetSFTPMacAlgorithms,put=PutSFTPMacAlgorithms))
    _bstr_t SFTPMacAlgorithms;
    __declspec(property(get=GetSFTPSoftwareVersion,put=PutSFTPSoftwareVersion))
    _bstr_t SFTPSoftwareVersion;
    __declspec(property(get=GetSFTPIdentificationComment,put=PutSFTPIdentificationComment))
    _bstr_t SFTPIdentificationComment;
    __declspec(property(get=GetSFTPPublicKeyBlob))
    _bstr_t SFTPPublicKeyBlob;
    __declspec(property(get=GetUserLimitMessage,put=PutUserLimitMessage))
    _bstr_t UserLimitMessage;
    __declspec(property(get=GetExitMessage,put=PutExitMessage))
    _bstr_t ExitMessage;
    __declspec(property(get=GetVFSFilter,put=PutVFSFilter))
    _bstr_t VFSFilter;
    __declspec(property(get=GetBlockAntiTimeOut,put=PutBlockAntiTimeOut))
    VARIANT_BOOL BlockAntiTimeOut;
    __declspec(property(get=GetBlockSiteToSite,put=PutBlockSiteToSite))
    VARIANT_BOOL BlockSiteToSite;
    __declspec(property(get=GetAutoCreateHomeFolder,put=PutAutoCreateHomeFolder))
    VARIANT_BOOL AutoCreateHomeFolder;
    __declspec(property(get=GetAssignFullPermissionsForHomeFolder,put=PutAssignFullPermissionsForHomeFolder))
    VARIANT_BOOL AssignFullPermissionsForHomeFolder;
    __declspec(property(get=GetEnablePortRange,put=PutEnablePortRange))
    VARIANT_BOOL EnablePortRange;
    __declspec(property(get=GetHasMaxSpeed,put=PutHasMaxSpeed))
    VARIANT_BOOL HasMaxSpeed;
    __declspec(property(get=GetHasMaxUsers,put=PutHasMaxUsers))
    VARIANT_BOOL HasMaxUsers;
    __declspec(property(get=GetHasMaxConnectionsPerAccount,put=PutHasMaxConnectionsPerAccount))
    VARIANT_BOOL HasMaxConnectionsPerAccount;
    __declspec(property(get=GetHasMaxIPPerAccount,put=PutHasMaxIPPerAccount))
    VARIANT_BOOL HasMaxIPPerAccount;
    __declspec(property(get=GetDisconnectOnDOS,put=PutDisconnectOnDOS))
    VARIANT_BOOL DisconnectOnDOS;
    __declspec(property(get=GetBanIPOnDOS,put=PutBanIPOnDOS))
    VARIANT_BOOL BanIPOnDOS;
    __declspec(property(get=GetAutoBanIPsPermanently,put=PutAutoBanIPsPermanently))
    VARIANT_BOOL AutoBanIPsPermanently;
    __declspec(property(get=GetPASVListenIP,put=PutPASVListenIP))
    long PASVListenIP;
    __declspec(property(get=GetPASVPortMin,put=PutPASVPortMin))
    long PASVPortMin;
    __declspec(property(get=GetPASVPortMax,put=PutPASVPortMax))
    long PASVPortMax;
    __declspec(property(get=GetMaxTransferSpeed,put=PutMaxTransferSpeed))
    long MaxTransferSpeed;
    __declspec(property(get=GetMaxConcurrentConnections,put=PutMaxConcurrentConnections))
    long MaxConcurrentConnections;
    __declspec(property(get=GetMaxConnectionsPerUser,put=PutMaxConnectionsPerUser))
    long MaxConnectionsPerUser;
    __declspec(property(get=GetMaxConnectionsFromSameIP,put=PutMaxConnectionsFromSameIP))
    long MaxConnectionsFromSameIP;
    __declspec(property(get=GetDOSLimit,put=PutDOSLimit))
    long DOSLimit;
    __declspec(property(get=GetConnectedUsers))
    _variant_t ConnectedUsers;
    __declspec(property(get=GetRSAConfigurationPath,put=PutRSAConfigurationPath))
    _bstr_t RSAConfigurationPath;
    __declspec(property(get=GetIPAccessAllowedDefault,put=PutIPAccessAllowedDefault))
    VARIANT_BOOL IPAccessAllowedDefault;
    __declspec(property(get=GetConnectMessage,put=PutConnectMessage))
    _bstr_t ConnectMessage;
    __declspec(property(get=GetHasMaxConcurrentLogins,put=PutHasMaxConcurrentLogins))
    VARIANT_BOOL HasMaxConcurrentLogins;
    __declspec(property(get=GetMaxConcurrentLogins,put=PutMaxConcurrentLogins))
    long MaxConcurrentLogins;
    __declspec(property(get=GetODBCSettings,put=PutODBCSettings))
    _bstr_t ODBCSettings;
    __declspec(property(get=GetLimitLoginAttempts,put=PutLimitLoginAttempts))
    VARIANT_BOOL LimitLoginAttempts;
    __declspec(property(get=GetLockoutNotDisable,put=PutLockoutNotDisable))
    VARIANT_BOOL LockoutNotDisable;
    __declspec(property(get=GetMaxInvalidLoginAttempts,put=PutMaxInvalidLoginAttempts))
    long MaxInvalidLoginAttempts;
    __declspec(property(get=GetLockoutPeriod,put=PutLockoutPeriod))
    long LockoutPeriod;
    __declspec(property(get=GetInvalidAttemptsPeriod,put=PutInvalidAttemptsPeriod))
    long InvalidAttemptsPeriod;
    __declspec(property(get=GetAutobanSensitivity,put=PutAutobanSensitivity))
    AutobanSensitivity _AutobanSensitivity;
    __declspec(property(get=GetAllowChangePassword,put=PutAllowChangePassword))
    VARIANT_BOOL AllowChangePassword;
    __declspec(property(get=GetForcePasswordResetOnInitialLogin,put=PutForcePasswordResetOnInitialLogin))
    VARIANT_BOOL ForcePasswordResetOnInitialLogin;
    __declspec(property(get=GetTwoFactorAuthentication,put=PutTwoFactorAuthentication))
    TwoFactorAuthenticationMode TwoFactorAuthentication;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    long GetID ( );
    long GetConnectedCount ( );
    HRESULT Start ( );
    HRESULT Stop ( );
    long GetAuthManagerID ( );
    _bstr_t GetRootFolder ( );
    VARIANT_BOOL SetRootFolder (
        _bstr_t newVal );
    long GetIP ( );
    VARIANT_BOOL SetIP (
        long newVal );
    long GetPort ( );
    VARIANT_BOOL SetPort (
        long newVal );
    VARIANT_BOOL GetFTPAccess ( );
    VARIANT_BOOL SetFTPAccess (
        VARIANT_BOOL newVal );
    VARIANT_BOOL GetSSLAuth ( );
    VARIANT_BOOL GetSSLImp ( );
    VARIANT_BOOL SetSSLAuth (
        VARIANT_BOOL newVal );
    VARIANT_BOOL SetSSLImp (
        VARIANT_BOOL newVal );
    VARIANT_BOOL GetCheckClientCert ( );
    VARIANT_BOOL SetCheckClientCert (
        VARIANT_BOOL newVal );
    _bstr_t GetCertFilePath ( );
    _bstr_t GetKeyFilePath ( );
    _bstr_t GetPassPhrase ( );
    _bstr_t GetTrustedCertsPath ( );
    _bstr_t GetAwaitingCertsPath ( );
    VARIANT_BOOL SetCertFilePath (
        _bstr_t newVal );
    VARIANT_BOOL SetKeyFilePath (
        _bstr_t newVal );
    VARIANT_BOOL SetPassPhrase (
        _bstr_t newVal );
    VARIANT_BOOL GetIsStarted ( );
    long GetDownloadSpeed ( );
    long GetUploadSpeed ( );
    long GetDownloadCount ( );
    long GetUploadCount ( );
    _bstr_t GetStartTime ( );
    _bstr_t GetFolderList (
        _bstr_t bstrFolderAlias );
    _variant_t GetFolderPermissions (
        _bstr_t bstrFolder );
    HRESULT SetPermission (
        struct IPermission * pPermission,
        VARIANT_BOOL bRemoveOtherPermissions );
    HRESULT RemovePermission (
        _bstr_t bstrFolder,
        _bstr_t bstrClient );
    IPermissionPtr GetBlankPermission (
        _bstr_t bstrFolder,
        _bstr_t bstrClient );
    HRESULT CreatePhysicalFolder (
        _bstr_t bstrNewFolder );
    HRESULT CreateVirtualFolder (
        _bstr_t bstrNewFolder,
        _bstr_t bstrTarget );
    HRESULT RemoveFolder (
        _bstr_t bstrFolder );
    HRESULT RenameFolder (
        _bstr_t bstrSrcFolder,
        _bstr_t bstrDstFolder );
    HRESULT CreatePermissionGroup (
        _bstr_t bstrName );
    _variant_t GetPermissionGroups ( );
    HRESULT RemovePermissionGroup (
        _bstr_t bstrName );
    HRESULT RenamePermissionGroup (
        _bstr_t bstrOldName,
        _bstr_t bstrNewName );
    HRESULT AddUserToPermissionGroup (
        _bstr_t bstrUser,
        _bstr_t bstrGroup );
    HRESULT RemoveUserFromPermissionGroup (
        _bstr_t bstrUser,
        _bstr_t bstrGroup );
    HRESULT CreateUser (
        _bstr_t bstrLogin,
        _bstr_t bstrPwd,
        int nPwdType,
        _bstr_t bstrDescription,
        SFTPAdvBool abTwoFactorAuthentication );
    _variant_t GetUsers ( );
    HRESULT RemoveUser (
        _bstr_t bstrLogin );
    HRESULT RenameUser (
        _bstr_t bstrOldName,
        _bstr_t bstrNewName );
    _variant_t GetSettingsLevels ( );
    _variant_t GetSettingsLevelUsers (
        _bstr_t bstrGroup );
    HRESULT CreateSettingsLevel (
        _bstr_t bstrName,
        _bstr_t bstrDescription );
    HRESULT RemoveSettingsLevel (
        _bstr_t bstrName );
    HRESULT RenameSettingsLevel (
        _bstr_t bstrOldName,
        _bstr_t bstrNewName );
    HRESULT MoveUserToSettingsLevel (
        _bstr_t bstrUser,
        _bstr_t bstrGroup );
    _variant_t GetPermissionGroupsOfUser (
        _bstr_t bstrUser );
    HRESULT ChangeUserPassword (
        _bstr_t bstrUser,
        _bstr_t bstrPwd,
        int nPwdType );
    ICIClientSettingsPtr GetSettingsLevelSettings (
        _bstr_t bstrGroup );
    ICIClientSettingsPtr GetUserSettings (
        _bstr_t bstrUser );
    HRESULT Remove ( );
    _variant_t GetCommands ( );
    ICICommandSettingsPtr GetCommandSettings (
        _bstr_t bstrCommand );
    ICICommandSettingsPtr CreateCommand (
        _bstr_t bstrName );
    HRESULT RemoveCommand (
        _bstr_t bstrName );
    _variant_t GetTrustedCertificates ( );
    ICICertInfoPtr GetTrustedCertificateInfo (
        long lID );
    _variant_t GetPendingCertificates ( );
    ICICertInfoPtr GetPendingCertificateInfo (
        long lID );
    _bstr_t ExportTrustedCertificate (
        long lID );
    long ImportTrustedCertificate (
        _bstr_t bstrCertPath );
    HRESULT RemoveTrustedCertificate (
        long lID );
    HRESULT RemovePendingCertificate (
        long lID );
    long AddCertificateToTrusted (
        long lID );
    _bstr_t GetUserLimitMessage ( );
    void PutUserLimitMessage (
        _bstr_t pVal );
    _bstr_t GetExitMessage ( );
    void PutExitMessage (
        _bstr_t pVal );
    _bstr_t GetVFSFilter ( );
    void PutVFSFilter (
        _bstr_t pVal );
    VARIANT_BOOL GetBlockAntiTimeOut ( );
    void PutBlockAntiTimeOut (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetBlockSiteToSite ( );
    void PutBlockSiteToSite (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAutoCreateHomeFolder ( );
    void PutAutoCreateHomeFolder (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAssignFullPermissionsForHomeFolder ( );
    void PutAssignFullPermissionsForHomeFolder (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEnablePortRange ( );
    void PutEnablePortRange (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetHasMaxSpeed ( );
    void PutHasMaxSpeed (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetHasMaxUsers ( );
    void PutHasMaxUsers (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetHasMaxConnectionsPerAccount ( );
    void PutHasMaxConnectionsPerAccount (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetHasMaxIPPerAccount ( );
    void PutHasMaxIPPerAccount (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetDisconnectOnDOS ( );
    void PutDisconnectOnDOS (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetBanIPOnDOS ( );
    void PutBanIPOnDOS (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAutoBanIPsPermanently ( );
    void PutAutoBanIPsPermanently (
        VARIANT_BOOL pVal );
    long GetPASVListenIP ( );
    void PutPASVListenIP (
        long pVal );
    long GetPASVPortMin ( );
    void PutPASVPortMin (
        long pVal );
    long GetPASVPortMax ( );
    void PutPASVPortMax (
        long pVal );
    long GetMaxTransferSpeed ( );
    void PutMaxTransferSpeed (
        long pVal );
    long GetMaxConcurrentConnections ( );
    void PutMaxConcurrentConnections (
        long pVal );
    long GetMaxConnectionsPerUser ( );
    void PutMaxConnectionsPerUser (
        long pVal );
    long GetMaxConnectionsFromSameIP ( );
    void PutMaxConnectionsFromSameIP (
        long pVal );
    long GetDOSLimit ( );
    void PutDOSLimit (
        long pVal );
    _variant_t GetIPAccessRules ( );
    HRESULT AddIPAccessRule (
        _bstr_t bstrMask,
        VARIANT_BOOL bAllow,
        long nRulePos );
    HRESULT RemoveIPAccessRule (
        long nRulePos );
    VARIANT_BOOL GetIPAccessAllowedDefault ( );
    void PutIPAccessAllowedDefault (
        VARIANT_BOOL pVal );
    HRESULT CreateUserEx (
        _bstr_t bstrLogin,
        _bstr_t bstrPwd,
        int nPwdType,
        _bstr_t bstrDescription,
        _bstr_t bstrFullName,
        VARIANT_BOOL bCreateHomeFolder,
        VARIANT_BOOL bFullPermissionsForHomeFolder,
        _bstr_t bstrSettingsLevel,
        SFTPAdvBool abTwoFactorAuthentication );
    _variant_t GetPermissionGroupList (
        _bstr_t bstrGroup );
    HRESULT ForceSynchronizeUserDatabase ( );
    _bstr_t GetConnectMessage ( );
    void PutConnectMessage (
        _bstr_t pVal );
    VARIANT_BOOL GetHasMaxConcurrentLogins ( );
    void PutHasMaxConcurrentLogins (
        VARIANT_BOOL pVal );
    long GetMaxConcurrentLogins ( );
    void PutMaxConcurrentLogins (
        long pVal );
    VARIANT_BOOL ValidatePassword (
        _bstr_t bstrUser,
        _bstr_t bstrPwd );
    VARIANT_BOOL CancelTransfer (
        _bstr_t bstrPath );
    _bstr_t GetSSHKeyFilePath ( );
    VARIANT_BOOL SetSSHKeyFilePath (
        _bstr_t newVal );
    _bstr_t GetODBCSettings ( );
    void PutODBCSettings (
        _bstr_t pVal );
    HRESULT RemapVirtualFolder (
        _bstr_t bstrVFSFolder,
        _bstr_t bstrTarget );
    HRESULT AssignEventRuleCustomCommandWorkingFolder (
        _bstr_t bstrCustomCommandName,
        _bstr_t bstrWorkingFolder );
    _variant_t EFTGetConnectedUsers ( );
    VARIANT_BOOL KickUser (
        long nUserID );
    _bstr_t CreateComplexPassword (
        const _variant_t & bstrUserName = vtMissing );
    VARIANT_BOOL GetHTTPAccess ( );
    VARIANT_BOOL SetHTTPAccess (
        VARIANT_BOOL newVal );
    VARIANT_BOOL GetHTTPSAccess ( );
    VARIANT_BOOL SetHTTPSAccess (
        VARIANT_BOOL newVal );
    long GetHTTPPort ( );
    VARIANT_BOOL SetHTTPPort (
        long newVal );
    long GetHTTPSPort ( );
    VARIANT_BOOL SetHTTPSPort (
        long newVal );
    VARIANT_BOOL GetLimitLoginAttempts ( );
    void PutLimitLoginAttempts (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetLockoutNotDisable ( );
    void PutLockoutNotDisable (
        VARIANT_BOOL pVal );
    long GetMaxInvalidLoginAttempts ( );
    void PutMaxInvalidLoginAttempts (
        long pVal );
    long GetLockoutPeriod ( );
    void PutLockoutPeriod (
        long pVal );
    long GetInvalidAttemptsPeriod ( );
    void PutInvalidAttemptsPeriod (
        long pVal );
    IDispatchPtr EventRules (
        EventType type );
    _bstr_t GetPhysicalPath (
        _bstr_t bstrFolderAlias );
    HRESULT EnableSFTP (
        _bstr_t SFTPKeyFile,
        _bstr_t SFTPKeyPassword );
    HRESULT DisableSFTP ( );
    HRESULT SetSSLCertificate (
        _bstr_t bzCertFilePath,
        _bstr_t bzKeyFilePath,
        _bstr_t bzPassPhrase );
    AutobanSensitivity GetAutobanSensitivity ( );
    void PutAutobanSensitivity (
        AutobanSensitivity pVal );
    VARIANT_BOOL GetAllowChangePassword ( );
    void PutAllowChangePassword (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetForcePasswordResetOnInitialLogin ( );
    void PutForcePasswordResetOnInitialLogin (
        VARIANT_BOOL pVal );
    VARIANT_BOOL DoesUsernameExist (
        _bstr_t bstrUserName );
    TwoFactorAuthenticationMode GetTwoFactorAuthentication ( );
    void PutTwoFactorAuthentication (
        TwoFactorAuthenticationMode pVal );
    _bstr_t GetRadiusServerName ( );
    void PutRadiusServerName (
        _bstr_t pVal );
    long GetRadiusServerPort ( );
    void PutRadiusServerPort (
        long pVal );
    _bstr_t GetRadiusNasIdentifier ( );
    void PutRadiusNasIdentifier (
        _bstr_t pVal );
    _bstr_t GetRadiusSharedSecret ( );
    void PutRadiusSharedSecret (
        _bstr_t pVal );
    long GetRadiusConnectionRetriesCount ( );
    void PutRadiusConnectionRetriesCount (
        long pVal );
    long GetRadiusTimeout ( );
    void PutRadiusTimeout (
        long pVal );
    DATE GetLastModifiedTime ( );
    _bstr_t GetLastModifiedBy ( );
    long GetAverageSpeed ( );
    long GetUsersDefined ( );
    long GetWTCSessionsActive ( );
    long GetWTCSessionsRemaining ( );
    _bstr_t GetHTTPDomain ( );
    void PutHTTPDomain (
        _bstr_t pVal );
    long GetFTPSExplicitPort ( );
    void PutFTPSExplicitPort (
        long pVal );
    long GetFTPSImplicitPort ( );
    void PutFTPSImplicitPort (
        long pVal );
    long GetSFTPPort ( );
    void PutSFTPPort (
        long pVal );
    VARIANT_BOOL GetEnableWebServices ( );
    void PutEnableWebServices (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRedirectHTTPtoHTTPS ( );
    void PutRedirectHTTPtoHTTPS (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEnableAccountManagementOverHTTPS ( );
    void PutEnableAccountManagementOverHTTPS (
        VARIANT_BOOL pVal );
    _bstr_t GetAccountManagementPath ( );
    VARIANT_BOOL GetRequireStrongPasswords ( );
    void PutRequireStrongPasswords (
        VARIANT_BOOL pVal );
    DataSanitizationMethod GetDataSanitizationMethod ( );
    void PutDataSanitizationMethod (
        DataSanitizationMethod pVal );
    VARIANT_BOOL GetEnablePGPLogging ( );
    void PutEnablePGPLogging (
        VARIANT_BOOL pVal );
    PGPLogLevel GetPGPLogLevel ( );
    void PutPGPLogLevel (
        PGPLogLevel pVal );
    VARIANT_BOOL GetUseDynamicPGPLogFile ( );
    void PutUseDynamicPGPLogFile (
        VARIANT_BOOL pVal );
    _bstr_t GetPGPLogFilePath ( );
    void PutPGPLogFilePath (
        _bstr_t pVal );
    ICIComplexPasswordSettingsPtr GetComplexPasswordSettings ( );
    HRESULT SetComplexPasswordSettings (
        struct ICIComplexPasswordSettings * pIComplexPasswordSettings );
    ICIResetPasswordSettingsPtr GetResetPasswordSettings ( );
    HRESULT SetResetPasswordSettings (
        struct ICIResetPasswordSettings * pIResetPasswordSettings );
    VARIANT_BOOL GetEnablePasswordHistory ( );
    void PutEnablePasswordHistory (
        VARIANT_BOOL pVal );
    long GetPasswordHistorySize ( );
    void PutPasswordHistorySize (
        long pVal );
    VARIANT_BOOL GetAllowUPVariables ( );
    void PutAllowUPVariables (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAllowEmailLoginCredentials ( );
    void PutAllowEmailLoginCredentials (
        VARIANT_BOOL pVal );
    EMailLoginCredentialsMode GetEMailLoginCredentialsMode ( );
    void PutEMailLoginCredentialsMode (
        EMailLoginCredentialsMode pVal );
    VARIANT_BOOL GetInactiveAccountsMonitoring ( );
    void PutInactiveAccountsMonitoring (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRemoveInactiveAccounts ( );
    void PutRemoveInactiveAccounts (
        VARIANT_BOOL pVal );
    long GetMaxInactivePeriod ( );
    void PutMaxInactivePeriod (
        long pVal );
    _bstr_t GetAS2Identifier ( );
    void PutAS2Identifier (
        _bstr_t pVal );
    _bstr_t GetAS2Certificate ( );
    void PutAS2Certificate (
        _bstr_t pVal );
    _bstr_t GetAS2PrivateKey ( );
    void PutAS2PrivateKey (
        _bstr_t pVal );
    _bstr_t GetAS2Passphrase ( );
    void PutAS2Passphrase (
        _bstr_t pVal );
    _bstr_t GetAS2AccountManagementPath ( );
    VARIANT_BOOL GetEnableAS2 ( );
    void PutEnableAS2 (
        VARIANT_BOOL pVal );
    VARIANT_BOOL UnlockUser (
        _bstr_t bstrUserName );
    ICIDMZGatewayPtr GetDMZGateway ( );
    VARIANT_BOOL GetDMZConnected ( );
    _bstr_t GetSFTPKeyFile ( );
    void PutSFTPKeyFile (
        _bstr_t pVal );
    _bstr_t GetSFTPKeyPassphrase ( );
    void PutSFTPKeyPassphrase (
        _bstr_t pVal );
    _bstr_t GetSFTPEncodingAlgorithms ( );
    void PutSFTPEncodingAlgorithms (
        _bstr_t pVal );
    _bstr_t GetSFTPMacAlgorithms ( );
    void PutSFTPMacAlgorithms (
        _bstr_t pVal );
    _bstr_t GetSFTPSoftwareVersion ( );
    void PutSFTPSoftwareVersion (
        _bstr_t pVal );
    _bstr_t GetSFTPIdentificationComment ( );
    void PutSFTPIdentificationComment (
        _bstr_t pVal );
    _bstr_t GetSFTPPublicKeyBlob ( );
    VARIANT_BOOL IsFolderVirtual (
        _bstr_t bstrFolderAlias );
    HRESULT EnableInheritPermissions (
        _bstr_t bstrFolder,
        VARIANT_BOOL bRemovePerm );
    HRESULT DisableInheritPermissions (
        _bstr_t bstrFolder,
        VARIANT_BOOL bRemovePerm );
    VARIANT_BOOL IsEncrypted (
        _bstr_t bstrFolder );
    HRESULT EncryptFolder (
        _bstr_t bstrFolder,
        VARIANT_BOOL vbResursively );
    HRESULT DecryptFolder (
        _bstr_t bstrFolder,
        VARIANT_BOOL vbResursively );
    HRESULT ResetSubFolders (
        _bstr_t bstrFolder );
    VARIANT_BOOL IsFolderInherited (
        _bstr_t bstrFolder );
    _variant_t GetAS2Transactions (
        VARIANT_BOOL vbShowSuccesses,
        VARIANT_BOOL vbShowFailures,
        VARIANT_BOOL vbShowInProgress,
        _bstr_t bstrMessageIDFilter,
        _bstr_t bstrFileNameFilter,
        long lLastDays );
    IDispatchPtr GetAMParams ( );
    HRESULT SetAMParams (
        IDispatch * newVal );
    HRESULT MoveIPAccessRule (
        long nRulePosFrom,
        long nRulePosTo );
    HRESULT UnbanIP (
        _bstr_t bstrMask );
    _variant_t GetConnectedUsers ( );
    _bstr_t GetRSAConfigurationPath ( );
    void PutRSAConfigurationPath (
        _bstr_t pVal );
    VARIANT_BOOL GetAllowFXP ( );
    HRESULT SetAllowFXP (
        VARIANT_BOOL newVal );
    VARIANT_BOOL GetAllowNoop ( );
    HRESULT SetAllowNoop (
        VARIANT_BOOL newVal );
    VARIANT_BOOL GetAllowCOMB ( );
    HRESULT SetAllowCOMB (
        VARIANT_BOOL newVal );
    VARIANT_BOOL GetAllowXCRC ( );
    HRESULT SetAllowXCRC (
        VARIANT_BOOL newVal );
    _bstr_t CreateComplexPasswordEx (
        const _variant_t & bstrUserName = vtMissing,
        const _variant_t & bstrSettingsLevel = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetConnectedCount (
        /*[out,retval]*/ long * prop ) = 0;
      virtual HRESULT __stdcall raw_Start ( ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall raw_GetAuthManagerID (
        /*[out,retval]*/ long * prop ) = 0;
      virtual HRESULT __stdcall raw_GetRootFolder (
        /*[out,retval]*/ BSTR * prop ) = 0;
      virtual HRESULT __stdcall raw_SetRootFolder (
        /*[in]*/ BSTR newVal,
        /*[out,retval]*/ VARIANT_BOOL * pNeedRestart ) = 0;
      virtual HRESULT __stdcall raw_GetIP (
        /*[out,retval]*/ long * prop ) = 0;
      virtual HRESULT __stdcall raw_SetIP (
        /*[in]*/ long newVal,
        /*[out,retval]*/ VARIANT_BOOL * pNeedRestart ) = 0;
      virtual HRESULT __stdcall raw_GetPort (
        /*[out,retval]*/ long * prop ) = 0;
      virtual HRESULT __stdcall raw_SetPort (
        /*[in]*/ long newVal,
        /*[out,retval]*/ VARIANT_BOOL * pNeedRestart ) = 0;
      virtual HRESULT __stdcall raw_GetFTPAccess (
        /*[out,retval]*/ VARIANT_BOOL * prop ) = 0;
      virtual HRESULT __stdcall raw_SetFTPAccess (
        /*[in]*/ VARIANT_BOOL newVal,
        /*[out,retval]*/ VARIANT_BOOL * pNeedRestart ) = 0;
      virtual HRESULT __stdcall raw_GetSSLAuth (
        /*[out,retval]*/ VARIANT_BOOL * prop ) = 0;
      virtual HRESULT __stdcall raw_GetSSLImp (
        /*[out,retval]*/ VARIANT_BOOL * prop ) = 0;
      virtual HRESULT __stdcall raw_SetSSLAuth (
        /*[in]*/ VARIANT_BOOL newVal,
        /*[out,retval]*/ VARIANT_BOOL * pNeedRestart ) = 0;
      virtual HRESULT __stdcall raw_SetSSLImp (
        /*[in]*/ VARIANT_BOOL newVal,
        /*[out,retval]*/ VARIANT_BOOL * pNeedRestart ) = 0;
      virtual HRESULT __stdcall raw_GetCheckClientCert (
        /*[out,retval]*/ VARIANT_BOOL * prop ) = 0;
      virtual HRESULT __stdcall raw_SetCheckClientCert (
        /*[in]*/ VARIANT_BOOL newVal,
        /*[out,retval]*/ VARIANT_BOOL * pNeedRestart ) = 0;
      virtual HRESULT __stdcall raw_GetCertFilePath (
        /*[out,retval]*/ BSTR * prop ) = 0;
      virtual HRESULT __stdcall raw_GetKeyFilePath (
        /*[out,retval]*/ BSTR * prop ) = 0;
      virtual HRESULT __stdcall raw_GetPassPhrase (
        /*[out,retval]*/ BSTR * prop ) = 0;
      virtual HRESULT __stdcall raw_GetTrustedCertsPath (
        /*[out,retval]*/ BSTR * prop ) = 0;
      virtual HRESULT __stdcall raw_GetAwaitingCertsPath (
        /*[out,retval]*/ BSTR * prop ) = 0;
      virtual HRESULT __stdcall raw_SetCertFilePath (
        /*[in]*/ BSTR newVal,
        /*[out,retval]*/ VARIANT_BOOL * pNeedRestart ) = 0;
      virtual HRESULT __stdcall raw_SetKeyFilePath (
        /*[in]*/ BSTR newVal,
        /*[out,retval]*/ VARIANT_BOOL * pNeedRestart ) = 0;
      virtual HRESULT __stdcall raw_SetPassPhrase (
        /*[in]*/ BSTR newVal,
        /*[out,retval]*/ VARIANT_BOOL * pNeedRestart ) = 0;
      virtual HRESULT __stdcall get_IsStarted (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetDownloadSpeed (
        /*[out,retval]*/ long * pSpeed ) = 0;
      virtual HRESULT __stdcall raw_GetUploadSpeed (
        /*[out,retval]*/ long * pSpeed ) = 0;
      virtual HRESULT __stdcall raw_GetDownloadCount (
        /*[out,retval]*/ long * pCnt ) = 0;
      virtual HRESULT __stdcall raw_GetUploadCount (
        /*[out,retval]*/ long * pCnt ) = 0;
      virtual HRESULT __stdcall raw_GetStartTime (
        /*[out,retval]*/ BSTR * bstrStartTime ) = 0;
      virtual HRESULT __stdcall raw_GetFolderList (
        /*[in]*/ BSTR bstrFolderAlias,
        /*[out,retval]*/ BSTR * prop ) = 0;
      virtual HRESULT __stdcall raw_GetFolderPermissions (
        /*[in]*/ BSTR bstrFolder,
        /*[out,retval]*/ VARIANT * aPermissions ) = 0;
      virtual HRESULT __stdcall raw_SetPermission (
        /*[in]*/ struct IPermission * pPermission,
        /*[in]*/ VARIANT_BOOL bRemoveOtherPermissions ) = 0;
      virtual HRESULT __stdcall raw_RemovePermission (
        /*[in]*/ BSTR bstrFolder,
        /*[in]*/ BSTR bstrClient ) = 0;
      virtual HRESULT __stdcall raw_GetBlankPermission (
        /*[in]*/ BSTR bstrFolder,
        /*[in]*/ BSTR bstrClient,
        /*[out,retval]*/ struct IPermission * * pPermission ) = 0;
      virtual HRESULT __stdcall raw_CreatePhysicalFolder (
        /*[in]*/ BSTR bstrNewFolder ) = 0;
      virtual HRESULT __stdcall raw_CreateVirtualFolder (
        /*[in]*/ BSTR bstrNewFolder,
        /*[in]*/ BSTR bstrTarget ) = 0;
      virtual HRESULT __stdcall raw_RemoveFolder (
        /*[in]*/ BSTR bstrFolder ) = 0;
      virtual HRESULT __stdcall raw_RenameFolder (
        /*[in]*/ BSTR bstrSrcFolder,
        /*[in]*/ BSTR bstrDstFolder ) = 0;
      virtual HRESULT __stdcall raw_CreatePermissionGroup (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall raw_GetPermissionGroups (
        /*[out,retval]*/ VARIANT * aGroups ) = 0;
      virtual HRESULT __stdcall raw_RemovePermissionGroup (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall raw_RenamePermissionGroup (
        /*[in]*/ BSTR bstrOldName,
        /*[in]*/ BSTR bstrNewName ) = 0;
      virtual HRESULT __stdcall raw_AddUserToPermissionGroup (
        /*[in]*/ BSTR bstrUser,
        /*[in]*/ BSTR bstrGroup ) = 0;
      virtual HRESULT __stdcall raw_RemoveUserFromPermissionGroup (
        /*[in]*/ BSTR bstrUser,
        /*[in]*/ BSTR bstrGroup ) = 0;
      virtual HRESULT __stdcall raw_CreateUser (
        /*[in]*/ BSTR bstrLogin,
        /*[in]*/ BSTR bstrPwd,
        /*[in]*/ int nPwdType,
        /*[in]*/ BSTR bstrDescription,
        /*[in]*/ SFTPAdvBool abTwoFactorAuthentication ) = 0;
      virtual HRESULT __stdcall raw_GetUsers (
        /*[out,retval]*/ VARIANT * aUsers ) = 0;
      virtual HRESULT __stdcall raw_RemoveUser (
        /*[in]*/ BSTR bstrLogin ) = 0;
      virtual HRESULT __stdcall raw_RenameUser (
        /*[in]*/ BSTR bstrOldName,
        /*[in]*/ BSTR bstrNewName ) = 0;
      virtual HRESULT __stdcall raw_GetSettingsLevels (
        /*[out,retval]*/ VARIANT * aLevels ) = 0;
      virtual HRESULT __stdcall raw_GetSettingsLevelUsers (
        /*[in]*/ BSTR bstrGroup,
        /*[out,retval]*/ VARIANT * aUsers ) = 0;
      virtual HRESULT __stdcall raw_CreateSettingsLevel (
        /*[in]*/ BSTR bstrName,
        /*[in]*/ BSTR bstrDescription ) = 0;
      virtual HRESULT __stdcall raw_RemoveSettingsLevel (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall raw_RenameSettingsLevel (
        /*[in]*/ BSTR bstrOldName,
        /*[in]*/ BSTR bstrNewName ) = 0;
      virtual HRESULT __stdcall raw_MoveUserToSettingsLevel (
        /*[in]*/ BSTR bstrUser,
        /*[in]*/ BSTR bstrGroup ) = 0;
      virtual HRESULT __stdcall raw_GetPermissionGroupsOfUser (
        /*[in]*/ BSTR bstrUser,
        /*[out,retval]*/ VARIANT * aGroups ) = 0;
      virtual HRESULT __stdcall raw_ChangeUserPassword (
        /*[in]*/ BSTR bstrUser,
        /*[in]*/ BSTR bstrPwd,
        /*[in]*/ int nPwdType ) = 0;
      virtual HRESULT __stdcall raw_GetSettingsLevelSettings (
        /*[in]*/ BSTR bstrGroup,
        /*[out,retval]*/ struct ICIClientSettings * * prop ) = 0;
      virtual HRESULT __stdcall raw_GetUserSettings (
        /*[in]*/ BSTR bstrUser,
        /*[out,retval]*/ struct ICIClientSettings * * prop ) = 0;
      virtual HRESULT __stdcall raw_Remove ( ) = 0;
      virtual HRESULT __stdcall raw_GetCommands (
        /*[out,retval]*/ VARIANT * aCommands ) = 0;
      virtual HRESULT __stdcall raw_GetCommandSettings (
        /*[in]*/ BSTR bstrCommand,
        /*[out,retval]*/ struct ICICommandSettings * * prop ) = 0;
      virtual HRESULT __stdcall raw_CreateCommand (
        /*[in]*/ BSTR bstrName,
        /*[out,retval]*/ struct ICICommandSettings * * prop ) = 0;
      virtual HRESULT __stdcall raw_RemoveCommand (
        /*[in]*/ BSTR bstrName ) = 0;
      virtual HRESULT __stdcall raw_GetTrustedCertificates (
        /*[out,retval]*/ VARIANT * aCerts ) = 0;
      virtual HRESULT __stdcall raw_GetTrustedCertificateInfo (
        /*[in]*/ long lID,
        /*[out,retval]*/ struct ICICertInfo * * prop ) = 0;
      virtual HRESULT __stdcall raw_GetPendingCertificates (
        /*[out,retval]*/ VARIANT * aCerts ) = 0;
      virtual HRESULT __stdcall raw_GetPendingCertificateInfo (
        /*[in]*/ long lID,
        /*[out,retval]*/ struct ICICertInfo * * prop ) = 0;
      virtual HRESULT __stdcall raw_ExportTrustedCertificate (
        /*[in]*/ long lID,
        /*[out,retval]*/ BSTR * bstrCertData ) = 0;
      virtual HRESULT __stdcall raw_ImportTrustedCertificate (
        /*[in]*/ BSTR bstrCertPath,
        /*[out,retval]*/ long * lID ) = 0;
      virtual HRESULT __stdcall raw_RemoveTrustedCertificate (
        /*[in]*/ long lID ) = 0;
      virtual HRESULT __stdcall raw_RemovePendingCertificate (
        /*[in]*/ long lID ) = 0;
      virtual HRESULT __stdcall raw_AddCertificateToTrusted (
        /*[in]*/ long lID,
        /*[out,retval]*/ long * lNewID ) = 0;
      virtual HRESULT __stdcall get_UserLimitMessage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UserLimitMessage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ExitMessage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ExitMessage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_VFSFilter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_VFSFilter (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BlockAntiTimeOut (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BlockAntiTimeOut (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BlockSiteToSite (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BlockSiteToSite (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AutoCreateHomeFolder (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoCreateHomeFolder (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AssignFullPermissionsForHomeFolder (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AssignFullPermissionsForHomeFolder (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EnablePortRange (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnablePortRange (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_HasMaxSpeed (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HasMaxSpeed (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_HasMaxUsers (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HasMaxUsers (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_HasMaxConnectionsPerAccount (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HasMaxConnectionsPerAccount (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_HasMaxIPPerAccount (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HasMaxIPPerAccount (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DisconnectOnDOS (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DisconnectOnDOS (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BanIPOnDOS (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BanIPOnDOS (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AutoBanIPsPermanently (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoBanIPsPermanently (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PASVListenIP (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PASVListenIP (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PASVPortMin (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PASVPortMin (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PASVPortMax (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PASVPortMax (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaxTransferSpeed (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTransferSpeed (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaxConcurrentConnections (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxConcurrentConnections (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaxConnectionsPerUser (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxConnectionsPerUser (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaxConnectionsFromSameIP (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxConnectionsFromSameIP (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_DOSLimit (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DOSLimit (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_GetIPAccessRules (
        /*[out,retval]*/ VARIANT * aMasks ) = 0;
      virtual HRESULT __stdcall raw_AddIPAccessRule (
        /*[in]*/ BSTR bstrMask,
        /*[in]*/ VARIANT_BOOL bAllow,
        /*[in]*/ long nRulePos ) = 0;
      virtual HRESULT __stdcall raw_RemoveIPAccessRule (
        /*[in]*/ long nRulePos ) = 0;
      virtual HRESULT __stdcall get_IPAccessAllowedDefault (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IPAccessAllowedDefault (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateUserEx (
        /*[in]*/ BSTR bstrLogin,
        /*[in]*/ BSTR bstrPwd,
        /*[in]*/ int nPwdType,
        /*[in]*/ BSTR bstrDescription,
        /*[in]*/ BSTR bstrFullName,
        /*[in]*/ VARIANT_BOOL bCreateHomeFolder,
        /*[in]*/ VARIANT_BOOL bFullPermissionsForHomeFolder,
        /*[in]*/ BSTR bstrSettingsLevel,
        /*[in]*/ SFTPAdvBool abTwoFactorAuthentication ) = 0;
      virtual HRESULT __stdcall raw_GetPermissionGroupList (
        /*[in]*/ BSTR bstrGroup,
        /*[out,retval]*/ VARIANT * aUsers ) = 0;
      virtual HRESULT __stdcall raw_ForceSynchronizeUserDatabase ( ) = 0;
      virtual HRESULT __stdcall get_ConnectMessage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ConnectMessage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HasMaxConcurrentLogins (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HasMaxConcurrentLogins (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MaxConcurrentLogins (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxConcurrentLogins (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_ValidatePassword (
        /*[in]*/ BSTR bstrUser,
        /*[in]*/ BSTR bstrPwd,
        /*[out,retval]*/ VARIANT_BOOL * bValid ) = 0;
      virtual HRESULT __stdcall raw_CancelTransfer (
        /*[in]*/ BSTR bstrPath,
        /*[out,retval]*/ VARIANT_BOOL * pSuccess ) = 0;
      virtual HRESULT __stdcall raw_GetSSHKeyFilePath (
        /*[out,retval]*/ BSTR * prop ) = 0;
      virtual HRESULT __stdcall raw_SetSSHKeyFilePath (
        /*[in]*/ BSTR newVal,
        /*[out,retval]*/ VARIANT_BOOL * pNeedRestart ) = 0;
      virtual HRESULT __stdcall get_ODBCSettings (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ODBCSettings (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_RemapVirtualFolder (
        /*[in]*/ BSTR bstrVFSFolder,
        /*[in]*/ BSTR bstrTarget ) = 0;
      virtual HRESULT __stdcall raw_AssignEventRuleCustomCommandWorkingFolder (
        /*[in]*/ BSTR bstrCustomCommandName,
        /*[in]*/ BSTR bstrWorkingFolder ) = 0;
      virtual HRESULT __stdcall raw_EFTGetConnectedUsers (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_KickUser (
        /*[in]*/ long nUserID,
        /*[out,retval]*/ VARIANT_BOOL * pSuccess ) = 0;
      virtual HRESULT __stdcall raw_CreateComplexPassword (
        /*[in]*/ VARIANT bstrUserName,
        /*[out,retval]*/ BSTR * bstrPassword ) = 0;
      virtual HRESULT __stdcall raw_GetHTTPAccess (
        /*[out,retval]*/ VARIANT_BOOL * prop ) = 0;
      virtual HRESULT __stdcall raw_SetHTTPAccess (
        /*[in]*/ VARIANT_BOOL newVal,
        /*[out,retval]*/ VARIANT_BOOL * pNeedRestart ) = 0;
      virtual HRESULT __stdcall raw_GetHTTPSAccess (
        /*[out,retval]*/ VARIANT_BOOL * prop ) = 0;
      virtual HRESULT __stdcall raw_SetHTTPSAccess (
        /*[in]*/ VARIANT_BOOL newVal,
        /*[out,retval]*/ VARIANT_BOOL * pNeedRestart ) = 0;
      virtual HRESULT __stdcall raw_GetHTTPPort (
        /*[out,retval]*/ long * prop ) = 0;
      virtual HRESULT __stdcall raw_SetHTTPPort (
        /*[in]*/ long newVal,
        /*[out,retval]*/ VARIANT_BOOL * pNeedRestart ) = 0;
      virtual HRESULT __stdcall raw_GetHTTPSPort (
        /*[out,retval]*/ long * prop ) = 0;
      virtual HRESULT __stdcall raw_SetHTTPSPort (
        /*[in]*/ long newVal,
        /*[out,retval]*/ VARIANT_BOOL * pNeedRestart ) = 0;
      virtual HRESULT __stdcall get_LimitLoginAttempts (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LimitLoginAttempts (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LockoutNotDisable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LockoutNotDisable (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MaxInvalidLoginAttempts (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxInvalidLoginAttempts (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LockoutPeriod (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_LockoutPeriod (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_InvalidAttemptsPeriod (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_InvalidAttemptsPeriod (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_EventRules (
        /*[in]*/ EventType type,
        /*[out,retval]*/ IDispatch * * ppdispRules ) = 0;
      virtual HRESULT __stdcall raw_GetPhysicalPath (
        /*[in]*/ BSTR bstrFolderAlias,
        /*[out,retval]*/ BSTR * pbstrPhysicalPath ) = 0;
      virtual HRESULT __stdcall raw_EnableSFTP (
        BSTR SFTPKeyFile,
        BSTR SFTPKeyPassword ) = 0;
      virtual HRESULT __stdcall raw_DisableSFTP ( ) = 0;
      virtual HRESULT __stdcall raw_SetSSLCertificate (
        /*[in]*/ BSTR bzCertFilePath,
        /*[in]*/ BSTR bzKeyFilePath,
        /*[in]*/ BSTR bzPassPhrase ) = 0;
      virtual HRESULT __stdcall get_AutobanSensitivity (
        /*[out,retval]*/ AutobanSensitivity * pVal ) = 0;
      virtual HRESULT __stdcall put_AutobanSensitivity (
        /*[in]*/ AutobanSensitivity pVal ) = 0;
      virtual HRESULT __stdcall get_AllowChangePassword (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AllowChangePassword (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ForcePasswordResetOnInitialLogin (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ForcePasswordResetOnInitialLogin (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_DoesUsernameExist (
        /*[in]*/ BSTR bstrUserName,
        /*[out,retval]*/ VARIANT_BOOL * bExist ) = 0;
      virtual HRESULT __stdcall get_TwoFactorAuthentication (
        /*[out,retval]*/ TwoFactorAuthenticationMode * pVal ) = 0;
      virtual HRESULT __stdcall put_TwoFactorAuthentication (
        /*[in]*/ TwoFactorAuthenticationMode pVal ) = 0;
      virtual HRESULT __stdcall get_RadiusServerName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RadiusServerName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RadiusServerPort (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RadiusServerPort (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RadiusNasIdentifier (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RadiusNasIdentifier (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RadiusSharedSecret (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RadiusSharedSecret (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RadiusConnectionRetriesCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RadiusConnectionRetriesCount (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RadiusTimeout (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RadiusTimeout (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LastModifiedTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_LastModifiedBy (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_AverageSpeed (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_UsersDefined (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_WTCSessionsActive (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_WTCSessionsRemaining (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_HTTPDomain (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HTTPDomain (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FTPSExplicitPort (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FTPSExplicitPort (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_FTPSImplicitPort (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FTPSImplicitPort (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SFTPPort (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SFTPPort (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_EnableWebServices (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableWebServices (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RedirectHTTPtoHTTPS (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RedirectHTTPtoHTTPS (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EnableAccountManagementOverHTTPS (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableAccountManagementOverHTTPS (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AccountManagementPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_RequireStrongPasswords (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RequireStrongPasswords (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DataSanitizationMethod (
        /*[out,retval]*/ DataSanitizationMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_DataSanitizationMethod (
        /*[in]*/ DataSanitizationMethod pVal ) = 0;
      virtual HRESULT __stdcall get_EnablePGPLogging (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnablePGPLogging (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PGPLogLevel (
        /*[out,retval]*/ PGPLogLevel * pVal ) = 0;
      virtual HRESULT __stdcall put_PGPLogLevel (
        /*[in]*/ PGPLogLevel pVal ) = 0;
      virtual HRESULT __stdcall get_UseDynamicPGPLogFile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseDynamicPGPLogFile (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PGPLogFilePath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PGPLogFilePath (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetComplexPasswordSettings (
        /*[out,retval]*/ struct ICIComplexPasswordSettings * * ppIComplexPasswordSettings ) = 0;
      virtual HRESULT __stdcall raw_SetComplexPasswordSettings (
        /*[in]*/ struct ICIComplexPasswordSettings * pIComplexPasswordSettings ) = 0;
      virtual HRESULT __stdcall raw_GetResetPasswordSettings (
        /*[out,retval]*/ struct ICIResetPasswordSettings * * ppIResetPasswordSettings ) = 0;
      virtual HRESULT __stdcall raw_SetResetPasswordSettings (
        /*[in]*/ struct ICIResetPasswordSettings * pIResetPasswordSettings ) = 0;
      virtual HRESULT __stdcall get_EnablePasswordHistory (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnablePasswordHistory (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PasswordHistorySize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PasswordHistorySize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AllowUPVariables (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AllowUPVariables (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AllowEmailLoginCredentials (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AllowEmailLoginCredentials (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EMailLoginCredentialsMode (
        /*[out,retval]*/ EMailLoginCredentialsMode * pVal ) = 0;
      virtual HRESULT __stdcall put_EMailLoginCredentialsMode (
        /*[in]*/ EMailLoginCredentialsMode pVal ) = 0;
      virtual HRESULT __stdcall get_InactiveAccountsMonitoring (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InactiveAccountsMonitoring (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RemoveInactiveAccounts (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RemoveInactiveAccounts (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MaxInactivePeriod (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxInactivePeriod (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AS2Identifier (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AS2Identifier (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AS2Certificate (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AS2Certificate (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AS2PrivateKey (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AS2PrivateKey (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AS2Passphrase (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AS2Passphrase (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AS2AccountManagementPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_EnableAS2 (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableAS2 (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_UnlockUser (
        /*[in]*/ BSTR bstrUserName,
        /*[out,retval]*/ VARIANT_BOOL * pSuccess ) = 0;
      virtual HRESULT __stdcall raw_GetDMZGateway (
        /*[out,retval]*/ struct ICIDMZGateway * * prop ) = 0;
      virtual HRESULT __stdcall get_DMZConnected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_SFTPKeyFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SFTPKeyFile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SFTPKeyPassphrase (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SFTPKeyPassphrase (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SFTPEncodingAlgorithms (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SFTPEncodingAlgorithms (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SFTPMacAlgorithms (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SFTPMacAlgorithms (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SFTPSoftwareVersion (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SFTPSoftwareVersion (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SFTPIdentificationComment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SFTPIdentificationComment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SFTPPublicKeyBlob (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsFolderVirtual (
        /*[in]*/ BSTR bstrFolderAlias,
        /*[out,retval]*/ VARIANT_BOOL * pbRes ) = 0;
      virtual HRESULT __stdcall raw_EnableInheritPermissions (
        /*[in]*/ BSTR bstrFolder,
        /*[in]*/ VARIANT_BOOL bRemovePerm ) = 0;
      virtual HRESULT __stdcall raw_DisableInheritPermissions (
        /*[in]*/ BSTR bstrFolder,
        /*[in]*/ VARIANT_BOOL bRemovePerm ) = 0;
      virtual HRESULT __stdcall raw_IsEncrypted (
        /*[in]*/ BSTR bstrFolder,
        /*[out,retval]*/ VARIANT_BOOL * pbResult ) = 0;
      virtual HRESULT __stdcall raw_EncryptFolder (
        /*[in]*/ BSTR bstrFolder,
        /*[in]*/ VARIANT_BOOL vbResursively ) = 0;
      virtual HRESULT __stdcall raw_DecryptFolder (
        /*[in]*/ BSTR bstrFolder,
        /*[in]*/ VARIANT_BOOL vbResursively ) = 0;
      virtual HRESULT __stdcall raw_ResetSubFolders (
        /*[in]*/ BSTR bstrFolder ) = 0;
      virtual HRESULT __stdcall raw_IsFolderInherited (
        /*[in]*/ BSTR bstrFolder,
        /*[out,retval]*/ VARIANT_BOOL * vbResult ) = 0;
      virtual HRESULT __stdcall raw_GetAS2Transactions (
        /*[in]*/ VARIANT_BOOL vbShowSuccesses,
        /*[in]*/ VARIANT_BOOL vbShowFailures,
        /*[in]*/ VARIANT_BOOL vbShowInProgress,
        /*[in]*/ BSTR bstrMessageIDFilter,
        /*[in]*/ BSTR bstrFileNameFilter,
        /*[in]*/ long lLastDays,
        /*[out,retval]*/ VARIANT * pTransInfo ) = 0;
      virtual HRESULT __stdcall raw_GetAMParams (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAMParams (
        /*[in]*/ IDispatch * newVal ) = 0;
      virtual HRESULT __stdcall raw_MoveIPAccessRule (
        /*[in]*/ long nRulePosFrom,
        /*[in]*/ long nRulePosTo ) = 0;
      virtual HRESULT __stdcall raw_UnbanIP (
        /*[in]*/ BSTR bstrMask ) = 0;
      virtual HRESULT __stdcall get_ConnectedUsers (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_RSAConfigurationPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RSAConfigurationPath (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAllowFXP (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAllowFXP (
        /*[in]*/ VARIANT_BOOL newVal ) = 0;
      virtual HRESULT __stdcall raw_GetAllowNoop (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAllowNoop (
        /*[in]*/ VARIANT_BOOL newVal ) = 0;
      virtual HRESULT __stdcall raw_GetAllowCOMB (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAllowCOMB (
        /*[in]*/ VARIANT_BOOL newVal ) = 0;
      virtual HRESULT __stdcall raw_GetAllowXCRC (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAllowXCRC (
        /*[in]*/ VARIANT_BOOL newVal ) = 0;
      virtual HRESULT __stdcall raw_CreateComplexPasswordEx (
        /*[in]*/ VARIANT bstrUserName,
        /*[in]*/ VARIANT bstrSettingsLevel,
        /*[out,retval]*/ BSTR * bstrPassword ) = 0;
};

struct __declspec(uuid("93e30fb4-41fd-4fa3-807b-9eb6a50779a1"))
ICISites : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    ICISitePtr Item (
        long nIndex );
    long Count ( );
    ICISitePtr SiteByID (
        long ID );
    ICISitePtr Add (
        _bstr_t bstrName,
        _bstr_t bstrRootFolder,
        int nAMID,
        _bstr_t bstrAMDB,
        VARIANT_BOOL bEncryptPasswords,
        int nIP,
        long nPort,
        VARIANT_BOOL bCreateHomeFolder,
        VARIANT_BOOL bPermHomeFolder,
        VARIANT_BOOL bAutoStart,
        VARIANT_BOOL bCreateFTPFolders );
    ICISitePtr AddNTLMSite (
        _bstr_t bstrName,
        _bstr_t bstrRootFolder,
        _bstr_t bstrDomainName,
        _bstr_t bstrAllowGroup,
        int nIP,
        long nPort,
        VARIANT_BOOL bCreateHomeFolder,
        VARIANT_BOOL bPermHomeFolder,
        VARIANT_BOOL bAutoStart,
        VARIANT_BOOL bCreateFTPFolders );
    ICISitePtr AddADSite (
        _bstr_t bstrName,
        _bstr_t bstrRootFolder,
        _bstr_t bstrDomainContext,
        _bstr_t bstrAllowGroup,
        int nIP,
        long nPort,
        VARIANT_BOOL bCreateHomeFolder,
        VARIANT_BOOL bPermHomeFolder,
        VARIANT_BOOL bAutoStart,
        VARIANT_BOOL bCreateFTPFolders );
    ICISitePtr AddODBCSite (
        _bstr_t bstrName,
        _bstr_t bstrRootFolder,
        _bstr_t bstrDSN,
        VARIANT_BOOL bEncryptPasswords,
        int nIP,
        long nPort,
        VARIANT_BOOL bCreateHomeFolder,
        VARIANT_BOOL bPermHomeFolder,
        VARIANT_BOOL bAutoStart,
        VARIANT_BOOL bCreateFTPFolders );
    ICISitePtr AddLocalSite (
        _bstr_t bstrName,
        _bstr_t bstrRootFolder,
        _bstr_t bstrFilePath,
        int nIP,
        long nPort,
        VARIANT_BOOL bCreateHomeFolder,
        VARIANT_BOOL bPermHomeFolder,
        VARIANT_BOOL bAutoStart,
        VARIANT_BOOL bCreateFTPFolders );
    ICISitePtr AddLDAPSite (
        _bstr_t bstrName,
        _bstr_t bstrRootFolder,
        _bstr_t bstrDomainContext,
        int nIP,
        long nPort,
        VARIANT_BOOL bCreateHomeFolder,
        VARIANT_BOOL bPermHomeFolder,
        VARIANT_BOOL bAutoStart,
        VARIANT_BOOL bCreateFTPFolders );
    ICISitePtr AddEx (
        _bstr_t bzName,
        _bstr_t bzRootFolder,
        IDispatch * pdispAuthManagerSettings,
        int lIP,
        long lPort,
        VARIANT_BOOL bCreateHomeFolder,
        VARIANT_BOOL bFullPermissionForHomeFolder,
        VARIANT_BOOL bAutoStart,
        VARIANT_BOOL bCreateFTPFolders );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long nIndex,
        /*[out,retval]*/ struct ICISite * * prop ) = 0;
      virtual HRESULT __stdcall raw_Count (
        /*[out,retval]*/ long * prop ) = 0;
      virtual HRESULT __stdcall raw_SiteByID (
        /*[in]*/ long ID,
        /*[out,retval]*/ struct ICISite * * prop ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR bstrName,
        /*[in]*/ BSTR bstrRootFolder,
        /*[in]*/ int nAMID,
        /*[in]*/ BSTR bstrAMDB,
        /*[in]*/ VARIANT_BOOL bEncryptPasswords,
        /*[in]*/ int nIP,
        /*[in]*/ long nPort,
        /*[in]*/ VARIANT_BOOL bCreateHomeFolder,
        /*[in]*/ VARIANT_BOOL bPermHomeFolder,
        /*[in]*/ VARIANT_BOOL bAutoStart,
        /*[in]*/ VARIANT_BOOL bCreateFTPFolders,
        /*[out,retval]*/ struct ICISite * * prop ) = 0;
      virtual HRESULT __stdcall raw_AddNTLMSite (
        /*[in]*/ BSTR bstrName,
        /*[in]*/ BSTR bstrRootFolder,
        /*[in]*/ BSTR bstrDomainName,
        /*[in]*/ BSTR bstrAllowGroup,
        /*[in]*/ int nIP,
        /*[in]*/ long nPort,
        /*[in]*/ VARIANT_BOOL bCreateHomeFolder,
        /*[in]*/ VARIANT_BOOL bPermHomeFolder,
        /*[in]*/ VARIANT_BOOL bAutoStart,
        /*[in]*/ VARIANT_BOOL bCreateFTPFolders,
        /*[out,retval]*/ struct ICISite * * prop ) = 0;
      virtual HRESULT __stdcall raw_AddADSite (
        /*[in]*/ BSTR bstrName,
        /*[in]*/ BSTR bstrRootFolder,
        /*[in]*/ BSTR bstrDomainContext,
        /*[in]*/ BSTR bstrAllowGroup,
        /*[in]*/ int nIP,
        long nPort,
        /*[in]*/ VARIANT_BOOL bCreateHomeFolder,
        /*[in]*/ VARIANT_BOOL bPermHomeFolder,
        /*[in]*/ VARIANT_BOOL bAutoStart,
        /*[in]*/ VARIANT_BOOL bCreateFTPFolders,
        /*[out,retval]*/ struct ICISite * * prop ) = 0;
      virtual HRESULT __stdcall raw_AddODBCSite (
        /*[in]*/ BSTR bstrName,
        /*[in]*/ BSTR bstrRootFolder,
        /*[in]*/ BSTR bstrDSN,
        /*[in]*/ VARIANT_BOOL bEncryptPasswords,
        /*[in]*/ int nIP,
        /*[in]*/ long nPort,
        /*[in]*/ VARIANT_BOOL bCreateHomeFolder,
        /*[in]*/ VARIANT_BOOL bPermHomeFolder,
        /*[in]*/ VARIANT_BOOL bAutoStart,
        /*[in]*/ VARIANT_BOOL bCreateFTPFolders,
        /*[out,retval]*/ struct ICISite * * prop ) = 0;
      virtual HRESULT __stdcall raw_AddLocalSite (
        /*[in]*/ BSTR bstrName,
        /*[in]*/ BSTR bstrRootFolder,
        /*[in]*/ BSTR bstrFilePath,
        /*[in]*/ int nIP,
        /*[in]*/ long nPort,
        /*[in]*/ VARIANT_BOOL bCreateHomeFolder,
        /*[in]*/ VARIANT_BOOL bPermHomeFolder,
        /*[in]*/ VARIANT_BOOL bAutoStart,
        /*[in]*/ VARIANT_BOOL bCreateFTPFolders,
        /*[out,retval]*/ struct ICISite * * prop ) = 0;
      virtual HRESULT __stdcall raw_AddLDAPSite (
        /*[in]*/ BSTR bstrName,
        /*[in]*/ BSTR bstrRootFolder,
        /*[in]*/ BSTR bstrDomainContext,
        /*[in]*/ int nIP,
        long nPort,
        /*[in]*/ VARIANT_BOOL bCreateHomeFolder,
        /*[in]*/ VARIANT_BOOL bPermHomeFolder,
        /*[in]*/ VARIANT_BOOL bAutoStart,
        /*[in]*/ VARIANT_BOOL bCreateFTPFolders,
        /*[out,retval]*/ struct ICISite * * prop ) = 0;
      virtual HRESULT __stdcall raw_AddEx (
        /*[in]*/ BSTR bzName,
        /*[in]*/ BSTR bzRootFolder,
        /*[in]*/ IDispatch * pdispAuthManagerSettings,
        /*[in]*/ int lIP,
        /*[in]*/ long lPort,
        /*[in]*/ VARIANT_BOOL bCreateHomeFolder,
        /*[in]*/ VARIANT_BOOL bFullPermissionForHomeFolder,
        /*[in]*/ VARIANT_BOOL bAutoStart,
        /*[in]*/ VARIANT_BOOL bCreateFTPFolders,
        /*[out,retval]*/ struct ICISite * * pNewSite ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0004
{
    EFTAccount = 0,
    LocalComputerAccount = 1,
    ADAccount = 2
};

struct __declspec(uuid("af5973bf-eed9-4941-8671-625c062b8975"))
ICIAudit : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AuditSATTransaction (
        _bstr_t From,
        _bstr_t Subject,
        _bstr_t Body,
        _bstr_t TempUserName,
        _bstr_t TempPassword,
        _bstr_t SiteName,
        long ExpireDays,
        _bstr_t TransGUID,
        _bstr_t Reserved1,
        _bstr_t Reserved2 );
    HRESULT AuditSATEmail (
        _bstr_t Email,
        long EmailType,
        _bstr_t TransGUID );
    HRESULT AuditSATFile (
        _bstr_t FileName,
        __int64 FileSize,
        _bstr_t TransGUID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AuditSATTransaction (
        /*[in]*/ BSTR From,
        /*[in]*/ BSTR Subject,
        /*[in]*/ BSTR Body,
        /*[in]*/ BSTR TempUserName,
        /*[in]*/ BSTR TempPassword,
        /*[in]*/ BSTR SiteName,
        /*[in]*/ long ExpireDays,
        /*[in]*/ BSTR TransGUID,
        /*[in]*/ BSTR Reserved1,
        /*[in]*/ BSTR Reserved2 ) = 0;
      virtual HRESULT __stdcall raw_AuditSATEmail (
        /*[in]*/ BSTR Email,
        /*[in]*/ long EmailType,
        /*[in]*/ BSTR TransGUID ) = 0;
      virtual HRESULT __stdcall raw_AuditSATFile (
        /*[in]*/ BSTR FileName,
        /*[in]*/ __int64 FileSize,
        /*[in]*/ BSTR TransGUID ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0001
{
    EFTServer = 0,
    SSHModule = 1,
    HTTPModule = 2,
    WTCModule = 3,
    ARModule = 4,
    PGPModule = 5,
    HSModule = 6,
    AS2Module = 7,
    AWModule = 8,
    DMZGWModule = 9
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0002
{
    Registered = 0,
    Evaluation = 1,
    Expired = 2
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0003
{
    EFTLogin = 0,
    IWALogin = 1,
    NetLogon = 2
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0007
{
    LogModeStandatd = 0,
    LogModeVerbose = 1
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0009
{
    Oracle = 0,
    SQLServer = 1
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0008
{
    WindowsAuthentication = 0,
    SQLServerAuthentication = 1
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0010
{
    PGPKeyType_DSS = 0,
    PGPKeyType_RSA = 1,
    PGPKeyType_RSALegacy = 2
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0011
{
    PGPKeyCipher_IDEA = 0,
    PGPKeyCipher_3DES = 1,
    PGPKeyCipher_CAST5 = 2,
    PGPKeyCipher_AES128 = 3,
    PGPKeyCipher_AES192 = 4,
    PGPKeyCipher_AES256 = 5,
    PGPKeyCipher_TWOFISH = 6
};

struct __declspec(uuid("2518c8c6-d5b8-44bb-bdc4-1513da9ad8bc"))
ICIServer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIPAccessAllowedDefault,put=PutIPAccessAllowedDefault))
    VARIANT_BOOL IPAccessAllowedDefault;
    __declspec(property(get=GetLogPath,put=PutLogPath))
    _bstr_t LogPath;
    __declspec(property(get=GetCertificateFilePath,put=PutCertificateFilePath))
    _bstr_t CertificateFilePath;
    __declspec(property(get=GetKeyFilePath,put=PutKeyFilePath))
    _bstr_t KeyFilePath;
    __declspec(property(get=GetPassPhrase,put=PutPassPhrase))
    _bstr_t PassPhrase;
    __declspec(property(get=GetLogType,put=PutLogType))
    int LogType;
    __declspec(property(get=GetLogRotation,put=PutLogRotation))
    int LogRotation;
    __declspec(property(get=GetAdminPort,put=PutAdminPort))
    long AdminPort;
    __declspec(property(get=GetListenIP,put=PutListenIP))
    long ListenIP;
    __declspec(property(get=GetAllowRemoteAdministration,put=PutAllowRemoteAdministration))
    VARIANT_BOOL AllowRemoteAdministration;
    __declspec(property(get=GetUseSSLForAdministration,put=PutUseSSLForAdministration))
    VARIANT_BOOL UseSSLForAdministration;
    __declspec(property(get=GetSMTPServer,put=PutSMTPServer))
    _bstr_t SMTPServer;
    __declspec(property(get=GetSMTPPort,put=PutSMTPPort))
    long SMTPPort;
    __declspec(property(get=GetSMTPLogin,put=PutSMTPLogin))
    _bstr_t SMTPLogin;
    __declspec(property(get=GetSMTPPassword,put=PutSMTPPassword))
    _bstr_t SMTPPassword;
    __declspec(property(get=GetSMTPSenderName,put=PutSMTPSenderName))
    _bstr_t SMTPSenderName;
    __declspec(property(get=GetSMTPSenderAddr,put=PutSMTPSenderAddr))
    _bstr_t SMTPSenderAddr;
    __declspec(property(get=GetSMTPRecipientName,put=PutSMTPRecipientName))
    _bstr_t SMTPRecipientName;
    __declspec(property(get=GetSMTPRecipientAddr,put=PutSMTPRecipientAddr))
    _bstr_t SMTPRecipientAddr;
    __declspec(property(get=GetConnectedUsersNumber))
    long ConnectedUsersNumber;
    __declspec(property(get=GetEnableARM,put=PutEnableARM))
    VARIANT_BOOL EnableARM;
    __declspec(property(get=GetARMServerName,put=PutARMServerName))
    _bstr_t ARMServerName;
    __declspec(property(get=GetARMDatabaseName,put=PutARMDatabaseName))
    _bstr_t ARMDatabaseName;
    __declspec(property(get=GetARMUserName,put=PutARMUserName))
    _bstr_t ARMUserName;
    __declspec(property(get=GetARMPassword,put=PutARMPassword))
    _bstr_t ARMPassword;
    __declspec(property(get=GetSSLVersionMask,put=PutSSLVersionMask))
    int SSLVersionMask;
    __declspec(property(get=GetAllowClearCommandChannel,put=PutAllowClearCommandChannel))
    VARIANT_BOOL AllowClearCommandChannel;
    __declspec(property(get=GetAllowUnprotectedDataChannel,put=PutAllowUnprotectedDataChannel))
    VARIANT_BOOL AllowUnprotectedDataChannel;
    __declspec(property(get=GetCipherList,put=PutCipherList))
    _bstr_t CipherList;
    __declspec(property(get=GetAvailableReports))
    _variant_t AvailableReports;
    __declspec(property(get=GetAvailablePGPKeys))
    _variant_t AvailablePGPKeys;
    __declspec(property(get=GetAvailableEvents))
    _variant_t AvailableEvents;
    __declspec(property(get=GetAvailableSSHKeys))
    _variant_t AvailableSSHKeys;
    __declspec(property(get=GetIsStarted))
    VARIANT_BOOL IsStarted;
    __declspec(property(get=GetStartTime))
    DATE StartTime;
    __declspec(property(get=GetUptime))
    unsigned long Uptime;
    __declspec(property(get=GetLastModifiedTime))
    DATE LastModifiedTime;
    __declspec(property(get=GetLastModifiedBy))
    _bstr_t LastModifiedBy;
    __declspec(property(get=GetActiveUploads))
    long ActiveUploads;
    __declspec(property(get=GetActiveDownloads))
    long ActiveDownloads;
    __declspec(property(get=GetAverageSpeed))
    long AverageSpeed;
    __declspec(property(get=GetConfigurationFilePath,put=PutConfigurationFilePath))
    _bstr_t ConfigurationFilePath;
    __declspec(property(get=GetUseUTCInListings,put=PutUseUTCInListings))
    VARIANT_BOOL UseUTCInListings;
    __declspec(property(get=GetDefaultPollTimeout,put=PutDefaultPollTimeout))
    long DefaultPollTimeout;
    __declspec(property(get=GetLogMode,put=PutLogMode))
    LogMode _LogMode;
    __declspec(property(get=GetARMDatabaseType,put=PutARMDatabaseType))
    ARMDatabaseType _ARMDatabaseType;
    __declspec(property(get=GetARMAuthenticationType,put=PutARMAuthenticationType))
    ARMAuthenticationType _ARMAuthenticationType;
    __declspec(property(get=GetARMStopAuditingOnError,put=PutARMStopAuditingOnError))
    VARIANT_BOOL ARMStopAuditingOnError;
    __declspec(property(get=GetARMFailureAuditFolder,put=PutARMFailureAuditFolder))
    _bstr_t ARMFailureAuditFolder;
    __declspec(property(get=GetARMFailureEmailList,put=PutARMFailureEmailList))
    _bstr_t ARMFailureEmailList;
    __declspec(property(get=GetSMTPUseAuthentication,put=PutSMTPUseAuthentication))
    VARIANT_BOOL SMTPUseAuthentication;
    __declspec(property(get=GetSMTPAddressBook,put=PutSMTPAddressBook))
    _bstr_t SMTPAddressBook;
    __declspec(property(get=GetSSLFIPSEnabled,put=PutSSLFIPSEnabled))
    VARIANT_BOOL SSLFIPSEnabled;
    __declspec(property(get=GetSSHFIPSEnabled,put=PutSSHFIPSEnabled))
    VARIANT_BOOL SSHFIPSEnabled;
    __declspec(property(get=GetAdminAccounts))
    _variant_t AdminAccounts;
    __declspec(property(get=GetAutoSave,put=PutAutoSave))
    VARIANT_BOOL AutoSave;
    __declspec(property(get=GetRequireStrongPasswords,put=PutRequireStrongPasswords))
    VARIANT_BOOL RequireStrongPasswords;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Connect (
        _bstr_t Host,
        long nPort,
        _bstr_t Login,
        _bstr_t Password );
    HRESULT Close ( );
    ICISitesPtr Sites ( );
    _bstr_t GetLocalIP (
        long nIP );
    _bstr_t GetLocalTime ( );
    VARIANT_BOOL GetIPAccessAllowedDefault ( );
    void PutIPAccessAllowedDefault (
        VARIANT_BOOL pVal );
    _bstr_t GetLogPath ( );
    void PutLogPath (
        _bstr_t pVal );
    _bstr_t GetCertificateFilePath ( );
    void PutCertificateFilePath (
        _bstr_t pVal );
    _bstr_t GetKeyFilePath ( );
    void PutKeyFilePath (
        _bstr_t pVal );
    _bstr_t GetPassPhrase ( );
    void PutPassPhrase (
        _bstr_t pVal );
    int GetLogType ( );
    void PutLogType (
        int pVal );
    int GetLogRotation ( );
    void PutLogRotation (
        int pVal );
    long GetAdminPort ( );
    void PutAdminPort (
        long pVal );
    long GetListenIP ( );
    void PutListenIP (
        long pVal );
    VARIANT_BOOL GetAllowRemoteAdministration ( );
    void PutAllowRemoteAdministration (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseSSLForAdministration ( );
    void PutUseSSLForAdministration (
        VARIANT_BOOL pVal );
    _bstr_t GetSMTPServer ( );
    void PutSMTPServer (
        _bstr_t pVal );
    long GetSMTPPort ( );
    void PutSMTPPort (
        long pVal );
    _bstr_t GetSMTPLogin ( );
    void PutSMTPLogin (
        _bstr_t pVal );
    _bstr_t GetSMTPPassword ( );
    void PutSMTPPassword (
        _bstr_t pVal );
    _bstr_t GetSMTPSenderName ( );
    void PutSMTPSenderName (
        _bstr_t pVal );
    _bstr_t GetSMTPSenderAddr ( );
    void PutSMTPSenderAddr (
        _bstr_t pVal );
    _bstr_t GetSMTPRecipientName ( );
    void PutSMTPRecipientName (
        _bstr_t pVal );
    _bstr_t GetSMTPRecipientAddr ( );
    void PutSMTPRecipientAddr (
        _bstr_t pVal );
    _variant_t GetIPAccessRules ( );
    HRESULT AddIPAccessRule (
        _bstr_t bstrMask,
        VARIANT_BOOL bAllow,
        long nRulePos );
    HRESULT RemoveIPAccessRule (
        long nRulePos );
    HRESULT SetSSLCertificate (
        _bstr_t bzCertFilePath,
        _bstr_t bzKeyFilePath,
        _bstr_t bzPassPhrase );
    HRESULT ApplyChanges ( );
    VARIANT_BOOL GetEnableARM ( );
    void PutEnableARM (
        VARIANT_BOOL pVal );
    _bstr_t GetARMServerName ( );
    void PutARMServerName (
        _bstr_t pVal );
    _bstr_t GetARMDatabaseName ( );
    void PutARMDatabaseName (
        _bstr_t pVal );
    _bstr_t GetARMUserName ( );
    void PutARMUserName (
        _bstr_t pVal );
    _bstr_t GetARMPassword ( );
    void PutARMPassword (
        _bstr_t pVal );
    HRESULT RefreshSettings ( );
    _variant_t GetAdminIPs ( );
    long GetServerAdminCount ( );
    HRESULT RemoveServerAdminAccount (
        _bstr_t bstrAdminUser,
        AdminAccountType accountType );
    HRESULT ChangeAdminPassword (
        _bstr_t bstrAdminUser,
        _bstr_t bstrNewPassword );
    long GetConnectedUsersNumber ( );
    int GetSSLVersionMask ( );
    void PutSSLVersionMask (
        int pVal );
    VARIANT_BOOL GetAllowClearCommandChannel ( );
    void PutAllowClearCommandChannel (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAllowUnprotectedDataChannel ( );
    void PutAllowUnprotectedDataChannel (
        VARIANT_BOOL pVal );
    _bstr_t GetCipherList ( );
    void PutCipherList (
        _bstr_t pVal );
    ICIAuditPtr Auditor ( );
    RegistrationState ModuleRegistrationState (
        ServerModule m );
    _variant_t GetAvailableReports ( );
    _variant_t GetAvailablePGPKeys ( );
    HRESULT GenerateReport (
        IDispatch * pdispReportParams,
        _bstr_t bzReportPath );
    _variant_t GetAvailableEvents ( );
    _variant_t GetAvailableSSHKeys ( );
    long ImportSSHKey (
        _bstr_t bstrKeyPath );
    HRESULT RemoveSSHKey (
        long lID );
    HRESULT ConnectEx (
        _bstr_t Host,
        long nPort,
        AdminLoginType nLoginType,
        _bstr_t Login,
        _bstr_t Password );
    VARIANT_BOOL StartServerService (
        _bstr_t bstrHost );
    VARIANT_BOOL StopServerService (
        _bstr_t bstrHost );
    VARIANT_BOOL IsServerServiceStarted (
        _bstr_t bstrHost );
    HRESULT BackupServerConfiguration (
        _bstr_t bstrFilePath );
    HRESULT RestoreServerConfiguration (
        _bstr_t bstrFilePath,
        AdminLoginType nLoginType,
        _bstr_t bstrLogin,
        _bstr_t bstrPassword );
    HRESULT Stop ( );
    HRESULT Start ( );
    VARIANT_BOOL GetIsStarted ( );
    DATE GetStartTime ( );
    unsigned long GetUptime ( );
    DATE GetLastModifiedTime ( );
    _bstr_t GetLastModifiedBy ( );
    long GetActiveUploads ( );
    long GetActiveDownloads ( );
    long GetAverageSpeed ( );
    _bstr_t GetConfigurationFilePath ( );
    void PutConfigurationFilePath (
        _bstr_t pVal );
    VARIANT_BOOL GetUseUTCInListings ( );
    void PutUseUTCInListings (
        VARIANT_BOOL pVal );
    long GetDefaultPollTimeout ( );
    void PutDefaultPollTimeout (
        long pVal );
    HRESULT RenameSSHKey (
        long lID,
        _bstr_t bstrNewName );
    LogMode GetLogMode ( );
    void PutLogMode (
        LogMode pVal );
    ARMDatabaseType GetARMDatabaseType ( );
    void PutARMDatabaseType (
        ARMDatabaseType pVal );
    ARMAuthenticationType GetARMAuthenticationType ( );
    void PutARMAuthenticationType (
        ARMAuthenticationType pVal );
    VARIANT_BOOL GetARMStopAuditingOnError ( );
    void PutARMStopAuditingOnError (
        VARIANT_BOOL pVal );
    _bstr_t GetARMFailureAuditFolder ( );
    void PutARMFailureAuditFolder (
        _bstr_t pVal );
    _bstr_t GetARMFailureEmailList ( );
    void PutARMFailureEmailList (
        _bstr_t pVal );
    VARIANT_BOOL GetSMTPUseAuthentication ( );
    void PutSMTPUseAuthentication (
        VARIANT_BOOL pVal );
    _bstr_t GetSMTPAddressBook ( );
    void PutSMTPAddressBook (
        _bstr_t pVal );
    VARIANT_BOOL GetSSLFIPSEnabled ( );
    void PutSSLFIPSEnabled (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSSHFIPSEnabled ( );
    void PutSSHFIPSEnabled (
        VARIANT_BOOL pVal );
    _bstr_t CreatePGPKey (
        _bstr_t bstrFullName,
        _bstr_t bstrEmailAddress,
        DATE dtExpirationDate,
        PGPKeyType nKeyType,
        PGPKeyCipher nKeyCipher,
        long lKeySize,
        _bstr_t bstrPassphrase );
    HRESULT RemovePGPKey (
        _bstr_t bstrKeyId );
    _bstr_t ImportPGPKey (
        _bstr_t bstrKeyPath );
    HRESULT ExportPGPKey (
        _bstr_t bstrKeyId,
        VARIANT_BOOL vbIncludePrivate,
        _bstr_t bstrFileName );
    HRESULT GetPGPKeyringSettings (
        VARIANT * pPublicPath,
        VARIANT * pPrivatePath );
    HRESULT SetPGPKeyringSettings (
        _bstr_t newPublicKeyring,
        _bstr_t newPrivateKeyring );
    VARIANT_BOOL ARMTestConnection ( );
    VARIANT_BOOL ARMReconnect ( );
    IDispatchPtr CreateAdmin (
        _bstr_t bstrNewAdmin,
        _bstr_t bstrPassword,
        AdminAccountType atype,
        VARIANT_BOOL vbGroup );
    HRESULT CreateSSHKey (
        long nKeyBits,
        _bstr_t bstrPassword,
        _bstr_t bstrPrivateKeyFile,
        _bstr_t bstrPublicKeyFile,
        VARIANT_BOOL vbComFormat,
        long nSiteId,
        _bstr_t bstrCopyTo );
    HRESULT CreateSSLCertificate (
        _bstr_t bstrKeyfile,
        _bstr_t bstrReqfile,
        _bstr_t bstrcertfile,
        _bstr_t bstrPassword,
        _bstr_t bstrCountryName,
        _bstr_t bstrStateOrProvinceName,
        _bstr_t bstrLocalityName,
        _bstr_t bstrOrganizationName,
        _bstr_t bstrOrganizationalUnitName,
        _bstr_t bstrCommonName,
        _bstr_t bstrEmailAddress,
        long nBits,
        long nDays,
        CertificateFormat CertFormat,
        CertificateFormat PrivateKeyFormat,
        long nSiteId,
        VARIANT_BOOL vbUseCert,
        VARIANT_BOOL vbMakeTrusted );
    HRESULT SignSSLCertificate (
        _bstr_t bstrRequest,
        _bstr_t bstrServCert,
        _bstr_t bstrPrivateKey,
        _bstr_t bstrPass,
        _bstr_t bstrOutCert,
        long nDays );
    _variant_t GetAdminAccounts ( );
    VARIANT_BOOL GetAutoSave ( );
    void PutAutoSave (
        VARIANT_BOOL pVal );
    HRESULT MoveIPAccessRule (
        long nRulePosFrom,
        long nRulePosTo );
    HRESULT UnbanIP (
        _bstr_t bstrMask );
    VARIANT_BOOL GetRequireStrongPasswords ( );
    void PutRequireStrongPasswords (
        VARIANT_BOOL pVal );
    IDispatchPtr GetComplexPasswordSettings ( );
    HRESULT SetComplexPasswordSettings (
        IDispatch * pIComplexPasswordSettings );
    IDispatchPtr GetBackupArchiveInfo (
        _bstr_t bstrFilePath,
        AdminLoginType nLoginType,
        _bstr_t bstrLogin,
        _bstr_t bstrPassword );
    HRESULT RestoreServerConfigurationEx (
        IDispatch * pVal );
    HRESULT ExportSSHKey (
        long lKeyID,
        _bstr_t bzKeyFilePath );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Connect (
        BSTR Host,
        long nPort,
        BSTR Login,
        BSTR Password ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_Sites (
        /*[out,retval]*/ struct ICISites * * prop ) = 0;
      virtual HRESULT __stdcall raw_GetLocalIP (
        /*[in]*/ long nIP,
        /*[out,retval]*/ BSTR * prop ) = 0;
      virtual HRESULT __stdcall raw_GetLocalTime (
        /*[out,retval]*/ BSTR * pTime ) = 0;
      virtual HRESULT __stdcall get_IPAccessAllowedDefault (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IPAccessAllowedDefault (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LogPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LogPath (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CertificateFilePath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CertificateFilePath (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_KeyFilePath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_KeyFilePath (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PassPhrase (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PassPhrase (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LogType (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_LogType (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall get_LogRotation (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_LogRotation (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall get_AdminPort (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_AdminPort (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ListenIP (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ListenIP (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AllowRemoteAdministration (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AllowRemoteAdministration (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseSSLForAdministration (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseSSLForAdministration (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SMTPServer (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SMTPServer (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SMTPPort (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SMTPPort (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SMTPLogin (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SMTPLogin (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SMTPPassword (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SMTPPassword (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SMTPSenderName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SMTPSenderName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SMTPSenderAddr (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SMTPSenderAddr (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SMTPRecipientName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SMTPRecipientName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SMTPRecipientAddr (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SMTPRecipientAddr (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetIPAccessRules (
        /*[out,retval]*/ VARIANT * aMasks ) = 0;
      virtual HRESULT __stdcall raw_AddIPAccessRule (
        /*[in]*/ BSTR bstrMask,
        /*[in]*/ VARIANT_BOOL bAllow,
        /*[in]*/ long nRulePos ) = 0;
      virtual HRESULT __stdcall raw_RemoveIPAccessRule (
        /*[in]*/ long nRulePos ) = 0;
      virtual HRESULT __stdcall raw_SetSSLCertificate (
        /*[in]*/ BSTR bzCertFilePath,
        /*[in]*/ BSTR bzKeyFilePath,
        /*[in]*/ BSTR bzPassPhrase ) = 0;
      virtual HRESULT __stdcall raw_ApplyChanges ( ) = 0;
      virtual HRESULT __stdcall get_EnableARM (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableARM (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ARMServerName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ARMServerName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ARMDatabaseName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ARMDatabaseName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ARMUserName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ARMUserName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ARMPassword (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ARMPassword (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_RefreshSettings ( ) = 0;
      virtual HRESULT __stdcall raw_GetAdminIPs (
        /*[out,retval]*/ VARIANT * pVar ) = 0;
      virtual HRESULT __stdcall raw_GetServerAdminCount (
        /*[out,retval]*/ long * lCount ) = 0;
      virtual HRESULT __stdcall raw_RemoveServerAdminAccount (
        /*[in]*/ BSTR bstrAdminUser,
        /*[in]*/ AdminAccountType accountType ) = 0;
      virtual HRESULT __stdcall raw_ChangeAdminPassword (
        /*[in]*/ BSTR bstrAdminUser,
        /*[in]*/ BSTR bstrNewPassword ) = 0;
      virtual HRESULT __stdcall get_ConnectedUsersNumber (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_SSLVersionMask (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_SSLVersionMask (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall get_AllowClearCommandChannel (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AllowClearCommandChannel (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AllowUnprotectedDataChannel (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AllowUnprotectedDataChannel (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CipherList (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CipherList (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_Auditor (
        /*[out,retval]*/ struct ICIAudit * * ppAuditor ) = 0;
      virtual HRESULT __stdcall raw_ModuleRegistrationState (
        /*[in]*/ ServerModule m,
        /*[out,retval]*/ RegistrationState * pRS ) = 0;
      virtual HRESULT __stdcall get_AvailableReports (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_AvailablePGPKeys (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_GenerateReport (
        /*[in]*/ IDispatch * pdispReportParams,
        /*[in]*/ BSTR bzReportPath ) = 0;
      virtual HRESULT __stdcall get_AvailableEvents (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableSSHKeys (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_ImportSSHKey (
        /*[in]*/ BSTR bstrKeyPath,
        /*[out,retval]*/ long * plID ) = 0;
      virtual HRESULT __stdcall raw_RemoveSSHKey (
        /*[in]*/ long lID ) = 0;
      virtual HRESULT __stdcall raw_ConnectEx (
        BSTR Host,
        long nPort,
        AdminLoginType nLoginType,
        BSTR Login,
        BSTR Password ) = 0;
      virtual HRESULT __stdcall raw_StartServerService (
        /*[in]*/ BSTR bstrHost,
        /*[out,retval]*/ VARIANT_BOOL * pvResult ) = 0;
      virtual HRESULT __stdcall raw_StopServerService (
        /*[in]*/ BSTR bstrHost,
        /*[out,retval]*/ VARIANT_BOOL * pvResult ) = 0;
      virtual HRESULT __stdcall raw_IsServerServiceStarted (
        /*[in]*/ BSTR bstrHost,
        /*[out,retval]*/ VARIANT_BOOL * pvResult ) = 0;
      virtual HRESULT __stdcall raw_BackupServerConfiguration (
        /*[in]*/ BSTR bstrFilePath ) = 0;
      virtual HRESULT __stdcall raw_RestoreServerConfiguration (
        /*[in]*/ BSTR bstrFilePath,
        /*[in]*/ AdminLoginType nLoginType,
        /*[in]*/ BSTR bstrLogin,
        /*[in]*/ BSTR bstrPassword ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall raw_Start ( ) = 0;
      virtual HRESULT __stdcall get_IsStarted (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_Uptime (
        /*[out,retval]*/ unsigned long * pVal ) = 0;
      virtual HRESULT __stdcall get_LastModifiedTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_LastModifiedBy (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ActiveUploads (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ActiveDownloads (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_AverageSpeed (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ConfigurationFilePath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ConfigurationFilePath (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UseUTCInListings (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseUTCInListings (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DefaultPollTimeout (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DefaultPollTimeout (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_RenameSSHKey (
        /*[in]*/ long lID,
        /*[in]*/ BSTR bstrNewName ) = 0;
      virtual HRESULT __stdcall get_LogMode (
        /*[out,retval]*/ LogMode * pVal ) = 0;
      virtual HRESULT __stdcall put_LogMode (
        /*[in]*/ LogMode pVal ) = 0;
      virtual HRESULT __stdcall get_ARMDatabaseType (
        /*[out,retval]*/ ARMDatabaseType * pVal ) = 0;
      virtual HRESULT __stdcall put_ARMDatabaseType (
        /*[in]*/ ARMDatabaseType pVal ) = 0;
      virtual HRESULT __stdcall get_ARMAuthenticationType (
        /*[out,retval]*/ ARMAuthenticationType * pVal ) = 0;
      virtual HRESULT __stdcall put_ARMAuthenticationType (
        /*[in]*/ ARMAuthenticationType pVal ) = 0;
      virtual HRESULT __stdcall get_ARMStopAuditingOnError (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ARMStopAuditingOnError (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ARMFailureAuditFolder (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ARMFailureAuditFolder (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ARMFailureEmailList (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ARMFailureEmailList (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SMTPUseAuthentication (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SMTPUseAuthentication (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SMTPAddressBook (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SMTPAddressBook (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SSLFIPSEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SSLFIPSEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SSHFIPSEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SSHFIPSEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_CreatePGPKey (
        /*[in]*/ BSTR bstrFullName,
        /*[in]*/ BSTR bstrEmailAddress,
        /*[in]*/ DATE dtExpirationDate,
        /*[in]*/ PGPKeyType nKeyType,
        /*[in]*/ PGPKeyCipher nKeyCipher,
        /*[in]*/ long lKeySize,
        /*[in]*/ BSTR bstrPassphrase,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_RemovePGPKey (
        /*[in]*/ BSTR bstrKeyId ) = 0;
      virtual HRESULT __stdcall raw_ImportPGPKey (
        /*[in]*/ BSTR bstrKeyPath,
        /*[out,retval]*/ BSTR * pNewKeyID ) = 0;
      virtual HRESULT __stdcall raw_ExportPGPKey (
        /*[in]*/ BSTR bstrKeyId,
        /*[in]*/ VARIANT_BOOL vbIncludePrivate,
        /*[in]*/ BSTR bstrFileName ) = 0;
      virtual HRESULT __stdcall raw_GetPGPKeyringSettings (
        /*[out]*/ VARIANT * pPublicPath,
        /*[out]*/ VARIANT * pPrivatePath ) = 0;
      virtual HRESULT __stdcall raw_SetPGPKeyringSettings (
        /*[in]*/ BSTR newPublicKeyring,
        /*[in]*/ BSTR newPrivateKeyring ) = 0;
      virtual HRESULT __stdcall raw_ARMTestConnection (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ARMReconnect (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateAdmin (
        /*[in]*/ BSTR bstrNewAdmin,
        /*[in]*/ BSTR bstrPassword,
        /*[in]*/ AdminAccountType atype,
        /*[in]*/ VARIANT_BOOL vbGroup,
        /*[out,retval]*/ IDispatch * * pAdminAccount ) = 0;
      virtual HRESULT __stdcall raw_CreateSSHKey (
        /*[in]*/ long nKeyBits,
        /*[in]*/ BSTR bstrPassword,
        /*[in]*/ BSTR bstrPrivateKeyFile,
        /*[in]*/ BSTR bstrPublicKeyFile,
        /*[in]*/ VARIANT_BOOL vbComFormat,
        /*[in]*/ long nSiteId,
        /*[in]*/ BSTR bstrCopyTo ) = 0;
      virtual HRESULT __stdcall raw_CreateSSLCertificate (
        /*[in]*/ BSTR bstrKeyfile,
        /*[in]*/ BSTR bstrReqfile,
        /*[in]*/ BSTR bstrcertfile,
        /*[in]*/ BSTR bstrPassword,
        /*[in]*/ BSTR bstrCountryName,
        /*[in]*/ BSTR bstrStateOrProvinceName,
        /*[in]*/ BSTR bstrLocalityName,
        /*[in]*/ BSTR bstrOrganizationName,
        /*[in]*/ BSTR bstrOrganizationalUnitName,
        /*[in]*/ BSTR bstrCommonName,
        /*[in]*/ BSTR bstrEmailAddress,
        /*[in]*/ long nBits,
        /*[in]*/ long nDays,
        /*[in]*/ CertificateFormat CertFormat,
        /*[in]*/ CertificateFormat PrivateKeyFormat,
        /*[in]*/ long nSiteId,
        /*[in]*/ VARIANT_BOOL vbUseCert,
        /*[in]*/ VARIANT_BOOL vbMakeTrusted ) = 0;
      virtual HRESULT __stdcall raw_SignSSLCertificate (
        /*[in]*/ BSTR bstrRequest,
        /*[in]*/ BSTR bstrServCert,
        /*[in]*/ BSTR bstrPrivateKey,
        /*[in]*/ BSTR bstrPass,
        /*[in]*/ BSTR bstrOutCert,
        /*[in]*/ long nDays ) = 0;
      virtual HRESULT __stdcall get_AdminAccounts (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_AutoSave (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoSave (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_MoveIPAccessRule (
        /*[in]*/ long nRulePosFrom,
        /*[in]*/ long nRulePosTo ) = 0;
      virtual HRESULT __stdcall raw_UnbanIP (
        /*[in]*/ BSTR bstrMask ) = 0;
      virtual HRESULT __stdcall get_RequireStrongPasswords (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RequireStrongPasswords (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_GetComplexPasswordSettings (
        /*[out,retval]*/ IDispatch * * ppIComplexPasswordSettings ) = 0;
      virtual HRESULT __stdcall raw_SetComplexPasswordSettings (
        /*[in]*/ IDispatch * pIComplexPasswordSettings ) = 0;
      virtual HRESULT __stdcall raw_GetBackupArchiveInfo (
        /*[in]*/ BSTR bstrFilePath,
        /*[in]*/ AdminLoginType nLoginType,
        /*[in]*/ BSTR bstrLogin,
        /*[in]*/ BSTR bstrPassword,
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall raw_RestoreServerConfigurationEx (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall raw_ExportSSHKey (
        /*[in]*/ long lKeyID,
        /*[in]*/ BSTR bzKeyFilePath ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0006
{
    PEM = 0,
    DER = 1,
    PKCS7 = 2,
    PKCS12 = 3
};

struct __declspec(uuid("697747aa-4e48-4eba-94a6-28bc88d47a4f"))
CISites;
    // [ default ] interface ICISites

struct __declspec(uuid("44f772dd-d902-415d-bf46-46cd2d854f21"))
CISite;
    // [ default ] interface ICISite

struct __declspec(uuid("e0fc19d1-ba9c-4eec-b6d7-9ed3ec8455f0"))
Permission;
    // [ default ] interface IPermission

struct __declspec(uuid("08e790aa-19b0-4c2b-acb9-02a3eb289f97"))
CIClientSettings;
    // [ default ] interface ICIClientSettings

struct __declspec(uuid("e9ab87e4-4d6d-41d1-9519-09945ac384e9"))
CICommandSettings;
    // [ default ] interface ICICommandSettings

struct __declspec(uuid("d759f292-ec74-42bd-9a82-22a4e07969dd"))
CICertInfo;
    // [ default ] interface ICICertInfo

struct __declspec(uuid("84d1bed2-d563-4832-a0be-51d073999948"))
CIPgpActionParams;
    // [ default ] interface ICIPgpActionParams

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0001
{
    Encrypt = 0,
    EncryptAndSign = 1,
    Sign = 2,
    SDA = 3,
    Decrypt = 4,
    DecryptAndVerify = 5,
    VerifyOnly = 6
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0002
{
    NoCompression = 0,
    CompressionLevel1 = 1,
    CompressionLevel2 = 2,
    CompressionLevel3 = 3,
    CompressionLevel4 = 4,
    CompressionLevel5 = 5,
    CompressionLevel6 = 6,
    CompressionLevel7 = 7,
    CompressionLevel8 = 8,
    CompressionLevel9 = 9
};

struct __declspec(uuid("88cd614d-5467-460c-9885-cd6c5064a325"))
ICIPgpActionParams : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPassPhrase,put=PutPassPhrase))
    _bstr_t PassPhrase;
    __declspec(property(get=GetFilePath,put=PutFilePath))
    _bstr_t FilePath;
    __declspec(property(get=GetSignKeyID,put=PutSignKeyID))
    _bstr_t SignKeyID;
    __declspec(property(get=GetKeyIDs,put=PutKeyIDs))
    _variant_t KeyIDs;
    __declspec(property(get=GetOperation,put=PutOperation))
    PGPOperation Operation;
    __declspec(property(get=GetASCIIArmoredOutput,put=PutASCIIArmoredOutput))
    VARIANT_BOOL ASCIIArmoredOutput;
    __declspec(property(get=GetCompressionLevel,put=PutCompressionLevel))
    PGPCompressionLevel CompressionLevel;
    __declspec(property(get=GetSignatureInSeparateFile,put=PutSignatureInSeparateFile))
    VARIANT_BOOL SignatureInSeparateFile;
    __declspec(property(get=GetSigningHash,put=PutSigningHash))
    PGPSigningHash SigningHash;
    __declspec(property(get=GetSDAPassword,put=PutSDAPassword))
    _bstr_t SDAPassword;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPassPhrase ( );
    void PutPassPhrase (
        _bstr_t pVal );
    _bstr_t GetFilePath ( );
    void PutFilePath (
        _bstr_t pVal );
    _bstr_t GetSignKeyID ( );
    void PutSignKeyID (
        _bstr_t pVal );
    _variant_t GetKeyIDs ( );
    void PutKeyIDs (
        const _variant_t & pVal );
    PGPOperation GetOperation ( );
    void PutOperation (
        PGPOperation pVal );
    VARIANT_BOOL GetASCIIArmoredOutput ( );
    void PutASCIIArmoredOutput (
        VARIANT_BOOL pVal );
    PGPCompressionLevel GetCompressionLevel ( );
    void PutCompressionLevel (
        PGPCompressionLevel pVal );
    VARIANT_BOOL GetSignatureInSeparateFile ( );
    void PutSignatureInSeparateFile (
        VARIANT_BOOL pVal );
    PGPSigningHash GetSigningHash ( );
    void PutSigningHash (
        PGPSigningHash pVal );
    _bstr_t GetSDAPassword ( );
    void PutSDAPassword (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PassPhrase (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PassPhrase (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FilePath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FilePath (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SignKeyID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SignKeyID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_KeyIDs (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_KeyIDs (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Operation (
        /*[out,retval]*/ PGPOperation * pVal ) = 0;
      virtual HRESULT __stdcall put_Operation (
        /*[in]*/ PGPOperation pVal ) = 0;
      virtual HRESULT __stdcall get_ASCIIArmoredOutput (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ASCIIArmoredOutput (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CompressionLevel (
        /*[out,retval]*/ PGPCompressionLevel * pVal ) = 0;
      virtual HRESULT __stdcall put_CompressionLevel (
        /*[in]*/ PGPCompressionLevel pVal ) = 0;
      virtual HRESULT __stdcall get_SignatureInSeparateFile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SignatureInSeparateFile (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SigningHash (
        /*[out,retval]*/ PGPSigningHash * pVal ) = 0;
      virtual HRESULT __stdcall put_SigningHash (
        /*[in]*/ PGPSigningHash pVal ) = 0;
      virtual HRESULT __stdcall get_SDAPassword (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SDAPassword (
        /*[in]*/ BSTR pVal ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0003
{
    MD5Hash = 0,
    SHA1Hash = 1,
    RIPEMD160Hash = 2,
    SHA256Hash = 3,
    SHA384Hash = 4,
    SHA512Hash = 5
};

struct __declspec(uuid("74a78aea-bf81-4828-9ea1-fc0b9ab4af16"))
CIMailActionParams;
    // [ default ] interface ICIMailActionParams

struct __declspec(uuid("7cee64b2-4c60-4fe0-8ddb-aaf31e59e24a"))
ICIMailActionParams : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTOAddresses,put=PutTOAddresses))
    _bstr_t TOAddresses;
    __declspec(property(get=GetCCAddresses,put=PutCCAddresses))
    _bstr_t CCAddresses;
    __declspec(property(get=GetBCCAddresses,put=PutBCCAddresses))
    _bstr_t BCCAddresses;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetBody,put=PutBody))
    _bstr_t Body;
    __declspec(property(get=GetCopyToClient,put=PutCopyToClient))
    VARIANT_BOOL CopyToClient;
    __declspec(property(get=GetUseCustomFromAddress,put=PutUseCustomFromAddress))
    VARIANT_BOOL UseCustomFromAddress;
    __declspec(property(get=GetCustomFromAddress,put=PutCustomFromAddress))
    _bstr_t CustomFromAddress;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTOAddresses ( );
    void PutTOAddresses (
        _bstr_t pVal );
    _bstr_t GetCCAddresses ( );
    void PutCCAddresses (
        _bstr_t pVal );
    _bstr_t GetBCCAddresses ( );
    void PutBCCAddresses (
        _bstr_t pVal );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t pVal );
    _bstr_t GetBody ( );
    void PutBody (
        _bstr_t pVal );
    VARIANT_BOOL GetCopyToClient ( );
    void PutCopyToClient (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseCustomFromAddress ( );
    void PutUseCustomFromAddress (
        VARIANT_BOOL pVal );
    _bstr_t GetCustomFromAddress ( );
    void PutCustomFromAddress (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TOAddresses (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TOAddresses (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CCAddresses (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CCAddresses (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BCCAddresses (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BCCAddresses (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Subject (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Body (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CopyToClient (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CopyToClient (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseCustomFromAddress (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseCustomFromAddress (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CustomFromAddress (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CustomFromAddress (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("5bf98c02-7474-4a39-8016-b926bb4ba9da"))
CIUploadActionParams;
    // [ default ] interface ICIUploadActionParams

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0006
{
    ProtocolLocal = -1,
    ProtocolFTP = 0,
    ProtocolFTPS = 1,
    ProtocolFTPSExpl = 2,
    ProtocolSFTP = 3,
    ProtocolHTTP = 4,
    ProtocolHTTPS = 5,
    ProtocolFTPSAuthTLS = 8
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0011_0001
{
    FTPMode_PORT = 0,
    FTPMode_PASV = 1,
    FTPMode_Auto = 2
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0011_0002
{
    ProxyTypeFTP = 1,
    ProxyTypeHTTP = 2,
    ProxyTypeDMZ = 3
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0011_0003
{
    ProxyAuthUserAtSite = 0,
    ProxyAuthSite = 1,
    ProxyAuthUserWithLogon = 2,
    ProxyAuthUserPassAcct = 3,
    ProxyAuthOpenSite = 4,
    ProxyAuthCustom = 5
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0011_0004
{
    SOCKSNone = -1,
    SOCKS4 = 0,
    SOCKS5 = 1
};

struct __declspec(uuid("43c12faf-8c8f-4b1a-934c-8ebae708b83c"))
ICITransferActionParams : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLocalPath,put=PutLocalPath))
    _bstr_t LocalPath;
    __declspec(property(get=GetProtocol,put=PutProtocol))
    NetworkProtocol Protocol;
    __declspec(property(get=GetAutoLogin,put=PutAutoLogin))
    VARIANT_BOOL AutoLogin;
    __declspec(property(get=GetUser,put=PutUser))
    _bstr_t User;
    __declspec(property(get=GetPassword,put=PutPassword))
    _bstr_t Password;
    __declspec(property(get=GetPrivateKeyPath,put=PutPrivateKeyPath))
    _bstr_t PrivateKeyPath;
    __declspec(property(get=GetPrivateKeyPassword,put=PutPrivateKeyPassword))
    _bstr_t PrivateKeyPassword;
    __declspec(property(get=GetPublicKeyPath,put=PutPublicKeyPath))
    _bstr_t PublicKeyPath;
    __declspec(property(get=GetHost,put=PutHost))
    _bstr_t Host;
    __declspec(property(get=GetPort,put=PutPort))
    long Port;
    __declspec(property(get=GetRemotePath,put=PutRemotePath))
    _bstr_t RemotePath;
    __declspec(property(get=GetDeleteSourceFile,put=PutDeleteSourceFile))
    VARIANT_BOOL DeleteSourceFile;
    __declspec(property(get=GetMaxConcurrentThreads,put=PutMaxConcurrentThreads))
    long MaxConcurrentThreads;
    __declspec(property(get=GetConnectionTimeoutSeconds,put=PutConnectionTimeoutSeconds))
    long ConnectionTimeoutSeconds;
    __declspec(property(get=GetConnectionRetryAttempts,put=PutConnectionRetryAttempts))
    long ConnectionRetryAttempts;
    __declspec(property(get=GetRetryDelaySeconds,put=PutRetryDelaySeconds))
    long RetryDelaySeconds;
    __declspec(property(get=GetValidateIntegrity,put=PutValidateIntegrity))
    VARIANT_BOOL ValidateIntegrity;
    __declspec(property(get=GetFTPDataConnectionMode,put=PutFTPDataConnectionMode))
    FTPDataConnectionMode _FTPDataConnectionMode;
    __declspec(property(get=GetFTPDataConnectionPortMin,put=PutFTPDataConnectionPortMin))
    long FTPDataConnectionPortMin;
    __declspec(property(get=GetFTPDataConnectionPortMax,put=PutFTPDataConnectionPortMax))
    long FTPDataConnectionPortMax;
    __declspec(property(get=GetFTPSClearCommandChannel,put=PutFTPSClearCommandChannel))
    VARIANT_BOOL FTPSClearCommandChannel;
    __declspec(property(get=GetFTPSClearDataChannel,put=PutFTPSClearDataChannel))
    VARIANT_BOOL FTPSClearDataChannel;
    __declspec(property(get=GetTextFileTypes,put=PutTextFileTypes))
    _bstr_t TextFileTypes;
    __declspec(property(get=GetPreserveFileTime,put=PutPreserveFileTime))
    VARIANT_BOOL PreserveFileTime;
    __declspec(property(get=GetUseProxy,put=PutUseProxy))
    VARIANT_BOOL UseProxy;
    __declspec(property(get=GetProxyType,put=PutProxyType))
    ProxyType _ProxyType;
    __declspec(property(get=GetProxyHostName,put=PutProxyHostName))
    _bstr_t ProxyHostName;
    __declspec(property(get=GetProxyPort,put=PutProxyPort))
    long ProxyPort;
    __declspec(property(get=GetProxyUserName,put=PutProxyUserName))
    _bstr_t ProxyUserName;
    __declspec(property(get=GetProxyPassword,put=PutProxyPassword))
    _bstr_t ProxyPassword;
    __declspec(property(get=GetProxyAdvAuthenticationType,put=PutProxyAdvAuthenticationType))
    ProxyAuthenticationType ProxyAdvAuthenticationType;
    __declspec(property(get=GetProxyAdvSeparator,put=PutProxyAdvSeparator))
    _bstr_t ProxyAdvSeparator;
    __declspec(property(get=GetProxyAdvCustomCmds,put=PutProxyAdvCustomCmds))
    _bstr_t ProxyAdvCustomCmds;
    __declspec(property(get=GetUseSOCKS,put=PutUseSOCKS))
    VARIANT_BOOL UseSOCKS;
    __declspec(property(get=GetSOCKSType,put=PutSOCKSType))
    SOCKSType _SOCKSType;
    __declspec(property(get=GetSOCKSHostName,put=PutSOCKSHostName))
    _bstr_t SOCKSHostName;
    __declspec(property(get=GetSOCKSPort,put=PutSOCKSPort))
    long SOCKSPort;
    __declspec(property(get=GetSOCKSUseAuthentication,put=PutSOCKSUseAuthentication))
    VARIANT_BOOL SOCKSUseAuthentication;
    __declspec(property(get=GetSOCKSUserName,put=PutSOCKSUserName))
    _bstr_t SOCKSUserName;
    __declspec(property(get=GetSOCKSPassword,put=PutSOCKSPassword))
    _bstr_t SOCKSPassword;
    __declspec(property(get=GetOverwriteType,put=PutOverwriteType))
    TransferOverwriteType OverwriteType;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLocalPath ( );
    void PutLocalPath (
        _bstr_t pVal );
    NetworkProtocol GetProtocol ( );
    void PutProtocol (
        NetworkProtocol pVal );
    VARIANT_BOOL GetAutoLogin ( );
    void PutAutoLogin (
        VARIANT_BOOL pVal );
    _bstr_t GetUser ( );
    void PutUser (
        _bstr_t pVal );
    _bstr_t GetPassword ( );
    void PutPassword (
        _bstr_t pVal );
    _bstr_t GetPrivateKeyPath ( );
    void PutPrivateKeyPath (
        _bstr_t pVal );
    _bstr_t GetPrivateKeyPassword ( );
    void PutPrivateKeyPassword (
        _bstr_t pVal );
    _bstr_t GetPublicKeyPath ( );
    void PutPublicKeyPath (
        _bstr_t pVal );
    _bstr_t GetHost ( );
    void PutHost (
        _bstr_t pVal );
    long GetPort ( );
    void PutPort (
        long pVal );
    _bstr_t GetRemotePath ( );
    void PutRemotePath (
        _bstr_t pVal );
    VARIANT_BOOL GetDeleteSourceFile ( );
    void PutDeleteSourceFile (
        VARIANT_BOOL pVal );
    long GetMaxConcurrentThreads ( );
    void PutMaxConcurrentThreads (
        long pVal );
    long GetConnectionTimeoutSeconds ( );
    void PutConnectionTimeoutSeconds (
        long pVal );
    long GetConnectionRetryAttempts ( );
    void PutConnectionRetryAttempts (
        long pVal );
    long GetRetryDelaySeconds ( );
    void PutRetryDelaySeconds (
        long pVal );
    VARIANT_BOOL GetValidateIntegrity ( );
    void PutValidateIntegrity (
        VARIANT_BOOL pVal );
    FTPDataConnectionMode GetFTPDataConnectionMode ( );
    void PutFTPDataConnectionMode (
        FTPDataConnectionMode pVal );
    long GetFTPDataConnectionPortMin ( );
    void PutFTPDataConnectionPortMin (
        long pVal );
    long GetFTPDataConnectionPortMax ( );
    void PutFTPDataConnectionPortMax (
        long pVal );
    VARIANT_BOOL GetFTPSClearCommandChannel ( );
    void PutFTPSClearCommandChannel (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetFTPSClearDataChannel ( );
    void PutFTPSClearDataChannel (
        VARIANT_BOOL pVal );
    _bstr_t GetTextFileTypes ( );
    void PutTextFileTypes (
        _bstr_t pVal );
    VARIANT_BOOL GetPreserveFileTime ( );
    void PutPreserveFileTime (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseProxy ( );
    void PutUseProxy (
        VARIANT_BOOL pVal );
    ProxyType GetProxyType ( );
    void PutProxyType (
        ProxyType pVal );
    _bstr_t GetProxyHostName ( );
    void PutProxyHostName (
        _bstr_t pVal );
    long GetProxyPort ( );
    void PutProxyPort (
        long pVal );
    _bstr_t GetProxyUserName ( );
    void PutProxyUserName (
        _bstr_t pVal );
    _bstr_t GetProxyPassword ( );
    void PutProxyPassword (
        _bstr_t pVal );
    ProxyAuthenticationType GetProxyAdvAuthenticationType ( );
    void PutProxyAdvAuthenticationType (
        ProxyAuthenticationType pVal );
    _bstr_t GetProxyAdvSeparator ( );
    void PutProxyAdvSeparator (
        _bstr_t pVal );
    _bstr_t GetProxyAdvCustomCmds ( );
    void PutProxyAdvCustomCmds (
        _bstr_t pVal );
    VARIANT_BOOL GetUseSOCKS ( );
    void PutUseSOCKS (
        VARIANT_BOOL pVal );
    SOCKSType GetSOCKSType ( );
    void PutSOCKSType (
        SOCKSType pVal );
    _bstr_t GetSOCKSHostName ( );
    void PutSOCKSHostName (
        _bstr_t pVal );
    long GetSOCKSPort ( );
    void PutSOCKSPort (
        long pVal );
    VARIANT_BOOL GetSOCKSUseAuthentication ( );
    void PutSOCKSUseAuthentication (
        VARIANT_BOOL pVal );
    _bstr_t GetSOCKSUserName ( );
    void PutSOCKSUserName (
        _bstr_t pVal );
    _bstr_t GetSOCKSPassword ( );
    void PutSOCKSPassword (
        _bstr_t pVal );
    TransferOverwriteType GetOverwriteType ( );
    void PutOverwriteType (
        TransferOverwriteType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LocalPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LocalPath (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Protocol (
        /*[out,retval]*/ NetworkProtocol * pVal ) = 0;
      virtual HRESULT __stdcall put_Protocol (
        /*[in]*/ NetworkProtocol pVal ) = 0;
      virtual HRESULT __stdcall get_AutoLogin (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoLogin (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_User (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_User (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Password (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Password (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PrivateKeyPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PrivateKeyPath (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PrivateKeyPassword (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PrivateKeyPassword (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PublicKeyPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PublicKeyPath (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Host (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Host (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Port (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Port (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RemotePath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RemotePath (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DeleteSourceFile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DeleteSourceFile (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MaxConcurrentThreads (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxConcurrentThreads (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectionTimeoutSeconds (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ConnectionTimeoutSeconds (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectionRetryAttempts (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ConnectionRetryAttempts (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RetryDelaySeconds (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RetryDelaySeconds (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ValidateIntegrity (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ValidateIntegrity (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FTPDataConnectionMode (
        /*[out,retval]*/ FTPDataConnectionMode * pVal ) = 0;
      virtual HRESULT __stdcall put_FTPDataConnectionMode (
        /*[in]*/ FTPDataConnectionMode pVal ) = 0;
      virtual HRESULT __stdcall get_FTPDataConnectionPortMin (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FTPDataConnectionPortMin (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_FTPDataConnectionPortMax (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FTPDataConnectionPortMax (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_FTPSClearCommandChannel (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FTPSClearCommandChannel (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FTPSClearDataChannel (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FTPSClearDataChannel (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TextFileTypes (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextFileTypes (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PreserveFileTime (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PreserveFileTime (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseProxy (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseProxy (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ProxyType (
        /*[out,retval]*/ ProxyType * pVal ) = 0;
      virtual HRESULT __stdcall put_ProxyType (
        /*[in]*/ ProxyType pVal ) = 0;
      virtual HRESULT __stdcall get_ProxyHostName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ProxyHostName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ProxyPort (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ProxyPort (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ProxyUserName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ProxyUserName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ProxyPassword (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ProxyPassword (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ProxyAdvAuthenticationType (
        /*[out,retval]*/ ProxyAuthenticationType * pVal ) = 0;
      virtual HRESULT __stdcall put_ProxyAdvAuthenticationType (
        /*[in]*/ ProxyAuthenticationType pVal ) = 0;
      virtual HRESULT __stdcall get_ProxyAdvSeparator (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ProxyAdvSeparator (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ProxyAdvCustomCmds (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ProxyAdvCustomCmds (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UseSOCKS (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseSOCKS (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SOCKSType (
        /*[out,retval]*/ SOCKSType * pVal ) = 0;
      virtual HRESULT __stdcall put_SOCKSType (
        /*[in]*/ SOCKSType pVal ) = 0;
      virtual HRESULT __stdcall get_SOCKSHostName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SOCKSHostName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SOCKSPort (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SOCKSPort (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SOCKSUseAuthentication (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SOCKSUseAuthentication (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SOCKSUserName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SOCKSUserName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SOCKSPassword (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SOCKSPassword (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OverwriteType (
        /*[out,retval]*/ TransferOverwriteType * pVal ) = 0;
      virtual HRESULT __stdcall put_OverwriteType (
        /*[in]*/ TransferOverwriteType pVal ) = 0;
};

struct __declspec(uuid("0f141c5f-7bab-4fea-bd22-d91170304ed3"))
ICIUploadActionParams : ICITransferActionParams
{};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0011_0005
{
    TransferOTOverwrite = 0,
    TransferOTSkip = 1,
    TransferOTSmart = 2,
    TransferOTNumerate = 3
};

struct __declspec(uuid("8387fd94-0b5d-4fe8-91b6-a424136dcb7c"))
CIDownloadActionParams;
    // [ default ] interface ICIDownloadActionParams

struct __declspec(uuid("1a5d0780-694f-4bed-a2ec-5ce9c58d2876"))
ICIDownloadActionParams : ICITransferActionParams
{};

struct __declspec(uuid("64071595-81f4-4c40-b504-9b70e7facef9"))
CICleanupActionParams;
    // [ default ] interface ICICleanupActionParams

struct __declspec(uuid("c4b3c609-9488-41a5-b895-def37000fe06"))
ICICleanupActionParams : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFolder,put=PutFolder))
    _bstr_t Folder;
    __declspec(property(get=GetRecursive,put=PutRecursive))
    VARIANT_BOOL Recursive;
    __declspec(property(get=GetFileMask,put=PutFileMask))
    _bstr_t FileMask;
    __declspec(property(get=GetExcludeFileMask,put=PutExcludeFileMask))
    VARIANT_BOOL ExcludeFileMask;
    __declspec(property(get=GetDaysToKeepFiles,put=PutDaysToKeepFiles))
    long DaysToKeepFiles;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFolder ( );
    void PutFolder (
        _bstr_t pVal );
    VARIANT_BOOL GetRecursive ( );
    void PutRecursive (
        VARIANT_BOOL pVal );
    _bstr_t GetFileMask ( );
    void PutFileMask (
        _bstr_t pVal );
    VARIANT_BOOL GetExcludeFileMask ( );
    void PutExcludeFileMask (
        VARIANT_BOOL pVal );
    long GetDaysToKeepFiles ( );
    void PutDaysToKeepFiles (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Folder (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Folder (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Recursive (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Recursive (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FileMask (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FileMask (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ExcludeFileMask (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ExcludeFileMask (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DaysToKeepFiles (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DaysToKeepFiles (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("057fe367-cb87-4e5f-b30e-17554ed4ab37"))
CIReportActionParams;
    // [ default ] interface ICIReportActionParams

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0017
{
    Predefined = 0,
    Range = 1
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0018
{
    AllDates = 0,
    MonthToDate = 1,
    QuarterToDate = 2,
    YearToDate = 3,
    CurrentWeek = 4,
    CurrentMonth = 5,
    CurrentQuarter = 6,
    CurrentYear = 7,
    LastWeek = 8,
    LastMonth = 9,
    LastQuarter = 10,
    LastYear = 11,
    Last30Days = 12,
    Last12Months = 13,
    Today = 14,
    Yesterday = 15,
    Last24Hours = 16
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0019
{
    HTMLFormat = 0,
    PDFFormat = 1,
    VPFormat = 2
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0020
{
    NoFilter = -1,
    EqualFilter = 0,
    NotEqualFilter = 1,
    LessFilter = 2,
    LessOrEqualFilter = 3,
    GreaterFilter = 4,
    GreaterOrEqualFilter = 5,
    ContainsFilter = 6,
    StartsWithFilter = 7
};

struct __declspec(uuid("c9d24368-c4de-442f-9961-4014ff442698"))
ICIReportActionParams : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReport,put=PutReport))
    IDispatchPtr Report;
    __declspec(property(get=GetDateFormat,put=PutDateFormat))
    ReportPeriodType DateFormat;
    __declspec(property(get=GetCustomDate,put=PutCustomDate))
    PredefinedReportPeriod CustomDate;
    __declspec(property(get=GetFromDate,put=PutFromDate))
    _variant_t FromDate;
    __declspec(property(get=GetToDate,put=PutToDate))
    _variant_t ToDate;
    __declspec(property(get=GetReportFileFormat,put=PutReportFileFormat))
    ReportFormat ReportFileFormat;
    __declspec(property(get=GetOptionalParameters,put=PutOptionalParameters))
    _bstr_t OptionalParameters;
    __declspec(property(get=GetFilterField1,put=PutFilterField1))
    _bstr_t FilterField1;
    __declspec(property(get=GetFilterField2,put=PutFilterField2))
    _bstr_t FilterField2;
    __declspec(property(get=GetFilterOperator1,put=PutFilterOperator1))
    ReportFilterOperator FilterOperator1;
    __declspec(property(get=GetFilterOperator2,put=PutFilterOperator2))
    ReportFilterOperator FilterOperator2;
    __declspec(property(get=GetFilterValue1,put=PutFilterValue1))
    _bstr_t FilterValue1;
    __declspec(property(get=GetFilterValue2,put=PutFilterValue2))
    _bstr_t FilterValue2;
    __declspec(property(get=GetFilterAndOr,put=PutFilterAndOr))
    ReportFiltersCombiningOperator FilterAndOr;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetReport ( );
    void PutReport (
        IDispatch * pVal );
    ReportPeriodType GetDateFormat ( );
    void PutDateFormat (
        ReportPeriodType pVal );
    PredefinedReportPeriod GetCustomDate ( );
    void PutCustomDate (
        PredefinedReportPeriod pVal );
    _variant_t GetFromDate ( );
    void PutFromDate (
        const _variant_t & pVal );
    _variant_t GetToDate ( );
    void PutToDate (
        const _variant_t & pVal );
    ReportFormat GetReportFileFormat ( );
    void PutReportFileFormat (
        ReportFormat pVal );
    _bstr_t GetOptionalParameters ( );
    void PutOptionalParameters (
        _bstr_t pVal );
    _bstr_t GetFilterField1 ( );
    void PutFilterField1 (
        _bstr_t pVal );
    _bstr_t GetFilterField2 ( );
    void PutFilterField2 (
        _bstr_t pVal );
    ReportFilterOperator GetFilterOperator1 ( );
    void PutFilterOperator1 (
        ReportFilterOperator pVal );
    ReportFilterOperator GetFilterOperator2 ( );
    void PutFilterOperator2 (
        ReportFilterOperator pVal );
    _bstr_t GetFilterValue1 ( );
    void PutFilterValue1 (
        _bstr_t pVal );
    _bstr_t GetFilterValue2 ( );
    void PutFilterValue2 (
        _bstr_t pVal );
    ReportFiltersCombiningOperator GetFilterAndOr ( );
    void PutFilterAndOr (
        ReportFiltersCombiningOperator pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Report (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall put_Report (
        /*[in]*/ IDispatch * pVal ) = 0;
      virtual HRESULT __stdcall get_DateFormat (
        /*[out,retval]*/ ReportPeriodType * pVal ) = 0;
      virtual HRESULT __stdcall put_DateFormat (
        /*[in]*/ ReportPeriodType pVal ) = 0;
      virtual HRESULT __stdcall get_CustomDate (
        /*[out,retval]*/ PredefinedReportPeriod * pVal ) = 0;
      virtual HRESULT __stdcall put_CustomDate (
        /*[in]*/ PredefinedReportPeriod pVal ) = 0;
      virtual HRESULT __stdcall get_FromDate (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_FromDate (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ToDate (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_ToDate (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ReportFileFormat (
        /*[out,retval]*/ ReportFormat * pVal ) = 0;
      virtual HRESULT __stdcall put_ReportFileFormat (
        /*[in]*/ ReportFormat pVal ) = 0;
      virtual HRESULT __stdcall get_OptionalParameters (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OptionalParameters (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FilterField1 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FilterField1 (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FilterField2 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FilterField2 (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FilterOperator1 (
        /*[out,retval]*/ ReportFilterOperator * pVal ) = 0;
      virtual HRESULT __stdcall put_FilterOperator1 (
        /*[in]*/ ReportFilterOperator pVal ) = 0;
      virtual HRESULT __stdcall get_FilterOperator2 (
        /*[out,retval]*/ ReportFilterOperator * pVal ) = 0;
      virtual HRESULT __stdcall put_FilterOperator2 (
        /*[in]*/ ReportFilterOperator pVal ) = 0;
      virtual HRESULT __stdcall get_FilterValue1 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FilterValue1 (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FilterValue2 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FilterValue2 (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FilterAndOr (
        /*[out,retval]*/ ReportFiltersCombiningOperator * pVal ) = 0;
      virtual HRESULT __stdcall put_FilterAndOr (
        /*[in]*/ ReportFiltersCombiningOperator pVal ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0021
{
    NoCombining = -1,
    AndCombining = 0,
    OrCombining = 1
};

struct __declspec(uuid("3f6a8461-c21a-415f-ae30-98bdbd15348f"))
CICommandActionParams;
    // [ default ] interface ICICommandActionParams

struct __declspec(uuid("7b4a979f-f9d7-413c-8ecd-7a5ce4b2aa3e"))
ICICommandActionParams : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCommand,put=PutCommand))
    _bstr_t Command;
    __declspec(property(get=GetParameters,put=PutParameters))
    _bstr_t Parameters;
    __declspec(property(get=GetWorkingFolder,put=PutWorkingFolder))
    _bstr_t WorkingFolder;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCommand ( );
    void PutCommand (
        _bstr_t pVal );
    _bstr_t GetParameters ( );
    void PutParameters (
        _bstr_t pVal );
    _bstr_t GetWorkingFolder ( );
    void PutWorkingFolder (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Command (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Command (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Parameters (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Parameters (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_WorkingFolder (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_WorkingFolder (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("82dc43d4-6c1a-43d8-a3ba-1e9101fa3f30"))
CIStopActionParams;
    // [ default ] interface ICIStopActionParams

struct __declspec(uuid("d302ccd1-447c-4256-8957-c97aae42914c"))
ICIStopActionParams : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetAction,put=PutAction))
    StopType Action;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL pVal );
    StopType GetAction ( );
    void PutAction (
        StopType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Action (
        /*[out,retval]*/ StopType * pVal ) = 0;
      virtual HRESULT __stdcall put_Action (
        /*[in]*/ StopType pVal ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0014
{
    StopRule = 2,
    StopEvent = 4,
    StopRuleAndEvent = 6
};

struct __declspec(uuid("54d2df93-c933-409f-b69f-6245f7bd6d50"))
CIBackupActionParams;
    // [ default ] interface ICIBackupActionParams

struct __declspec(uuid("763d7a3d-acbe-41d5-a866-5a211847fd9c"))
ICIBackupActionParams : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFolder,put=PutFolder))
    _bstr_t Folder;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFolder ( );
    void PutFolder (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Folder (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Folder (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("5c9be02b-21f3-491c-a80e-4b6a51828ed0"))
CIAWTaskActionParams;
    // [ default ] interface ICIAWTaskActionParams

struct __declspec(uuid("12799f36-fb77-4244-bf0e-fac73113a049"))
ICIAWTaskActionParams : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTaskName,put=PutTaskName))
    _bstr_t TaskName;
    __declspec(property(get=GetVariablesCount))
    long VariablesCount;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTaskName ( );
    void PutTaskName (
        _bstr_t pVal );
    long GetVariablesCount ( );
    _bstr_t GetVariableName (
        long nIndex );
    _bstr_t GetVariableValue (
        long nIndex );
    HRESULT RemoveVariable (
        long nIndex );
    HRESULT AddVariable (
        _bstr_t bstrVarName,
        _bstr_t bstrVarValue );
    HRESULT SetVariable (
        long nIndex,
        _bstr_t bstrVarName,
        _bstr_t bstrVarValue );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TaskName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TaskName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_VariablesCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetVariableName (
        /*[in]*/ long nIndex,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetVariableValue (
        /*[in]*/ long nIndex,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveVariable (
        /*[in]*/ long nIndex ) = 0;
      virtual HRESULT __stdcall raw_AddVariable (
        /*[in]*/ BSTR bstrVarName,
        /*[in]*/ BSTR bstrVarValue ) = 0;
      virtual HRESULT __stdcall raw_SetVariable (
        /*[in]*/ long nIndex,
        /*[in]*/ BSTR bstrVarName,
        /*[in]*/ BSTR bstrVarValue ) = 0;
};

struct __declspec(uuid("286c4f19-d4cb-4fd9-9b24-898cffc0ac4d"))
CIAS2SendActionParams;
    // [ default ] interface ICIAS2SendActionParams

struct __declspec(uuid("a1a482f7-a86c-4805-8179-5e585320c96b"))
ICIAS2SendActionParams : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLocalPath,put=PutLocalPath))
    _bstr_t LocalPath;
    __declspec(property(get=GetUseClientProfile,put=PutUseClientProfile))
    VARIANT_BOOL UseClientProfile;
    __declspec(property(get=GetClientProfile,put=PutClientProfile))
    _bstr_t ClientProfile;
    __declspec(property(get=GetDeleteSourceFile,put=PutDeleteSourceFile))
    VARIANT_BOOL DeleteSourceFile;
    __declspec(property(get=GetHost,put=PutHost))
    _bstr_t Host;
    __declspec(property(get=GetPort,put=PutPort))
    long Port;
    __declspec(property(get=GetRemotePath,put=PutRemotePath))
    _bstr_t RemotePath;
    __declspec(property(get=GetUser,put=PutUser))
    _bstr_t User;
    __declspec(property(get=GetPassword,put=PutPassword))
    _bstr_t Password;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetContentType,put=PutContentType))
    AS2ContentType ContentType;
    __declspec(property(get=GetCompress,put=PutCompress))
    VARIANT_BOOL Compress;
    __declspec(property(get=GetEncrypt,put=PutEncrypt))
    VARIANT_BOOL Encrypt;
    __declspec(property(get=GetSign,put=PutSign))
    VARIANT_BOOL Sign;
    __declspec(property(get=GetPartnerCertificatePath,put=PutPartnerCertificatePath))
    _bstr_t PartnerCertificatePath;
    __declspec(property(get=GetAS2ID,put=PutAS2ID))
    _bstr_t AS2ID;
    __declspec(property(get=GetPartnerAS2ID,put=PutPartnerAS2ID))
    _bstr_t PartnerAS2ID;
    __declspec(property(get=GetReceiptPolicy,put=PutReceiptPolicy))
    AS2ReceiptPolicy ReceiptPolicy;
    __declspec(property(get=GetReceiptDelivery,put=PutReceiptDelivery))
    AS2ReceiptDelivery ReceiptDelivery;
    __declspec(property(get=GetTimeoutSec,put=PutTimeoutSec))
    long TimeoutSec;
    __declspec(property(get=GetRetriesCount,put=PutRetriesCount))
    long RetriesCount;
    __declspec(property(get=GetRetryDelaySec,put=PutRetryDelaySec))
    long RetryDelaySec;
    __declspec(property(get=GetAsyncReceiptTimeoutMin,put=PutAsyncReceiptTimeoutMin))
    long AsyncReceiptTimeoutMin;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLocalPath ( );
    void PutLocalPath (
        _bstr_t pVal );
    VARIANT_BOOL GetUseClientProfile ( );
    void PutUseClientProfile (
        VARIANT_BOOL pVal );
    _bstr_t GetClientProfile ( );
    void PutClientProfile (
        _bstr_t pVal );
    VARIANT_BOOL GetDeleteSourceFile ( );
    void PutDeleteSourceFile (
        VARIANT_BOOL pVal );
    _bstr_t GetHost ( );
    void PutHost (
        _bstr_t pVal );
    long GetPort ( );
    void PutPort (
        long pVal );
    _bstr_t GetRemotePath ( );
    void PutRemotePath (
        _bstr_t pVal );
    _bstr_t GetUser ( );
    void PutUser (
        _bstr_t pVal );
    _bstr_t GetPassword ( );
    void PutPassword (
        _bstr_t pVal );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t pVal );
    AS2ContentType GetContentType ( );
    void PutContentType (
        AS2ContentType pVal );
    VARIANT_BOOL GetCompress ( );
    void PutCompress (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEncrypt ( );
    void PutEncrypt (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSign ( );
    void PutSign (
        VARIANT_BOOL pVal );
    _bstr_t GetPartnerCertificatePath ( );
    void PutPartnerCertificatePath (
        _bstr_t pVal );
    _bstr_t GetAS2ID ( );
    void PutAS2ID (
        _bstr_t pVal );
    _bstr_t GetPartnerAS2ID ( );
    void PutPartnerAS2ID (
        _bstr_t pVal );
    AS2ReceiptPolicy GetReceiptPolicy ( );
    void PutReceiptPolicy (
        AS2ReceiptPolicy pVal );
    AS2ReceiptDelivery GetReceiptDelivery ( );
    void PutReceiptDelivery (
        AS2ReceiptDelivery pVal );
    long GetTimeoutSec ( );
    void PutTimeoutSec (
        long pVal );
    long GetRetriesCount ( );
    void PutRetriesCount (
        long pVal );
    long GetRetryDelaySec ( );
    void PutRetryDelaySec (
        long pVal );
    long GetAsyncReceiptTimeoutMin ( );
    void PutAsyncReceiptTimeoutMin (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LocalPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LocalPath (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UseClientProfile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseClientProfile (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ClientProfile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ClientProfile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DeleteSourceFile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DeleteSourceFile (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Host (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Host (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Port (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Port (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RemotePath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RemotePath (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_User (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_User (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Password (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Password (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Subject (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ContentType (
        /*[out,retval]*/ AS2ContentType * pVal ) = 0;
      virtual HRESULT __stdcall put_ContentType (
        /*[in]*/ AS2ContentType pVal ) = 0;
      virtual HRESULT __stdcall get_Compress (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Compress (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Encrypt (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Encrypt (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Sign (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Sign (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PartnerCertificatePath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PartnerCertificatePath (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AS2ID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AS2ID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PartnerAS2ID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PartnerAS2ID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ReceiptPolicy (
        /*[out,retval]*/ AS2ReceiptPolicy * pVal ) = 0;
      virtual HRESULT __stdcall put_ReceiptPolicy (
        /*[in]*/ AS2ReceiptPolicy pVal ) = 0;
      virtual HRESULT __stdcall get_ReceiptDelivery (
        /*[out,retval]*/ AS2ReceiptDelivery * pVal ) = 0;
      virtual HRESULT __stdcall put_ReceiptDelivery (
        /*[in]*/ AS2ReceiptDelivery pVal ) = 0;
      virtual HRESULT __stdcall get_TimeoutSec (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeoutSec (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RetriesCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RetriesCount (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RetryDelaySec (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RetryDelaySec (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AsyncReceiptTimeoutMin (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_AsyncReceiptTimeoutMin (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("4906d47b-ddba-4385-955a-66a7fd7244b3"))
CIWindowsEventLogActionParams;
    // [ default ] interface ICIWindowsEventLogActionParams

struct __declspec(uuid("4166dfc2-e3e4-421a-af75-8c23aa346dc1"))
ICIWindowsEventLogActionParams : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettype,put=Puttype))
    EventLogType type;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;

    //
    // Wrapper methods for error-handling
    //

    EventLogType Gettype ( );
    void Puttype (
        EventLogType pVal );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_type (
        /*[out,retval]*/ EventLogType * pVal ) = 0;
      virtual HRESULT __stdcall put_type (
        /*[in]*/ EventLogType pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0020_0001
{
    EventInformation = 0,
    EventWarning = 1,
    EventError = 2,
    EventFirstValue = 0,
    EventLastValue = 2
};

struct __declspec(uuid("651e74f6-ea04-4b74-b8d6-121e7f22e38f"))
CIEventRules;
    // [ default ] interface ICIEventRules

struct __declspec(uuid("46cc85df-420f-4586-a68b-a3f92cb353ab"))
ICIEventRules : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr Item (
        long lIndex );
    HRESULT Delete (
        long lIndex );
    long Count ( );
    IDispatchPtr Add (
        long lIndex,
        IDispatch * pdispParams );
    IDispatchPtr Find (
        _bstr_t strName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ IDispatch * * ppdispRule ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long lIndex ) = 0;
      virtual HRESULT __stdcall raw_Count (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ long lIndex,
        /*[in]*/ IDispatch * pdispParams,
        /*[out,retval]*/ IDispatch * * ppdispNewRule ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ BSTR strName,
        /*[out,retval]*/ IDispatch * * ppdisp ) = 0;
};

struct __declspec(uuid("28c84a20-1f0a-49d8-abf8-2aa19f18c8eb"))
CIEventRule;
    // [ default ] interface ICIEventRule

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0013
{
    Time = 1,
    Name = 2,
    Reason = 3,
    TimeStamp = 4,
    DateStamp = 5,
    MonitorFolderStatus = 6,
    EventName = 7,
    ServerRunning = 1000,
    ServerLogOldName = 1001,
    ServerLogNewName = 1002,
    ServerLogOldPath = 1003,
    ServerLogNewPath = 1004,
    ServerLogTime = 1005,
    ServerLogFolder = 1006,
    ServerServerNodeName = 1007,
    SiteRunning = 2000,
    SiteName = 2001,
    SiteAccountManagementURL = 2002,
    LocalIP = 3000,
    RemoteIP = 3001,
    LocalPort = 3002,
    RemotePort = 3003,
    Protocol = 3004,
    WebTransferClientConnection = 3005,
    ClientLogin = 4000,
    ClientPassword = 4001,
    ClientAccessGroup = 4002,
    ClientEnabled = 4003,
    ClientSettingsLevel = 4004,
    ClientFullName = 4005,
    ClientDescription = 4006,
    ClientComment = 4007,
    ClientEMail = 4008,
    ClientPhone = 4009,
    ClientPager = 4010,
    ClientFax = 4011,
    ClientHomeFolder = 4012,
    ClientHomeFolderIsRoot = 4013,
    ClientQuotaMax = 4014,
    ClientQuotaUsed = 4015,
    ClientInvalidLoginAttempts = 4016,
    ClientCanChangePassword = 4017,
    ClientIP = 4018,
    ClientSSLAllowed = 4019,
    ClientFTPAllowed = 4020,
    ClientSFTPAllowed = 4021,
    ClientLastLogin = 4022,
    ClientPasswordExpiration = 4023,
    ClientMustResetPasswordAtFirstLogin = 4024,
    ClientAccountExpirationDate = 4025,
    ClientAccountLocked = 4026,
    ClientCustomField1 = 4027,
    ClientCustomField2 = 4028,
    ClientCustomField3 = 4029,
    VirtualPath = 5000,
    PhysicalPath = 5001,
    DestinationVirtualPath = 5002,
    DestinationPhysicalPath = 5003,
    FolderName = 5004,
    FileName = 5005,
    DestinationFolderName = 5006,
    DestinationFileName = 5007,
    FolderOperation = 5008,
    FileCreationDate = 5009,
    FileCreationTime = 5010,
    FileSize = 5011,
    FileCRC = 5012,
    ReportPath = 5013,
    ReportContent = 5014,
    ReportFileName = 5015,
    AS2Payload = 6000,
    AS2MDN = 6001,
    AS2LocalMIC = 6002,
    AS2RemoteMIC = 6003,
    AS2MessageID = 6004,
    AS2Host = 6005,
    AS2TransactionError = 6006,
    AS2TransactionResult = 6007,
    AS2TransactionVerbose = 6008,
    AS2Direction = 6009,
    AS2PartnerID = 6010,
    AS2ID = 6011,
    AS2TypeOfContent = 6012
};

struct __declspec(uuid("1dda5e8d-ec07-413b-8c49-db5ccc46f0ea"))
ICIEventRule : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr Statement (
        long lIndex );
    long StatementsCount ( );
    HRESULT DeleteStatement (
        long lIndex );
    IDispatchPtr GetParams ( );
    HRESULT SetParams (
        IDispatch * newVal );
    IDispatchPtr AddActionStatement (
        long lIndex,
        IDispatch * pdispParams );
    IDispatchPtr AddIfStatement (
        long lIndex,
        EventProperty property,
        ConditionOperator op,
        const _variant_t & varConditionValue,
        VARIANT_BOOL bNot );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Statement (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ IDispatch * * ppdispStatement ) = 0;
      virtual HRESULT __stdcall raw_StatementsCount (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall raw_DeleteStatement (
        /*[in]*/ long lIndex ) = 0;
      virtual HRESULT __stdcall raw_GetParams (
        /*[out,retval]*/ IDispatch * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetParams (
        /*[in]*/ IDispatch * newVal ) = 0;
      virtual HRESULT __stdcall raw_AddActionStatement (
        /*[in]*/ long lIndex,
        /*[in]*/ IDispatch * pdispParams,
        /*[out,retval]*/ IDispatch * * ppdispActionStatement ) = 0;
      virtual HRESULT __stdcall raw_AddIfStatement (
        /*[in]*/ long lIndex,
        /*[in]*/ EventProperty property,
        /*[in]*/ ConditionOperator op,
        /*[in]*/ VARIANT varConditionValue,
        /*[in]*/ VARIANT_BOOL bNot,
        /*[out,retval]*/ IDispatch * * ppdispIfStatement ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0007
{
    Equals = 1,
    Less = 2,
    LessOrEquals = 4,
    Contains = 8,
    Match = 16,
    MemberOf = 32,
    OneOf = 64,
    StartsWith = 128
};

struct __declspec(uuid("3caf01f0-e290-437b-a39c-3f59ae5bb2b2"))
CIIfStatement;
    // [ default ] interface ICIIfStatement

struct __declspec(uuid("98e28e5e-332b-40f5-b840-48f9bfe5e153"))
ICIEventRuleStatement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettype))
    EventRuleStatementType type;

    //
    // Wrapper methods for error-handling
    //

    EventRuleStatementType Gettype ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_type (
        /*[out,retval]*/ EventRuleStatementType * pVal ) = 0;
};

struct __declspec(uuid("42679a64-3760-4943-9bc3-dc2a42842e98"))
ICIIfStatement : ICIEventRuleStatement
{
    //
    // Property data
    //

    __declspec(property(get=GetIfSection))
    IDispatchPtr IfSection;
    __declspec(property(get=GetElseSection))
    IDispatchPtr ElseSection;
    __declspec(property(get=GetCondition))
    IDispatchPtr Condition;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetIfSection ( );
    IDispatchPtr GetElseSection ( );
    IDispatchPtr GetCondition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IfSection (
        /*[out,retval]*/ IDispatch * * ppdispActionStatements ) = 0;
      virtual HRESULT __stdcall get_ElseSection (
        /*[out,retval]*/ IDispatch * * ppdispActionStatements ) = 0;
      virtual HRESULT __stdcall get_Condition (
        /*[out,retval]*/ IDispatch * * ppdispCompoundCondition ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0004
{
    ActionStatement = 0,
    IfStatement = 1
};

struct __declspec(uuid("6d57f2c4-3c1c-438d-9c76-1036bbe68ccf"))
CIActionStatement;
    // [ default ] interface ICIActionStatement

struct __declspec(uuid("3d8aabc7-0729-4868-8428-3d2c447ec3bf"))
ICIActionStatement : ICIEventRuleStatement
{
    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr FailSection ( );
    IDispatchPtr Action ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_FailSection (
        /*[out,retval]*/ IDispatch * * ppdispActions ) = 0;
      virtual HRESULT __stdcall raw_Action (
        /*[out,retval]*/ IDispatch * * ppdispAction ) = 0;
};

struct __declspec(uuid("02ddface-adcc-4f1e-9647-75ab28ef57bb"))
CIActionStatements;
    // [ default ] interface ICIActionStatements

struct __declspec(uuid("7bf321ce-b641-4d57-a109-76edc8708c4c"))
ICIActionStatements : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr Item (
        long lIndex );
    long Count ( );
    HRESULT Delete (
        long lIndex );
    IDispatchPtr Add (
        long lIndex,
        IDispatch * pdispActionParams );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ IDispatch * * ppdispActionStatement ) = 0;
      virtual HRESULT __stdcall raw_Count (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long lIndex ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ long lIndex,
        /*[in]*/ IDispatch * pdispActionParams,
        /*[out,retval]*/ IDispatch * * ppdispActionStatement ) = 0;
};

struct __declspec(uuid("97388922-b025-42fa-bd65-41094770416e"))
CIEventAction;
    // [ default ] interface ICIEventAction

struct __declspec(uuid("5c38f400-cee1-4cef-ae27-db1f6a8dccd7"))
ICIEventAction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettype))
    EventActionType type;

    //
    // Wrapper methods for error-handling
    //

    EventActionType Gettype ( );
    IDispatchPtr GetParams ( );
    HRESULT SetParams (
        IDispatch * pdispParams );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_type (
        /*[out,retval]*/ EventActionType * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetParams (
        /*[out,retval]*/ IDispatch * * ppdispParams ) = 0;
      virtual HRESULT __stdcall raw_SetParams (
        /*[in]*/ IDispatch * pdispParams ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0005
{
    CommandAction = 1,
    MailAction = 2,
    UploadAction = 4,
    DownloadAction = 8,
    PGPAction = 32,
    StopAction = 64,
    CleanupAction = 128,
    ReportAction = 256,
    AS2SendAction = 512,
    AWTaskAction = 1024,
    BackupAction = 2048,
    WindowsEventLog = 4096
};

struct __declspec(uuid("d88b2fae-6a30-4d4b-ba5b-6039ba3c0e94"))
CIEventActions;
    // [ default ] interface ICIEventActions

struct __declspec(uuid("1e7376d6-5003-47fe-ada7-9b0a6bfbf888"))
ICIEventActions : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr Item (
        long lIndex );
    long Count ( );
    HRESULT Delete (
        long lIndex );
    IDispatchPtr Add (
        long lIndex,
        IDispatch * pdispParams );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ IDispatch * * ppdispAction ) = 0;
      virtual HRESULT __stdcall raw_Count (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long lIndex ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ long lIndex,
        /*[in]*/ IDispatch * pdispParams,
        /*[out,retval]*/ IDispatch * * ppdispAction ) = 0;
};

struct __declspec(uuid("59ebd13e-66dd-49bf-96b3-7aab5ee87965"))
CICompoundCondition;
    // [ default ] interface ICICompoundCondition

struct __declspec(uuid("f649f52b-6923-40a3-86f2-50c9e5986f32"))
ICICompoundCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOperator,put=PutOperator))
    LogicalOperator Operator;

    //
    // Wrapper methods for error-handling
    //

    LogicalOperator GetOperator ( );
    void PutOperator (
        LogicalOperator pVal );
    IDispatchPtr Item (
        long lIndex );
    IDispatchPtr Add (
        EventProperty property,
        ConditionOperator op,
        const _variant_t & varValue,
        VARIANT_BOOL bNot );
    HRESULT Delete (
        long lIndex );
    long Count ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Operator (
        /*[out,retval]*/ LogicalOperator * pVal ) = 0;
      virtual HRESULT __stdcall put_Operator (
        /*[in]*/ LogicalOperator pVal ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ IDispatch * * ppdispSimpleCondition ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ EventProperty property,
        /*[in]*/ ConditionOperator op,
        /*[in]*/ VARIANT varValue,
        /*[in]*/ VARIANT_BOOL bNot,
        /*[out,retval]*/ IDispatch * * ppdispSimpleCondition ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long lIndex ) = 0;
      virtual HRESULT __stdcall raw_Count (
        /*[out,retval]*/ long * plCount ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0008
{
    LogicalOr = 0,
    LogicalAnd = 1
};

struct __declspec(uuid("9785ce85-2e5c-43dc-a567-1abf289d6999"))
CISimpleCondition;
    // [ default ] interface ICISimpleCondition

struct __declspec(uuid("68d1009e-a670-4d46-bb0b-b034ccd870f5"))
ICISimpleCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOperator,put=PutOperator))
    ConditionOperator Operator;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=Getproperty))
    EventProperty property;
    __declspec(property(get=GetNot,put=PutNot))
    VARIANT_BOOL Not;

    //
    // Wrapper methods for error-handling
    //

    ConditionOperator GetOperator ( );
    void PutOperator (
        ConditionOperator pVal );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & pVal );
    EventProperty Getproperty ( );
    VARIANT_BOOL GetNot ( );
    void PutNot (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Operator (
        /*[out,retval]*/ ConditionOperator * pVal ) = 0;
      virtual HRESULT __stdcall put_Operator (
        /*[in]*/ ConditionOperator pVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_property (
        /*[out,retval]*/ EventProperty * pVal ) = 0;
      virtual HRESULT __stdcall get_Not (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Not (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("3b0f7b25-4384-4c72-a640-004da67f99d8"))
CIEventRuleParams;
    // [ default ] interface ICIEventRuleParams

struct __declspec(uuid("71ba2e98-c6ff-4e8e-9dcb-ec45cf674b68"))
ICIEventRuleParams : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("2f880b03-8f15-4434-a8d3-e3d4b84403cd"))
CITimerEventRuleParams;
    // [ default ] interface ICITimerEventRuleParams

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0010
{
    Relation_First = 0,
    Relation_Second = 1,
    Relation_Third = 2,
    Relation_Fourth = 3,
    Relation_Last = 4
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0011
{
    Weekday_Sunday = 0,
    Weekday_Monday = 1,
    Weekday_Tuesday = 2,
    Weekday_Wednesday = 3,
    Weekday_Thursday = 4,
    Weekday_Friday = 5,
    Weekday_Saturday = 6,
    Weekday_Day = 7,
    Weekday_Weekday = 8,
    Weekday_Weekendday = 9
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0012
{
    Month_January = 0,
    Month_February = 1,
    Month_March = 2,
    Month_April = 3,
    Month_May = 4,
    Month_June = 5,
    Month_July = 6,
    Month_August = 7,
    Month_September = 8,
    Month_October = 9,
    Month_November = 10,
    Month_December = 11
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0016
{
    RepeatHours = 0,
    RepeatMinutes = 1,
    RepeatSeconds = 2
};

struct __declspec(uuid("b8b64b3c-7b5c-4324-acd6-99622da0f411"))
ICITimerEventRuleParams : ICIEventRuleParams
{
    //
    // Property data
    //

    __declspec(property(get=GetDailyEveryWeekDay,put=PutDailyEveryWeekDay))
    VARIANT_BOOL DailyEveryWeekDay;
    __declspec(property(get=GetDailyDayPeriod,put=PutDailyDayPeriod))
    long DailyDayPeriod;
    __declspec(property(get=GetWeeklyWeekPeriod,put=PutWeeklyWeekPeriod))
    long WeeklyWeekPeriod;
    __declspec(property(get=GetWeeklySunday,put=PutWeeklySunday))
    VARIANT_BOOL WeeklySunday;
    __declspec(property(get=GetWeeklyMonday,put=PutWeeklyMonday))
    VARIANT_BOOL WeeklyMonday;
    __declspec(property(get=GetWeeklyTuesday,put=PutWeeklyTuesday))
    VARIANT_BOOL WeeklyTuesday;
    __declspec(property(get=GetWeeklyWednesday,put=PutWeeklyWednesday))
    VARIANT_BOOL WeeklyWednesday;
    __declspec(property(get=GetWeeklyThursday,put=PutWeeklyThursday))
    VARIANT_BOOL WeeklyThursday;
    __declspec(property(get=GetWeeklyFriday,put=PutWeeklyFriday))
    VARIANT_BOOL WeeklyFriday;
    __declspec(property(get=GetWeeklySaturday,put=PutWeeklySaturday))
    VARIANT_BOOL WeeklySaturday;
    __declspec(property(get=GetMonthlyFixedDay,put=PutMonthlyFixedDay))
    VARIANT_BOOL MonthlyFixedDay;
    __declspec(property(get=GetMonthlyDayPeriod,put=PutMonthlyDayPeriod))
    long MonthlyDayPeriod;
    __declspec(property(get=GetMonthlyMonthPeriod,put=PutMonthlyMonthPeriod))
    long MonthlyMonthPeriod;
    __declspec(property(get=GetMonthlyRelativeWeekday,put=PutMonthlyRelativeWeekday))
    Relation MonthlyRelativeWeekday;
    __declspec(property(get=GetMonthlyWeekday,put=PutMonthlyWeekday))
    Weekday MonthlyWeekday;
    __declspec(property(get=GetYearlyFixedDay,put=PutYearlyFixedDay))
    VARIANT_BOOL YearlyFixedDay;
    __declspec(property(get=GetYearlyMonth,put=PutYearlyMonth))
    Month YearlyMonth;
    __declspec(property(get=GetYearlyDayPeriod,put=PutYearlyDayPeriod))
    long YearlyDayPeriod;
    __declspec(property(get=GetYearlyRelativeWeekday,put=PutYearlyRelativeWeekday))
    Relation YearlyRelativeWeekday;
    __declspec(property(get=GetYearlyWeekday,put=PutYearlyWeekday))
    Weekday YearlyWeekday;
    __declspec(property(get=GetRepeatPattern,put=PutRepeatPattern))
    RepeatPattern _RepeatPattern;
    __declspec(property(get=GetRepeatRate,put=PutRepeatRate))
    long RepeatRate;
    __declspec(property(get=GetRepeatEnabled,put=PutRepeatEnabled))
    VARIANT_BOOL RepeatEnabled;
    __declspec(property(get=GetDateTimeEnd,put=PutDateTimeEnd))
    _variant_t DateTimeEnd;
    __declspec(property(get=GetTimeEndEnabled,put=PutTimeEndEnabled))
    VARIANT_BOOL TimeEndEnabled;
    __declspec(property(get=GetDateEndEnabled,put=PutDateEndEnabled))
    VARIANT_BOOL DateEndEnabled;
    __declspec(property(get=GetRundayCalendar,put=PutRundayCalendar))
    _bstr_t RundayCalendar;
    __declspec(property(get=GetHolidayCalendar,put=PutHolidayCalendar))
    _bstr_t HolidayCalendar;
    __declspec(property(get=GetNextRun))
    DATE NextRun;
    __declspec(property(get=GetRecurrence,put=PutRecurrence))
    Recurrence _Recurrence;
    __declspec(property(get=GetDateTimeStart,put=PutDateTimeStart))
    _variant_t DateTimeStart;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetDailyEveryWeekDay ( );
    void PutDailyEveryWeekDay (
        VARIANT_BOOL pVal );
    long GetDailyDayPeriod ( );
    void PutDailyDayPeriod (
        long pVal );
    long GetWeeklyWeekPeriod ( );
    void PutWeeklyWeekPeriod (
        long pVal );
    VARIANT_BOOL GetWeeklySunday ( );
    void PutWeeklySunday (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetWeeklyMonday ( );
    void PutWeeklyMonday (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetWeeklyTuesday ( );
    void PutWeeklyTuesday (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetWeeklyWednesday ( );
    void PutWeeklyWednesday (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetWeeklyThursday ( );
    void PutWeeklyThursday (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetWeeklyFriday ( );
    void PutWeeklyFriday (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetWeeklySaturday ( );
    void PutWeeklySaturday (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMonthlyFixedDay ( );
    void PutMonthlyFixedDay (
        VARIANT_BOOL pVal );
    long GetMonthlyDayPeriod ( );
    void PutMonthlyDayPeriod (
        long pVal );
    long GetMonthlyMonthPeriod ( );
    void PutMonthlyMonthPeriod (
        long pVal );
    Relation GetMonthlyRelativeWeekday ( );
    void PutMonthlyRelativeWeekday (
        Relation pVal );
    Weekday GetMonthlyWeekday ( );
    void PutMonthlyWeekday (
        Weekday pVal );
    VARIANT_BOOL GetYearlyFixedDay ( );
    void PutYearlyFixedDay (
        VARIANT_BOOL pVal );
    Month GetYearlyMonth ( );
    void PutYearlyMonth (
        Month pVal );
    long GetYearlyDayPeriod ( );
    void PutYearlyDayPeriod (
        long pVal );
    Relation GetYearlyRelativeWeekday ( );
    void PutYearlyRelativeWeekday (
        Relation pVal );
    Weekday GetYearlyWeekday ( );
    void PutYearlyWeekday (
        Weekday pVal );
    RepeatPattern GetRepeatPattern ( );
    void PutRepeatPattern (
        RepeatPattern pVal );
    long GetRepeatRate ( );
    void PutRepeatRate (
        long pVal );
    VARIANT_BOOL GetRepeatEnabled ( );
    void PutRepeatEnabled (
        VARIANT_BOOL pVal );
    _variant_t GetDateTimeEnd ( );
    void PutDateTimeEnd (
        const _variant_t & pVal );
    VARIANT_BOOL GetTimeEndEnabled ( );
    void PutTimeEndEnabled (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetDateEndEnabled ( );
    void PutDateEndEnabled (
        VARIANT_BOOL pVal );
    _bstr_t GetRundayCalendar ( );
    void PutRundayCalendar (
        _bstr_t pVal );
    _bstr_t GetHolidayCalendar ( );
    void PutHolidayCalendar (
        _bstr_t pVal );
    DATE GetNextRun ( );
    Recurrence GetRecurrence ( );
    void PutRecurrence (
        Recurrence pVal );
    _variant_t GetDateTimeStart ( );
    void PutDateTimeStart (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DailyEveryWeekDay (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DailyEveryWeekDay (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DailyDayPeriod (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DailyDayPeriod (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_WeeklyWeekPeriod (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_WeeklyWeekPeriod (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_WeeklySunday (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_WeeklySunday (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_WeeklyMonday (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_WeeklyMonday (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_WeeklyTuesday (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_WeeklyTuesday (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_WeeklyWednesday (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_WeeklyWednesday (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_WeeklyThursday (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_WeeklyThursday (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_WeeklyFriday (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_WeeklyFriday (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_WeeklySaturday (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_WeeklySaturday (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MonthlyFixedDay (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MonthlyFixedDay (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MonthlyDayPeriod (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MonthlyDayPeriod (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MonthlyMonthPeriod (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MonthlyMonthPeriod (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MonthlyRelativeWeekday (
        /*[out,retval]*/ Relation * pVal ) = 0;
      virtual HRESULT __stdcall put_MonthlyRelativeWeekday (
        /*[in]*/ Relation pVal ) = 0;
      virtual HRESULT __stdcall get_MonthlyWeekday (
        /*[out,retval]*/ Weekday * pVal ) = 0;
      virtual HRESULT __stdcall put_MonthlyWeekday (
        /*[in]*/ Weekday pVal ) = 0;
      virtual HRESULT __stdcall get_YearlyFixedDay (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_YearlyFixedDay (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_YearlyMonth (
        /*[out,retval]*/ Month * pVal ) = 0;
      virtual HRESULT __stdcall put_YearlyMonth (
        /*[in]*/ Month pVal ) = 0;
      virtual HRESULT __stdcall get_YearlyDayPeriod (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_YearlyDayPeriod (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_YearlyRelativeWeekday (
        /*[out,retval]*/ Relation * pVal ) = 0;
      virtual HRESULT __stdcall put_YearlyRelativeWeekday (
        /*[in]*/ Relation pVal ) = 0;
      virtual HRESULT __stdcall get_YearlyWeekday (
        /*[out,retval]*/ Weekday * pVal ) = 0;
      virtual HRESULT __stdcall put_YearlyWeekday (
        /*[in]*/ Weekday pVal ) = 0;
      virtual HRESULT __stdcall get_RepeatPattern (
        /*[out,retval]*/ RepeatPattern * pVal ) = 0;
      virtual HRESULT __stdcall put_RepeatPattern (
        /*[in]*/ RepeatPattern pVal ) = 0;
      virtual HRESULT __stdcall get_RepeatRate (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RepeatRate (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RepeatEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RepeatEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DateTimeEnd (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_DateTimeEnd (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_TimeEndEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeEndEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DateEndEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DateEndEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RundayCalendar (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RundayCalendar (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HolidayCalendar (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HolidayCalendar (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_NextRun (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_Recurrence (
        /*[out,retval]*/ Recurrence * pVal ) = 0;
      virtual HRESULT __stdcall put_Recurrence (
        /*[in]*/ Recurrence pVal ) = 0;
      virtual HRESULT __stdcall get_DateTimeStart (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_DateTimeStart (
        /*[in]*/ VARIANT pVal ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0007_0009
{
    Recurrence_Continually = 0,
    Recurrence_Daily = 1,
    Recurrence_Weekly = 2,
    Recurrence_Monthly = 3,
    Recurrence_Yearly = 4,
    Recurrence_Once = 5,
    Recurrence_Calendar = 6
};

struct __declspec(uuid("288f7af3-437c-480d-81a6-594f3c159b69"))
CIFolderMonitorEventRuleParams;
    // [ default ] interface ICIFolderMonitorEventRuleParams

struct __declspec(uuid("5dff0c88-9ffa-4946-b088-199cbad101ba"))
ICIFolderMonitorEventRuleParams : ICIEventRuleParams
{
    //
    // Property data
    //

    __declspec(property(get=GetCheckHealthInterval,put=PutCheckHealthInterval))
    long CheckHealthInterval;
    __declspec(property(get=GetCheckHealth,put=PutCheckHealth))
    VARIANT_BOOL CheckHealth;
    __declspec(property(get=GetIncludeSubfolders,put=PutIncludeSubfolders))
    VARIANT_BOOL IncludeSubfolders;
    __declspec(property(get=GetPath,put=PutPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    long GetCheckHealthInterval ( );
    void PutCheckHealthInterval (
        long pVal );
    VARIANT_BOOL GetCheckHealth ( );
    void PutCheckHealth (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIncludeSubfolders ( );
    void PutIncludeSubfolders (
        VARIANT_BOOL pVal );
    _bstr_t GetPath ( );
    void PutPath (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CheckHealthInterval (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CheckHealthInterval (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CheckHealth (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CheckHealth (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IncludeSubfolders (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IncludeSubfolders (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Path (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("5f2675d4-86de-4f24-88ab-cebb4c473237"))
CIAudit;
    // [ default ] interface ICIAudit

struct __declspec(uuid("45bf2fc0-a0f2-4130-aae7-ad3ff4409106"))
CIPGPKeyInfo;
    // [ default ] interface ICIPGPKeyInfo

struct __declspec(uuid("5704f3a9-73f9-4f0b-9676-77b9cb2c00f2"))
ICIPGPKeyInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetID))
    _bstr_t ID;
    __declspec(property(get=GetPrivate))
    VARIANT_BOOL Private;
    __declspec(property(get=GetSize))
    long Size;
    __declspec(property(get=GetCreationDate))
    DATE CreationDate;
    __declspec(property(get=GetNeverExpires))
    VARIANT_BOOL NeverExpires;
    __declspec(property(get=GetExpirationDate))
    DATE ExpirationDate;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetID ( );
    VARIANT_BOOL GetPrivate ( );
    long GetSize ( );
    DATE GetCreationDate ( );
    VARIANT_BOOL GetNeverExpires ( );
    DATE GetExpirationDate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Private (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_CreationDate (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_NeverExpires (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ExpirationDate (
        /*[out,retval]*/ DATE * pVal ) = 0;
};

struct __declspec(uuid("4c54fbeb-bece-42c7-894f-2fae8e1f42d3"))
CIReportInfo;
    // [ default ] interface ICIReportInfo

struct __declspec(uuid("835c05c4-47c2-4d57-bf62-ae4b02db3dd3"))
ICIReportInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDefinitionPath))
    _bstr_t DefinitionPath;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _bstr_t GetDefinitionPath ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_DefinitionPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("f348b423-d9b6-450d-b399-4290da0bc431"))
CIEventInfo;
    // [ default ] interface ICIEventInfo

struct __declspec(uuid("7f60dc98-112e-413e-8ebc-4889cb55c2ca"))
ICIEventInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettype))
    EventType type;
    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    EventType Gettype ( );
    _bstr_t GetName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_type (
        /*[out,retval]*/ EventType * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("aa3a1e06-6605-4350-bd22-f20d239c5e26"))
CISSHKeyInfo;
    // [ default ] interface ICISSHKeyInfo

struct __declspec(uuid("f5a7c625-31f8-4d32-94e8-49cbbd4e3bb4"))
ICISSHKeyInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetID))
    long ID;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFingerprint))
    _bstr_t Fingerprint;

    //
    // Wrapper methods for error-handling
    //

    long GetID ( );
    _bstr_t GetName ( );
    _bstr_t GetFingerprint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Fingerprint (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("fe0277c8-615d-4b2d-9b8b-0fb068e66b40"))
CIADAuthManagerSettings;
    // [ default ] interface ICIADAuthManagerSettings

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0039_0001
{
    AuthManagerAD = 0,
    AuthManagerNTLM = 1
};

struct __declspec(uuid("b11722e6-0208-4f19-ad99-3bad0be56a66"))
ICIADAuthManagerSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettype,put=Puttype))
    ADAuthManagerType type;
    __declspec(property(get=GetDomain,put=PutDomain))
    _bstr_t Domain;
    __declspec(property(get=GetGroup,put=PutGroup))
    _bstr_t Group;
    __declspec(property(get=GetLogonAttribute,put=PutLogonAttribute))
    ADAuthManagerLogonAttribute LogonAttribute;
    __declspec(property(get=GetRefreshIntervalMinutes,put=PutRefreshIntervalMinutes))
    long RefreshIntervalMinutes;
    __declspec(property(get=GetAssignHomeFolderFromUserProfile,put=PutAssignHomeFolderFromUserProfile))
    VARIANT_BOOL AssignHomeFolderFromUserProfile;
    __declspec(property(get=GetSkipDomainPrefix,put=PutSkipDomainPrefix))
    VARIANT_BOOL SkipDomainPrefix;

    //
    // Wrapper methods for error-handling
    //

    ADAuthManagerType Gettype ( );
    void Puttype (
        ADAuthManagerType pVal );
    _bstr_t GetDomain ( );
    void PutDomain (
        _bstr_t pVal );
    _bstr_t GetGroup ( );
    void PutGroup (
        _bstr_t pVal );
    ADAuthManagerLogonAttribute GetLogonAttribute ( );
    void PutLogonAttribute (
        ADAuthManagerLogonAttribute pVal );
    long GetRefreshIntervalMinutes ( );
    void PutRefreshIntervalMinutes (
        long pVal );
    VARIANT_BOOL GetAssignHomeFolderFromUserProfile ( );
    void PutAssignHomeFolderFromUserProfile (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSkipDomainPrefix ( );
    void PutSkipDomainPrefix (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_type (
        /*[out,retval]*/ ADAuthManagerType * pVal ) = 0;
      virtual HRESULT __stdcall put_type (
        /*[in]*/ ADAuthManagerType pVal ) = 0;
      virtual HRESULT __stdcall get_Domain (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Domain (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Group (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Group (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LogonAttribute (
        /*[out,retval]*/ ADAuthManagerLogonAttribute * pVal ) = 0;
      virtual HRESULT __stdcall put_LogonAttribute (
        /*[in]*/ ADAuthManagerLogonAttribute pVal ) = 0;
      virtual HRESULT __stdcall get_RefreshIntervalMinutes (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RefreshIntervalMinutes (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AssignHomeFolderFromUserProfile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AssignHomeFolderFromUserProfile (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SkipDomainPrefix (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SkipDomainPrefix (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0039_0002
{
    NT4AccountName = 0,
    DisplayName = 1,
    UserPrincipalName = 2,
    CommonName = 3
};

struct __declspec(uuid("aa43f49b-2681-4c07-902b-98263f9693b5"))
CIGSAuthManagerSettings;
    // [ default ] interface ICIGSAuthManagerSettings

struct __declspec(uuid("79108808-03a1-4f55-9650-773659ee8ea0"))
ICIGSAuthManagerSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUserDatabasePath,put=PutUserDatabasePath))
    _bstr_t UserDatabasePath;
    __declspec(property(get=GetRefreshIntervalMinutes,put=PutRefreshIntervalMinutes))
    long RefreshIntervalMinutes;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetUserDatabasePath ( );
    void PutUserDatabasePath (
        _bstr_t pVal );
    long GetRefreshIntervalMinutes ( );
    void PutRefreshIntervalMinutes (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UserDatabasePath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UserDatabasePath (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RefreshIntervalMinutes (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RefreshIntervalMinutes (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("ff2cc560-92bc-4538-8c01-544fcf819f8c"))
CIODBCAuthManagerSettings;
    // [ default ] interface ICIODBCAuthManagerSettings

struct __declspec(uuid("3cf0bffd-3cdc-4369-9d6d-98f27b308d8e"))
ICIODBCAuthManagerSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUserDatabaseConnectionString,put=PutUserDatabaseConnectionString))
    _bstr_t UserDatabaseConnectionString;
    __declspec(property(get=GetRefreshIntervalMinutes,put=PutRefreshIntervalMinutes))
    long RefreshIntervalMinutes;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetUserDatabaseConnectionString ( );
    void PutUserDatabaseConnectionString (
        _bstr_t pVal );
    long GetRefreshIntervalMinutes ( );
    void PutRefreshIntervalMinutes (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UserDatabaseConnectionString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UserDatabaseConnectionString (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RefreshIntervalMinutes (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RefreshIntervalMinutes (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("24071a3f-324e-4791-ba9d-03410c740854"))
CILDAPAuthManagerSettings;
    // [ default ] interface ICILDAPAuthManagerSettings

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0042_0001
{
    Scope_Base = 0,
    Scope_OneLevel = 1,
    Scope_Subtree = 2
};

struct __declspec(uuid("ee766472-322a-443e-b7f2-b83eb33f0984"))
ICILDAPAuthManagerSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetServer,put=PutServer))
    _bstr_t Server;
    __declspec(property(get=GetPort,put=PutPort))
    long Port;
    __declspec(property(get=GetBaseDN,put=PutBaseDN))
    _bstr_t BaseDN;
    __declspec(property(get=GetUserFilter,put=PutUserFilter))
    _bstr_t UserFilter;
    __declspec(property(get=GetLoginAttribute,put=PutLoginAttribute))
    _bstr_t LoginAttribute;
    __declspec(property(get=GetServerUserName,put=PutServerUserName))
    _bstr_t ServerUserName;
    __declspec(property(get=GetServerPassword,put=PutServerPassword))
    _bstr_t ServerPassword;
    __declspec(property(get=GetUseSSL,put=PutUseSSL))
    VARIANT_BOOL UseSSL;
    __declspec(property(get=GetAdditionalUserSettingsPath,put=PutAdditionalUserSettingsPath))
    _bstr_t AdditionalUserSettingsPath;
    __declspec(property(get=GetRefreshIntervalMinutes,put=PutRefreshIntervalMinutes))
    long RefreshIntervalMinutes;
    __declspec(property(get=GetTimeoutSeconds,put=PutTimeoutSeconds))
    long TimeoutSeconds;
    __declspec(property(get=GetSearchScope,put=PutSearchScope))
    LDAPSearchScope SearchScope;
    __declspec(property(get=GetChaseReferrals,put=PutChaseReferrals))
    VARIANT_BOOL ChaseReferrals;
    __declspec(property(get=GetLDAPVersion,put=PutLDAPVersion))
    LDAPVersion _LDAPVersion;
    __declspec(property(get=GetUsePageControl,put=PutUsePageControl))
    VARIANT_BOOL UsePageControl;
    __declspec(property(get=GetPageSizeEntries,put=PutPageSizeEntries))
    long PageSizeEntries;
    __declspec(property(get=GetSearchAttributes,put=PutSearchAttributes))
    _bstr_t SearchAttributes;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetServer ( );
    void PutServer (
        _bstr_t pVal );
    long GetPort ( );
    void PutPort (
        long pVal );
    _bstr_t GetBaseDN ( );
    void PutBaseDN (
        _bstr_t pVal );
    _bstr_t GetUserFilter ( );
    void PutUserFilter (
        _bstr_t pVal );
    _bstr_t GetLoginAttribute ( );
    void PutLoginAttribute (
        _bstr_t pVal );
    _bstr_t GetServerUserName ( );
    void PutServerUserName (
        _bstr_t pVal );
    _bstr_t GetServerPassword ( );
    void PutServerPassword (
        _bstr_t pVal );
    VARIANT_BOOL GetUseSSL ( );
    void PutUseSSL (
        VARIANT_BOOL pVal );
    _bstr_t GetAdditionalUserSettingsPath ( );
    void PutAdditionalUserSettingsPath (
        _bstr_t pVal );
    long GetRefreshIntervalMinutes ( );
    void PutRefreshIntervalMinutes (
        long pVal );
    long GetTimeoutSeconds ( );
    void PutTimeoutSeconds (
        long pVal );
    LDAPSearchScope GetSearchScope ( );
    void PutSearchScope (
        LDAPSearchScope pVal );
    VARIANT_BOOL GetChaseReferrals ( );
    void PutChaseReferrals (
        VARIANT_BOOL pVal );
    LDAPVersion GetLDAPVersion ( );
    void PutLDAPVersion (
        LDAPVersion pVal );
    VARIANT_BOOL GetUsePageControl ( );
    void PutUsePageControl (
        VARIANT_BOOL pVal );
    long GetPageSizeEntries ( );
    void PutPageSizeEntries (
        long pVal );
    _bstr_t GetSearchAttributes ( );
    void PutSearchAttributes (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Server (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Server (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Port (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Port (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_BaseDN (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BaseDN (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UserFilter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UserFilter (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LoginAttribute (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LoginAttribute (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ServerUserName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ServerUserName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ServerPassword (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ServerPassword (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UseSSL (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseSSL (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AdditionalUserSettingsPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AdditionalUserSettingsPath (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RefreshIntervalMinutes (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RefreshIntervalMinutes (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_TimeoutSeconds (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeoutSeconds (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SearchScope (
        /*[out,retval]*/ LDAPSearchScope * pVal ) = 0;
      virtual HRESULT __stdcall put_SearchScope (
        /*[in]*/ LDAPSearchScope pVal ) = 0;
      virtual HRESULT __stdcall get_ChaseReferrals (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ChaseReferrals (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LDAPVersion (
        /*[out,retval]*/ LDAPVersion * pVal ) = 0;
      virtual HRESULT __stdcall put_LDAPVersion (
        /*[in]*/ LDAPVersion pVal ) = 0;
      virtual HRESULT __stdcall get_UsePageControl (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UsePageControl (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PageSizeEntries (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PageSizeEntries (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SearchAttributes (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SearchAttributes (
        /*[in]*/ BSTR pVal ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0042_0002
{
    LDAP_Version2 = 2,
    LDAP_Version3 = 3
};

struct __declspec(uuid("58d97329-a9ee-471f-b54d-91758e39d019"))
CIDMZGateway;
    // [ default ] interface ICIDMZGateway

struct __declspec(uuid("687e6de2-13e5-459b-9a29-b9c0b6369b71"))
CIAS2TransactionInfo;
    // [ default ] interface ICIAS2TransactionInfo

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0044_0001
{
    AS2TransactionInProgress = 0,
    AS2TransactionSuccess = 1,
    AS2TransactionFailedCanResend = 2,
    AS2TransactionFailedNoResend = 3,
    AS2TransactionOkSendMDNFailed = 4
};

struct __declspec(uuid("34afd242-d3ff-431f-a949-3ae7f6d0c03c"))
ICIAS2TransactionInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTransactionID))
    _bstr_t TransactionID;
    __declspec(property(get=GetMessageID))
    _bstr_t MessageID;
    __declspec(property(get=GetTime))
    DATE Time;
    __declspec(property(get=GetFile))
    _bstr_t File;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetRemoteHost))
    _bstr_t RemoteHost;
    __declspec(property(get=GetStatus))
    AS2TransactionStatus Status;
    __declspec(property(get=GetDirection))
    AS2TransactionDirection Direction;
    __declspec(property(get=GetFrom))
    _bstr_t From;
    __declspec(property(get=GetTo))
    _bstr_t To;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTransactionID ( );
    _bstr_t GetMessageID ( );
    DATE GetTime ( );
    _bstr_t GetFile ( );
    _bstr_t GetPath ( );
    _bstr_t GetRemoteHost ( );
    AS2TransactionStatus GetStatus ( );
    AS2TransactionDirection GetDirection ( );
    _bstr_t GetFrom ( );
    _bstr_t GetTo ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TransactionID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_MessageID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_File (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_RemoteHost (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ AS2TransactionStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ AS2TransactionDirection * pVal ) = 0;
      virtual HRESULT __stdcall get_From (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_To (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0044_0002
{
    AS2TransDirectionInbound = 0,
    AS2TransDirectionOutBound = 1
};

struct __declspec(uuid("4b741313-803f-4633-97b3-0c314596f6cc"))
CIAdminAccount;
    // [ default ] interface ICIAdminAccount

struct __declspec(uuid("dfaf4d38-3e26-494b-97a3-50e4bb235e13"))
ICIAdminAccount : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLogin))
    _bstr_t Login;
    __declspec(property(get=Gettype))
    AdminAccountType type;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLogin ( );
    AdminAccountType Gettype ( );
    IDispatchPtr GetPermission (
        unsigned long nIndex );
    unsigned long GetPermissionsCount ( );
    HRESULT AddPermission (
        IDispatch * pIAdminPermission );
    HRESULT RemovePermissionByIndex (
        unsigned long nIndex );
    HRESULT RemovePermission (
        IDispatch * pIAdminPermission );
    HRESULT RemoveAllPermissions ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Login (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_type (
        /*[out,retval]*/ AdminAccountType * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetPermission (
        /*[in]*/ unsigned long nIndex,
        /*[out,retval]*/ IDispatch * * pIAdminPermission ) = 0;
      virtual HRESULT __stdcall raw_GetPermissionsCount (
        /*[out,retval]*/ unsigned long * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddPermission (
        /*[in]*/ IDispatch * pIAdminPermission ) = 0;
      virtual HRESULT __stdcall raw_RemovePermissionByIndex (
        /*[in]*/ unsigned long nIndex ) = 0;
      virtual HRESULT __stdcall raw_RemovePermission (
        /*[in]*/ IDispatch * pIAdminPermission ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllPermissions ( ) = 0;
};

struct __declspec(uuid("7abd152a-2d7f-4a20-a978-207a7646b0c4"))
CIAdminPermission;
    // [ default ] interface ICIAdminPermission

struct __declspec(uuid("f0dc728c-3bd1-4250-8c94-d85ec06a0962"))
ICIAdminPermission : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    AdminPermissionsPolicy GetPermission ( );
    void PutPermission (
        AdminPermissionsPolicy pVal );
    _bstr_t GetSiteName ( );
    void PutSiteName (
        _bstr_t pVal );
    _bstr_t GetTemplateName ( );
    void PutTemplateName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Permission (
        /*[out,retval]*/ AdminPermissionsPolicy * pVal ) = 0;
      virtual HRESULT __stdcall put_Permission (
        AdminPermissionsPolicy pVal ) = 0;
      virtual HRESULT __stdcall get_SiteName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SiteName (
        BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TemplateName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TemplateName (
        BSTR pVal ) = 0;
};

enum __MIDL___MIDL_itf_SFTPCOMInterface_0000_0000_0005
{
    ServerManagement = 0,
    SiteManagement = 1,
    STManagement = 2,
    UserCreation = 3,
    ChangePassword = 4,
    COMManagement = 5,
    ReportManagement = 6
};

struct __declspec(uuid("b15d6d74-be7e-4527-9bbe-b7a3649994e2"))
CIResetPasswordSettings;
    // [ default ] interface ICIResetPasswordSettings

struct __declspec(uuid("ae66d1a2-20b4-488c-9132-6d09cfa7fbd8"))
CIComplexPasswordSettings;
    // [ default ] interface ICIComplexPasswordSettings

struct __declspec(uuid("23e22651-5dbf-4e31-8348-83792a780582"))
CIAS2OutboundSettings;
    // [ default ] interface ICIAS2OutboundSettings

struct __declspec(uuid("8d919993-b31f-49e1-bb23-29c161ee9c11"))
CIBackupArchiveInfo;
    // [ default ] interface ICIBackupArchiveInfo

struct __declspec(uuid("4eeaef69-66a3-4f29-97b1-c3d9df533b29"))
ICISiteBackupInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRestoreSite,put=PutRestoreSite))
    VARIANT_BOOL RestoreSite;
    __declspec(property(get=GetRestoreVFS,put=PutRestoreVFS))
    VARIANT_BOOL RestoreVFS;
    __declspec(property(get=GetSiteName))
    _bstr_t SiteName;
    __declspec(property(get=GetRootFolder,put=PutRootFolder))
    _bstr_t RootFolder;
    __declspec(property(get=GetAuthManagerID,put=PutAuthManagerID))
    _bstr_t AuthManagerID;
    __declspec(property(get=GetAuthManagerDataBase,put=PutAuthManagerDataBase))
    _bstr_t AuthManagerDataBase;
    __declspec(property(get=GetListenIP))
    _bstr_t ListenIP;
    __declspec(property(get=GetNewListenIP,put=PutNewListenIP))
    _bstr_t NewListenIP;
    __declspec(property(get=GetDMZEnabled,put=PutDMZEnabled))
    VARIANT_BOOL DMZEnabled;
    __declspec(property(get=GetDMZAddress,put=PutDMZAddress))
    _bstr_t DMZAddress;
    __declspec(property(get=GetDMZPort,put=PutDMZPort))
    long DMZPort;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetRestoreSite ( );
    void PutRestoreSite (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRestoreVFS ( );
    void PutRestoreVFS (
        VARIANT_BOOL pVal );
    _bstr_t GetSiteName ( );
    _bstr_t GetRootFolder ( );
    void PutRootFolder (
        _bstr_t pVal );
    _bstr_t GetAuthManagerID ( );
    void PutAuthManagerID (
        _bstr_t pVal );
    _bstr_t GetAuthManagerDataBase ( );
    void PutAuthManagerDataBase (
        _bstr_t pVal );
    _bstr_t GetListenIP ( );
    _bstr_t GetNewListenIP ( );
    void PutNewListenIP (
        _bstr_t pVal );
    VARIANT_BOOL GetDMZEnabled ( );
    void PutDMZEnabled (
        VARIANT_BOOL pVal );
    _bstr_t GetDMZAddress ( );
    void PutDMZAddress (
        _bstr_t pVal );
    long GetDMZPort ( );
    void PutDMZPort (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RestoreSite (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RestoreSite (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RestoreVFS (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RestoreVFS (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SiteName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_RootFolder (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RootFolder (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AuthManagerID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AuthManagerID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AuthManagerDataBase (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AuthManagerDataBase (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ListenIP (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_NewListenIP (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_NewListenIP (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DMZEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DMZEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DMZAddress (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DMZAddress (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DMZPort (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DMZPort (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("e39bff57-0cdc-46dc-96be-54ffdc0d3ec2"))
ICIBackupArchiveInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBackupArchivePath))
    _bstr_t BackupArchivePath;
    __declspec(property(get=GetCreationTime))
    DATE CreationTime;
    __declspec(property(get=GetCreatedBy))
    _bstr_t CreatedBy;
    __declspec(property(get=Gettype))
    _bstr_t type;
    __declspec(property(get=GetSitesCount))
    long SitesCount;
    __declspec(property(get=GetEnableARM,put=PutEnableARM))
    VARIANT_BOOL EnableARM;
    __declspec(property(get=GetARMServerName,put=PutARMServerName))
    _bstr_t ARMServerName;
    __declspec(property(get=GetARMDatabaseName,put=PutARMDatabaseName))
    _bstr_t ARMDatabaseName;
    __declspec(property(get=GetARMUserName,put=PutARMUserName))
    _bstr_t ARMUserName;
    __declspec(property(get=GetARMPassword,put=PutARMPassword))
    _bstr_t ARMPassword;
    __declspec(property(get=GetARMDatabaseType,put=PutARMDatabaseType))
    ARMDatabaseType _ARMDatabaseType;
    __declspec(property(get=GetARMAuthenticationType,put=PutARMAuthenticationType))
    ARMAuthenticationType _ARMAuthenticationType;
    __declspec(property(get=GetARMStopAuditingOnError,put=PutARMStopAuditingOnError))
    VARIANT_BOOL ARMStopAuditingOnError;
    __declspec(property(get=GetARMFailureAuditFolder,put=PutARMFailureAuditFolder))
    _bstr_t ARMFailureAuditFolder;
    __declspec(property(get=GetARMFailureEmailList,put=PutARMFailureEmailList))
    _bstr_t ARMFailureEmailList;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetBackupArchivePath ( );
    DATE GetCreationTime ( );
    _bstr_t GetCreatedBy ( );
    _bstr_t Gettype ( );
    long GetSitesCount ( );
    ICISiteBackupInfoPtr GetSiteBackupInfo (
        long nIndex );
    HRESULT SetSiteBackupInfo (
        struct ICISiteBackupInfo * newVal );
    VARIANT_BOOL GetEnableARM ( );
    void PutEnableARM (
        VARIANT_BOOL pVal );
    _bstr_t GetARMServerName ( );
    void PutARMServerName (
        _bstr_t pVal );
    _bstr_t GetARMDatabaseName ( );
    void PutARMDatabaseName (
        _bstr_t pVal );
    _bstr_t GetARMUserName ( );
    void PutARMUserName (
        _bstr_t pVal );
    _bstr_t GetARMPassword ( );
    void PutARMPassword (
        _bstr_t pVal );
    ARMDatabaseType GetARMDatabaseType ( );
    void PutARMDatabaseType (
        ARMDatabaseType pVal );
    ARMAuthenticationType GetARMAuthenticationType ( );
    void PutARMAuthenticationType (
        ARMAuthenticationType pVal );
    VARIANT_BOOL GetARMStopAuditingOnError ( );
    void PutARMStopAuditingOnError (
        VARIANT_BOOL pVal );
    _bstr_t GetARMFailureAuditFolder ( );
    void PutARMFailureAuditFolder (
        _bstr_t pVal );
    _bstr_t GetARMFailureEmailList ( );
    void PutARMFailureEmailList (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BackupArchivePath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CreationTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_CreatedBy (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_type (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SitesCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSiteBackupInfo (
        /*[in]*/ long nIndex,
        /*[out,retval]*/ struct ICISiteBackupInfo * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetSiteBackupInfo (
        /*[in]*/ struct ICISiteBackupInfo * newVal ) = 0;
      virtual HRESULT __stdcall get_EnableARM (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableARM (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ARMServerName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ARMServerName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ARMDatabaseName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ARMDatabaseName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ARMUserName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ARMUserName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ARMPassword (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ARMPassword (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ARMDatabaseType (
        /*[out,retval]*/ ARMDatabaseType * pVal ) = 0;
      virtual HRESULT __stdcall put_ARMDatabaseType (
        /*[in]*/ ARMDatabaseType pVal ) = 0;
      virtual HRESULT __stdcall get_ARMAuthenticationType (
        /*[out,retval]*/ ARMAuthenticationType * pVal ) = 0;
      virtual HRESULT __stdcall put_ARMAuthenticationType (
        /*[in]*/ ARMAuthenticationType pVal ) = 0;
      virtual HRESULT __stdcall get_ARMStopAuditingOnError (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ARMStopAuditingOnError (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ARMFailureAuditFolder (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ARMFailureAuditFolder (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ARMFailureEmailList (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ARMFailureEmailList (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("1ea1c927-cd3a-4596-ab32-b2e53540ca2f"))
CISiteBackupInfo;
    // [ default ] interface ICISiteBackupInfo

struct __declspec(uuid("7d666bb7-33d1-4c3b-8caa-6dd1781188e8"))
CIAS2InboundSettings;
    // [ default ] interface ICIAS2InboundSettings

struct __declspec(uuid("9f2d9824-67fa-42ef-b629-05370c5ec8ad"))
CIConnectedUser;
    // [ default ] interface ICIConnectedUser

struct __declspec(uuid("f7eb8459-d3c8-4677-911f-5e03bb12791c"))
ICIConnectedUser : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLogin))
    _bstr_t Login;
    __declspec(property(get=GetID))
    long ID;
    __declspec(property(get=GetConnectionType))
    _bstr_t ConnectionType;
    __declspec(property(get=GetConnectedAt))
    DATE ConnectedAt;
    __declspec(property(get=GetIP))
    _bstr_t IP;
    __declspec(property(get=Gettype))
    _bstr_t type;
    __declspec(property(get=GetStructure))
    _bstr_t Structure;
    __declspec(property(get=GetTransferMode))
    _bstr_t TransferMode;
    __declspec(property(get=GetDataConnection))
    _bstr_t DataConnection;
    __declspec(property(get=GetFileName))
    _bstr_t FileName;
    __declspec(property(get=GetFileSize))
    __int64 FileSize;
    __declspec(property(get=GetTransferredSize))
    __int64 TransferredSize;
    __declspec(property(get=GetTransferTime))
    long TransferTime;
    __declspec(property(get=GetLog))
    _bstr_t Log;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLogin ( );
    long GetID ( );
    _bstr_t GetConnectionType ( );
    DATE GetConnectedAt ( );
    _bstr_t GetIP ( );
    _bstr_t Gettype ( );
    _bstr_t GetStructure ( );
    _bstr_t GetTransferMode ( );
    _bstr_t GetDataConnection ( );
    _bstr_t GetFileName ( );
    __int64 GetFileSize ( );
    __int64 GetTransferredSize ( );
    long GetTransferTime ( );
    _bstr_t GetLog ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Login (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectionType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectedAt (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_IP (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_type (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Structure (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_TransferMode (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_DataConnection (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FileSize (
        /*[out,retval]*/ __int64 * pVal ) = 0;
      virtual HRESULT __stdcall get_TransferredSize (
        /*[out,retval]*/ __int64 * pVal ) = 0;
      virtual HRESULT __stdcall get_TransferTime (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Log (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

//
// Function implementation mapping
//

#pragma start_map_region(".\import\sftpcominterface.tli")
__declspec(implementation_key(1)) IPAccessRuleType ICIIPAccessRule::Gettype ( );
__declspec(implementation_key(2)) VARIANT_BOOL ICIManualIPAccessRule::GetAllow ( );
__declspec(implementation_key(3)) _bstr_t ICIManualIPAccessRule::GetAddress ( );
__declspec(implementation_key(4)) DATE ICIManualIPAccessRule::GetAdded ( );
__declspec(implementation_key(5)) _variant_t ICIAutobanIPAccessRule::GetBannedIPs ( );
__declspec(implementation_key(6)) _bstr_t ICIBannedIP::GetAddress ( );
__declspec(implementation_key(7)) DATE ICIBannedIP::GetBanned ( );
__declspec(implementation_key(8)) VARIANT_BOOL ICIBannedIP::GetPermanently ( );
__declspec(implementation_key(9)) DATE ICIBannedIP::GetExpires ( );
__declspec(implementation_key(10)) _bstr_t ICIBannedIP::GetReason ( );
__declspec(implementation_key(11)) VARIANT_BOOL IPermission::GetFileUpload ( );
__declspec(implementation_key(12)) void IPermission::PutFileUpload ( VARIANT_BOOL pVal );
__declspec(implementation_key(13)) VARIANT_BOOL IPermission::GetFileDelete ( );
__declspec(implementation_key(14)) void IPermission::PutFileDelete ( VARIANT_BOOL pVal );
__declspec(implementation_key(15)) VARIANT_BOOL IPermission::GetFileRename ( );
__declspec(implementation_key(16)) void IPermission::PutFileRename ( VARIANT_BOOL pVal );
__declspec(implementation_key(17)) VARIANT_BOOL IPermission::GetFileAppend ( );
__declspec(implementation_key(18)) void IPermission::PutFileAppend ( VARIANT_BOOL pVal );
__declspec(implementation_key(19)) VARIANT_BOOL IPermission::GetFileDownload ( );
__declspec(implementation_key(20)) void IPermission::PutFileDownload ( VARIANT_BOOL pVal );
__declspec(implementation_key(21)) VARIANT_BOOL IPermission::GetDirCreate ( );
__declspec(implementation_key(22)) void IPermission::PutDirCreate ( VARIANT_BOOL pVal );
__declspec(implementation_key(23)) VARIANT_BOOL IPermission::GetDirDelete ( );
__declspec(implementation_key(24)) void IPermission::PutDirDelete ( VARIANT_BOOL pVal );
__declspec(implementation_key(25)) VARIANT_BOOL IPermission::GetDirList ( );
__declspec(implementation_key(26)) void IPermission::PutDirList ( VARIANT_BOOL pVal );
__declspec(implementation_key(27)) VARIANT_BOOL IPermission::GetDirShowHidden ( );
__declspec(implementation_key(28)) void IPermission::PutDirShowHidden ( VARIANT_BOOL pVal );
__declspec(implementation_key(29)) VARIANT_BOOL IPermission::GetDirShowReadOnly ( );
__declspec(implementation_key(30)) void IPermission::PutDirShowReadOnly ( VARIANT_BOOL pVal );
__declspec(implementation_key(31)) VARIANT_BOOL IPermission::GetDirShowInList ( );
__declspec(implementation_key(32)) void IPermission::PutDirShowInList ( VARIANT_BOOL pVal );
__declspec(implementation_key(33)) _bstr_t IPermission::GetInheritedFrom ( );
__declspec(implementation_key(34)) _bstr_t IPermission::GetFolder ( );
__declspec(implementation_key(35)) _bstr_t IPermission::GetClient ( );
__declspec(implementation_key(36)) VARIANT_BOOL IPermission::GetIsGroup ( );
__declspec(implementation_key(37)) VARIANT_BOOL IPermission::GetIsInherited ( );
__declspec(implementation_key(38)) long ICIComplexPasswordSettings::GetMinPasswordLength ( );
__declspec(implementation_key(39)) void ICIComplexPasswordSettings::PutMinPasswordLength ( long pVal );
__declspec(implementation_key(40)) long ICIComplexPasswordSettings::GetMinCharCategoriesInPassword ( );
__declspec(implementation_key(41)) void ICIComplexPasswordSettings::PutMinCharCategoriesInPassword ( long pVal );
__declspec(implementation_key(42)) VARIANT_BOOL ICIComplexPasswordSettings::GetRequireUpperCaseInPassword ( );
__declspec(implementation_key(43)) void ICIComplexPasswordSettings::PutRequireUpperCaseInPassword ( VARIANT_BOOL pVal );
__declspec(implementation_key(44)) VARIANT_BOOL ICIComplexPasswordSettings::GetRequireLowerCaseInPassword ( );
__declspec(implementation_key(45)) void ICIComplexPasswordSettings::PutRequireLowerCaseInPassword ( VARIANT_BOOL pVal );
__declspec(implementation_key(46)) VARIANT_BOOL ICIComplexPasswordSettings::GetRequireDigitsInPassword ( );
__declspec(implementation_key(47)) void ICIComplexPasswordSettings::PutRequireDigitsInPassword ( VARIANT_BOOL pVal );
__declspec(implementation_key(48)) VARIANT_BOOL ICIComplexPasswordSettings::GetRequireNonAlphaNumericInPassword ( );
__declspec(implementation_key(49)) void ICIComplexPasswordSettings::PutRequireNonAlphaNumericInPassword ( VARIANT_BOOL pVal );
__declspec(implementation_key(50)) long ICIComplexPasswordSettings::GetMaxUsernameCharactersInPassword ( );
__declspec(implementation_key(51)) void ICIComplexPasswordSettings::PutMaxUsernameCharactersInPassword ( long pVal );
__declspec(implementation_key(52)) long ICIComplexPasswordSettings::GetMaxRepeatingCharacters ( );
__declspec(implementation_key(53)) void ICIComplexPasswordSettings::PutMaxRepeatingCharacters ( long pVal );
__declspec(implementation_key(54)) VARIANT_BOOL ICIComplexPasswordSettings::GetProhibitDictionaryWordsInPassword ( );
__declspec(implementation_key(55)) void ICIComplexPasswordSettings::PutProhibitDictionaryWordsInPassword ( VARIANT_BOOL pVal );
__declspec(implementation_key(56)) VARIANT_BOOL ICIComplexPasswordSettings::GetProhibitReverseDictionaryWordsInPassword ( );
__declspec(implementation_key(57)) void ICIComplexPasswordSettings::PutProhibitReverseDictionaryWordsInPassword ( VARIANT_BOOL pVal );
__declspec(implementation_key(58)) _bstr_t ICIComplexPasswordSettings::GetPasswordDictionaryPath ( );
__declspec(implementation_key(59)) void ICIComplexPasswordSettings::PutPasswordDictionaryPath ( _bstr_t pVal );
__declspec(implementation_key(60)) long ICIResetPasswordSettings::GetMaxPasswordAgeDays ( );
__declspec(implementation_key(61)) void ICIResetPasswordSettings::PutMaxPasswordAgeDays ( long pVal );
__declspec(implementation_key(62)) long ICIResetPasswordSettings::GetDaysPriorPasswordExpirationToRemindUser ( );
__declspec(implementation_key(63)) void ICIResetPasswordSettings::PutDaysPriorPasswordExpirationToRemindUser ( long pVal );
__declspec(implementation_key(64)) VARIANT_BOOL ICIResetPasswordSettings::GetSendEMailBeforeExpiration ( );
__declspec(implementation_key(65)) void ICIResetPasswordSettings::PutSendEMailBeforeExpiration ( VARIANT_BOOL pVal );
__declspec(implementation_key(66)) VARIANT_BOOL ICIResetPasswordSettings::GetSendEMailUponExpiration ( );
__declspec(implementation_key(67)) void ICIResetPasswordSettings::PutSendEMailUponExpiration ( VARIANT_BOOL pVal );
__declspec(implementation_key(68)) _bstr_t ICIAS2OutboundSettings::GetMonitoredHotFolder ( );
__declspec(implementation_key(69)) void ICIAS2OutboundSettings::PutMonitoredHotFolder ( _bstr_t pVal );
__declspec(implementation_key(70)) _bstr_t ICIAS2OutboundSettings::GetFileIncludeMask ( );
__declspec(implementation_key(71)) void ICIAS2OutboundSettings::PutFileIncludeMask ( _bstr_t pVal );
__declspec(implementation_key(72)) _bstr_t ICIAS2OutboundSettings::GetFileExcludeMask ( );
__declspec(implementation_key(73)) void ICIAS2OutboundSettings::PutFileExcludeMask ( _bstr_t pVal );
__declspec(implementation_key(74)) VARIANT_BOOL ICIAS2OutboundSettings::GetDeleteSourceAfterOffload ( );
__declspec(implementation_key(75)) void ICIAS2OutboundSettings::PutDeleteSourceAfterOffload ( VARIANT_BOOL pVal );
__declspec(implementation_key(76)) _bstr_t ICIAS2OutboundSettings::GetHost ( );
__declspec(implementation_key(77)) void ICIAS2OutboundSettings::PutHost ( _bstr_t pVal );
__declspec(implementation_key(78)) long ICIAS2OutboundSettings::GetPort ( );
__declspec(implementation_key(79)) void ICIAS2OutboundSettings::PutPort ( long pVal );
__declspec(implementation_key(80)) _bstr_t ICIAS2OutboundSettings::GetMailboxPath ( );
__declspec(implementation_key(81)) void ICIAS2OutboundSettings::PutMailboxPath ( _bstr_t pVal );
__declspec(implementation_key(82)) _bstr_t ICIAS2OutboundSettings::GetUsername ( );
__declspec(implementation_key(83)) void ICIAS2OutboundSettings::PutUsername ( _bstr_t pVal );
__declspec(implementation_key(84)) _bstr_t ICIAS2OutboundSettings::GetPassword ( );
__declspec(implementation_key(85)) void ICIAS2OutboundSettings::PutPassword ( _bstr_t pVal );
__declspec(implementation_key(86)) _bstr_t ICIAS2OutboundSettings::GetSubject ( );
__declspec(implementation_key(87)) void ICIAS2OutboundSettings::PutSubject ( _bstr_t pVal );
__declspec(implementation_key(88)) AS2ContentType ICIAS2OutboundSettings::GetContentType ( );
__declspec(implementation_key(89)) void ICIAS2OutboundSettings::PutContentType ( AS2ContentType pVal );
__declspec(implementation_key(90)) VARIANT_BOOL ICIAS2OutboundSettings::GetCompress ( );
__declspec(implementation_key(91)) void ICIAS2OutboundSettings::PutCompress ( VARIANT_BOOL pVal );
__declspec(implementation_key(92)) VARIANT_BOOL ICIAS2OutboundSettings::GetEncrypt ( );
__declspec(implementation_key(93)) void ICIAS2OutboundSettings::PutEncrypt ( VARIANT_BOOL pVal );
__declspec(implementation_key(94)) VARIANT_BOOL ICIAS2OutboundSettings::GetSign ( );
__declspec(implementation_key(95)) void ICIAS2OutboundSettings::PutSign ( VARIANT_BOOL pVal );
__declspec(implementation_key(96)) _bstr_t ICIAS2OutboundSettings::GetPartnerCertificate ( );
__declspec(implementation_key(97)) void ICIAS2OutboundSettings::PutPartnerCertificate ( _bstr_t pVal );
__declspec(implementation_key(98)) _bstr_t ICIAS2OutboundSettings::GetID ( );
__declspec(implementation_key(99)) void ICIAS2OutboundSettings::PutID ( _bstr_t pVal );
__declspec(implementation_key(100)) _bstr_t ICIAS2OutboundSettings::GetPartnerID ( );
__declspec(implementation_key(101)) void ICIAS2OutboundSettings::PutPartnerID ( _bstr_t pVal );
__declspec(implementation_key(102)) AS2ReceiptPolicy ICIAS2OutboundSettings::GetReceiptPolicy ( );
__declspec(implementation_key(103)) void ICIAS2OutboundSettings::PutReceiptPolicy ( AS2ReceiptPolicy pVal );
__declspec(implementation_key(104)) AS2ReceiptDelivery ICIAS2OutboundSettings::GetReceiptDelivery ( );
__declspec(implementation_key(105)) void ICIAS2OutboundSettings::PutReceiptDelivery ( AS2ReceiptDelivery pVal );
__declspec(implementation_key(106)) long ICIAS2OutboundSettings::GetMessageSendAttemptTimeout ( );
__declspec(implementation_key(107)) void ICIAS2OutboundSettings::PutMessageSendAttemptTimeout ( long pVal );
__declspec(implementation_key(108)) long ICIAS2OutboundSettings::GetMessageSendAttemptRetries ( );
__declspec(implementation_key(109)) void ICIAS2OutboundSettings::PutMessageSendAttemptRetries ( long pVal );
__declspec(implementation_key(110)) long ICIAS2OutboundSettings::GetSendAttemptDelayBetweenRetries ( );
__declspec(implementation_key(111)) void ICIAS2OutboundSettings::PutSendAttemptDelayBetweenRetries ( long pVal );
__declspec(implementation_key(112)) long ICIAS2OutboundSettings::GetAsyncReceiptTimeout ( );
__declspec(implementation_key(113)) void ICIAS2OutboundSettings::PutAsyncReceiptTimeout ( long pVal );
__declspec(implementation_key(114)) VARIANT_BOOL ICIAS2OutboundSettings::GetUseProxy ( );
__declspec(implementation_key(115)) void ICIAS2OutboundSettings::PutUseProxy ( VARIANT_BOOL pVal );
__declspec(implementation_key(116)) AS2ProxyType ICIAS2OutboundSettings::GetProxyType ( );
__declspec(implementation_key(117)) void ICIAS2OutboundSettings::PutProxyType ( AS2ProxyType pVal );
__declspec(implementation_key(118)) long ICIAS2OutboundSettings::GetProxyPort ( );
__declspec(implementation_key(119)) void ICIAS2OutboundSettings::PutProxyPort ( long pVal );
__declspec(implementation_key(120)) _bstr_t ICIAS2OutboundSettings::GetProxyHostName ( );
__declspec(implementation_key(121)) void ICIAS2OutboundSettings::PutProxyHostName ( _bstr_t pVal );
__declspec(implementation_key(122)) _bstr_t ICIAS2OutboundSettings::GetProxyUserName ( );
__declspec(implementation_key(123)) void ICIAS2OutboundSettings::PutProxyUserName ( _bstr_t pVal );
__declspec(implementation_key(124)) _bstr_t ICIAS2OutboundSettings::GetProxyPassword ( );
__declspec(implementation_key(125)) void ICIAS2OutboundSettings::PutProxyPassword ( _bstr_t pVal );
__declspec(implementation_key(126)) IDispatchPtr ICIAS2OutboundSettings::GetFailureCommand ( );
__declspec(implementation_key(127)) HRESULT ICIAS2OutboundSettings::SetFailureCommand ( IDispatch * pdispCommandParams );
__declspec(implementation_key(128)) IDispatchPtr ICIAS2OutboundSettings::GetSuccessCommand ( );
__declspec(implementation_key(129)) HRESULT ICIAS2OutboundSettings::SetSuccessCommand ( IDispatch * pdispCommandParams );
__declspec(implementation_key(130)) IDispatchPtr ICIAS2OutboundSettings::GetFailureEmail ( );
__declspec(implementation_key(131)) HRESULT ICIAS2OutboundSettings::SetFailureEmail ( IDispatch * pdispEmailParams );
__declspec(implementation_key(132)) IDispatchPtr ICIAS2OutboundSettings::GetSuccessEmail ( );
__declspec(implementation_key(133)) HRESULT ICIAS2OutboundSettings::SetSuccessEmail ( IDispatch * pdispEmailParams );
__declspec(implementation_key(134)) _bstr_t ICIAS2InboundSettings::GetPartnerCertificate ( );
__declspec(implementation_key(135)) void ICIAS2InboundSettings::PutPartnerCertificate ( _bstr_t pVal );
__declspec(implementation_key(136)) _bstr_t ICIAS2InboundSettings::GetID ( );
__declspec(implementation_key(137)) void ICIAS2InboundSettings::PutID ( _bstr_t pVal );
__declspec(implementation_key(138)) _bstr_t ICIAS2InboundSettings::GetPartnerID ( );
__declspec(implementation_key(139)) void ICIAS2InboundSettings::PutPartnerID ( _bstr_t pVal );
__declspec(implementation_key(140)) AS2IDMismatchPolicy ICIAS2InboundSettings::GetPartnerIDMismatchPolicy ( );
__declspec(implementation_key(141)) void ICIAS2InboundSettings::PutPartnerIDMismatchPolicy ( AS2IDMismatchPolicy pVal );
__declspec(implementation_key(142)) AS2IDMismatchPolicy ICIAS2InboundSettings::GetEFTIDMismatchPolicy ( );
__declspec(implementation_key(143)) void ICIAS2InboundSettings::PutEFTIDMismatchPolicy ( AS2IDMismatchPolicy pVal );
__declspec(implementation_key(144)) AS2DoubleMsgIDPolicy ICIAS2InboundSettings::GetDoubleMsgIDPolicy ( );
__declspec(implementation_key(145)) void ICIAS2InboundSettings::PutDoubleMsgIDPolicy ( AS2DoubleMsgIDPolicy pVal );
__declspec(implementation_key(146)) AS2DoubleContentPolicy ICIAS2InboundSettings::GetDoubleContentPolicy ( );
__declspec(implementation_key(147)) void ICIAS2InboundSettings::PutDoubleContentPolicy ( AS2DoubleContentPolicy pVal );
__declspec(implementation_key(148)) long ICIAS2InboundSettings::GetMDNSendTimeout ( );
__declspec(implementation_key(149)) void ICIAS2InboundSettings::PutMDNSendTimeout ( long pVal );
__declspec(implementation_key(150)) long ICIAS2InboundSettings::GetMDNSendAttemptRetries ( );
__declspec(implementation_key(151)) void ICIAS2InboundSettings::PutMDNSendAttemptRetries ( long pVal );
__declspec(implementation_key(152)) long ICIAS2InboundSettings::GetMDNSendAttemptDelayBetweenRetries ( );
__declspec(implementation_key(153)) void ICIAS2InboundSettings::PutMDNSendAttemptDelayBetweenRetries ( long pVal );
__declspec(implementation_key(154)) _bstr_t ICIAS2InboundSettings::GetMoveReceivedDataToFolder ( );
__declspec(implementation_key(155)) void ICIAS2InboundSettings::PutMoveReceivedDataToFolder ( _bstr_t pVal );
__declspec(implementation_key(156)) _bstr_t ICIAS2InboundSettings::GetRenameFilesTo ( );
__declspec(implementation_key(157)) void ICIAS2InboundSettings::PutRenameFilesTo ( _bstr_t pVal );
__declspec(implementation_key(158)) VARIANT_BOOL ICIAS2InboundSettings::GetSkipHTTPContinue ( );
__declspec(implementation_key(159)) void ICIAS2InboundSettings::PutSkipHTTPContinue ( VARIANT_BOOL pVal );
__declspec(implementation_key(160)) AS2AuthenticationType ICIAS2InboundSettings::GetAuthenticationType ( );
__declspec(implementation_key(161)) void ICIAS2InboundSettings::PutAuthenticationType ( AS2AuthenticationType pVal );
__declspec(implementation_key(162)) AS2SignatureMissingPolicy ICIAS2InboundSettings::GetSignatureMissingPolicy ( );
__declspec(implementation_key(163)) void ICIAS2InboundSettings::PutSignatureMissingPolicy ( AS2SignatureMissingPolicy pVal );
__declspec(implementation_key(164)) AS2EncryptMissingPolicy ICIAS2InboundSettings::GetEncryptMissingPolicy ( );
__declspec(implementation_key(165)) void ICIAS2InboundSettings::PutEncryptMissingPolicy ( AS2EncryptMissingPolicy pVal );
__declspec(implementation_key(166)) IDispatchPtr ICIAS2InboundSettings::GetFailureCommand ( );
__declspec(implementation_key(167)) HRESULT ICIAS2InboundSettings::SetFailureCommand ( IDispatch * pdispCommandParams );
__declspec(implementation_key(168)) IDispatchPtr ICIAS2InboundSettings::GetSuccessCommand ( );
__declspec(implementation_key(169)) HRESULT ICIAS2InboundSettings::SetSuccessCommand ( IDispatch * pdispCommandParams );
__declspec(implementation_key(170)) IDispatchPtr ICIAS2InboundSettings::GetFailureEmail ( );
__declspec(implementation_key(171)) HRESULT ICIAS2InboundSettings::SetFailureEmail ( IDispatch * pdispEmailParams );
__declspec(implementation_key(172)) IDispatchPtr ICIAS2InboundSettings::GetSuccessEmail ( );
__declspec(implementation_key(173)) HRESULT ICIAS2InboundSettings::SetSuccessEmail ( IDispatch * pdispEmailParams );
__declspec(implementation_key(174)) VARIANT_BOOL ICIClientSettings::GetEnableAccount ( VARIANT * pInherited );
__declspec(implementation_key(175)) HRESULT ICIClientSettings::SetEnableAccount ( SFTPAdvBool val );
__declspec(implementation_key(176)) VARIANT_BOOL ICIClientSettings::GetHomeDirIsRoot ( VARIANT * pInherited );
__declspec(implementation_key(177)) HRESULT ICIClientSettings::SetHomeDirIsRoot ( SFTPAdvBool val );
__declspec(implementation_key(178)) VARIANT_BOOL ICIClientSettings::GetAllowNoop ( VARIANT * pInherited );
__declspec(implementation_key(179)) HRESULT ICIClientSettings::SetAllowNoop ( SFTPAdvBool val );
__declspec(implementation_key(180)) VARIANT_BOOL ICIClientSettings::GetAllowXCRC ( VARIANT * pInherited );
__declspec(implementation_key(181)) HRESULT ICIClientSettings::SetAllowXCRC ( SFTPAdvBool val );
__declspec(implementation_key(182)) VARIANT_BOOL ICIClientSettings::GetChangePwd ( VARIANT * pInherited );
__declspec(implementation_key(183)) HRESULT ICIClientSettings::SetChangePwd ( SFTPAdvBool val );
__declspec(implementation_key(184)) VARIANT_BOOL ICIClientSettings::GetEnableTimeOut ( VARIANT * pInherited );
__declspec(implementation_key(185)) HRESULT ICIClientSettings::SetEnableTimeOut ( SFTPAdvBool val );
__declspec(implementation_key(186)) VARIANT_BOOL ICIClientSettings::GetHasMaxSpeed ( VARIANT * pInherited );
__declspec(implementation_key(187)) HRESULT ICIClientSettings::SetHasMaxSpeed ( SFTPAdvBool val );
__declspec(implementation_key(188)) VARIANT_BOOL ICIClientSettings::GetHasMaxUsers ( VARIANT * pInherited );
__declspec(implementation_key(189)) HRESULT ICIClientSettings::SetHasMaxUsers ( SFTPAdvBool val );
__declspec(implementation_key(190)) VARIANT_BOOL ICIClientSettings::GetHasPwdRetries ( VARIANT * pInherited );
__declspec(implementation_key(191)) HRESULT ICIClientSettings::SetHasPwdRetries ( SFTPAdvBool val );
__declspec(implementation_key(192)) VARIANT_BOOL ICIClientSettings::GetClearFTP ( VARIANT * pInherited );
__declspec(implementation_key(193)) HRESULT ICIClientSettings::SetClearFTP ( SFTPAdvBool val );
__declspec(implementation_key(194)) VARIANT_BOOL ICIClientSettings::GetEnableDiskQuota ( VARIANT * pInherited );
__declspec(implementation_key(195)) HRESULT ICIClientSettings::SetEnableDiskQuota ( SFTPAdvBool val );
__declspec(implementation_key(196)) long ICIClientSettings::GetMaxIPs ( VARIANT * pInherited );
__declspec(implementation_key(197)) HRESULT ICIClientSettings::SetMaxIPs ( long val );
__declspec(implementation_key(198)) long ICIClientSettings::GetMaxSpeed ( VARIANT * pInherited );
__declspec(implementation_key(199)) HRESULT ICIClientSettings::SetMaxSpeed ( long val );
__declspec(implementation_key(200)) long ICIClientSettings::GetMaxUsers ( VARIANT * pInherited );
__declspec(implementation_key(201)) HRESULT ICIClientSettings::SetMaxUsers ( long val );
__declspec(implementation_key(202)) long ICIClientSettings::GetPwdRetries ( VARIANT * pInherited );
__declspec(implementation_key(203)) HRESULT ICIClientSettings::SetPwdRetries ( long val );
__declspec(implementation_key(204)) long ICIClientSettings::GetTimeOut ( VARIANT * pInherited );
__declspec(implementation_key(205)) HRESULT ICIClientSettings::SetTimeOut ( long val );
__declspec(implementation_key(206)) long ICIClientSettings::GetDownloadsPerSession ( VARIANT * pInherited );
__declspec(implementation_key(207)) HRESULT ICIClientSettings::SetDownloadsPerSession ( long val );
__declspec(implementation_key(208)) long ICIClientSettings::GetUploadsPerSession ( VARIANT * pInherited );
__declspec(implementation_key(209)) HRESULT ICIClientSettings::SetUploadsPerSession ( long val );
__declspec(implementation_key(210)) long ICIClientSettings::GetLoginMsg ( );
__declspec(implementation_key(211)) HRESULT ICIClientSettings::SetLoginMsg ( long val );
__declspec(implementation_key(212)) VARIANT_BOOL ICIClientSettings::GetHomeDir ( VARIANT * pInherited );
__declspec(implementation_key(213)) HRESULT ICIClientSettings::SetHomeDir ( SFTPAdvBool val );
__declspec(implementation_key(214)) long ICIClientSettings::GetIncorrectPasswordAttempts ( );
__declspec(implementation_key(215)) long ICIClientSettings::GetMaxDownloadSize ( VARIANT * pInherited );
__declspec(implementation_key(216)) HRESULT ICIClientSettings::SetMaxDownloadSize ( long val );
__declspec(implementation_key(217)) long ICIClientSettings::GetMaxSpace ( VARIANT * pInherited );
__declspec(implementation_key(218)) HRESULT ICIClientSettings::SetMaxSpace ( long val );
__declspec(implementation_key(219)) long ICIClientSettings::GetMaxUploadSize ( VARIANT * pInherited );
__declspec(implementation_key(220)) HRESULT ICIClientSettings::SetMaxUploadSize ( long val );
__declspec(implementation_key(221)) long ICIClientSettings::GetUsedSpace ( );
__declspec(implementation_key(222)) _bstr_t ICIClientSettings::GetDescription ( );
__declspec(implementation_key(223)) HRESULT ICIClientSettings::SetDescription ( _bstr_t bstrVal );
__declspec(implementation_key(224)) _bstr_t ICIClientSettings::GetHomeDirString ( );
__declspec(implementation_key(225)) HRESULT ICIClientSettings::SetHomeDirString ( _bstr_t bstrVal );
__declspec(implementation_key(226)) _bstr_t ICIClientSettings::GetLoginMsgString ( );
__declspec(implementation_key(227)) HRESULT ICIClientSettings::SetLoginMsgString ( _bstr_t bstrVal );
__declspec(implementation_key(228)) _bstr_t ICIClientSettings::GetFullName ( );
__declspec(implementation_key(229)) void ICIClientSettings::PutFullName ( _bstr_t pVal );
__declspec(implementation_key(230)) _bstr_t ICIClientSettings::GetComment ( );
__declspec(implementation_key(231)) void ICIClientSettings::PutComment ( _bstr_t pVal );
__declspec(implementation_key(232)) _bstr_t ICIClientSettings::GetEmail ( );
__declspec(implementation_key(233)) void ICIClientSettings::PutEmail ( _bstr_t pVal );
__declspec(implementation_key(234)) _bstr_t ICIClientSettings::GetFax ( );
__declspec(implementation_key(235)) void ICIClientSettings::PutFax ( _bstr_t pVal );
__declspec(implementation_key(236)) _bstr_t ICIClientSettings::GetPhone ( );
__declspec(implementation_key(237)) void ICIClientSettings::PutPhone ( _bstr_t pVal );
__declspec(implementation_key(238)) _bstr_t ICIClientSettings::GetPager ( );
__declspec(implementation_key(239)) void ICIClientSettings::PutPager ( _bstr_t pVal );
__declspec(implementation_key(240)) _bstr_t ICIClientSettings::GetSftpAuthenticationType ( VARIANT * pInherited );
__declspec(implementation_key(241)) HRESULT ICIClientSettings::SetSftpAuthenticationType ( _bstr_t val );
__declspec(implementation_key(242)) long ICIClientSettings::GetSSHKeyID ( VARIANT * pInherited );
__declspec(implementation_key(243)) HRESULT ICIClientSettings::SetSSHKeyID ( long val );
__declspec(implementation_key(244)) VARIANT_BOOL ICIClientSettings::GetExpirationDate ( VARIANT * dDate );
__declspec(implementation_key(245)) HRESULT ICIClientSettings::SetExpirationDate ( VARIANT * dDate, VARIANT_BOOL bEnable );
__declspec(implementation_key(246)) VARIANT_BOOL ICIClientSettings::GetHasMaxIPs ( VARIANT * pInherited );
__declspec(implementation_key(247)) HRESULT ICIClientSettings::SetHasMaxIPs ( SFTPAdvBool val );
__declspec(implementation_key(248)) VARIANT_BOOL ICIClientSettings::GetHasDownloadsPerSession ( VARIANT * pInherited );
__declspec(implementation_key(249)) HRESULT ICIClientSettings::SetHasDownloadsPerSession ( SFTPAdvBool val );
__declspec(implementation_key(250)) VARIANT_BOOL ICIClientSettings::GetHasUploadsPerSession ( VARIANT * pInherited );
__declspec(implementation_key(251)) HRESULT ICIClientSettings::SetHasUploadsPerSession ( SFTPAdvBool val );
__declspec(implementation_key(252)) VARIANT_BOOL ICIClientSettings::GetHasMaxDownloadSize ( VARIANT * pInherited );
__declspec(implementation_key(253)) HRESULT ICIClientSettings::SetHasMaxDownloadSize ( SFTPAdvBool val );
__declspec(implementation_key(254)) VARIANT_BOOL ICIClientSettings::GetHasMaxUploadSize ( VARIANT * pInherited );
__declspec(implementation_key(255)) HRESULT ICIClientSettings::SetHasMaxUploadSize ( SFTPAdvBool val );
__declspec(implementation_key(256)) VARIANT_BOOL ICIClientSettings::GetSFTP ( VARIANT * pInherited );
__declspec(implementation_key(257)) HRESULT ICIClientSettings::SetSFTP ( SFTPAdvBool val );
__declspec(implementation_key(258)) HRESULT ICIClientSettings::SetAllowMODEZ ( SFTPAdvBool val );
__declspec(implementation_key(259)) VARIANT_BOOL ICIClientSettings::GetAllowMODEZ ( VARIANT * pInherited );
__declspec(implementation_key(260)) VARIANT_BOOL ICIClientSettings::GetAppletEnabled ( VARIANT * pInherited );
__declspec(implementation_key(261)) HRESULT ICIClientSettings::SetAppletEnabled ( SFTPAdvBool val );
__declspec(implementation_key(262)) _bstr_t ICIClientSettings::GetCustom1 ( );
__declspec(implementation_key(263)) void ICIClientSettings::PutCustom1 ( _bstr_t pVal );
__declspec(implementation_key(264)) _bstr_t ICIClientSettings::GetCustom2 ( );
__declspec(implementation_key(265)) void ICIClientSettings::PutCustom2 ( _bstr_t pVal );
__declspec(implementation_key(266)) _bstr_t ICIClientSettings::GetCustom3 ( );
__declspec(implementation_key(267)) void ICIClientSettings::PutCustom3 ( _bstr_t pVal );
__declspec(implementation_key(268)) _variant_t ICIClientSettings::GetExpirationDateAsVariant ( );
__declspec(implementation_key(269)) _bstr_t ICIClientSettings::GetSSLAuthenticationType ( VARIANT * pInherited );
__declspec(implementation_key(270)) HRESULT ICIClientSettings::SetSSLAuthenticationType ( _bstr_t val );
__declspec(implementation_key(271)) long ICIClientSettings::GetSSLKeyID ( VARIANT * pInherited );
__declspec(implementation_key(272)) HRESULT ICIClientSettings::SetSSLKeyID ( long val );
__declspec(implementation_key(273)) VARIANT_BOOL ICIClientSettings::GetClearHTTP ( VARIANT * pInherited );
__declspec(implementation_key(274)) HRESULT ICIClientSettings::SetClearHTTP ( SFTPAdvBool val );
__declspec(implementation_key(275)) _variant_t ICIClientSettings::GetIPAccessRules ( );
__declspec(implementation_key(276)) HRESULT ICIClientSettings::AddIPAccessRule ( _bstr_t bstrMask, VARIANT_BOOL bAllow, long nRulePos );
__declspec(implementation_key(277)) HRESULT ICIClientSettings::RemoveIPAccessRule ( long nRulePos );
__declspec(implementation_key(278)) VARIANT_BOOL ICIClientSettings::GetIPAccessAllowedDefault ( );
__declspec(implementation_key(279)) void ICIClientSettings::PutIPAccessAllowedDefault ( VARIANT_BOOL pVal );
__declspec(implementation_key(280)) VARIANT_BOOL ICIClientSettings::GetLimitLoginAttempts ( VARIANT * pInherited );
__declspec(implementation_key(281)) HRESULT ICIClientSettings::SetLimitLoginAttempts ( SFTPAdvBool val );
__declspec(implementation_key(282)) VARIANT_BOOL ICIClientSettings::GetLockoutNotDisable ( VARIANT * pInherited );
__declspec(implementation_key(283)) HRESULT ICIClientSettings::SetLockoutNotDisable ( VARIANT_BOOL val );
__declspec(implementation_key(284)) long ICIClientSettings::GetMaxInvalidLoginAttempts ( );
__declspec(implementation_key(285)) void ICIClientSettings::PutMaxInvalidLoginAttempts ( long pVal );
__declspec(implementation_key(286)) long ICIClientSettings::GetLockoutPeriod ( );
__declspec(implementation_key(287)) void ICIClientSettings::PutLockoutPeriod ( long pVal );
__declspec(implementation_key(288)) long ICIClientSettings::GetInvalidAttemptsPeriod ( );
__declspec(implementation_key(289)) void ICIClientSettings::PutInvalidAttemptsPeriod ( long pVal );
__declspec(implementation_key(290)) VARIANT_BOOL ICIClientSettings::GetFTPS ( VARIANT * pInherited );
__declspec(implementation_key(291)) HRESULT ICIClientSettings::SetFTPS ( SFTPAdvBool val );
__declspec(implementation_key(292)) VARIANT_BOOL ICIClientSettings::GetHTTPS ( VARIANT * pInherited );
__declspec(implementation_key(293)) HRESULT ICIClientSettings::SetHTTPS ( SFTPAdvBool val );
__declspec(implementation_key(294)) HRESULT ICIClientSettings::ForcePasswordChange ( );
__declspec(implementation_key(295)) VARIANT_BOOL ICIClientSettings::GetLimitAccessByIP ( VARIANT * pInherited );
__declspec(implementation_key(296)) HRESULT ICIClientSettings::SetLimitAccessByIP ( SFTPAdvBool val );
__declspec(implementation_key(297)) VARIANT_BOOL ICIClientSettings::IsPasswordAgeLimited ( VARIANT * pDate );
__declspec(implementation_key(298)) VARIANT_BOOL ICIClientSettings::IsInactivityPeriodLimited ( VARIANT * pDate );
__declspec(implementation_key(299)) VARIANT_BOOL ICIClientSettings::GetForcePasswordResetOnInitialLogin ( VARIANT * pInherited );
__declspec(implementation_key(300)) HRESULT ICIClientSettings::SetForcePasswordResetOnInitialLogin ( VARIANT_BOOL val );
__declspec(implementation_key(301)) VARIANT_BOOL ICIClientSettings::GetTwoFactorAuthentication ( VARIANT * pInherited );
__declspec(implementation_key(302)) HRESULT ICIClientSettings::SetTwoFactorAuthentication ( SFTPAdvBool val );
__declspec(implementation_key(303)) VARIANT_BOOL ICIClientSettings::GetIsLocked ( );
__declspec(implementation_key(304)) VARIANT_BOOL ICIClientSettings::GetIsConnected ( );
__declspec(implementation_key(305)) DATE ICIClientSettings::GetLastConnectionTime ( );
__declspec(implementation_key(306)) DATE ICIClientSettings::GetAccountCreationTime ( );
__declspec(implementation_key(307)) _bstr_t ICIClientSettings::GetLastModifiedBy ( );
__declspec(implementation_key(308)) DATE ICIClientSettings::GetLastModificationTime ( );
__declspec(implementation_key(309)) VARIANT_BOOL ICIClientSettings::GetAS2Inbound ( VARIANT * pInherited );
__declspec(implementation_key(310)) HRESULT ICIClientSettings::SetAS2Inbound ( SFTPAdvBool val );
__declspec(implementation_key(311)) VARIANT_BOOL ICIClientSettings::GetAS2Outbound ( VARIANT * pInherited );
__declspec(implementation_key(312)) HRESULT ICIClientSettings::SetAS2Outbound ( SFTPAdvBool val );
__declspec(implementation_key(313)) VARIANT_BOOL ICIClientSettings::GetRequireStrongPasswords ( VARIANT * pInherited );
__declspec(implementation_key(314)) HRESULT ICIClientSettings::SetRequireStrongPasswords ( SFTPAdvBool val );
__declspec(implementation_key(315)) ICIComplexPasswordSettingsPtr ICIClientSettings::GetComplexPasswordSettings ( );
__declspec(implementation_key(316)) HRESULT ICIClientSettings::SetComplexPasswordSettings ( struct ICIComplexPasswordSettings * pIComplexPasswordSettings );
__declspec(implementation_key(317)) ICIResetPasswordSettingsPtr ICIClientSettings::GetResetPasswordSettings ( );
__declspec(implementation_key(318)) HRESULT ICIClientSettings::SetResetPasswordSettings ( struct ICIResetPasswordSettings * pIResetPasswordSettings );
__declspec(implementation_key(319)) VARIANT_BOOL ICIClientSettings::GetEnablePasswordHistory ( VARIANT * pInherited );
__declspec(implementation_key(320)) HRESULT ICIClientSettings::SetEnablePasswordHistory ( SFTPAdvBool val );
__declspec(implementation_key(321)) long ICIClientSettings::GetPasswordHistorySize ( );
__declspec(implementation_key(322)) void ICIClientSettings::PutPasswordHistorySize ( long pVal );
__declspec(implementation_key(323)) VARIANT_BOOL ICIClientSettings::GetInactiveAccountsMonitoring ( VARIANT * pInherited );
__declspec(implementation_key(324)) HRESULT ICIClientSettings::SetInactiveAccountsMonitoring ( SFTPAdvBool val );
__declspec(implementation_key(325)) VARIANT_BOOL ICIClientSettings::GetRemoveInactiveAccounts ( );
__declspec(implementation_key(326)) void ICIClientSettings::PutRemoveInactiveAccounts ( VARIANT_BOOL pVal );
__declspec(implementation_key(327)) long ICIClientSettings::GetMaxInactivePeriod ( );
__declspec(implementation_key(328)) void ICIClientSettings::PutMaxInactivePeriod ( long pVal );
__declspec(implementation_key(329)) VARIANT_BOOL ICIClientSettings::ResetPassword ( );
__declspec(implementation_key(330)) VARIANT_BOOL ICIClientSettings::GetAllowCOMB ( VARIANT * pInherited );
__declspec(implementation_key(331)) HRESULT ICIClientSettings::SetAllowCOMB ( SFTPAdvBool val );
__declspec(implementation_key(332)) VARIANT_BOOL ICIClientSettings::GetAllowFXP ( VARIANT * pInherited );
__declspec(implementation_key(333)) HRESULT ICIClientSettings::SetAllowFXP ( SFTPAdvBool val );
__declspec(implementation_key(334)) AS2OutboundProfileStatus ICIClientSettings::AS2TestOutboundProfile ( );
__declspec(implementation_key(335)) HRESULT ICIClientSettings::MoveIPAccessRule ( long nRulePosFrom, long nRulePosTo );
__declspec(implementation_key(336)) ICIAS2OutboundSettingsPtr ICIClientSettings::GetAS2OutboundSettings ( );
__declspec(implementation_key(337)) ICIAS2InboundSettingsPtr ICIClientSettings::GetAS2InboundSettings ( );
__declspec(implementation_key(338)) long ICIClientSettings::GetID ( );
__declspec(implementation_key(339)) _variant_t ICIClientSettings::GetSSHKeyIDs ( VARIANT * pInherited );
__declspec(implementation_key(340)) HRESULT ICIClientSettings::SetSSHKeyIDs ( const _variant_t & val );
__declspec(implementation_key(341)) _bstr_t ICICommandSettings::GetName ( );
__declspec(implementation_key(342)) void ICICommandSettings::PutName ( _bstr_t pVal );
__declspec(implementation_key(343)) _bstr_t ICICommandSettings::GetDescription ( );
__declspec(implementation_key(344)) void ICICommandSettings::PutDescription ( _bstr_t pVal );
__declspec(implementation_key(345)) _bstr_t ICICommandSettings::GetExecutable ( );
__declspec(implementation_key(346)) void ICICommandSettings::PutExecutable ( _bstr_t pVal );
__declspec(implementation_key(347)) _bstr_t ICICommandSettings::GetParameters ( );
__declspec(implementation_key(348)) void ICICommandSettings::PutParameters ( _bstr_t pVal );
__declspec(implementation_key(349)) _bstr_t ICICommandSettings::GetMinNumOfParamsMsg ( );
__declspec(implementation_key(350)) void ICICommandSettings::PutMinNumOfParamsMsg ( _bstr_t pVal );
__declspec(implementation_key(351)) VARIANT_BOOL ICICommandSettings::GetIsEnabled ( );
__declspec(implementation_key(352)) void ICICommandSettings::PutIsEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(353)) VARIANT_BOOL ICICommandSettings::GetRequireParams ( );
__declspec(implementation_key(354)) void ICICommandSettings::PutRequireParams ( VARIANT_BOOL pVal );
__declspec(implementation_key(355)) VARIANT_BOOL ICICommandSettings::GetRedirectOutputToClient ( );
__declspec(implementation_key(356)) void ICICommandSettings::PutRedirectOutputToClient ( VARIANT_BOOL pVal );
__declspec(implementation_key(357)) VARIANT_BOOL ICICommandSettings::GetRedirectOutputToLog ( );
__declspec(implementation_key(358)) void ICICommandSettings::PutRedirectOutputToLog ( VARIANT_BOOL pVal );
__declspec(implementation_key(359)) _bstr_t ICICommandSettings::GetLogPath ( );
__declspec(implementation_key(360)) void ICICommandSettings::PutLogPath ( _bstr_t pVal );
__declspec(implementation_key(361)) VARIANT_BOOL ICICommandSettings::GetEnableProcessTimeOut ( );
__declspec(implementation_key(362)) void ICICommandSettings::PutEnableProcessTimeOut ( VARIANT_BOOL pVal );
__declspec(implementation_key(363)) long ICICommandSettings::GetMinNumOfParams ( );
__declspec(implementation_key(364)) void ICICommandSettings::PutMinNumOfParams ( long pVal );
__declspec(implementation_key(365)) long ICICommandSettings::GetProcessTimeOut ( );
__declspec(implementation_key(366)) void ICICommandSettings::PutProcessTimeOut ( long pVal );
__declspec(implementation_key(367)) _variant_t ICICommandSettings::GetUserPermissions ( );
__declspec(implementation_key(368)) HRESULT ICICommandSettings::AddUserPermission ( _bstr_t bstrUser );
__declspec(implementation_key(369)) HRESULT ICICommandSettings::RemoveUserPermission ( _bstr_t bstrUser );
__declspec(implementation_key(370)) long ICICertInfo::GetID ( );
__declspec(implementation_key(371)) _bstr_t ICICertInfo::GetDescription ( );
__declspec(implementation_key(372)) _bstr_t ICICertInfo::GetIssuerOneLine ( );
__declspec(implementation_key(373)) _bstr_t ICICertInfo::GetIssuerUnit ( );
__declspec(implementation_key(374)) _bstr_t ICICertInfo::GetIssuerOrg ( );
__declspec(implementation_key(375)) _bstr_t ICICertInfo::GetIssuerCountry ( );
__declspec(implementation_key(376)) _bstr_t ICICertInfo::GetIssuerCName ( );
__declspec(implementation_key(377)) _bstr_t ICICertInfo::GetSubjectOneLine ( );
__declspec(implementation_key(378)) _bstr_t ICICertInfo::GetSubjectUnit ( );
__declspec(implementation_key(379)) _bstr_t ICICertInfo::GetSubjectOrg ( );
__declspec(implementation_key(380)) _bstr_t ICICertInfo::GetSubjectCountry ( );
__declspec(implementation_key(381)) _bstr_t ICICertInfo::GetSubjectCName ( );
__declspec(implementation_key(382)) _bstr_t ICICertInfo::GetNotBefore ( );
__declspec(implementation_key(383)) _bstr_t ICICertInfo::GetNotAfter ( );
__declspec(implementation_key(384)) VARIANT_BOOL ICIDMZGateway::GetEnable ( );
__declspec(implementation_key(385)) void ICIDMZGateway::PutEnable ( VARIANT_BOOL pVal );
__declspec(implementation_key(386)) _bstr_t ICIDMZGateway::GetGatewayIP ( );
__declspec(implementation_key(387)) void ICIDMZGateway::PutGatewayIP ( _bstr_t pVal );
__declspec(implementation_key(388)) long ICIDMZGateway::GetGatewayPort ( );
__declspec(implementation_key(389)) void ICIDMZGateway::PutGatewayPort ( long pVal );
__declspec(implementation_key(390)) VARIANT_BOOL ICIDMZGateway::GetRouteFTP ( );
__declspec(implementation_key(391)) void ICIDMZGateway::PutRouteFTP ( VARIANT_BOOL pVal );
__declspec(implementation_key(392)) VARIANT_BOOL ICIDMZGateway::GetRouteFTPSExpl ( );
__declspec(implementation_key(393)) void ICIDMZGateway::PutRouteFTPSExpl ( VARIANT_BOOL pVal );
__declspec(implementation_key(394)) VARIANT_BOOL ICIDMZGateway::GetRouteFTPSImpl ( );
__declspec(implementation_key(395)) void ICIDMZGateway::PutRouteFTPSImpl ( VARIANT_BOOL pVal );
__declspec(implementation_key(396)) VARIANT_BOOL ICIDMZGateway::GetRouteSFTP ( );
__declspec(implementation_key(397)) void ICIDMZGateway::PutRouteSFTP ( VARIANT_BOOL pVal );
__declspec(implementation_key(398)) VARIANT_BOOL ICIDMZGateway::GetRouteHTTP ( );
__declspec(implementation_key(399)) void ICIDMZGateway::PutRouteHTTP ( VARIANT_BOOL pVal );
__declspec(implementation_key(400)) VARIANT_BOOL ICIDMZGateway::GetRouteHTTPS ( );
__declspec(implementation_key(401)) void ICIDMZGateway::PutRouteHTTPS ( VARIANT_BOOL pVal );
__declspec(implementation_key(402)) long ICIDMZGateway::GetFTPPort ( );
__declspec(implementation_key(403)) void ICIDMZGateway::PutFTPPort ( long pVal );
__declspec(implementation_key(404)) long ICIDMZGateway::GetFTPSExplPort ( );
__declspec(implementation_key(405)) void ICIDMZGateway::PutFTPSExplPort ( long pVal );
__declspec(implementation_key(406)) long ICIDMZGateway::GetFTPSImplPort ( );
__declspec(implementation_key(407)) void ICIDMZGateway::PutFTPSImplPort ( long pVal );
__declspec(implementation_key(408)) long ICIDMZGateway::GetSFTPPort ( );
__declspec(implementation_key(409)) void ICIDMZGateway::PutSFTPPort ( long pVal );
__declspec(implementation_key(410)) long ICIDMZGateway::GetHTTPPort ( );
__declspec(implementation_key(411)) void ICIDMZGateway::PutHTTPPort ( long pVal );
__declspec(implementation_key(412)) long ICIDMZGateway::GetHTTPSPort ( );
__declspec(implementation_key(413)) void ICIDMZGateway::PutHTTPSPort ( long pVal );
__declspec(implementation_key(414)) VARIANT_BOOL ICIDMZGateway::GetAssignPASVMode ( );
__declspec(implementation_key(415)) void ICIDMZGateway::PutAssignPASVMode ( VARIANT_BOOL pVal );
__declspec(implementation_key(416)) long ICIDMZGateway::GetPASVListenIP ( );
__declspec(implementation_key(417)) void ICIDMZGateway::PutPASVListenIP ( long pVal );
__declspec(implementation_key(418)) long ICIDMZGateway::GetPASVPortMin ( );
__declspec(implementation_key(419)) void ICIDMZGateway::PutPASVPortMin ( long pVal );
__declspec(implementation_key(420)) long ICIDMZGateway::GetPASVPortMax ( );
__declspec(implementation_key(421)) void ICIDMZGateway::PutPASVPortMax ( long pVal );
__declspec(implementation_key(422)) _bstr_t ICISite::GetName ( );
__declspec(implementation_key(423)) long ICISite::GetID ( );
__declspec(implementation_key(424)) long ICISite::GetConnectedCount ( );
__declspec(implementation_key(425)) HRESULT ICISite::Start ( );
__declspec(implementation_key(426)) HRESULT ICISite::Stop ( );
__declspec(implementation_key(427)) long ICISite::GetAuthManagerID ( );
__declspec(implementation_key(428)) _bstr_t ICISite::GetRootFolder ( );
__declspec(implementation_key(429)) VARIANT_BOOL ICISite::SetRootFolder ( _bstr_t newVal );
__declspec(implementation_key(430)) long ICISite::GetIP ( );
__declspec(implementation_key(431)) VARIANT_BOOL ICISite::SetIP ( long newVal );
__declspec(implementation_key(432)) long ICISite::GetPort ( );
__declspec(implementation_key(433)) VARIANT_BOOL ICISite::SetPort ( long newVal );
__declspec(implementation_key(434)) VARIANT_BOOL ICISite::GetFTPAccess ( );
__declspec(implementation_key(435)) VARIANT_BOOL ICISite::SetFTPAccess ( VARIANT_BOOL newVal );
__declspec(implementation_key(436)) VARIANT_BOOL ICISite::GetSSLAuth ( );
__declspec(implementation_key(437)) VARIANT_BOOL ICISite::GetSSLImp ( );
__declspec(implementation_key(438)) VARIANT_BOOL ICISite::SetSSLAuth ( VARIANT_BOOL newVal );
__declspec(implementation_key(439)) VARIANT_BOOL ICISite::SetSSLImp ( VARIANT_BOOL newVal );
__declspec(implementation_key(440)) VARIANT_BOOL ICISite::GetCheckClientCert ( );
__declspec(implementation_key(441)) VARIANT_BOOL ICISite::SetCheckClientCert ( VARIANT_BOOL newVal );
__declspec(implementation_key(442)) _bstr_t ICISite::GetCertFilePath ( );
__declspec(implementation_key(443)) _bstr_t ICISite::GetKeyFilePath ( );
__declspec(implementation_key(444)) _bstr_t ICISite::GetPassPhrase ( );
__declspec(implementation_key(445)) _bstr_t ICISite::GetTrustedCertsPath ( );
__declspec(implementation_key(446)) _bstr_t ICISite::GetAwaitingCertsPath ( );
__declspec(implementation_key(447)) VARIANT_BOOL ICISite::SetCertFilePath ( _bstr_t newVal );
__declspec(implementation_key(448)) VARIANT_BOOL ICISite::SetKeyFilePath ( _bstr_t newVal );
__declspec(implementation_key(449)) VARIANT_BOOL ICISite::SetPassPhrase ( _bstr_t newVal );
__declspec(implementation_key(450)) VARIANT_BOOL ICISite::GetIsStarted ( );
__declspec(implementation_key(451)) long ICISite::GetDownloadSpeed ( );
__declspec(implementation_key(452)) long ICISite::GetUploadSpeed ( );
__declspec(implementation_key(453)) long ICISite::GetDownloadCount ( );
__declspec(implementation_key(454)) long ICISite::GetUploadCount ( );
__declspec(implementation_key(455)) _bstr_t ICISite::GetStartTime ( );
__declspec(implementation_key(456)) _bstr_t ICISite::GetFolderList ( _bstr_t bstrFolderAlias );
__declspec(implementation_key(457)) _variant_t ICISite::GetFolderPermissions ( _bstr_t bstrFolder );
__declspec(implementation_key(458)) HRESULT ICISite::SetPermission ( struct IPermission * pPermission, VARIANT_BOOL bRemoveOtherPermissions );
__declspec(implementation_key(459)) HRESULT ICISite::RemovePermission ( _bstr_t bstrFolder, _bstr_t bstrClient );
__declspec(implementation_key(460)) IPermissionPtr ICISite::GetBlankPermission ( _bstr_t bstrFolder, _bstr_t bstrClient );
__declspec(implementation_key(461)) HRESULT ICISite::CreatePhysicalFolder ( _bstr_t bstrNewFolder );
__declspec(implementation_key(462)) HRESULT ICISite::CreateVirtualFolder ( _bstr_t bstrNewFolder, _bstr_t bstrTarget );
__declspec(implementation_key(463)) HRESULT ICISite::RemoveFolder ( _bstr_t bstrFolder );
__declspec(implementation_key(464)) HRESULT ICISite::RenameFolder ( _bstr_t bstrSrcFolder, _bstr_t bstrDstFolder );
__declspec(implementation_key(465)) HRESULT ICISite::CreatePermissionGroup ( _bstr_t bstrName );
__declspec(implementation_key(466)) _variant_t ICISite::GetPermissionGroups ( );
__declspec(implementation_key(467)) HRESULT ICISite::RemovePermissionGroup ( _bstr_t bstrName );
__declspec(implementation_key(468)) HRESULT ICISite::RenamePermissionGroup ( _bstr_t bstrOldName, _bstr_t bstrNewName );
__declspec(implementation_key(469)) HRESULT ICISite::AddUserToPermissionGroup ( _bstr_t bstrUser, _bstr_t bstrGroup );
__declspec(implementation_key(470)) HRESULT ICISite::RemoveUserFromPermissionGroup ( _bstr_t bstrUser, _bstr_t bstrGroup );
__declspec(implementation_key(471)) HRESULT ICISite::CreateUser ( _bstr_t bstrLogin, _bstr_t bstrPwd, int nPwdType, _bstr_t bstrDescription, SFTPAdvBool abTwoFactorAuthentication );
__declspec(implementation_key(472)) _variant_t ICISite::GetUsers ( );
__declspec(implementation_key(473)) HRESULT ICISite::RemoveUser ( _bstr_t bstrLogin );
__declspec(implementation_key(474)) HRESULT ICISite::RenameUser ( _bstr_t bstrOldName, _bstr_t bstrNewName );
__declspec(implementation_key(475)) _variant_t ICISite::GetSettingsLevels ( );
__declspec(implementation_key(476)) _variant_t ICISite::GetSettingsLevelUsers ( _bstr_t bstrGroup );
__declspec(implementation_key(477)) HRESULT ICISite::CreateSettingsLevel ( _bstr_t bstrName, _bstr_t bstrDescription );
__declspec(implementation_key(478)) HRESULT ICISite::RemoveSettingsLevel ( _bstr_t bstrName );
__declspec(implementation_key(479)) HRESULT ICISite::RenameSettingsLevel ( _bstr_t bstrOldName, _bstr_t bstrNewName );
__declspec(implementation_key(480)) HRESULT ICISite::MoveUserToSettingsLevel ( _bstr_t bstrUser, _bstr_t bstrGroup );
__declspec(implementation_key(481)) _variant_t ICISite::GetPermissionGroupsOfUser ( _bstr_t bstrUser );
__declspec(implementation_key(482)) HRESULT ICISite::ChangeUserPassword ( _bstr_t bstrUser, _bstr_t bstrPwd, int nPwdType );
__declspec(implementation_key(483)) ICIClientSettingsPtr ICISite::GetSettingsLevelSettings ( _bstr_t bstrGroup );
__declspec(implementation_key(484)) ICIClientSettingsPtr ICISite::GetUserSettings ( _bstr_t bstrUser );
__declspec(implementation_key(485)) HRESULT ICISite::Remove ( );
__declspec(implementation_key(486)) _variant_t ICISite::GetCommands ( );
__declspec(implementation_key(487)) ICICommandSettingsPtr ICISite::GetCommandSettings ( _bstr_t bstrCommand );
__declspec(implementation_key(488)) ICICommandSettingsPtr ICISite::CreateCommand ( _bstr_t bstrName );
__declspec(implementation_key(489)) HRESULT ICISite::RemoveCommand ( _bstr_t bstrName );
__declspec(implementation_key(490)) _variant_t ICISite::GetTrustedCertificates ( );
__declspec(implementation_key(491)) ICICertInfoPtr ICISite::GetTrustedCertificateInfo ( long lID );
__declspec(implementation_key(492)) _variant_t ICISite::GetPendingCertificates ( );
__declspec(implementation_key(493)) ICICertInfoPtr ICISite::GetPendingCertificateInfo ( long lID );
__declspec(implementation_key(494)) _bstr_t ICISite::ExportTrustedCertificate ( long lID );
__declspec(implementation_key(495)) long ICISite::ImportTrustedCertificate ( _bstr_t bstrCertPath );
__declspec(implementation_key(496)) HRESULT ICISite::RemoveTrustedCertificate ( long lID );
__declspec(implementation_key(497)) HRESULT ICISite::RemovePendingCertificate ( long lID );
__declspec(implementation_key(498)) long ICISite::AddCertificateToTrusted ( long lID );
__declspec(implementation_key(499)) _bstr_t ICISite::GetUserLimitMessage ( );
__declspec(implementation_key(500)) void ICISite::PutUserLimitMessage ( _bstr_t pVal );
__declspec(implementation_key(501)) _bstr_t ICISite::GetExitMessage ( );
__declspec(implementation_key(502)) void ICISite::PutExitMessage ( _bstr_t pVal );
__declspec(implementation_key(503)) _bstr_t ICISite::GetVFSFilter ( );
__declspec(implementation_key(504)) void ICISite::PutVFSFilter ( _bstr_t pVal );
__declspec(implementation_key(505)) VARIANT_BOOL ICISite::GetBlockAntiTimeOut ( );
__declspec(implementation_key(506)) void ICISite::PutBlockAntiTimeOut ( VARIANT_BOOL pVal );
__declspec(implementation_key(507)) VARIANT_BOOL ICISite::GetBlockSiteToSite ( );
__declspec(implementation_key(508)) void ICISite::PutBlockSiteToSite ( VARIANT_BOOL pVal );
__declspec(implementation_key(509)) VARIANT_BOOL ICISite::GetAutoCreateHomeFolder ( );
__declspec(implementation_key(510)) void ICISite::PutAutoCreateHomeFolder ( VARIANT_BOOL pVal );
__declspec(implementation_key(511)) VARIANT_BOOL ICISite::GetAssignFullPermissionsForHomeFolder ( );
__declspec(implementation_key(512)) void ICISite::PutAssignFullPermissionsForHomeFolder ( VARIANT_BOOL pVal );
__declspec(implementation_key(513)) VARIANT_BOOL ICISite::GetEnablePortRange ( );
__declspec(implementation_key(514)) void ICISite::PutEnablePortRange ( VARIANT_BOOL pVal );
__declspec(implementation_key(515)) VARIANT_BOOL ICISite::GetHasMaxSpeed ( );
__declspec(implementation_key(516)) void ICISite::PutHasMaxSpeed ( VARIANT_BOOL pVal );
__declspec(implementation_key(517)) VARIANT_BOOL ICISite::GetHasMaxUsers ( );
__declspec(implementation_key(518)) void ICISite::PutHasMaxUsers ( VARIANT_BOOL pVal );
__declspec(implementation_key(519)) VARIANT_BOOL ICISite::GetHasMaxConnectionsPerAccount ( );
__declspec(implementation_key(520)) void ICISite::PutHasMaxConnectionsPerAccount ( VARIANT_BOOL pVal );
__declspec(implementation_key(521)) VARIANT_BOOL ICISite::GetHasMaxIPPerAccount ( );
__declspec(implementation_key(522)) void ICISite::PutHasMaxIPPerAccount ( VARIANT_BOOL pVal );
__declspec(implementation_key(523)) VARIANT_BOOL ICISite::GetDisconnectOnDOS ( );
__declspec(implementation_key(524)) void ICISite::PutDisconnectOnDOS ( VARIANT_BOOL pVal );
__declspec(implementation_key(525)) VARIANT_BOOL ICISite::GetBanIPOnDOS ( );
__declspec(implementation_key(526)) void ICISite::PutBanIPOnDOS ( VARIANT_BOOL pVal );
__declspec(implementation_key(527)) VARIANT_BOOL ICISite::GetAutoBanIPsPermanently ( );
__declspec(implementation_key(528)) void ICISite::PutAutoBanIPsPermanently ( VARIANT_BOOL pVal );
__declspec(implementation_key(529)) long ICISite::GetPASVListenIP ( );
__declspec(implementation_key(530)) void ICISite::PutPASVListenIP ( long pVal );
__declspec(implementation_key(531)) long ICISite::GetPASVPortMin ( );
__declspec(implementation_key(532)) void ICISite::PutPASVPortMin ( long pVal );
__declspec(implementation_key(533)) long ICISite::GetPASVPortMax ( );
__declspec(implementation_key(534)) void ICISite::PutPASVPortMax ( long pVal );
__declspec(implementation_key(535)) long ICISite::GetMaxTransferSpeed ( );
__declspec(implementation_key(536)) void ICISite::PutMaxTransferSpeed ( long pVal );
__declspec(implementation_key(537)) long ICISite::GetMaxConcurrentConnections ( );
__declspec(implementation_key(538)) void ICISite::PutMaxConcurrentConnections ( long pVal );
__declspec(implementation_key(539)) long ICISite::GetMaxConnectionsPerUser ( );
__declspec(implementation_key(540)) void ICISite::PutMaxConnectionsPerUser ( long pVal );
__declspec(implementation_key(541)) long ICISite::GetMaxConnectionsFromSameIP ( );
__declspec(implementation_key(542)) void ICISite::PutMaxConnectionsFromSameIP ( long pVal );
__declspec(implementation_key(543)) long ICISite::GetDOSLimit ( );
__declspec(implementation_key(544)) void ICISite::PutDOSLimit ( long pVal );
__declspec(implementation_key(545)) _variant_t ICISite::GetIPAccessRules ( );
__declspec(implementation_key(546)) HRESULT ICISite::AddIPAccessRule ( _bstr_t bstrMask, VARIANT_BOOL bAllow, long nRulePos );
__declspec(implementation_key(547)) HRESULT ICISite::RemoveIPAccessRule ( long nRulePos );
__declspec(implementation_key(548)) VARIANT_BOOL ICISite::GetIPAccessAllowedDefault ( );
__declspec(implementation_key(549)) void ICISite::PutIPAccessAllowedDefault ( VARIANT_BOOL pVal );
__declspec(implementation_key(550)) HRESULT ICISite::CreateUserEx ( _bstr_t bstrLogin, _bstr_t bstrPwd, int nPwdType, _bstr_t bstrDescription, _bstr_t bstrFullName, VARIANT_BOOL bCreateHomeFolder, VARIANT_BOOL bFullPermissionsForHomeFolder, _bstr_t bstrSettingsLevel, SFTPAdvBool abTwoFactorAuthentication );
__declspec(implementation_key(551)) _variant_t ICISite::GetPermissionGroupList ( _bstr_t bstrGroup );
__declspec(implementation_key(552)) HRESULT ICISite::ForceSynchronizeUserDatabase ( );
__declspec(implementation_key(553)) _bstr_t ICISite::GetConnectMessage ( );
__declspec(implementation_key(554)) void ICISite::PutConnectMessage ( _bstr_t pVal );
__declspec(implementation_key(555)) VARIANT_BOOL ICISite::GetHasMaxConcurrentLogins ( );
__declspec(implementation_key(556)) void ICISite::PutHasMaxConcurrentLogins ( VARIANT_BOOL pVal );
__declspec(implementation_key(557)) long ICISite::GetMaxConcurrentLogins ( );
__declspec(implementation_key(558)) void ICISite::PutMaxConcurrentLogins ( long pVal );
__declspec(implementation_key(559)) VARIANT_BOOL ICISite::ValidatePassword ( _bstr_t bstrUser, _bstr_t bstrPwd );
__declspec(implementation_key(560)) VARIANT_BOOL ICISite::CancelTransfer ( _bstr_t bstrPath );
__declspec(implementation_key(561)) _bstr_t ICISite::GetSSHKeyFilePath ( );
__declspec(implementation_key(562)) VARIANT_BOOL ICISite::SetSSHKeyFilePath ( _bstr_t newVal );
__declspec(implementation_key(563)) _bstr_t ICISite::GetODBCSettings ( );
__declspec(implementation_key(564)) void ICISite::PutODBCSettings ( _bstr_t pVal );
__declspec(implementation_key(565)) HRESULT ICISite::RemapVirtualFolder ( _bstr_t bstrVFSFolder, _bstr_t bstrTarget );
__declspec(implementation_key(566)) HRESULT ICISite::AssignEventRuleCustomCommandWorkingFolder ( _bstr_t bstrCustomCommandName, _bstr_t bstrWorkingFolder );
__declspec(implementation_key(567)) _variant_t ICISite::EFTGetConnectedUsers ( );
__declspec(implementation_key(568)) VARIANT_BOOL ICISite::KickUser ( long nUserID );
__declspec(implementation_key(569)) _bstr_t ICISite::CreateComplexPassword ( const _variant_t & bstrUserName );
__declspec(implementation_key(570)) VARIANT_BOOL ICISite::GetHTTPAccess ( );
__declspec(implementation_key(571)) VARIANT_BOOL ICISite::SetHTTPAccess ( VARIANT_BOOL newVal );
__declspec(implementation_key(572)) VARIANT_BOOL ICISite::GetHTTPSAccess ( );
__declspec(implementation_key(573)) VARIANT_BOOL ICISite::SetHTTPSAccess ( VARIANT_BOOL newVal );
__declspec(implementation_key(574)) long ICISite::GetHTTPPort ( );
__declspec(implementation_key(575)) VARIANT_BOOL ICISite::SetHTTPPort ( long newVal );
__declspec(implementation_key(576)) long ICISite::GetHTTPSPort ( );
__declspec(implementation_key(577)) VARIANT_BOOL ICISite::SetHTTPSPort ( long newVal );
__declspec(implementation_key(578)) VARIANT_BOOL ICISite::GetLimitLoginAttempts ( );
__declspec(implementation_key(579)) void ICISite::PutLimitLoginAttempts ( VARIANT_BOOL pVal );
__declspec(implementation_key(580)) VARIANT_BOOL ICISite::GetLockoutNotDisable ( );
__declspec(implementation_key(581)) void ICISite::PutLockoutNotDisable ( VARIANT_BOOL pVal );
__declspec(implementation_key(582)) long ICISite::GetMaxInvalidLoginAttempts ( );
__declspec(implementation_key(583)) void ICISite::PutMaxInvalidLoginAttempts ( long pVal );
__declspec(implementation_key(584)) long ICISite::GetLockoutPeriod ( );
__declspec(implementation_key(585)) void ICISite::PutLockoutPeriod ( long pVal );
__declspec(implementation_key(586)) long ICISite::GetInvalidAttemptsPeriod ( );
__declspec(implementation_key(587)) void ICISite::PutInvalidAttemptsPeriod ( long pVal );
__declspec(implementation_key(588)) IDispatchPtr ICISite::EventRules ( EventType type );
__declspec(implementation_key(589)) _bstr_t ICISite::GetPhysicalPath ( _bstr_t bstrFolderAlias );
__declspec(implementation_key(590)) HRESULT ICISite::EnableSFTP ( _bstr_t SFTPKeyFile, _bstr_t SFTPKeyPassword );
__declspec(implementation_key(591)) HRESULT ICISite::DisableSFTP ( );
__declspec(implementation_key(592)) HRESULT ICISite::SetSSLCertificate ( _bstr_t bzCertFilePath, _bstr_t bzKeyFilePath, _bstr_t bzPassPhrase );
__declspec(implementation_key(593)) AutobanSensitivity ICISite::GetAutobanSensitivity ( );
__declspec(implementation_key(594)) void ICISite::PutAutobanSensitivity ( AutobanSensitivity pVal );
__declspec(implementation_key(595)) VARIANT_BOOL ICISite::GetAllowChangePassword ( );
__declspec(implementation_key(596)) void ICISite::PutAllowChangePassword ( VARIANT_BOOL pVal );
__declspec(implementation_key(597)) VARIANT_BOOL ICISite::GetForcePasswordResetOnInitialLogin ( );
__declspec(implementation_key(598)) void ICISite::PutForcePasswordResetOnInitialLogin ( VARIANT_BOOL pVal );
__declspec(implementation_key(599)) VARIANT_BOOL ICISite::DoesUsernameExist ( _bstr_t bstrUserName );
__declspec(implementation_key(600)) TwoFactorAuthenticationMode ICISite::GetTwoFactorAuthentication ( );
__declspec(implementation_key(601)) void ICISite::PutTwoFactorAuthentication ( TwoFactorAuthenticationMode pVal );
__declspec(implementation_key(602)) _bstr_t ICISite::GetRadiusServerName ( );
__declspec(implementation_key(603)) void ICISite::PutRadiusServerName ( _bstr_t pVal );
__declspec(implementation_key(604)) long ICISite::GetRadiusServerPort ( );
__declspec(implementation_key(605)) void ICISite::PutRadiusServerPort ( long pVal );
__declspec(implementation_key(606)) _bstr_t ICISite::GetRadiusNasIdentifier ( );
__declspec(implementation_key(607)) void ICISite::PutRadiusNasIdentifier ( _bstr_t pVal );
__declspec(implementation_key(608)) _bstr_t ICISite::GetRadiusSharedSecret ( );
__declspec(implementation_key(609)) void ICISite::PutRadiusSharedSecret ( _bstr_t pVal );
__declspec(implementation_key(610)) long ICISite::GetRadiusConnectionRetriesCount ( );
__declspec(implementation_key(611)) void ICISite::PutRadiusConnectionRetriesCount ( long pVal );
__declspec(implementation_key(612)) long ICISite::GetRadiusTimeout ( );
__declspec(implementation_key(613)) void ICISite::PutRadiusTimeout ( long pVal );
__declspec(implementation_key(614)) DATE ICISite::GetLastModifiedTime ( );
__declspec(implementation_key(615)) _bstr_t ICISite::GetLastModifiedBy ( );
__declspec(implementation_key(616)) long ICISite::GetAverageSpeed ( );
__declspec(implementation_key(617)) long ICISite::GetUsersDefined ( );
__declspec(implementation_key(618)) long ICISite::GetWTCSessionsActive ( );
__declspec(implementation_key(619)) long ICISite::GetWTCSessionsRemaining ( );
__declspec(implementation_key(620)) _bstr_t ICISite::GetHTTPDomain ( );
__declspec(implementation_key(621)) void ICISite::PutHTTPDomain ( _bstr_t pVal );
__declspec(implementation_key(622)) long ICISite::GetFTPSExplicitPort ( );
__declspec(implementation_key(623)) void ICISite::PutFTPSExplicitPort ( long pVal );
__declspec(implementation_key(624)) long ICISite::GetFTPSImplicitPort ( );
__declspec(implementation_key(625)) void ICISite::PutFTPSImplicitPort ( long pVal );
__declspec(implementation_key(626)) long ICISite::GetSFTPPort ( );
__declspec(implementation_key(627)) void ICISite::PutSFTPPort ( long pVal );
__declspec(implementation_key(628)) VARIANT_BOOL ICISite::GetEnableWebServices ( );
__declspec(implementation_key(629)) void ICISite::PutEnableWebServices ( VARIANT_BOOL pVal );
__declspec(implementation_key(630)) VARIANT_BOOL ICISite::GetRedirectHTTPtoHTTPS ( );
__declspec(implementation_key(631)) void ICISite::PutRedirectHTTPtoHTTPS ( VARIANT_BOOL pVal );
__declspec(implementation_key(632)) VARIANT_BOOL ICISite::GetEnableAccountManagementOverHTTPS ( );
__declspec(implementation_key(633)) void ICISite::PutEnableAccountManagementOverHTTPS ( VARIANT_BOOL pVal );
__declspec(implementation_key(634)) _bstr_t ICISite::GetAccountManagementPath ( );
__declspec(implementation_key(635)) VARIANT_BOOL ICISite::GetRequireStrongPasswords ( );
__declspec(implementation_key(636)) void ICISite::PutRequireStrongPasswords ( VARIANT_BOOL pVal );
__declspec(implementation_key(637)) DataSanitizationMethod ICISite::GetDataSanitizationMethod ( );
__declspec(implementation_key(638)) void ICISite::PutDataSanitizationMethod ( DataSanitizationMethod pVal );
__declspec(implementation_key(639)) VARIANT_BOOL ICISite::GetEnablePGPLogging ( );
__declspec(implementation_key(640)) void ICISite::PutEnablePGPLogging ( VARIANT_BOOL pVal );
__declspec(implementation_key(641)) PGPLogLevel ICISite::GetPGPLogLevel ( );
__declspec(implementation_key(642)) void ICISite::PutPGPLogLevel ( PGPLogLevel pVal );
__declspec(implementation_key(643)) VARIANT_BOOL ICISite::GetUseDynamicPGPLogFile ( );
__declspec(implementation_key(644)) void ICISite::PutUseDynamicPGPLogFile ( VARIANT_BOOL pVal );
__declspec(implementation_key(645)) _bstr_t ICISite::GetPGPLogFilePath ( );
__declspec(implementation_key(646)) void ICISite::PutPGPLogFilePath ( _bstr_t pVal );
__declspec(implementation_key(647)) ICIComplexPasswordSettingsPtr ICISite::GetComplexPasswordSettings ( );
__declspec(implementation_key(648)) HRESULT ICISite::SetComplexPasswordSettings ( struct ICIComplexPasswordSettings * pIComplexPasswordSettings );
__declspec(implementation_key(649)) ICIResetPasswordSettingsPtr ICISite::GetResetPasswordSettings ( );
__declspec(implementation_key(650)) HRESULT ICISite::SetResetPasswordSettings ( struct ICIResetPasswordSettings * pIResetPasswordSettings );
__declspec(implementation_key(651)) VARIANT_BOOL ICISite::GetEnablePasswordHistory ( );
__declspec(implementation_key(652)) void ICISite::PutEnablePasswordHistory ( VARIANT_BOOL pVal );
__declspec(implementation_key(653)) long ICISite::GetPasswordHistorySize ( );
__declspec(implementation_key(654)) void ICISite::PutPasswordHistorySize ( long pVal );
__declspec(implementation_key(655)) VARIANT_BOOL ICISite::GetAllowUPVariables ( );
__declspec(implementation_key(656)) void ICISite::PutAllowUPVariables ( VARIANT_BOOL pVal );
__declspec(implementation_key(657)) VARIANT_BOOL ICISite::GetAllowEmailLoginCredentials ( );
__declspec(implementation_key(658)) void ICISite::PutAllowEmailLoginCredentials ( VARIANT_BOOL pVal );
__declspec(implementation_key(659)) EMailLoginCredentialsMode ICISite::GetEMailLoginCredentialsMode ( );
__declspec(implementation_key(660)) void ICISite::PutEMailLoginCredentialsMode ( EMailLoginCredentialsMode pVal );
__declspec(implementation_key(661)) VARIANT_BOOL ICISite::GetInactiveAccountsMonitoring ( );
__declspec(implementation_key(662)) void ICISite::PutInactiveAccountsMonitoring ( VARIANT_BOOL pVal );
__declspec(implementation_key(663)) VARIANT_BOOL ICISite::GetRemoveInactiveAccounts ( );
__declspec(implementation_key(664)) void ICISite::PutRemoveInactiveAccounts ( VARIANT_BOOL pVal );
__declspec(implementation_key(665)) long ICISite::GetMaxInactivePeriod ( );
__declspec(implementation_key(666)) void ICISite::PutMaxInactivePeriod ( long pVal );
__declspec(implementation_key(667)) _bstr_t ICISite::GetAS2Identifier ( );
__declspec(implementation_key(668)) void ICISite::PutAS2Identifier ( _bstr_t pVal );
__declspec(implementation_key(669)) _bstr_t ICISite::GetAS2Certificate ( );
__declspec(implementation_key(670)) void ICISite::PutAS2Certificate ( _bstr_t pVal );
__declspec(implementation_key(671)) _bstr_t ICISite::GetAS2PrivateKey ( );
__declspec(implementation_key(672)) void ICISite::PutAS2PrivateKey ( _bstr_t pVal );
__declspec(implementation_key(673)) _bstr_t ICISite::GetAS2Passphrase ( );
__declspec(implementation_key(674)) void ICISite::PutAS2Passphrase ( _bstr_t pVal );
__declspec(implementation_key(675)) _bstr_t ICISite::GetAS2AccountManagementPath ( );
__declspec(implementation_key(676)) VARIANT_BOOL ICISite::GetEnableAS2 ( );
__declspec(implementation_key(677)) void ICISite::PutEnableAS2 ( VARIANT_BOOL pVal );
__declspec(implementation_key(678)) VARIANT_BOOL ICISite::UnlockUser ( _bstr_t bstrUserName );
__declspec(implementation_key(679)) ICIDMZGatewayPtr ICISite::GetDMZGateway ( );
__declspec(implementation_key(680)) VARIANT_BOOL ICISite::GetDMZConnected ( );
__declspec(implementation_key(681)) _bstr_t ICISite::GetSFTPKeyFile ( );
__declspec(implementation_key(682)) void ICISite::PutSFTPKeyFile ( _bstr_t pVal );
__declspec(implementation_key(683)) _bstr_t ICISite::GetSFTPKeyPassphrase ( );
__declspec(implementation_key(684)) void ICISite::PutSFTPKeyPassphrase ( _bstr_t pVal );
__declspec(implementation_key(685)) _bstr_t ICISite::GetSFTPEncodingAlgorithms ( );
__declspec(implementation_key(686)) void ICISite::PutSFTPEncodingAlgorithms ( _bstr_t pVal );
__declspec(implementation_key(687)) _bstr_t ICISite::GetSFTPMacAlgorithms ( );
__declspec(implementation_key(688)) void ICISite::PutSFTPMacAlgorithms ( _bstr_t pVal );
__declspec(implementation_key(689)) _bstr_t ICISite::GetSFTPSoftwareVersion ( );
__declspec(implementation_key(690)) void ICISite::PutSFTPSoftwareVersion ( _bstr_t pVal );
__declspec(implementation_key(691)) _bstr_t ICISite::GetSFTPIdentificationComment ( );
__declspec(implementation_key(692)) void ICISite::PutSFTPIdentificationComment ( _bstr_t pVal );
__declspec(implementation_key(693)) _bstr_t ICISite::GetSFTPPublicKeyBlob ( );
__declspec(implementation_key(694)) VARIANT_BOOL ICISite::IsFolderVirtual ( _bstr_t bstrFolderAlias );
__declspec(implementation_key(695)) HRESULT ICISite::EnableInheritPermissions ( _bstr_t bstrFolder, VARIANT_BOOL bRemovePerm );
__declspec(implementation_key(696)) HRESULT ICISite::DisableInheritPermissions ( _bstr_t bstrFolder, VARIANT_BOOL bRemovePerm );
__declspec(implementation_key(697)) VARIANT_BOOL ICISite::IsEncrypted ( _bstr_t bstrFolder );
__declspec(implementation_key(698)) HRESULT ICISite::EncryptFolder ( _bstr_t bstrFolder, VARIANT_BOOL vbResursively );
__declspec(implementation_key(699)) HRESULT ICISite::DecryptFolder ( _bstr_t bstrFolder, VARIANT_BOOL vbResursively );
__declspec(implementation_key(700)) HRESULT ICISite::ResetSubFolders ( _bstr_t bstrFolder );
__declspec(implementation_key(701)) VARIANT_BOOL ICISite::IsFolderInherited ( _bstr_t bstrFolder );
__declspec(implementation_key(702)) _variant_t ICISite::GetAS2Transactions ( VARIANT_BOOL vbShowSuccesses, VARIANT_BOOL vbShowFailures, VARIANT_BOOL vbShowInProgress, _bstr_t bstrMessageIDFilter, _bstr_t bstrFileNameFilter, long lLastDays );
__declspec(implementation_key(703)) IDispatchPtr ICISite::GetAMParams ( );
__declspec(implementation_key(704)) HRESULT ICISite::SetAMParams ( IDispatch * newVal );
__declspec(implementation_key(705)) HRESULT ICISite::MoveIPAccessRule ( long nRulePosFrom, long nRulePosTo );
__declspec(implementation_key(706)) HRESULT ICISite::UnbanIP ( _bstr_t bstrMask );
__declspec(implementation_key(707)) _variant_t ICISite::GetConnectedUsers ( );
__declspec(implementation_key(708)) _bstr_t ICISite::GetRSAConfigurationPath ( );
__declspec(implementation_key(709)) void ICISite::PutRSAConfigurationPath ( _bstr_t pVal );
__declspec(implementation_key(710)) VARIANT_BOOL ICISite::GetAllowFXP ( );
__declspec(implementation_key(711)) HRESULT ICISite::SetAllowFXP ( VARIANT_BOOL newVal );
__declspec(implementation_key(712)) VARIANT_BOOL ICISite::GetAllowNoop ( );
__declspec(implementation_key(713)) HRESULT ICISite::SetAllowNoop ( VARIANT_BOOL newVal );
__declspec(implementation_key(714)) VARIANT_BOOL ICISite::GetAllowCOMB ( );
__declspec(implementation_key(715)) HRESULT ICISite::SetAllowCOMB ( VARIANT_BOOL newVal );
__declspec(implementation_key(716)) VARIANT_BOOL ICISite::GetAllowXCRC ( );
__declspec(implementation_key(717)) HRESULT ICISite::SetAllowXCRC ( VARIANT_BOOL newVal );
__declspec(implementation_key(718)) _bstr_t ICISite::CreateComplexPasswordEx ( const _variant_t & bstrUserName, const _variant_t & bstrSettingsLevel );
__declspec(implementation_key(719)) ICISitePtr ICISites::Item ( long nIndex );
__declspec(implementation_key(720)) long ICISites::Count ( );
__declspec(implementation_key(721)) ICISitePtr ICISites::SiteByID ( long ID );
__declspec(implementation_key(722)) ICISitePtr ICISites::Add ( _bstr_t bstrName, _bstr_t bstrRootFolder, int nAMID, _bstr_t bstrAMDB, VARIANT_BOOL bEncryptPasswords, int nIP, long nPort, VARIANT_BOOL bCreateHomeFolder, VARIANT_BOOL bPermHomeFolder, VARIANT_BOOL bAutoStart, VARIANT_BOOL bCreateFTPFolders );
__declspec(implementation_key(723)) ICISitePtr ICISites::AddNTLMSite ( _bstr_t bstrName, _bstr_t bstrRootFolder, _bstr_t bstrDomainName, _bstr_t bstrAllowGroup, int nIP, long nPort, VARIANT_BOOL bCreateHomeFolder, VARIANT_BOOL bPermHomeFolder, VARIANT_BOOL bAutoStart, VARIANT_BOOL bCreateFTPFolders );
__declspec(implementation_key(724)) ICISitePtr ICISites::AddADSite ( _bstr_t bstrName, _bstr_t bstrRootFolder, _bstr_t bstrDomainContext, _bstr_t bstrAllowGroup, int nIP, long nPort, VARIANT_BOOL bCreateHomeFolder, VARIANT_BOOL bPermHomeFolder, VARIANT_BOOL bAutoStart, VARIANT_BOOL bCreateFTPFolders );
__declspec(implementation_key(725)) ICISitePtr ICISites::AddODBCSite ( _bstr_t bstrName, _bstr_t bstrRootFolder, _bstr_t bstrDSN, VARIANT_BOOL bEncryptPasswords, int nIP, long nPort, VARIANT_BOOL bCreateHomeFolder, VARIANT_BOOL bPermHomeFolder, VARIANT_BOOL bAutoStart, VARIANT_BOOL bCreateFTPFolders );
__declspec(implementation_key(726)) ICISitePtr ICISites::AddLocalSite ( _bstr_t bstrName, _bstr_t bstrRootFolder, _bstr_t bstrFilePath, int nIP, long nPort, VARIANT_BOOL bCreateHomeFolder, VARIANT_BOOL bPermHomeFolder, VARIANT_BOOL bAutoStart, VARIANT_BOOL bCreateFTPFolders );
__declspec(implementation_key(727)) ICISitePtr ICISites::AddLDAPSite ( _bstr_t bstrName, _bstr_t bstrRootFolder, _bstr_t bstrDomainContext, int nIP, long nPort, VARIANT_BOOL bCreateHomeFolder, VARIANT_BOOL bPermHomeFolder, VARIANT_BOOL bAutoStart, VARIANT_BOOL bCreateFTPFolders );
__declspec(implementation_key(728)) ICISitePtr ICISites::AddEx ( _bstr_t bzName, _bstr_t bzRootFolder, IDispatch * pdispAuthManagerSettings, int lIP, long lPort, VARIANT_BOOL bCreateHomeFolder, VARIANT_BOOL bFullPermissionForHomeFolder, VARIANT_BOOL bAutoStart, VARIANT_BOOL bCreateFTPFolders );
__declspec(implementation_key(729)) HRESULT ICIAudit::AuditSATTransaction ( _bstr_t From, _bstr_t Subject, _bstr_t Body, _bstr_t TempUserName, _bstr_t TempPassword, _bstr_t SiteName, long ExpireDays, _bstr_t TransGUID, _bstr_t Reserved1, _bstr_t Reserved2 );
__declspec(implementation_key(730)) HRESULT ICIAudit::AuditSATEmail ( _bstr_t Email, long EmailType, _bstr_t TransGUID );
__declspec(implementation_key(731)) HRESULT ICIAudit::AuditSATFile ( _bstr_t FileName, __int64 FileSize, _bstr_t TransGUID );
__declspec(implementation_key(732)) HRESULT ICIServer::Connect ( _bstr_t Host, long nPort, _bstr_t Login, _bstr_t Password );
__declspec(implementation_key(733)) HRESULT ICIServer::Close ( );
__declspec(implementation_key(734)) ICISitesPtr ICIServer::Sites ( );
__declspec(implementation_key(735)) _bstr_t ICIServer::GetLocalIP ( long nIP );
__declspec(implementation_key(736)) _bstr_t ICIServer::GetLocalTime ( );
__declspec(implementation_key(737)) VARIANT_BOOL ICIServer::GetIPAccessAllowedDefault ( );
__declspec(implementation_key(738)) void ICIServer::PutIPAccessAllowedDefault ( VARIANT_BOOL pVal );
__declspec(implementation_key(739)) _bstr_t ICIServer::GetLogPath ( );
__declspec(implementation_key(740)) void ICIServer::PutLogPath ( _bstr_t pVal );
__declspec(implementation_key(741)) _bstr_t ICIServer::GetCertificateFilePath ( );
__declspec(implementation_key(742)) void ICIServer::PutCertificateFilePath ( _bstr_t pVal );
__declspec(implementation_key(743)) _bstr_t ICIServer::GetKeyFilePath ( );
__declspec(implementation_key(744)) void ICIServer::PutKeyFilePath ( _bstr_t pVal );
__declspec(implementation_key(745)) _bstr_t ICIServer::GetPassPhrase ( );
__declspec(implementation_key(746)) void ICIServer::PutPassPhrase ( _bstr_t pVal );
__declspec(implementation_key(747)) int ICIServer::GetLogType ( );
__declspec(implementation_key(748)) void ICIServer::PutLogType ( int pVal );
__declspec(implementation_key(749)) int ICIServer::GetLogRotation ( );
__declspec(implementation_key(750)) void ICIServer::PutLogRotation ( int pVal );
__declspec(implementation_key(751)) long ICIServer::GetAdminPort ( );
__declspec(implementation_key(752)) void ICIServer::PutAdminPort ( long pVal );
__declspec(implementation_key(753)) long ICIServer::GetListenIP ( );
__declspec(implementation_key(754)) void ICIServer::PutListenIP ( long pVal );
__declspec(implementation_key(755)) VARIANT_BOOL ICIServer::GetAllowRemoteAdministration ( );
__declspec(implementation_key(756)) void ICIServer::PutAllowRemoteAdministration ( VARIANT_BOOL pVal );
__declspec(implementation_key(757)) VARIANT_BOOL ICIServer::GetUseSSLForAdministration ( );
__declspec(implementation_key(758)) void ICIServer::PutUseSSLForAdministration ( VARIANT_BOOL pVal );
__declspec(implementation_key(759)) _bstr_t ICIServer::GetSMTPServer ( );
__declspec(implementation_key(760)) void ICIServer::PutSMTPServer ( _bstr_t pVal );
__declspec(implementation_key(761)) long ICIServer::GetSMTPPort ( );
__declspec(implementation_key(762)) void ICIServer::PutSMTPPort ( long pVal );
__declspec(implementation_key(763)) _bstr_t ICIServer::GetSMTPLogin ( );
__declspec(implementation_key(764)) void ICIServer::PutSMTPLogin ( _bstr_t pVal );
__declspec(implementation_key(765)) _bstr_t ICIServer::GetSMTPPassword ( );
__declspec(implementation_key(766)) void ICIServer::PutSMTPPassword ( _bstr_t pVal );
__declspec(implementation_key(767)) _bstr_t ICIServer::GetSMTPSenderName ( );
__declspec(implementation_key(768)) void ICIServer::PutSMTPSenderName ( _bstr_t pVal );
__declspec(implementation_key(769)) _bstr_t ICIServer::GetSMTPSenderAddr ( );
__declspec(implementation_key(770)) void ICIServer::PutSMTPSenderAddr ( _bstr_t pVal );
__declspec(implementation_key(771)) _bstr_t ICIServer::GetSMTPRecipientName ( );
__declspec(implementation_key(772)) void ICIServer::PutSMTPRecipientName ( _bstr_t pVal );
__declspec(implementation_key(773)) _bstr_t ICIServer::GetSMTPRecipientAddr ( );
__declspec(implementation_key(774)) void ICIServer::PutSMTPRecipientAddr ( _bstr_t pVal );
__declspec(implementation_key(775)) _variant_t ICIServer::GetIPAccessRules ( );
__declspec(implementation_key(776)) HRESULT ICIServer::AddIPAccessRule ( _bstr_t bstrMask, VARIANT_BOOL bAllow, long nRulePos );
__declspec(implementation_key(777)) HRESULT ICIServer::RemoveIPAccessRule ( long nRulePos );
__declspec(implementation_key(778)) HRESULT ICIServer::SetSSLCertificate ( _bstr_t bzCertFilePath, _bstr_t bzKeyFilePath, _bstr_t bzPassPhrase );
__declspec(implementation_key(779)) HRESULT ICIServer::ApplyChanges ( );
__declspec(implementation_key(780)) VARIANT_BOOL ICIServer::GetEnableARM ( );
__declspec(implementation_key(781)) void ICIServer::PutEnableARM ( VARIANT_BOOL pVal );
__declspec(implementation_key(782)) _bstr_t ICIServer::GetARMServerName ( );
__declspec(implementation_key(783)) void ICIServer::PutARMServerName ( _bstr_t pVal );
__declspec(implementation_key(784)) _bstr_t ICIServer::GetARMDatabaseName ( );
__declspec(implementation_key(785)) void ICIServer::PutARMDatabaseName ( _bstr_t pVal );
__declspec(implementation_key(786)) _bstr_t ICIServer::GetARMUserName ( );
__declspec(implementation_key(787)) void ICIServer::PutARMUserName ( _bstr_t pVal );
__declspec(implementation_key(788)) _bstr_t ICIServer::GetARMPassword ( );
__declspec(implementation_key(789)) void ICIServer::PutARMPassword ( _bstr_t pVal );
__declspec(implementation_key(790)) HRESULT ICIServer::RefreshSettings ( );
__declspec(implementation_key(791)) _variant_t ICIServer::GetAdminIPs ( );
__declspec(implementation_key(792)) long ICIServer::GetServerAdminCount ( );
__declspec(implementation_key(793)) HRESULT ICIServer::RemoveServerAdminAccount ( _bstr_t bstrAdminUser, AdminAccountType accountType );
__declspec(implementation_key(794)) HRESULT ICIServer::ChangeAdminPassword ( _bstr_t bstrAdminUser, _bstr_t bstrNewPassword );
__declspec(implementation_key(795)) long ICIServer::GetConnectedUsersNumber ( );
__declspec(implementation_key(796)) int ICIServer::GetSSLVersionMask ( );
__declspec(implementation_key(797)) void ICIServer::PutSSLVersionMask ( int pVal );
__declspec(implementation_key(798)) VARIANT_BOOL ICIServer::GetAllowClearCommandChannel ( );
__declspec(implementation_key(799)) void ICIServer::PutAllowClearCommandChannel ( VARIANT_BOOL pVal );
__declspec(implementation_key(800)) VARIANT_BOOL ICIServer::GetAllowUnprotectedDataChannel ( );
__declspec(implementation_key(801)) void ICIServer::PutAllowUnprotectedDataChannel ( VARIANT_BOOL pVal );
__declspec(implementation_key(802)) _bstr_t ICIServer::GetCipherList ( );
__declspec(implementation_key(803)) void ICIServer::PutCipherList ( _bstr_t pVal );
__declspec(implementation_key(804)) ICIAuditPtr ICIServer::Auditor ( );
__declspec(implementation_key(805)) RegistrationState ICIServer::ModuleRegistrationState ( ServerModule m );
__declspec(implementation_key(806)) _variant_t ICIServer::GetAvailableReports ( );
__declspec(implementation_key(807)) _variant_t ICIServer::GetAvailablePGPKeys ( );
__declspec(implementation_key(808)) HRESULT ICIServer::GenerateReport ( IDispatch * pdispReportParams, _bstr_t bzReportPath );
__declspec(implementation_key(809)) _variant_t ICIServer::GetAvailableEvents ( );
__declspec(implementation_key(810)) _variant_t ICIServer::GetAvailableSSHKeys ( );
__declspec(implementation_key(811)) long ICIServer::ImportSSHKey ( _bstr_t bstrKeyPath );
__declspec(implementation_key(812)) HRESULT ICIServer::RemoveSSHKey ( long lID );
__declspec(implementation_key(813)) HRESULT ICIServer::ConnectEx ( _bstr_t Host, long nPort, AdminLoginType nLoginType, _bstr_t Login, _bstr_t Password );
__declspec(implementation_key(814)) VARIANT_BOOL ICIServer::StartServerService ( _bstr_t bstrHost );
__declspec(implementation_key(815)) VARIANT_BOOL ICIServer::StopServerService ( _bstr_t bstrHost );
__declspec(implementation_key(816)) VARIANT_BOOL ICIServer::IsServerServiceStarted ( _bstr_t bstrHost );
__declspec(implementation_key(817)) HRESULT ICIServer::BackupServerConfiguration ( _bstr_t bstrFilePath );
__declspec(implementation_key(818)) HRESULT ICIServer::RestoreServerConfiguration ( _bstr_t bstrFilePath, AdminLoginType nLoginType, _bstr_t bstrLogin, _bstr_t bstrPassword );
__declspec(implementation_key(819)) HRESULT ICIServer::Stop ( );
__declspec(implementation_key(820)) HRESULT ICIServer::Start ( );
__declspec(implementation_key(821)) VARIANT_BOOL ICIServer::GetIsStarted ( );
__declspec(implementation_key(822)) DATE ICIServer::GetStartTime ( );
__declspec(implementation_key(823)) unsigned long ICIServer::GetUptime ( );
__declspec(implementation_key(824)) DATE ICIServer::GetLastModifiedTime ( );
__declspec(implementation_key(825)) _bstr_t ICIServer::GetLastModifiedBy ( );
__declspec(implementation_key(826)) long ICIServer::GetActiveUploads ( );
__declspec(implementation_key(827)) long ICIServer::GetActiveDownloads ( );
__declspec(implementation_key(828)) long ICIServer::GetAverageSpeed ( );
__declspec(implementation_key(829)) _bstr_t ICIServer::GetConfigurationFilePath ( );
__declspec(implementation_key(830)) void ICIServer::PutConfigurationFilePath ( _bstr_t pVal );
__declspec(implementation_key(831)) VARIANT_BOOL ICIServer::GetUseUTCInListings ( );
__declspec(implementation_key(832)) void ICIServer::PutUseUTCInListings ( VARIANT_BOOL pVal );
__declspec(implementation_key(833)) long ICIServer::GetDefaultPollTimeout ( );
__declspec(implementation_key(834)) void ICIServer::PutDefaultPollTimeout ( long pVal );
__declspec(implementation_key(835)) HRESULT ICIServer::RenameSSHKey ( long lID, _bstr_t bstrNewName );
__declspec(implementation_key(836)) LogMode ICIServer::GetLogMode ( );
__declspec(implementation_key(837)) void ICIServer::PutLogMode ( LogMode pVal );
__declspec(implementation_key(838)) ARMDatabaseType ICIServer::GetARMDatabaseType ( );
__declspec(implementation_key(839)) void ICIServer::PutARMDatabaseType ( ARMDatabaseType pVal );
__declspec(implementation_key(840)) ARMAuthenticationType ICIServer::GetARMAuthenticationType ( );
__declspec(implementation_key(841)) void ICIServer::PutARMAuthenticationType ( ARMAuthenticationType pVal );
__declspec(implementation_key(842)) VARIANT_BOOL ICIServer::GetARMStopAuditingOnError ( );
__declspec(implementation_key(843)) void ICIServer::PutARMStopAuditingOnError ( VARIANT_BOOL pVal );
__declspec(implementation_key(844)) _bstr_t ICIServer::GetARMFailureAuditFolder ( );
__declspec(implementation_key(845)) void ICIServer::PutARMFailureAuditFolder ( _bstr_t pVal );
__declspec(implementation_key(846)) _bstr_t ICIServer::GetARMFailureEmailList ( );
__declspec(implementation_key(847)) void ICIServer::PutARMFailureEmailList ( _bstr_t pVal );
__declspec(implementation_key(848)) VARIANT_BOOL ICIServer::GetSMTPUseAuthentication ( );
__declspec(implementation_key(849)) void ICIServer::PutSMTPUseAuthentication ( VARIANT_BOOL pVal );
__declspec(implementation_key(850)) _bstr_t ICIServer::GetSMTPAddressBook ( );
__declspec(implementation_key(851)) void ICIServer::PutSMTPAddressBook ( _bstr_t pVal );
__declspec(implementation_key(852)) VARIANT_BOOL ICIServer::GetSSLFIPSEnabled ( );
__declspec(implementation_key(853)) void ICIServer::PutSSLFIPSEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(854)) VARIANT_BOOL ICIServer::GetSSHFIPSEnabled ( );
__declspec(implementation_key(855)) void ICIServer::PutSSHFIPSEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(856)) _bstr_t ICIServer::CreatePGPKey ( _bstr_t bstrFullName, _bstr_t bstrEmailAddress, DATE dtExpirationDate, PGPKeyType nKeyType, PGPKeyCipher nKeyCipher, long lKeySize, _bstr_t bstrPassphrase );
__declspec(implementation_key(857)) HRESULT ICIServer::RemovePGPKey ( _bstr_t bstrKeyId );
__declspec(implementation_key(858)) _bstr_t ICIServer::ImportPGPKey ( _bstr_t bstrKeyPath );
__declspec(implementation_key(859)) HRESULT ICIServer::ExportPGPKey ( _bstr_t bstrKeyId, VARIANT_BOOL vbIncludePrivate, _bstr_t bstrFileName );
__declspec(implementation_key(860)) HRESULT ICIServer::GetPGPKeyringSettings ( VARIANT * pPublicPath, VARIANT * pPrivatePath );
__declspec(implementation_key(861)) HRESULT ICIServer::SetPGPKeyringSettings ( _bstr_t newPublicKeyring, _bstr_t newPrivateKeyring );
__declspec(implementation_key(862)) VARIANT_BOOL ICIServer::ARMTestConnection ( );
__declspec(implementation_key(863)) VARIANT_BOOL ICIServer::ARMReconnect ( );
__declspec(implementation_key(864)) IDispatchPtr ICIServer::CreateAdmin ( _bstr_t bstrNewAdmin, _bstr_t bstrPassword, AdminAccountType atype, VARIANT_BOOL vbGroup );
__declspec(implementation_key(865)) HRESULT ICIServer::CreateSSHKey ( long nKeyBits, _bstr_t bstrPassword, _bstr_t bstrPrivateKeyFile, _bstr_t bstrPublicKeyFile, VARIANT_BOOL vbComFormat, long nSiteId, _bstr_t bstrCopyTo );
__declspec(implementation_key(866)) HRESULT ICIServer::CreateSSLCertificate ( _bstr_t bstrKeyfile, _bstr_t bstrReqfile, _bstr_t bstrcertfile, _bstr_t bstrPassword, _bstr_t bstrCountryName, _bstr_t bstrStateOrProvinceName, _bstr_t bstrLocalityName, _bstr_t bstrOrganizationName, _bstr_t bstrOrganizationalUnitName, _bstr_t bstrCommonName, _bstr_t bstrEmailAddress, long nBits, long nDays, CertificateFormat CertFormat, CertificateFormat PrivateKeyFormat, long nSiteId, VARIANT_BOOL vbUseCert, VARIANT_BOOL vbMakeTrusted );
__declspec(implementation_key(867)) HRESULT ICIServer::SignSSLCertificate ( _bstr_t bstrRequest, _bstr_t bstrServCert, _bstr_t bstrPrivateKey, _bstr_t bstrPass, _bstr_t bstrOutCert, long nDays );
__declspec(implementation_key(868)) _variant_t ICIServer::GetAdminAccounts ( );
__declspec(implementation_key(869)) VARIANT_BOOL ICIServer::GetAutoSave ( );
__declspec(implementation_key(870)) void ICIServer::PutAutoSave ( VARIANT_BOOL pVal );
__declspec(implementation_key(871)) HRESULT ICIServer::MoveIPAccessRule ( long nRulePosFrom, long nRulePosTo );
__declspec(implementation_key(872)) HRESULT ICIServer::UnbanIP ( _bstr_t bstrMask );
__declspec(implementation_key(873)) VARIANT_BOOL ICIServer::GetRequireStrongPasswords ( );
__declspec(implementation_key(874)) void ICIServer::PutRequireStrongPasswords ( VARIANT_BOOL pVal );
__declspec(implementation_key(875)) IDispatchPtr ICIServer::GetComplexPasswordSettings ( );
__declspec(implementation_key(876)) HRESULT ICIServer::SetComplexPasswordSettings ( IDispatch * pIComplexPasswordSettings );
__declspec(implementation_key(877)) IDispatchPtr ICIServer::GetBackupArchiveInfo ( _bstr_t bstrFilePath, AdminLoginType nLoginType, _bstr_t bstrLogin, _bstr_t bstrPassword );
__declspec(implementation_key(878)) HRESULT ICIServer::RestoreServerConfigurationEx ( IDispatch * pVal );
__declspec(implementation_key(879)) HRESULT ICIServer::ExportSSHKey ( long lKeyID, _bstr_t bzKeyFilePath );
__declspec(implementation_key(880)) _bstr_t ICIPgpActionParams::GetPassPhrase ( );
__declspec(implementation_key(881)) void ICIPgpActionParams::PutPassPhrase ( _bstr_t pVal );
__declspec(implementation_key(882)) _bstr_t ICIPgpActionParams::GetFilePath ( );
__declspec(implementation_key(883)) void ICIPgpActionParams::PutFilePath ( _bstr_t pVal );
__declspec(implementation_key(884)) _bstr_t ICIPgpActionParams::GetSignKeyID ( );
__declspec(implementation_key(885)) void ICIPgpActionParams::PutSignKeyID ( _bstr_t pVal );
__declspec(implementation_key(886)) _variant_t ICIPgpActionParams::GetKeyIDs ( );
__declspec(implementation_key(887)) void ICIPgpActionParams::PutKeyIDs ( const _variant_t & pVal );
__declspec(implementation_key(888)) PGPOperation ICIPgpActionParams::GetOperation ( );
__declspec(implementation_key(889)) void ICIPgpActionParams::PutOperation ( PGPOperation pVal );
__declspec(implementation_key(890)) VARIANT_BOOL ICIPgpActionParams::GetASCIIArmoredOutput ( );
__declspec(implementation_key(891)) void ICIPgpActionParams::PutASCIIArmoredOutput ( VARIANT_BOOL pVal );
__declspec(implementation_key(892)) PGPCompressionLevel ICIPgpActionParams::GetCompressionLevel ( );
__declspec(implementation_key(893)) void ICIPgpActionParams::PutCompressionLevel ( PGPCompressionLevel pVal );
__declspec(implementation_key(894)) VARIANT_BOOL ICIPgpActionParams::GetSignatureInSeparateFile ( );
__declspec(implementation_key(895)) void ICIPgpActionParams::PutSignatureInSeparateFile ( VARIANT_BOOL pVal );
__declspec(implementation_key(896)) PGPSigningHash ICIPgpActionParams::GetSigningHash ( );
__declspec(implementation_key(897)) void ICIPgpActionParams::PutSigningHash ( PGPSigningHash pVal );
__declspec(implementation_key(898)) _bstr_t ICIPgpActionParams::GetSDAPassword ( );
__declspec(implementation_key(899)) void ICIPgpActionParams::PutSDAPassword ( _bstr_t pVal );
__declspec(implementation_key(900)) _bstr_t ICIMailActionParams::GetTOAddresses ( );
__declspec(implementation_key(901)) void ICIMailActionParams::PutTOAddresses ( _bstr_t pVal );
__declspec(implementation_key(902)) _bstr_t ICIMailActionParams::GetCCAddresses ( );
__declspec(implementation_key(903)) void ICIMailActionParams::PutCCAddresses ( _bstr_t pVal );
__declspec(implementation_key(904)) _bstr_t ICIMailActionParams::GetBCCAddresses ( );
__declspec(implementation_key(905)) void ICIMailActionParams::PutBCCAddresses ( _bstr_t pVal );
__declspec(implementation_key(906)) _bstr_t ICIMailActionParams::GetSubject ( );
__declspec(implementation_key(907)) void ICIMailActionParams::PutSubject ( _bstr_t pVal );
__declspec(implementation_key(908)) _bstr_t ICIMailActionParams::GetBody ( );
__declspec(implementation_key(909)) void ICIMailActionParams::PutBody ( _bstr_t pVal );
__declspec(implementation_key(910)) VARIANT_BOOL ICIMailActionParams::GetCopyToClient ( );
__declspec(implementation_key(911)) void ICIMailActionParams::PutCopyToClient ( VARIANT_BOOL pVal );
__declspec(implementation_key(912)) VARIANT_BOOL ICIMailActionParams::GetUseCustomFromAddress ( );
__declspec(implementation_key(913)) void ICIMailActionParams::PutUseCustomFromAddress ( VARIANT_BOOL pVal );
__declspec(implementation_key(914)) _bstr_t ICIMailActionParams::GetCustomFromAddress ( );
__declspec(implementation_key(915)) void ICIMailActionParams::PutCustomFromAddress ( _bstr_t pVal );
__declspec(implementation_key(916)) _bstr_t ICITransferActionParams::GetLocalPath ( );
__declspec(implementation_key(917)) void ICITransferActionParams::PutLocalPath ( _bstr_t pVal );
__declspec(implementation_key(918)) NetworkProtocol ICITransferActionParams::GetProtocol ( );
__declspec(implementation_key(919)) void ICITransferActionParams::PutProtocol ( NetworkProtocol pVal );
__declspec(implementation_key(920)) VARIANT_BOOL ICITransferActionParams::GetAutoLogin ( );
__declspec(implementation_key(921)) void ICITransferActionParams::PutAutoLogin ( VARIANT_BOOL pVal );
__declspec(implementation_key(922)) _bstr_t ICITransferActionParams::GetUser ( );
__declspec(implementation_key(923)) void ICITransferActionParams::PutUser ( _bstr_t pVal );
__declspec(implementation_key(924)) _bstr_t ICITransferActionParams::GetPassword ( );
__declspec(implementation_key(925)) void ICITransferActionParams::PutPassword ( _bstr_t pVal );
__declspec(implementation_key(926)) _bstr_t ICITransferActionParams::GetPrivateKeyPath ( );
__declspec(implementation_key(927)) void ICITransferActionParams::PutPrivateKeyPath ( _bstr_t pVal );
__declspec(implementation_key(928)) _bstr_t ICITransferActionParams::GetPrivateKeyPassword ( );
__declspec(implementation_key(929)) void ICITransferActionParams::PutPrivateKeyPassword ( _bstr_t pVal );
__declspec(implementation_key(930)) _bstr_t ICITransferActionParams::GetPublicKeyPath ( );
__declspec(implementation_key(931)) void ICITransferActionParams::PutPublicKeyPath ( _bstr_t pVal );
__declspec(implementation_key(932)) _bstr_t ICITransferActionParams::GetHost ( );
__declspec(implementation_key(933)) void ICITransferActionParams::PutHost ( _bstr_t pVal );
__declspec(implementation_key(934)) long ICITransferActionParams::GetPort ( );
__declspec(implementation_key(935)) void ICITransferActionParams::PutPort ( long pVal );
__declspec(implementation_key(936)) _bstr_t ICITransferActionParams::GetRemotePath ( );
__declspec(implementation_key(937)) void ICITransferActionParams::PutRemotePath ( _bstr_t pVal );
__declspec(implementation_key(938)) VARIANT_BOOL ICITransferActionParams::GetDeleteSourceFile ( );
__declspec(implementation_key(939)) void ICITransferActionParams::PutDeleteSourceFile ( VARIANT_BOOL pVal );
__declspec(implementation_key(940)) long ICITransferActionParams::GetMaxConcurrentThreads ( );
__declspec(implementation_key(941)) void ICITransferActionParams::PutMaxConcurrentThreads ( long pVal );
__declspec(implementation_key(942)) long ICITransferActionParams::GetConnectionTimeoutSeconds ( );
__declspec(implementation_key(943)) void ICITransferActionParams::PutConnectionTimeoutSeconds ( long pVal );
__declspec(implementation_key(944)) long ICITransferActionParams::GetConnectionRetryAttempts ( );
__declspec(implementation_key(945)) void ICITransferActionParams::PutConnectionRetryAttempts ( long pVal );
__declspec(implementation_key(946)) long ICITransferActionParams::GetRetryDelaySeconds ( );
__declspec(implementation_key(947)) void ICITransferActionParams::PutRetryDelaySeconds ( long pVal );
__declspec(implementation_key(948)) VARIANT_BOOL ICITransferActionParams::GetValidateIntegrity ( );
__declspec(implementation_key(949)) void ICITransferActionParams::PutValidateIntegrity ( VARIANT_BOOL pVal );
__declspec(implementation_key(950)) FTPDataConnectionMode ICITransferActionParams::GetFTPDataConnectionMode ( );
__declspec(implementation_key(951)) void ICITransferActionParams::PutFTPDataConnectionMode ( FTPDataConnectionMode pVal );
__declspec(implementation_key(952)) long ICITransferActionParams::GetFTPDataConnectionPortMin ( );
__declspec(implementation_key(953)) void ICITransferActionParams::PutFTPDataConnectionPortMin ( long pVal );
__declspec(implementation_key(954)) long ICITransferActionParams::GetFTPDataConnectionPortMax ( );
__declspec(implementation_key(955)) void ICITransferActionParams::PutFTPDataConnectionPortMax ( long pVal );
__declspec(implementation_key(956)) VARIANT_BOOL ICITransferActionParams::GetFTPSClearCommandChannel ( );
__declspec(implementation_key(957)) void ICITransferActionParams::PutFTPSClearCommandChannel ( VARIANT_BOOL pVal );
__declspec(implementation_key(958)) VARIANT_BOOL ICITransferActionParams::GetFTPSClearDataChannel ( );
__declspec(implementation_key(959)) void ICITransferActionParams::PutFTPSClearDataChannel ( VARIANT_BOOL pVal );
__declspec(implementation_key(960)) _bstr_t ICITransferActionParams::GetTextFileTypes ( );
__declspec(implementation_key(961)) void ICITransferActionParams::PutTextFileTypes ( _bstr_t pVal );
__declspec(implementation_key(962)) VARIANT_BOOL ICITransferActionParams::GetPreserveFileTime ( );
__declspec(implementation_key(963)) void ICITransferActionParams::PutPreserveFileTime ( VARIANT_BOOL pVal );
__declspec(implementation_key(964)) VARIANT_BOOL ICITransferActionParams::GetUseProxy ( );
__declspec(implementation_key(965)) void ICITransferActionParams::PutUseProxy ( VARIANT_BOOL pVal );
__declspec(implementation_key(966)) ProxyType ICITransferActionParams::GetProxyType ( );
__declspec(implementation_key(967)) void ICITransferActionParams::PutProxyType ( ProxyType pVal );
__declspec(implementation_key(968)) _bstr_t ICITransferActionParams::GetProxyHostName ( );
__declspec(implementation_key(969)) void ICITransferActionParams::PutProxyHostName ( _bstr_t pVal );
__declspec(implementation_key(970)) long ICITransferActionParams::GetProxyPort ( );
__declspec(implementation_key(971)) void ICITransferActionParams::PutProxyPort ( long pVal );
__declspec(implementation_key(972)) _bstr_t ICITransferActionParams::GetProxyUserName ( );
__declspec(implementation_key(973)) void ICITransferActionParams::PutProxyUserName ( _bstr_t pVal );
__declspec(implementation_key(974)) _bstr_t ICITransferActionParams::GetProxyPassword ( );
__declspec(implementation_key(975)) void ICITransferActionParams::PutProxyPassword ( _bstr_t pVal );
__declspec(implementation_key(976)) ProxyAuthenticationType ICITransferActionParams::GetProxyAdvAuthenticationType ( );
__declspec(implementation_key(977)) void ICITransferActionParams::PutProxyAdvAuthenticationType ( ProxyAuthenticationType pVal );
__declspec(implementation_key(978)) _bstr_t ICITransferActionParams::GetProxyAdvSeparator ( );
__declspec(implementation_key(979)) void ICITransferActionParams::PutProxyAdvSeparator ( _bstr_t pVal );
__declspec(implementation_key(980)) _bstr_t ICITransferActionParams::GetProxyAdvCustomCmds ( );
__declspec(implementation_key(981)) void ICITransferActionParams::PutProxyAdvCustomCmds ( _bstr_t pVal );
__declspec(implementation_key(982)) VARIANT_BOOL ICITransferActionParams::GetUseSOCKS ( );
__declspec(implementation_key(983)) void ICITransferActionParams::PutUseSOCKS ( VARIANT_BOOL pVal );
__declspec(implementation_key(984)) SOCKSType ICITransferActionParams::GetSOCKSType ( );
__declspec(implementation_key(985)) void ICITransferActionParams::PutSOCKSType ( SOCKSType pVal );
__declspec(implementation_key(986)) _bstr_t ICITransferActionParams::GetSOCKSHostName ( );
__declspec(implementation_key(987)) void ICITransferActionParams::PutSOCKSHostName ( _bstr_t pVal );
__declspec(implementation_key(988)) long ICITransferActionParams::GetSOCKSPort ( );
__declspec(implementation_key(989)) void ICITransferActionParams::PutSOCKSPort ( long pVal );
__declspec(implementation_key(990)) VARIANT_BOOL ICITransferActionParams::GetSOCKSUseAuthentication ( );
__declspec(implementation_key(991)) void ICITransferActionParams::PutSOCKSUseAuthentication ( VARIANT_BOOL pVal );
__declspec(implementation_key(992)) _bstr_t ICITransferActionParams::GetSOCKSUserName ( );
__declspec(implementation_key(993)) void ICITransferActionParams::PutSOCKSUserName ( _bstr_t pVal );
__declspec(implementation_key(994)) _bstr_t ICITransferActionParams::GetSOCKSPassword ( );
__declspec(implementation_key(995)) void ICITransferActionParams::PutSOCKSPassword ( _bstr_t pVal );
__declspec(implementation_key(996)) TransferOverwriteType ICITransferActionParams::GetOverwriteType ( );
__declspec(implementation_key(997)) void ICITransferActionParams::PutOverwriteType ( TransferOverwriteType pVal );
__declspec(implementation_key(998)) _bstr_t ICICleanupActionParams::GetFolder ( );
__declspec(implementation_key(999)) void ICICleanupActionParams::PutFolder ( _bstr_t pVal );
__declspec(implementation_key(1000)) VARIANT_BOOL ICICleanupActionParams::GetRecursive ( );
__declspec(implementation_key(1001)) void ICICleanupActionParams::PutRecursive ( VARIANT_BOOL pVal );
__declspec(implementation_key(1002)) _bstr_t ICICleanupActionParams::GetFileMask ( );
__declspec(implementation_key(1003)) void ICICleanupActionParams::PutFileMask ( _bstr_t pVal );
__declspec(implementation_key(1004)) VARIANT_BOOL ICICleanupActionParams::GetExcludeFileMask ( );
__declspec(implementation_key(1005)) void ICICleanupActionParams::PutExcludeFileMask ( VARIANT_BOOL pVal );
__declspec(implementation_key(1006)) long ICICleanupActionParams::GetDaysToKeepFiles ( );
__declspec(implementation_key(1007)) void ICICleanupActionParams::PutDaysToKeepFiles ( long pVal );
__declspec(implementation_key(1008)) IDispatchPtr ICIReportActionParams::GetReport ( );
__declspec(implementation_key(1009)) void ICIReportActionParams::PutReport ( IDispatch * pVal );
__declspec(implementation_key(1010)) ReportPeriodType ICIReportActionParams::GetDateFormat ( );
__declspec(implementation_key(1011)) void ICIReportActionParams::PutDateFormat ( ReportPeriodType pVal );
__declspec(implementation_key(1012)) PredefinedReportPeriod ICIReportActionParams::GetCustomDate ( );
__declspec(implementation_key(1013)) void ICIReportActionParams::PutCustomDate ( PredefinedReportPeriod pVal );
__declspec(implementation_key(1014)) _variant_t ICIReportActionParams::GetFromDate ( );
__declspec(implementation_key(1015)) void ICIReportActionParams::PutFromDate ( const _variant_t & pVal );
__declspec(implementation_key(1016)) _variant_t ICIReportActionParams::GetToDate ( );
__declspec(implementation_key(1017)) void ICIReportActionParams::PutToDate ( const _variant_t & pVal );
__declspec(implementation_key(1018)) ReportFormat ICIReportActionParams::GetReportFileFormat ( );
__declspec(implementation_key(1019)) void ICIReportActionParams::PutReportFileFormat ( ReportFormat pVal );
__declspec(implementation_key(1020)) _bstr_t ICIReportActionParams::GetOptionalParameters ( );
__declspec(implementation_key(1021)) void ICIReportActionParams::PutOptionalParameters ( _bstr_t pVal );
__declspec(implementation_key(1022)) _bstr_t ICIReportActionParams::GetFilterField1 ( );
__declspec(implementation_key(1023)) void ICIReportActionParams::PutFilterField1 ( _bstr_t pVal );
__declspec(implementation_key(1024)) _bstr_t ICIReportActionParams::GetFilterField2 ( );
__declspec(implementation_key(1025)) void ICIReportActionParams::PutFilterField2 ( _bstr_t pVal );
__declspec(implementation_key(1026)) ReportFilterOperator ICIReportActionParams::GetFilterOperator1 ( );
__declspec(implementation_key(1027)) void ICIReportActionParams::PutFilterOperator1 ( ReportFilterOperator pVal );
__declspec(implementation_key(1028)) ReportFilterOperator ICIReportActionParams::GetFilterOperator2 ( );
__declspec(implementation_key(1029)) void ICIReportActionParams::PutFilterOperator2 ( ReportFilterOperator pVal );
__declspec(implementation_key(1030)) _bstr_t ICIReportActionParams::GetFilterValue1 ( );
__declspec(implementation_key(1031)) void ICIReportActionParams::PutFilterValue1 ( _bstr_t pVal );
__declspec(implementation_key(1032)) _bstr_t ICIReportActionParams::GetFilterValue2 ( );
__declspec(implementation_key(1033)) void ICIReportActionParams::PutFilterValue2 ( _bstr_t pVal );
__declspec(implementation_key(1034)) ReportFiltersCombiningOperator ICIReportActionParams::GetFilterAndOr ( );
__declspec(implementation_key(1035)) void ICIReportActionParams::PutFilterAndOr ( ReportFiltersCombiningOperator pVal );
__declspec(implementation_key(1036)) _bstr_t ICICommandActionParams::GetCommand ( );
__declspec(implementation_key(1037)) void ICICommandActionParams::PutCommand ( _bstr_t pVal );
__declspec(implementation_key(1038)) _bstr_t ICICommandActionParams::GetParameters ( );
__declspec(implementation_key(1039)) void ICICommandActionParams::PutParameters ( _bstr_t pVal );
__declspec(implementation_key(1040)) _bstr_t ICICommandActionParams::GetWorkingFolder ( );
__declspec(implementation_key(1041)) void ICICommandActionParams::PutWorkingFolder ( _bstr_t pVal );
__declspec(implementation_key(1042)) VARIANT_BOOL ICIStopActionParams::GetEnabled ( );
__declspec(implementation_key(1043)) void ICIStopActionParams::PutEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(1044)) StopType ICIStopActionParams::GetAction ( );
__declspec(implementation_key(1045)) void ICIStopActionParams::PutAction ( StopType pVal );
__declspec(implementation_key(1046)) _bstr_t ICIBackupActionParams::GetFolder ( );
__declspec(implementation_key(1047)) void ICIBackupActionParams::PutFolder ( _bstr_t pVal );
__declspec(implementation_key(1048)) _bstr_t ICIAWTaskActionParams::GetTaskName ( );
__declspec(implementation_key(1049)) void ICIAWTaskActionParams::PutTaskName ( _bstr_t pVal );
__declspec(implementation_key(1050)) long ICIAWTaskActionParams::GetVariablesCount ( );
__declspec(implementation_key(1051)) _bstr_t ICIAWTaskActionParams::GetVariableName ( long nIndex );
__declspec(implementation_key(1052)) _bstr_t ICIAWTaskActionParams::GetVariableValue ( long nIndex );
__declspec(implementation_key(1053)) HRESULT ICIAWTaskActionParams::RemoveVariable ( long nIndex );
__declspec(implementation_key(1054)) HRESULT ICIAWTaskActionParams::AddVariable ( _bstr_t bstrVarName, _bstr_t bstrVarValue );
__declspec(implementation_key(1055)) HRESULT ICIAWTaskActionParams::SetVariable ( long nIndex, _bstr_t bstrVarName, _bstr_t bstrVarValue );
__declspec(implementation_key(1056)) _bstr_t ICIAS2SendActionParams::GetLocalPath ( );
__declspec(implementation_key(1057)) void ICIAS2SendActionParams::PutLocalPath ( _bstr_t pVal );
__declspec(implementation_key(1058)) VARIANT_BOOL ICIAS2SendActionParams::GetUseClientProfile ( );
__declspec(implementation_key(1059)) void ICIAS2SendActionParams::PutUseClientProfile ( VARIANT_BOOL pVal );
__declspec(implementation_key(1060)) _bstr_t ICIAS2SendActionParams::GetClientProfile ( );
__declspec(implementation_key(1061)) void ICIAS2SendActionParams::PutClientProfile ( _bstr_t pVal );
__declspec(implementation_key(1062)) VARIANT_BOOL ICIAS2SendActionParams::GetDeleteSourceFile ( );
__declspec(implementation_key(1063)) void ICIAS2SendActionParams::PutDeleteSourceFile ( VARIANT_BOOL pVal );
__declspec(implementation_key(1064)) _bstr_t ICIAS2SendActionParams::GetHost ( );
__declspec(implementation_key(1065)) void ICIAS2SendActionParams::PutHost ( _bstr_t pVal );
__declspec(implementation_key(1066)) long ICIAS2SendActionParams::GetPort ( );
__declspec(implementation_key(1067)) void ICIAS2SendActionParams::PutPort ( long pVal );
__declspec(implementation_key(1068)) _bstr_t ICIAS2SendActionParams::GetRemotePath ( );
__declspec(implementation_key(1069)) void ICIAS2SendActionParams::PutRemotePath ( _bstr_t pVal );
__declspec(implementation_key(1070)) _bstr_t ICIAS2SendActionParams::GetUser ( );
__declspec(implementation_key(1071)) void ICIAS2SendActionParams::PutUser ( _bstr_t pVal );
__declspec(implementation_key(1072)) _bstr_t ICIAS2SendActionParams::GetPassword ( );
__declspec(implementation_key(1073)) void ICIAS2SendActionParams::PutPassword ( _bstr_t pVal );
__declspec(implementation_key(1074)) _bstr_t ICIAS2SendActionParams::GetSubject ( );
__declspec(implementation_key(1075)) void ICIAS2SendActionParams::PutSubject ( _bstr_t pVal );
__declspec(implementation_key(1076)) AS2ContentType ICIAS2SendActionParams::GetContentType ( );
__declspec(implementation_key(1077)) void ICIAS2SendActionParams::PutContentType ( AS2ContentType pVal );
__declspec(implementation_key(1078)) VARIANT_BOOL ICIAS2SendActionParams::GetCompress ( );
__declspec(implementation_key(1079)) void ICIAS2SendActionParams::PutCompress ( VARIANT_BOOL pVal );
__declspec(implementation_key(1080)) VARIANT_BOOL ICIAS2SendActionParams::GetEncrypt ( );
__declspec(implementation_key(1081)) void ICIAS2SendActionParams::PutEncrypt ( VARIANT_BOOL pVal );
__declspec(implementation_key(1082)) VARIANT_BOOL ICIAS2SendActionParams::GetSign ( );
__declspec(implementation_key(1083)) void ICIAS2SendActionParams::PutSign ( VARIANT_BOOL pVal );
__declspec(implementation_key(1084)) _bstr_t ICIAS2SendActionParams::GetPartnerCertificatePath ( );
__declspec(implementation_key(1085)) void ICIAS2SendActionParams::PutPartnerCertificatePath ( _bstr_t pVal );
__declspec(implementation_key(1086)) _bstr_t ICIAS2SendActionParams::GetAS2ID ( );
__declspec(implementation_key(1087)) void ICIAS2SendActionParams::PutAS2ID ( _bstr_t pVal );
__declspec(implementation_key(1088)) _bstr_t ICIAS2SendActionParams::GetPartnerAS2ID ( );
__declspec(implementation_key(1089)) void ICIAS2SendActionParams::PutPartnerAS2ID ( _bstr_t pVal );
__declspec(implementation_key(1090)) AS2ReceiptPolicy ICIAS2SendActionParams::GetReceiptPolicy ( );
__declspec(implementation_key(1091)) void ICIAS2SendActionParams::PutReceiptPolicy ( AS2ReceiptPolicy pVal );
__declspec(implementation_key(1092)) AS2ReceiptDelivery ICIAS2SendActionParams::GetReceiptDelivery ( );
__declspec(implementation_key(1093)) void ICIAS2SendActionParams::PutReceiptDelivery ( AS2ReceiptDelivery pVal );
__declspec(implementation_key(1094)) long ICIAS2SendActionParams::GetTimeoutSec ( );
__declspec(implementation_key(1095)) void ICIAS2SendActionParams::PutTimeoutSec ( long pVal );
__declspec(implementation_key(1096)) long ICIAS2SendActionParams::GetRetriesCount ( );
__declspec(implementation_key(1097)) void ICIAS2SendActionParams::PutRetriesCount ( long pVal );
__declspec(implementation_key(1098)) long ICIAS2SendActionParams::GetRetryDelaySec ( );
__declspec(implementation_key(1099)) void ICIAS2SendActionParams::PutRetryDelaySec ( long pVal );
__declspec(implementation_key(1100)) long ICIAS2SendActionParams::GetAsyncReceiptTimeoutMin ( );
__declspec(implementation_key(1101)) void ICIAS2SendActionParams::PutAsyncReceiptTimeoutMin ( long pVal );
__declspec(implementation_key(1102)) EventLogType ICIWindowsEventLogActionParams::Gettype ( );
__declspec(implementation_key(1103)) void ICIWindowsEventLogActionParams::Puttype ( EventLogType pVal );
__declspec(implementation_key(1104)) _bstr_t ICIWindowsEventLogActionParams::GetDescription ( );
__declspec(implementation_key(1105)) void ICIWindowsEventLogActionParams::PutDescription ( _bstr_t pVal );
__declspec(implementation_key(1106)) IDispatchPtr ICIEventRules::Item ( long lIndex );
__declspec(implementation_key(1107)) HRESULT ICIEventRules::Delete ( long lIndex );
__declspec(implementation_key(1108)) long ICIEventRules::Count ( );
__declspec(implementation_key(1109)) IDispatchPtr ICIEventRules::Add ( long lIndex, IDispatch * pdispParams );
__declspec(implementation_key(1110)) IDispatchPtr ICIEventRules::Find ( _bstr_t strName );
__declspec(implementation_key(1111)) IDispatchPtr ICIEventRule::Statement ( long lIndex );
__declspec(implementation_key(1112)) long ICIEventRule::StatementsCount ( );
__declspec(implementation_key(1113)) HRESULT ICIEventRule::DeleteStatement ( long lIndex );
__declspec(implementation_key(1114)) IDispatchPtr ICIEventRule::GetParams ( );
__declspec(implementation_key(1115)) HRESULT ICIEventRule::SetParams ( IDispatch * newVal );
__declspec(implementation_key(1116)) IDispatchPtr ICIEventRule::AddActionStatement ( long lIndex, IDispatch * pdispParams );
__declspec(implementation_key(1117)) IDispatchPtr ICIEventRule::AddIfStatement ( long lIndex, EventProperty property, ConditionOperator op, const _variant_t & varConditionValue, VARIANT_BOOL bNot );
__declspec(implementation_key(1118)) EventRuleStatementType ICIEventRuleStatement::Gettype ( );
__declspec(implementation_key(1119)) IDispatchPtr ICIIfStatement::GetIfSection ( );
__declspec(implementation_key(1120)) IDispatchPtr ICIIfStatement::GetElseSection ( );
__declspec(implementation_key(1121)) IDispatchPtr ICIIfStatement::GetCondition ( );
__declspec(implementation_key(1122)) IDispatchPtr ICIActionStatement::FailSection ( );
__declspec(implementation_key(1123)) IDispatchPtr ICIActionStatement::Action ( );
__declspec(implementation_key(1124)) IDispatchPtr ICIActionStatements::Item ( long lIndex );
__declspec(implementation_key(1125)) long ICIActionStatements::Count ( );
__declspec(implementation_key(1126)) HRESULT ICIActionStatements::Delete ( long lIndex );
__declspec(implementation_key(1127)) IDispatchPtr ICIActionStatements::Add ( long lIndex, IDispatch * pdispActionParams );
__declspec(implementation_key(1128)) EventActionType ICIEventAction::Gettype ( );
__declspec(implementation_key(1129)) IDispatchPtr ICIEventAction::GetParams ( );
__declspec(implementation_key(1130)) HRESULT ICIEventAction::SetParams ( IDispatch * pdispParams );
__declspec(implementation_key(1131)) IDispatchPtr ICIEventActions::Item ( long lIndex );
__declspec(implementation_key(1132)) long ICIEventActions::Count ( );
__declspec(implementation_key(1133)) HRESULT ICIEventActions::Delete ( long lIndex );
__declspec(implementation_key(1134)) IDispatchPtr ICIEventActions::Add ( long lIndex, IDispatch * pdispParams );
__declspec(implementation_key(1135)) LogicalOperator ICICompoundCondition::GetOperator ( );
__declspec(implementation_key(1136)) void ICICompoundCondition::PutOperator ( LogicalOperator pVal );
__declspec(implementation_key(1137)) IDispatchPtr ICICompoundCondition::Item ( long lIndex );
__declspec(implementation_key(1138)) IDispatchPtr ICICompoundCondition::Add ( EventProperty property, ConditionOperator op, const _variant_t & varValue, VARIANT_BOOL bNot );
__declspec(implementation_key(1139)) HRESULT ICICompoundCondition::Delete ( long lIndex );
__declspec(implementation_key(1140)) long ICICompoundCondition::Count ( );
__declspec(implementation_key(1141)) ConditionOperator ICISimpleCondition::GetOperator ( );
__declspec(implementation_key(1142)) void ICISimpleCondition::PutOperator ( ConditionOperator pVal );
__declspec(implementation_key(1143)) _variant_t ICISimpleCondition::GetValue ( );
__declspec(implementation_key(1144)) void ICISimpleCondition::PutValue ( const _variant_t & pVal );
__declspec(implementation_key(1145)) EventProperty ICISimpleCondition::Getproperty ( );
__declspec(implementation_key(1146)) VARIANT_BOOL ICISimpleCondition::GetNot ( );
__declspec(implementation_key(1147)) void ICISimpleCondition::PutNot ( VARIANT_BOOL pVal );
__declspec(implementation_key(1148)) _bstr_t ICIEventRuleParams::GetName ( );
__declspec(implementation_key(1149)) void ICIEventRuleParams::PutName ( _bstr_t pVal );
__declspec(implementation_key(1150)) _bstr_t ICIEventRuleParams::GetDescription ( );
__declspec(implementation_key(1151)) void ICIEventRuleParams::PutDescription ( _bstr_t pVal );
__declspec(implementation_key(1152)) VARIANT_BOOL ICIEventRuleParams::GetEnabled ( );
__declspec(implementation_key(1153)) void ICIEventRuleParams::PutEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(1154)) VARIANT_BOOL ICITimerEventRuleParams::GetDailyEveryWeekDay ( );
__declspec(implementation_key(1155)) void ICITimerEventRuleParams::PutDailyEveryWeekDay ( VARIANT_BOOL pVal );
__declspec(implementation_key(1156)) long ICITimerEventRuleParams::GetDailyDayPeriod ( );
__declspec(implementation_key(1157)) void ICITimerEventRuleParams::PutDailyDayPeriod ( long pVal );
__declspec(implementation_key(1158)) long ICITimerEventRuleParams::GetWeeklyWeekPeriod ( );
__declspec(implementation_key(1159)) void ICITimerEventRuleParams::PutWeeklyWeekPeriod ( long pVal );
__declspec(implementation_key(1160)) VARIANT_BOOL ICITimerEventRuleParams::GetWeeklySunday ( );
__declspec(implementation_key(1161)) void ICITimerEventRuleParams::PutWeeklySunday ( VARIANT_BOOL pVal );
__declspec(implementation_key(1162)) VARIANT_BOOL ICITimerEventRuleParams::GetWeeklyMonday ( );
__declspec(implementation_key(1163)) void ICITimerEventRuleParams::PutWeeklyMonday ( VARIANT_BOOL pVal );
__declspec(implementation_key(1164)) VARIANT_BOOL ICITimerEventRuleParams::GetWeeklyTuesday ( );
__declspec(implementation_key(1165)) void ICITimerEventRuleParams::PutWeeklyTuesday ( VARIANT_BOOL pVal );
__declspec(implementation_key(1166)) VARIANT_BOOL ICITimerEventRuleParams::GetWeeklyWednesday ( );
__declspec(implementation_key(1167)) void ICITimerEventRuleParams::PutWeeklyWednesday ( VARIANT_BOOL pVal );
__declspec(implementation_key(1168)) VARIANT_BOOL ICITimerEventRuleParams::GetWeeklyThursday ( );
__declspec(implementation_key(1169)) void ICITimerEventRuleParams::PutWeeklyThursday ( VARIANT_BOOL pVal );
__declspec(implementation_key(1170)) VARIANT_BOOL ICITimerEventRuleParams::GetWeeklyFriday ( );
__declspec(implementation_key(1171)) void ICITimerEventRuleParams::PutWeeklyFriday ( VARIANT_BOOL pVal );
__declspec(implementation_key(1172)) VARIANT_BOOL ICITimerEventRuleParams::GetWeeklySaturday ( );
__declspec(implementation_key(1173)) void ICITimerEventRuleParams::PutWeeklySaturday ( VARIANT_BOOL pVal );
__declspec(implementation_key(1174)) VARIANT_BOOL ICITimerEventRuleParams::GetMonthlyFixedDay ( );
__declspec(implementation_key(1175)) void ICITimerEventRuleParams::PutMonthlyFixedDay ( VARIANT_BOOL pVal );
__declspec(implementation_key(1176)) long ICITimerEventRuleParams::GetMonthlyDayPeriod ( );
__declspec(implementation_key(1177)) void ICITimerEventRuleParams::PutMonthlyDayPeriod ( long pVal );
__declspec(implementation_key(1178)) long ICITimerEventRuleParams::GetMonthlyMonthPeriod ( );
__declspec(implementation_key(1179)) void ICITimerEventRuleParams::PutMonthlyMonthPeriod ( long pVal );
__declspec(implementation_key(1180)) Relation ICITimerEventRuleParams::GetMonthlyRelativeWeekday ( );
__declspec(implementation_key(1181)) void ICITimerEventRuleParams::PutMonthlyRelativeWeekday ( Relation pVal );
__declspec(implementation_key(1182)) Weekday ICITimerEventRuleParams::GetMonthlyWeekday ( );
__declspec(implementation_key(1183)) void ICITimerEventRuleParams::PutMonthlyWeekday ( Weekday pVal );
__declspec(implementation_key(1184)) VARIANT_BOOL ICITimerEventRuleParams::GetYearlyFixedDay ( );
__declspec(implementation_key(1185)) void ICITimerEventRuleParams::PutYearlyFixedDay ( VARIANT_BOOL pVal );
__declspec(implementation_key(1186)) Month ICITimerEventRuleParams::GetYearlyMonth ( );
__declspec(implementation_key(1187)) void ICITimerEventRuleParams::PutYearlyMonth ( Month pVal );
__declspec(implementation_key(1188)) long ICITimerEventRuleParams::GetYearlyDayPeriod ( );
__declspec(implementation_key(1189)) void ICITimerEventRuleParams::PutYearlyDayPeriod ( long pVal );
__declspec(implementation_key(1190)) Relation ICITimerEventRuleParams::GetYearlyRelativeWeekday ( );
__declspec(implementation_key(1191)) void ICITimerEventRuleParams::PutYearlyRelativeWeekday ( Relation pVal );
__declspec(implementation_key(1192)) Weekday ICITimerEventRuleParams::GetYearlyWeekday ( );
__declspec(implementation_key(1193)) void ICITimerEventRuleParams::PutYearlyWeekday ( Weekday pVal );
__declspec(implementation_key(1194)) RepeatPattern ICITimerEventRuleParams::GetRepeatPattern ( );
__declspec(implementation_key(1195)) void ICITimerEventRuleParams::PutRepeatPattern ( RepeatPattern pVal );
__declspec(implementation_key(1196)) long ICITimerEventRuleParams::GetRepeatRate ( );
__declspec(implementation_key(1197)) void ICITimerEventRuleParams::PutRepeatRate ( long pVal );
__declspec(implementation_key(1198)) VARIANT_BOOL ICITimerEventRuleParams::GetRepeatEnabled ( );
__declspec(implementation_key(1199)) void ICITimerEventRuleParams::PutRepeatEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(1200)) _variant_t ICITimerEventRuleParams::GetDateTimeEnd ( );
__declspec(implementation_key(1201)) void ICITimerEventRuleParams::PutDateTimeEnd ( const _variant_t & pVal );
__declspec(implementation_key(1202)) VARIANT_BOOL ICITimerEventRuleParams::GetTimeEndEnabled ( );
__declspec(implementation_key(1203)) void ICITimerEventRuleParams::PutTimeEndEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(1204)) VARIANT_BOOL ICITimerEventRuleParams::GetDateEndEnabled ( );
__declspec(implementation_key(1205)) void ICITimerEventRuleParams::PutDateEndEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(1206)) _bstr_t ICITimerEventRuleParams::GetRundayCalendar ( );
__declspec(implementation_key(1207)) void ICITimerEventRuleParams::PutRundayCalendar ( _bstr_t pVal );
__declspec(implementation_key(1208)) _bstr_t ICITimerEventRuleParams::GetHolidayCalendar ( );
__declspec(implementation_key(1209)) void ICITimerEventRuleParams::PutHolidayCalendar ( _bstr_t pVal );
__declspec(implementation_key(1210)) DATE ICITimerEventRuleParams::GetNextRun ( );
__declspec(implementation_key(1211)) Recurrence ICITimerEventRuleParams::GetRecurrence ( );
__declspec(implementation_key(1212)) void ICITimerEventRuleParams::PutRecurrence ( Recurrence pVal );
__declspec(implementation_key(1213)) _variant_t ICITimerEventRuleParams::GetDateTimeStart ( );
__declspec(implementation_key(1214)) void ICITimerEventRuleParams::PutDateTimeStart ( const _variant_t & pVal );
__declspec(implementation_key(1215)) long ICIFolderMonitorEventRuleParams::GetCheckHealthInterval ( );
__declspec(implementation_key(1216)) void ICIFolderMonitorEventRuleParams::PutCheckHealthInterval ( long pVal );
__declspec(implementation_key(1217)) VARIANT_BOOL ICIFolderMonitorEventRuleParams::GetCheckHealth ( );
__declspec(implementation_key(1218)) void ICIFolderMonitorEventRuleParams::PutCheckHealth ( VARIANT_BOOL pVal );
__declspec(implementation_key(1219)) VARIANT_BOOL ICIFolderMonitorEventRuleParams::GetIncludeSubfolders ( );
__declspec(implementation_key(1220)) void ICIFolderMonitorEventRuleParams::PutIncludeSubfolders ( VARIANT_BOOL pVal );
__declspec(implementation_key(1221)) _bstr_t ICIFolderMonitorEventRuleParams::GetPath ( );
__declspec(implementation_key(1222)) void ICIFolderMonitorEventRuleParams::PutPath ( _bstr_t pVal );
__declspec(implementation_key(1223)) _bstr_t ICIPGPKeyInfo::GetName ( );
__declspec(implementation_key(1224)) _bstr_t ICIPGPKeyInfo::GetDescription ( );
__declspec(implementation_key(1225)) _bstr_t ICIPGPKeyInfo::GetID ( );
__declspec(implementation_key(1226)) VARIANT_BOOL ICIPGPKeyInfo::GetPrivate ( );
__declspec(implementation_key(1227)) long ICIPGPKeyInfo::GetSize ( );
__declspec(implementation_key(1228)) DATE ICIPGPKeyInfo::GetCreationDate ( );
__declspec(implementation_key(1229)) VARIANT_BOOL ICIPGPKeyInfo::GetNeverExpires ( );
__declspec(implementation_key(1230)) DATE ICIPGPKeyInfo::GetExpirationDate ( );
__declspec(implementation_key(1231)) _bstr_t ICIReportInfo::GetName ( );
__declspec(implementation_key(1232)) _bstr_t ICIReportInfo::GetDefinitionPath ( );
__declspec(implementation_key(1233)) EventType ICIEventInfo::Gettype ( );
__declspec(implementation_key(1234)) _bstr_t ICIEventInfo::GetName ( );
__declspec(implementation_key(1235)) long ICISSHKeyInfo::GetID ( );
__declspec(implementation_key(1236)) _bstr_t ICISSHKeyInfo::GetName ( );
__declspec(implementation_key(1237)) _bstr_t ICISSHKeyInfo::GetFingerprint ( );
__declspec(implementation_key(1238)) ADAuthManagerType ICIADAuthManagerSettings::Gettype ( );
__declspec(implementation_key(1239)) void ICIADAuthManagerSettings::Puttype ( ADAuthManagerType pVal );
__declspec(implementation_key(1240)) _bstr_t ICIADAuthManagerSettings::GetDomain ( );
__declspec(implementation_key(1241)) void ICIADAuthManagerSettings::PutDomain ( _bstr_t pVal );
__declspec(implementation_key(1242)) _bstr_t ICIADAuthManagerSettings::GetGroup ( );
__declspec(implementation_key(1243)) void ICIADAuthManagerSettings::PutGroup ( _bstr_t pVal );
__declspec(implementation_key(1244)) ADAuthManagerLogonAttribute ICIADAuthManagerSettings::GetLogonAttribute ( );
__declspec(implementation_key(1245)) void ICIADAuthManagerSettings::PutLogonAttribute ( ADAuthManagerLogonAttribute pVal );
__declspec(implementation_key(1246)) long ICIADAuthManagerSettings::GetRefreshIntervalMinutes ( );
__declspec(implementation_key(1247)) void ICIADAuthManagerSettings::PutRefreshIntervalMinutes ( long pVal );
__declspec(implementation_key(1248)) VARIANT_BOOL ICIADAuthManagerSettings::GetAssignHomeFolderFromUserProfile ( );
__declspec(implementation_key(1249)) void ICIADAuthManagerSettings::PutAssignHomeFolderFromUserProfile ( VARIANT_BOOL pVal );
__declspec(implementation_key(1250)) VARIANT_BOOL ICIADAuthManagerSettings::GetSkipDomainPrefix ( );
__declspec(implementation_key(1251)) void ICIADAuthManagerSettings::PutSkipDomainPrefix ( VARIANT_BOOL pVal );
__declspec(implementation_key(1252)) _bstr_t ICIGSAuthManagerSettings::GetUserDatabasePath ( );
__declspec(implementation_key(1253)) void ICIGSAuthManagerSettings::PutUserDatabasePath ( _bstr_t pVal );
__declspec(implementation_key(1254)) long ICIGSAuthManagerSettings::GetRefreshIntervalMinutes ( );
__declspec(implementation_key(1255)) void ICIGSAuthManagerSettings::PutRefreshIntervalMinutes ( long pVal );
__declspec(implementation_key(1256)) _bstr_t ICIODBCAuthManagerSettings::GetUserDatabaseConnectionString ( );
__declspec(implementation_key(1257)) void ICIODBCAuthManagerSettings::PutUserDatabaseConnectionString ( _bstr_t pVal );
__declspec(implementation_key(1258)) long ICIODBCAuthManagerSettings::GetRefreshIntervalMinutes ( );
__declspec(implementation_key(1259)) void ICIODBCAuthManagerSettings::PutRefreshIntervalMinutes ( long pVal );
__declspec(implementation_key(1260)) _bstr_t ICILDAPAuthManagerSettings::GetServer ( );
__declspec(implementation_key(1261)) void ICILDAPAuthManagerSettings::PutServer ( _bstr_t pVal );
__declspec(implementation_key(1262)) long ICILDAPAuthManagerSettings::GetPort ( );
__declspec(implementation_key(1263)) void ICILDAPAuthManagerSettings::PutPort ( long pVal );
__declspec(implementation_key(1264)) _bstr_t ICILDAPAuthManagerSettings::GetBaseDN ( );
__declspec(implementation_key(1265)) void ICILDAPAuthManagerSettings::PutBaseDN ( _bstr_t pVal );
__declspec(implementation_key(1266)) _bstr_t ICILDAPAuthManagerSettings::GetUserFilter ( );
__declspec(implementation_key(1267)) void ICILDAPAuthManagerSettings::PutUserFilter ( _bstr_t pVal );
__declspec(implementation_key(1268)) _bstr_t ICILDAPAuthManagerSettings::GetLoginAttribute ( );
__declspec(implementation_key(1269)) void ICILDAPAuthManagerSettings::PutLoginAttribute ( _bstr_t pVal );
__declspec(implementation_key(1270)) _bstr_t ICILDAPAuthManagerSettings::GetServerUserName ( );
__declspec(implementation_key(1271)) void ICILDAPAuthManagerSettings::PutServerUserName ( _bstr_t pVal );
__declspec(implementation_key(1272)) _bstr_t ICILDAPAuthManagerSettings::GetServerPassword ( );
__declspec(implementation_key(1273)) void ICILDAPAuthManagerSettings::PutServerPassword ( _bstr_t pVal );
__declspec(implementation_key(1274)) VARIANT_BOOL ICILDAPAuthManagerSettings::GetUseSSL ( );
__declspec(implementation_key(1275)) void ICILDAPAuthManagerSettings::PutUseSSL ( VARIANT_BOOL pVal );
__declspec(implementation_key(1276)) _bstr_t ICILDAPAuthManagerSettings::GetAdditionalUserSettingsPath ( );
__declspec(implementation_key(1277)) void ICILDAPAuthManagerSettings::PutAdditionalUserSettingsPath ( _bstr_t pVal );
__declspec(implementation_key(1278)) long ICILDAPAuthManagerSettings::GetRefreshIntervalMinutes ( );
__declspec(implementation_key(1279)) void ICILDAPAuthManagerSettings::PutRefreshIntervalMinutes ( long pVal );
__declspec(implementation_key(1280)) long ICILDAPAuthManagerSettings::GetTimeoutSeconds ( );
__declspec(implementation_key(1281)) void ICILDAPAuthManagerSettings::PutTimeoutSeconds ( long pVal );
__declspec(implementation_key(1282)) LDAPSearchScope ICILDAPAuthManagerSettings::GetSearchScope ( );
__declspec(implementation_key(1283)) void ICILDAPAuthManagerSettings::PutSearchScope ( LDAPSearchScope pVal );
__declspec(implementation_key(1284)) VARIANT_BOOL ICILDAPAuthManagerSettings::GetChaseReferrals ( );
__declspec(implementation_key(1285)) void ICILDAPAuthManagerSettings::PutChaseReferrals ( VARIANT_BOOL pVal );
__declspec(implementation_key(1286)) LDAPVersion ICILDAPAuthManagerSettings::GetLDAPVersion ( );
__declspec(implementation_key(1287)) void ICILDAPAuthManagerSettings::PutLDAPVersion ( LDAPVersion pVal );
__declspec(implementation_key(1288)) VARIANT_BOOL ICILDAPAuthManagerSettings::GetUsePageControl ( );
__declspec(implementation_key(1289)) void ICILDAPAuthManagerSettings::PutUsePageControl ( VARIANT_BOOL pVal );
__declspec(implementation_key(1290)) long ICILDAPAuthManagerSettings::GetPageSizeEntries ( );
__declspec(implementation_key(1291)) void ICILDAPAuthManagerSettings::PutPageSizeEntries ( long pVal );
__declspec(implementation_key(1292)) _bstr_t ICILDAPAuthManagerSettings::GetSearchAttributes ( );
__declspec(implementation_key(1293)) void ICILDAPAuthManagerSettings::PutSearchAttributes ( _bstr_t pVal );
__declspec(implementation_key(1294)) _bstr_t ICIAS2TransactionInfo::GetTransactionID ( );
__declspec(implementation_key(1295)) _bstr_t ICIAS2TransactionInfo::GetMessageID ( );
__declspec(implementation_key(1296)) DATE ICIAS2TransactionInfo::GetTime ( );
__declspec(implementation_key(1297)) _bstr_t ICIAS2TransactionInfo::GetFile ( );
__declspec(implementation_key(1298)) _bstr_t ICIAS2TransactionInfo::GetPath ( );
__declspec(implementation_key(1299)) _bstr_t ICIAS2TransactionInfo::GetRemoteHost ( );
__declspec(implementation_key(1300)) AS2TransactionStatus ICIAS2TransactionInfo::GetStatus ( );
__declspec(implementation_key(1301)) AS2TransactionDirection ICIAS2TransactionInfo::GetDirection ( );
__declspec(implementation_key(1302)) _bstr_t ICIAS2TransactionInfo::GetFrom ( );
__declspec(implementation_key(1303)) _bstr_t ICIAS2TransactionInfo::GetTo ( );
__declspec(implementation_key(1304)) _bstr_t ICIAdminAccount::GetLogin ( );
__declspec(implementation_key(1305)) AdminAccountType ICIAdminAccount::Gettype ( );
__declspec(implementation_key(1306)) IDispatchPtr ICIAdminAccount::GetPermission ( unsigned long nIndex );
__declspec(implementation_key(1307)) unsigned long ICIAdminAccount::GetPermissionsCount ( );
__declspec(implementation_key(1308)) HRESULT ICIAdminAccount::AddPermission ( IDispatch * pIAdminPermission );
__declspec(implementation_key(1309)) HRESULT ICIAdminAccount::RemovePermissionByIndex ( unsigned long nIndex );
__declspec(implementation_key(1310)) HRESULT ICIAdminAccount::RemovePermission ( IDispatch * pIAdminPermission );
__declspec(implementation_key(1311)) HRESULT ICIAdminAccount::RemoveAllPermissions ( );
__declspec(implementation_key(1312)) AdminPermissionsPolicy ICIAdminPermission::GetPermission ( );
__declspec(implementation_key(1313)) void ICIAdminPermission::PutPermission ( AdminPermissionsPolicy pVal );
__declspec(implementation_key(1314)) _bstr_t ICIAdminPermission::GetSiteName ( );
__declspec(implementation_key(1315)) void ICIAdminPermission::PutSiteName ( _bstr_t pVal );
__declspec(implementation_key(1316)) _bstr_t ICIAdminPermission::GetTemplateName ( );
__declspec(implementation_key(1317)) void ICIAdminPermission::PutTemplateName ( _bstr_t pVal );
__declspec(implementation_key(1318)) VARIANT_BOOL ICISiteBackupInfo::GetRestoreSite ( );
__declspec(implementation_key(1319)) void ICISiteBackupInfo::PutRestoreSite ( VARIANT_BOOL pVal );
__declspec(implementation_key(1320)) VARIANT_BOOL ICISiteBackupInfo::GetRestoreVFS ( );
__declspec(implementation_key(1321)) void ICISiteBackupInfo::PutRestoreVFS ( VARIANT_BOOL pVal );
__declspec(implementation_key(1322)) _bstr_t ICISiteBackupInfo::GetSiteName ( );
__declspec(implementation_key(1323)) _bstr_t ICISiteBackupInfo::GetRootFolder ( );
__declspec(implementation_key(1324)) void ICISiteBackupInfo::PutRootFolder ( _bstr_t pVal );
__declspec(implementation_key(1325)) _bstr_t ICISiteBackupInfo::GetAuthManagerID ( );
__declspec(implementation_key(1326)) void ICISiteBackupInfo::PutAuthManagerID ( _bstr_t pVal );
__declspec(implementation_key(1327)) _bstr_t ICISiteBackupInfo::GetAuthManagerDataBase ( );
__declspec(implementation_key(1328)) void ICISiteBackupInfo::PutAuthManagerDataBase ( _bstr_t pVal );
__declspec(implementation_key(1329)) _bstr_t ICISiteBackupInfo::GetListenIP ( );
__declspec(implementation_key(1330)) _bstr_t ICISiteBackupInfo::GetNewListenIP ( );
__declspec(implementation_key(1331)) void ICISiteBackupInfo::PutNewListenIP ( _bstr_t pVal );
__declspec(implementation_key(1332)) VARIANT_BOOL ICISiteBackupInfo::GetDMZEnabled ( );
__declspec(implementation_key(1333)) void ICISiteBackupInfo::PutDMZEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(1334)) _bstr_t ICISiteBackupInfo::GetDMZAddress ( );
__declspec(implementation_key(1335)) void ICISiteBackupInfo::PutDMZAddress ( _bstr_t pVal );
__declspec(implementation_key(1336)) long ICISiteBackupInfo::GetDMZPort ( );
__declspec(implementation_key(1337)) void ICISiteBackupInfo::PutDMZPort ( long pVal );
__declspec(implementation_key(1338)) _bstr_t ICIBackupArchiveInfo::GetBackupArchivePath ( );
__declspec(implementation_key(1339)) DATE ICIBackupArchiveInfo::GetCreationTime ( );
__declspec(implementation_key(1340)) _bstr_t ICIBackupArchiveInfo::GetCreatedBy ( );
__declspec(implementation_key(1341)) _bstr_t ICIBackupArchiveInfo::Gettype ( );
__declspec(implementation_key(1342)) long ICIBackupArchiveInfo::GetSitesCount ( );
__declspec(implementation_key(1343)) ICISiteBackupInfoPtr ICIBackupArchiveInfo::GetSiteBackupInfo ( long nIndex );
__declspec(implementation_key(1344)) HRESULT ICIBackupArchiveInfo::SetSiteBackupInfo ( struct ICISiteBackupInfo * newVal );
__declspec(implementation_key(1345)) VARIANT_BOOL ICIBackupArchiveInfo::GetEnableARM ( );
__declspec(implementation_key(1346)) void ICIBackupArchiveInfo::PutEnableARM ( VARIANT_BOOL pVal );
__declspec(implementation_key(1347)) _bstr_t ICIBackupArchiveInfo::GetARMServerName ( );
__declspec(implementation_key(1348)) void ICIBackupArchiveInfo::PutARMServerName ( _bstr_t pVal );
__declspec(implementation_key(1349)) _bstr_t ICIBackupArchiveInfo::GetARMDatabaseName ( );
__declspec(implementation_key(1350)) void ICIBackupArchiveInfo::PutARMDatabaseName ( _bstr_t pVal );
__declspec(implementation_key(1351)) _bstr_t ICIBackupArchiveInfo::GetARMUserName ( );
__declspec(implementation_key(1352)) void ICIBackupArchiveInfo::PutARMUserName ( _bstr_t pVal );
__declspec(implementation_key(1353)) _bstr_t ICIBackupArchiveInfo::GetARMPassword ( );
__declspec(implementation_key(1354)) void ICIBackupArchiveInfo::PutARMPassword ( _bstr_t pVal );
__declspec(implementation_key(1355)) ARMDatabaseType ICIBackupArchiveInfo::GetARMDatabaseType ( );
__declspec(implementation_key(1356)) void ICIBackupArchiveInfo::PutARMDatabaseType ( ARMDatabaseType pVal );
__declspec(implementation_key(1357)) ARMAuthenticationType ICIBackupArchiveInfo::GetARMAuthenticationType ( );
__declspec(implementation_key(1358)) void ICIBackupArchiveInfo::PutARMAuthenticationType ( ARMAuthenticationType pVal );
__declspec(implementation_key(1359)) VARIANT_BOOL ICIBackupArchiveInfo::GetARMStopAuditingOnError ( );
__declspec(implementation_key(1360)) void ICIBackupArchiveInfo::PutARMStopAuditingOnError ( VARIANT_BOOL pVal );
__declspec(implementation_key(1361)) _bstr_t ICIBackupArchiveInfo::GetARMFailureAuditFolder ( );
__declspec(implementation_key(1362)) void ICIBackupArchiveInfo::PutARMFailureAuditFolder ( _bstr_t pVal );
__declspec(implementation_key(1363)) _bstr_t ICIBackupArchiveInfo::GetARMFailureEmailList ( );
__declspec(implementation_key(1364)) void ICIBackupArchiveInfo::PutARMFailureEmailList ( _bstr_t pVal );
__declspec(implementation_key(1365)) _bstr_t ICIConnectedUser::GetLogin ( );
__declspec(implementation_key(1366)) long ICIConnectedUser::GetID ( );
__declspec(implementation_key(1367)) _bstr_t ICIConnectedUser::GetConnectionType ( );
__declspec(implementation_key(1368)) DATE ICIConnectedUser::GetConnectedAt ( );
__declspec(implementation_key(1369)) _bstr_t ICIConnectedUser::GetIP ( );
__declspec(implementation_key(1370)) _bstr_t ICIConnectedUser::Gettype ( );
__declspec(implementation_key(1371)) _bstr_t ICIConnectedUser::GetStructure ( );
__declspec(implementation_key(1372)) _bstr_t ICIConnectedUser::GetTransferMode ( );
__declspec(implementation_key(1373)) _bstr_t ICIConnectedUser::GetDataConnection ( );
__declspec(implementation_key(1374)) _bstr_t ICIConnectedUser::GetFileName ( );
__declspec(implementation_key(1375)) __int64 ICIConnectedUser::GetFileSize ( );
__declspec(implementation_key(1376)) __int64 ICIConnectedUser::GetTransferredSize ( );
__declspec(implementation_key(1377)) long ICIConnectedUser::GetTransferTime ( );
__declspec(implementation_key(1378)) _bstr_t ICIConnectedUser::GetLog ( );
#pragma stop_map_region

} // namespace SFTPCOMINTERFACELib

#pragma pack(pop)
